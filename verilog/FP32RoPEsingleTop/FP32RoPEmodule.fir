circuit FP32RoPEmodule :
  module Int64ToFP32 :
    input clock : Clock
    input reset : Reset
    output io : { flip inInt : SInt<64>, outIEEE : UInt<32>}

    node sign = bits(io.inInt, 63, 63) @[FPU.scala 139:22]
    node _absVal_T = eq(io.inInt, asSInt(UInt<1>("h0"))) @[FPU.scala 140:29]
    node _absVal_T_1 = eq(sign, UInt<1>("h1")) @[FPU.scala 140:52]
    node _absVal_T_2 = sub(asSInt(UInt<1>("h0")), io.inInt) @[FPU.scala 140:62]
    node _absVal_T_3 = tail(_absVal_T_2, 1) @[FPU.scala 140:62]
    node _absVal_T_4 = asSInt(_absVal_T_3) @[FPU.scala 140:62]
    node _absVal_T_5 = asUInt(_absVal_T_4) @[FPU.scala 140:79]
    node _absVal_T_6 = asUInt(io.inInt) @[FPU.scala 140:98]
    node _absVal_T_7 = mux(_absVal_T_1, _absVal_T_5, _absVal_T_6) @[FPU.scala 140:46]
    node absVal = mux(_absVal_T, UInt<1>("h0"), _absVal_T_7) @[FPU.scala 140:19]
    node isZero = eq(absVal, UInt<1>("h0")) @[FPU.scala 141:23]
    node _LeadingOne_T = shl(UInt<32>("hffffffff"), 32) @[Bitwise.scala 107:52]
    node _LeadingOne_T_1 = xor(UInt<64>("hffffffffffffffff"), _LeadingOne_T) @[Bitwise.scala 107:21]
    node _LeadingOne_T_2 = shr(absVal, 32) @[Bitwise.scala 108:21]
    node _LeadingOne_T_3 = and(_LeadingOne_T_2, _LeadingOne_T_1) @[Bitwise.scala 108:31]
    node _LeadingOne_T_4 = bits(absVal, 31, 0) @[Bitwise.scala 108:46]
    node _LeadingOne_T_5 = shl(_LeadingOne_T_4, 32) @[Bitwise.scala 108:70]
    node _LeadingOne_T_6 = not(_LeadingOne_T_1) @[Bitwise.scala 108:82]
    node _LeadingOne_T_7 = and(_LeadingOne_T_5, _LeadingOne_T_6) @[Bitwise.scala 108:80]
    node _LeadingOne_T_8 = or(_LeadingOne_T_3, _LeadingOne_T_7) @[Bitwise.scala 108:39]
    node _LeadingOne_T_9 = bits(_LeadingOne_T_1, 47, 0) @[Bitwise.scala 107:28]
    node _LeadingOne_T_10 = shl(_LeadingOne_T_9, 16) @[Bitwise.scala 107:52]
    node _LeadingOne_T_11 = xor(_LeadingOne_T_1, _LeadingOne_T_10) @[Bitwise.scala 107:21]
    node _LeadingOne_T_12 = shr(_LeadingOne_T_8, 16) @[Bitwise.scala 108:21]
    node _LeadingOne_T_13 = and(_LeadingOne_T_12, _LeadingOne_T_11) @[Bitwise.scala 108:31]
    node _LeadingOne_T_14 = bits(_LeadingOne_T_8, 47, 0) @[Bitwise.scala 108:46]
    node _LeadingOne_T_15 = shl(_LeadingOne_T_14, 16) @[Bitwise.scala 108:70]
    node _LeadingOne_T_16 = not(_LeadingOne_T_11) @[Bitwise.scala 108:82]
    node _LeadingOne_T_17 = and(_LeadingOne_T_15, _LeadingOne_T_16) @[Bitwise.scala 108:80]
    node _LeadingOne_T_18 = or(_LeadingOne_T_13, _LeadingOne_T_17) @[Bitwise.scala 108:39]
    node _LeadingOne_T_19 = bits(_LeadingOne_T_11, 55, 0) @[Bitwise.scala 107:28]
    node _LeadingOne_T_20 = shl(_LeadingOne_T_19, 8) @[Bitwise.scala 107:52]
    node _LeadingOne_T_21 = xor(_LeadingOne_T_11, _LeadingOne_T_20) @[Bitwise.scala 107:21]
    node _LeadingOne_T_22 = shr(_LeadingOne_T_18, 8) @[Bitwise.scala 108:21]
    node _LeadingOne_T_23 = and(_LeadingOne_T_22, _LeadingOne_T_21) @[Bitwise.scala 108:31]
    node _LeadingOne_T_24 = bits(_LeadingOne_T_18, 55, 0) @[Bitwise.scala 108:46]
    node _LeadingOne_T_25 = shl(_LeadingOne_T_24, 8) @[Bitwise.scala 108:70]
    node _LeadingOne_T_26 = not(_LeadingOne_T_21) @[Bitwise.scala 108:82]
    node _LeadingOne_T_27 = and(_LeadingOne_T_25, _LeadingOne_T_26) @[Bitwise.scala 108:80]
    node _LeadingOne_T_28 = or(_LeadingOne_T_23, _LeadingOne_T_27) @[Bitwise.scala 108:39]
    node _LeadingOne_T_29 = bits(_LeadingOne_T_21, 59, 0) @[Bitwise.scala 107:28]
    node _LeadingOne_T_30 = shl(_LeadingOne_T_29, 4) @[Bitwise.scala 107:52]
    node _LeadingOne_T_31 = xor(_LeadingOne_T_21, _LeadingOne_T_30) @[Bitwise.scala 107:21]
    node _LeadingOne_T_32 = shr(_LeadingOne_T_28, 4) @[Bitwise.scala 108:21]
    node _LeadingOne_T_33 = and(_LeadingOne_T_32, _LeadingOne_T_31) @[Bitwise.scala 108:31]
    node _LeadingOne_T_34 = bits(_LeadingOne_T_28, 59, 0) @[Bitwise.scala 108:46]
    node _LeadingOne_T_35 = shl(_LeadingOne_T_34, 4) @[Bitwise.scala 108:70]
    node _LeadingOne_T_36 = not(_LeadingOne_T_31) @[Bitwise.scala 108:82]
    node _LeadingOne_T_37 = and(_LeadingOne_T_35, _LeadingOne_T_36) @[Bitwise.scala 108:80]
    node _LeadingOne_T_38 = or(_LeadingOne_T_33, _LeadingOne_T_37) @[Bitwise.scala 108:39]
    node _LeadingOne_T_39 = bits(_LeadingOne_T_31, 61, 0) @[Bitwise.scala 107:28]
    node _LeadingOne_T_40 = shl(_LeadingOne_T_39, 2) @[Bitwise.scala 107:52]
    node _LeadingOne_T_41 = xor(_LeadingOne_T_31, _LeadingOne_T_40) @[Bitwise.scala 107:21]
    node _LeadingOne_T_42 = shr(_LeadingOne_T_38, 2) @[Bitwise.scala 108:21]
    node _LeadingOne_T_43 = and(_LeadingOne_T_42, _LeadingOne_T_41) @[Bitwise.scala 108:31]
    node _LeadingOne_T_44 = bits(_LeadingOne_T_38, 61, 0) @[Bitwise.scala 108:46]
    node _LeadingOne_T_45 = shl(_LeadingOne_T_44, 2) @[Bitwise.scala 108:70]
    node _LeadingOne_T_46 = not(_LeadingOne_T_41) @[Bitwise.scala 108:82]
    node _LeadingOne_T_47 = and(_LeadingOne_T_45, _LeadingOne_T_46) @[Bitwise.scala 108:80]
    node _LeadingOne_T_48 = or(_LeadingOne_T_43, _LeadingOne_T_47) @[Bitwise.scala 108:39]
    node _LeadingOne_T_49 = bits(_LeadingOne_T_41, 62, 0) @[Bitwise.scala 107:28]
    node _LeadingOne_T_50 = shl(_LeadingOne_T_49, 1) @[Bitwise.scala 107:52]
    node _LeadingOne_T_51 = xor(_LeadingOne_T_41, _LeadingOne_T_50) @[Bitwise.scala 107:21]
    node _LeadingOne_T_52 = shr(_LeadingOne_T_48, 1) @[Bitwise.scala 108:21]
    node _LeadingOne_T_53 = and(_LeadingOne_T_52, _LeadingOne_T_51) @[Bitwise.scala 108:31]
    node _LeadingOne_T_54 = bits(_LeadingOne_T_48, 62, 0) @[Bitwise.scala 108:46]
    node _LeadingOne_T_55 = shl(_LeadingOne_T_54, 1) @[Bitwise.scala 108:70]
    node _LeadingOne_T_56 = not(_LeadingOne_T_51) @[Bitwise.scala 108:82]
    node _LeadingOne_T_57 = and(_LeadingOne_T_55, _LeadingOne_T_56) @[Bitwise.scala 108:80]
    node _LeadingOne_T_58 = or(_LeadingOne_T_53, _LeadingOne_T_57) @[Bitwise.scala 108:39]
    node _LeadingOne_T_59 = bits(_LeadingOne_T_58, 0, 0) @[OneHot.scala 47:45]
    node _LeadingOne_T_60 = bits(_LeadingOne_T_58, 1, 1) @[OneHot.scala 47:45]
    node _LeadingOne_T_61 = bits(_LeadingOne_T_58, 2, 2) @[OneHot.scala 47:45]
    node _LeadingOne_T_62 = bits(_LeadingOne_T_58, 3, 3) @[OneHot.scala 47:45]
    node _LeadingOne_T_63 = bits(_LeadingOne_T_58, 4, 4) @[OneHot.scala 47:45]
    node _LeadingOne_T_64 = bits(_LeadingOne_T_58, 5, 5) @[OneHot.scala 47:45]
    node _LeadingOne_T_65 = bits(_LeadingOne_T_58, 6, 6) @[OneHot.scala 47:45]
    node _LeadingOne_T_66 = bits(_LeadingOne_T_58, 7, 7) @[OneHot.scala 47:45]
    node _LeadingOne_T_67 = bits(_LeadingOne_T_58, 8, 8) @[OneHot.scala 47:45]
    node _LeadingOne_T_68 = bits(_LeadingOne_T_58, 9, 9) @[OneHot.scala 47:45]
    node _LeadingOne_T_69 = bits(_LeadingOne_T_58, 10, 10) @[OneHot.scala 47:45]
    node _LeadingOne_T_70 = bits(_LeadingOne_T_58, 11, 11) @[OneHot.scala 47:45]
    node _LeadingOne_T_71 = bits(_LeadingOne_T_58, 12, 12) @[OneHot.scala 47:45]
    node _LeadingOne_T_72 = bits(_LeadingOne_T_58, 13, 13) @[OneHot.scala 47:45]
    node _LeadingOne_T_73 = bits(_LeadingOne_T_58, 14, 14) @[OneHot.scala 47:45]
    node _LeadingOne_T_74 = bits(_LeadingOne_T_58, 15, 15) @[OneHot.scala 47:45]
    node _LeadingOne_T_75 = bits(_LeadingOne_T_58, 16, 16) @[OneHot.scala 47:45]
    node _LeadingOne_T_76 = bits(_LeadingOne_T_58, 17, 17) @[OneHot.scala 47:45]
    node _LeadingOne_T_77 = bits(_LeadingOne_T_58, 18, 18) @[OneHot.scala 47:45]
    node _LeadingOne_T_78 = bits(_LeadingOne_T_58, 19, 19) @[OneHot.scala 47:45]
    node _LeadingOne_T_79 = bits(_LeadingOne_T_58, 20, 20) @[OneHot.scala 47:45]
    node _LeadingOne_T_80 = bits(_LeadingOne_T_58, 21, 21) @[OneHot.scala 47:45]
    node _LeadingOne_T_81 = bits(_LeadingOne_T_58, 22, 22) @[OneHot.scala 47:45]
    node _LeadingOne_T_82 = bits(_LeadingOne_T_58, 23, 23) @[OneHot.scala 47:45]
    node _LeadingOne_T_83 = bits(_LeadingOne_T_58, 24, 24) @[OneHot.scala 47:45]
    node _LeadingOne_T_84 = bits(_LeadingOne_T_58, 25, 25) @[OneHot.scala 47:45]
    node _LeadingOne_T_85 = bits(_LeadingOne_T_58, 26, 26) @[OneHot.scala 47:45]
    node _LeadingOne_T_86 = bits(_LeadingOne_T_58, 27, 27) @[OneHot.scala 47:45]
    node _LeadingOne_T_87 = bits(_LeadingOne_T_58, 28, 28) @[OneHot.scala 47:45]
    node _LeadingOne_T_88 = bits(_LeadingOne_T_58, 29, 29) @[OneHot.scala 47:45]
    node _LeadingOne_T_89 = bits(_LeadingOne_T_58, 30, 30) @[OneHot.scala 47:45]
    node _LeadingOne_T_90 = bits(_LeadingOne_T_58, 31, 31) @[OneHot.scala 47:45]
    node _LeadingOne_T_91 = bits(_LeadingOne_T_58, 32, 32) @[OneHot.scala 47:45]
    node _LeadingOne_T_92 = bits(_LeadingOne_T_58, 33, 33) @[OneHot.scala 47:45]
    node _LeadingOne_T_93 = bits(_LeadingOne_T_58, 34, 34) @[OneHot.scala 47:45]
    node _LeadingOne_T_94 = bits(_LeadingOne_T_58, 35, 35) @[OneHot.scala 47:45]
    node _LeadingOne_T_95 = bits(_LeadingOne_T_58, 36, 36) @[OneHot.scala 47:45]
    node _LeadingOne_T_96 = bits(_LeadingOne_T_58, 37, 37) @[OneHot.scala 47:45]
    node _LeadingOne_T_97 = bits(_LeadingOne_T_58, 38, 38) @[OneHot.scala 47:45]
    node _LeadingOne_T_98 = bits(_LeadingOne_T_58, 39, 39) @[OneHot.scala 47:45]
    node _LeadingOne_T_99 = bits(_LeadingOne_T_58, 40, 40) @[OneHot.scala 47:45]
    node _LeadingOne_T_100 = bits(_LeadingOne_T_58, 41, 41) @[OneHot.scala 47:45]
    node _LeadingOne_T_101 = bits(_LeadingOne_T_58, 42, 42) @[OneHot.scala 47:45]
    node _LeadingOne_T_102 = bits(_LeadingOne_T_58, 43, 43) @[OneHot.scala 47:45]
    node _LeadingOne_T_103 = bits(_LeadingOne_T_58, 44, 44) @[OneHot.scala 47:45]
    node _LeadingOne_T_104 = bits(_LeadingOne_T_58, 45, 45) @[OneHot.scala 47:45]
    node _LeadingOne_T_105 = bits(_LeadingOne_T_58, 46, 46) @[OneHot.scala 47:45]
    node _LeadingOne_T_106 = bits(_LeadingOne_T_58, 47, 47) @[OneHot.scala 47:45]
    node _LeadingOne_T_107 = bits(_LeadingOne_T_58, 48, 48) @[OneHot.scala 47:45]
    node _LeadingOne_T_108 = bits(_LeadingOne_T_58, 49, 49) @[OneHot.scala 47:45]
    node _LeadingOne_T_109 = bits(_LeadingOne_T_58, 50, 50) @[OneHot.scala 47:45]
    node _LeadingOne_T_110 = bits(_LeadingOne_T_58, 51, 51) @[OneHot.scala 47:45]
    node _LeadingOne_T_111 = bits(_LeadingOne_T_58, 52, 52) @[OneHot.scala 47:45]
    node _LeadingOne_T_112 = bits(_LeadingOne_T_58, 53, 53) @[OneHot.scala 47:45]
    node _LeadingOne_T_113 = bits(_LeadingOne_T_58, 54, 54) @[OneHot.scala 47:45]
    node _LeadingOne_T_114 = bits(_LeadingOne_T_58, 55, 55) @[OneHot.scala 47:45]
    node _LeadingOne_T_115 = bits(_LeadingOne_T_58, 56, 56) @[OneHot.scala 47:45]
    node _LeadingOne_T_116 = bits(_LeadingOne_T_58, 57, 57) @[OneHot.scala 47:45]
    node _LeadingOne_T_117 = bits(_LeadingOne_T_58, 58, 58) @[OneHot.scala 47:45]
    node _LeadingOne_T_118 = bits(_LeadingOne_T_58, 59, 59) @[OneHot.scala 47:45]
    node _LeadingOne_T_119 = bits(_LeadingOne_T_58, 60, 60) @[OneHot.scala 47:45]
    node _LeadingOne_T_120 = bits(_LeadingOne_T_58, 61, 61) @[OneHot.scala 47:45]
    node _LeadingOne_T_121 = bits(_LeadingOne_T_58, 62, 62) @[OneHot.scala 47:45]
    node _LeadingOne_T_122 = bits(_LeadingOne_T_58, 63, 63) @[OneHot.scala 47:45]
    node _LeadingOne_T_123 = mux(_LeadingOne_T_121, UInt<6>("h3e"), UInt<6>("h3f")) @[Mux.scala 47:70]
    node _LeadingOne_T_124 = mux(_LeadingOne_T_120, UInt<6>("h3d"), _LeadingOne_T_123) @[Mux.scala 47:70]
    node _LeadingOne_T_125 = mux(_LeadingOne_T_119, UInt<6>("h3c"), _LeadingOne_T_124) @[Mux.scala 47:70]
    node _LeadingOne_T_126 = mux(_LeadingOne_T_118, UInt<6>("h3b"), _LeadingOne_T_125) @[Mux.scala 47:70]
    node _LeadingOne_T_127 = mux(_LeadingOne_T_117, UInt<6>("h3a"), _LeadingOne_T_126) @[Mux.scala 47:70]
    node _LeadingOne_T_128 = mux(_LeadingOne_T_116, UInt<6>("h39"), _LeadingOne_T_127) @[Mux.scala 47:70]
    node _LeadingOne_T_129 = mux(_LeadingOne_T_115, UInt<6>("h38"), _LeadingOne_T_128) @[Mux.scala 47:70]
    node _LeadingOne_T_130 = mux(_LeadingOne_T_114, UInt<6>("h37"), _LeadingOne_T_129) @[Mux.scala 47:70]
    node _LeadingOne_T_131 = mux(_LeadingOne_T_113, UInt<6>("h36"), _LeadingOne_T_130) @[Mux.scala 47:70]
    node _LeadingOne_T_132 = mux(_LeadingOne_T_112, UInt<6>("h35"), _LeadingOne_T_131) @[Mux.scala 47:70]
    node _LeadingOne_T_133 = mux(_LeadingOne_T_111, UInt<6>("h34"), _LeadingOne_T_132) @[Mux.scala 47:70]
    node _LeadingOne_T_134 = mux(_LeadingOne_T_110, UInt<6>("h33"), _LeadingOne_T_133) @[Mux.scala 47:70]
    node _LeadingOne_T_135 = mux(_LeadingOne_T_109, UInt<6>("h32"), _LeadingOne_T_134) @[Mux.scala 47:70]
    node _LeadingOne_T_136 = mux(_LeadingOne_T_108, UInt<6>("h31"), _LeadingOne_T_135) @[Mux.scala 47:70]
    node _LeadingOne_T_137 = mux(_LeadingOne_T_107, UInt<6>("h30"), _LeadingOne_T_136) @[Mux.scala 47:70]
    node _LeadingOne_T_138 = mux(_LeadingOne_T_106, UInt<6>("h2f"), _LeadingOne_T_137) @[Mux.scala 47:70]
    node _LeadingOne_T_139 = mux(_LeadingOne_T_105, UInt<6>("h2e"), _LeadingOne_T_138) @[Mux.scala 47:70]
    node _LeadingOne_T_140 = mux(_LeadingOne_T_104, UInt<6>("h2d"), _LeadingOne_T_139) @[Mux.scala 47:70]
    node _LeadingOne_T_141 = mux(_LeadingOne_T_103, UInt<6>("h2c"), _LeadingOne_T_140) @[Mux.scala 47:70]
    node _LeadingOne_T_142 = mux(_LeadingOne_T_102, UInt<6>("h2b"), _LeadingOne_T_141) @[Mux.scala 47:70]
    node _LeadingOne_T_143 = mux(_LeadingOne_T_101, UInt<6>("h2a"), _LeadingOne_T_142) @[Mux.scala 47:70]
    node _LeadingOne_T_144 = mux(_LeadingOne_T_100, UInt<6>("h29"), _LeadingOne_T_143) @[Mux.scala 47:70]
    node _LeadingOne_T_145 = mux(_LeadingOne_T_99, UInt<6>("h28"), _LeadingOne_T_144) @[Mux.scala 47:70]
    node _LeadingOne_T_146 = mux(_LeadingOne_T_98, UInt<6>("h27"), _LeadingOne_T_145) @[Mux.scala 47:70]
    node _LeadingOne_T_147 = mux(_LeadingOne_T_97, UInt<6>("h26"), _LeadingOne_T_146) @[Mux.scala 47:70]
    node _LeadingOne_T_148 = mux(_LeadingOne_T_96, UInt<6>("h25"), _LeadingOne_T_147) @[Mux.scala 47:70]
    node _LeadingOne_T_149 = mux(_LeadingOne_T_95, UInt<6>("h24"), _LeadingOne_T_148) @[Mux.scala 47:70]
    node _LeadingOne_T_150 = mux(_LeadingOne_T_94, UInt<6>("h23"), _LeadingOne_T_149) @[Mux.scala 47:70]
    node _LeadingOne_T_151 = mux(_LeadingOne_T_93, UInt<6>("h22"), _LeadingOne_T_150) @[Mux.scala 47:70]
    node _LeadingOne_T_152 = mux(_LeadingOne_T_92, UInt<6>("h21"), _LeadingOne_T_151) @[Mux.scala 47:70]
    node _LeadingOne_T_153 = mux(_LeadingOne_T_91, UInt<6>("h20"), _LeadingOne_T_152) @[Mux.scala 47:70]
    node _LeadingOne_T_154 = mux(_LeadingOne_T_90, UInt<5>("h1f"), _LeadingOne_T_153) @[Mux.scala 47:70]
    node _LeadingOne_T_155 = mux(_LeadingOne_T_89, UInt<5>("h1e"), _LeadingOne_T_154) @[Mux.scala 47:70]
    node _LeadingOne_T_156 = mux(_LeadingOne_T_88, UInt<5>("h1d"), _LeadingOne_T_155) @[Mux.scala 47:70]
    node _LeadingOne_T_157 = mux(_LeadingOne_T_87, UInt<5>("h1c"), _LeadingOne_T_156) @[Mux.scala 47:70]
    node _LeadingOne_T_158 = mux(_LeadingOne_T_86, UInt<5>("h1b"), _LeadingOne_T_157) @[Mux.scala 47:70]
    node _LeadingOne_T_159 = mux(_LeadingOne_T_85, UInt<5>("h1a"), _LeadingOne_T_158) @[Mux.scala 47:70]
    node _LeadingOne_T_160 = mux(_LeadingOne_T_84, UInt<5>("h19"), _LeadingOne_T_159) @[Mux.scala 47:70]
    node _LeadingOne_T_161 = mux(_LeadingOne_T_83, UInt<5>("h18"), _LeadingOne_T_160) @[Mux.scala 47:70]
    node _LeadingOne_T_162 = mux(_LeadingOne_T_82, UInt<5>("h17"), _LeadingOne_T_161) @[Mux.scala 47:70]
    node _LeadingOne_T_163 = mux(_LeadingOne_T_81, UInt<5>("h16"), _LeadingOne_T_162) @[Mux.scala 47:70]
    node _LeadingOne_T_164 = mux(_LeadingOne_T_80, UInt<5>("h15"), _LeadingOne_T_163) @[Mux.scala 47:70]
    node _LeadingOne_T_165 = mux(_LeadingOne_T_79, UInt<5>("h14"), _LeadingOne_T_164) @[Mux.scala 47:70]
    node _LeadingOne_T_166 = mux(_LeadingOne_T_78, UInt<5>("h13"), _LeadingOne_T_165) @[Mux.scala 47:70]
    node _LeadingOne_T_167 = mux(_LeadingOne_T_77, UInt<5>("h12"), _LeadingOne_T_166) @[Mux.scala 47:70]
    node _LeadingOne_T_168 = mux(_LeadingOne_T_76, UInt<5>("h11"), _LeadingOne_T_167) @[Mux.scala 47:70]
    node _LeadingOne_T_169 = mux(_LeadingOne_T_75, UInt<5>("h10"), _LeadingOne_T_168) @[Mux.scala 47:70]
    node _LeadingOne_T_170 = mux(_LeadingOne_T_74, UInt<4>("hf"), _LeadingOne_T_169) @[Mux.scala 47:70]
    node _LeadingOne_T_171 = mux(_LeadingOne_T_73, UInt<4>("he"), _LeadingOne_T_170) @[Mux.scala 47:70]
    node _LeadingOne_T_172 = mux(_LeadingOne_T_72, UInt<4>("hd"), _LeadingOne_T_171) @[Mux.scala 47:70]
    node _LeadingOne_T_173 = mux(_LeadingOne_T_71, UInt<4>("hc"), _LeadingOne_T_172) @[Mux.scala 47:70]
    node _LeadingOne_T_174 = mux(_LeadingOne_T_70, UInt<4>("hb"), _LeadingOne_T_173) @[Mux.scala 47:70]
    node _LeadingOne_T_175 = mux(_LeadingOne_T_69, UInt<4>("ha"), _LeadingOne_T_174) @[Mux.scala 47:70]
    node _LeadingOne_T_176 = mux(_LeadingOne_T_68, UInt<4>("h9"), _LeadingOne_T_175) @[Mux.scala 47:70]
    node _LeadingOne_T_177 = mux(_LeadingOne_T_67, UInt<4>("h8"), _LeadingOne_T_176) @[Mux.scala 47:70]
    node _LeadingOne_T_178 = mux(_LeadingOne_T_66, UInt<3>("h7"), _LeadingOne_T_177) @[Mux.scala 47:70]
    node _LeadingOne_T_179 = mux(_LeadingOne_T_65, UInt<3>("h6"), _LeadingOne_T_178) @[Mux.scala 47:70]
    node _LeadingOne_T_180 = mux(_LeadingOne_T_64, UInt<3>("h5"), _LeadingOne_T_179) @[Mux.scala 47:70]
    node _LeadingOne_T_181 = mux(_LeadingOne_T_63, UInt<3>("h4"), _LeadingOne_T_180) @[Mux.scala 47:70]
    node _LeadingOne_T_182 = mux(_LeadingOne_T_62, UInt<2>("h3"), _LeadingOne_T_181) @[Mux.scala 47:70]
    node _LeadingOne_T_183 = mux(_LeadingOne_T_61, UInt<2>("h2"), _LeadingOne_T_182) @[Mux.scala 47:70]
    node _LeadingOne_T_184 = mux(_LeadingOne_T_60, UInt<1>("h1"), _LeadingOne_T_183) @[Mux.scala 47:70]
    node _LeadingOne_T_185 = mux(_LeadingOne_T_59, UInt<1>("h0"), _LeadingOne_T_184) @[Mux.scala 47:70]
    node LeadingOne = mux(isZero, UInt<1>("h0"), _LeadingOne_T_185) @[FPU.scala 144:23]
    node shiftAmount = mux(isZero, UInt<1>("h0"), LeadingOne) @[FPU.scala 147:24]
    node _normalizedMantissa_T = dshl(absVal, shiftAmount) @[FPU.scala 148:53]
    node _normalizedMantissa_T_1 = bits(_normalizedMantissa_T, 62, 40) @[FPU.scala 148:68]
    node normalizedMantissa = mux(isZero, UInt<1>("h0"), _normalizedMantissa_T_1) @[FPU.scala 148:31]
    node _biasedExponent_T = sub(UInt<8>("hbe"), LeadingOne) @[FPU.scala 151:48]
    node _biasedExponent_T_1 = tail(_biasedExponent_T, 1) @[FPU.scala 151:48]
    node biasedExponent = mux(isZero, UInt<1>("h0"), _biasedExponent_T_1) @[FPU.scala 151:27]
    node _outIEEE_T = bits(biasedExponent, 7, 0) @[FPU.scala 154:41]
    node outIEEE_hi = cat(sign, _outIEEE_T) @[Cat.scala 33:92]
    node outIEEE = cat(outIEEE_hi, normalizedMantissa) @[Cat.scala 33:92]
    io.outIEEE <= outIEEE @[FPU.scala 157:14]

  module MulFullRawFN :
    output io : { flip a : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>}, flip b : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>}, invalidExc : UInt<1>, rawOut : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<48>}}

    node _notSigNaN_invalidExc_T = and(io.a.isInf, io.b.isZero) @[MulRecFN.scala 58:44]
    node _notSigNaN_invalidExc_T_1 = and(io.a.isZero, io.b.isInf) @[MulRecFN.scala 58:76]
    node notSigNaN_invalidExc = or(_notSigNaN_invalidExc_T, _notSigNaN_invalidExc_T_1) @[MulRecFN.scala 58:60]
    node notNaN_isInfOut = or(io.a.isInf, io.b.isInf) @[MulRecFN.scala 59:38]
    node notNaN_isZeroOut = or(io.a.isZero, io.b.isZero) @[MulRecFN.scala 60:40]
    node notNaN_signOut = xor(io.a.sign, io.b.sign) @[MulRecFN.scala 61:36]
    node _common_sExpOut_T = add(io.a.sExp, io.b.sExp) @[MulRecFN.scala 62:36]
    node _common_sExpOut_T_1 = tail(_common_sExpOut_T, 1) @[MulRecFN.scala 62:36]
    node _common_sExpOut_T_2 = asSInt(_common_sExpOut_T_1) @[MulRecFN.scala 62:36]
    node _common_sExpOut_T_3 = sub(_common_sExpOut_T_2, asSInt(UInt<10>("h100"))) @[MulRecFN.scala 62:48]
    node _common_sExpOut_T_4 = tail(_common_sExpOut_T_3, 1) @[MulRecFN.scala 62:48]
    node common_sExpOut = asSInt(_common_sExpOut_T_4) @[MulRecFN.scala 62:48]
    node _common_sigOut_T = mul(io.a.sig, io.b.sig) @[MulRecFN.scala 63:35]
    node common_sigOut = bits(_common_sigOut_T, 47, 0) @[MulRecFN.scala 63:46]
    node _io_invalidExc_T = bits(io.a.sig, 22, 22) @[common.scala 82:56]
    node _io_invalidExc_T_1 = eq(_io_invalidExc_T, UInt<1>("h0")) @[common.scala 82:49]
    node _io_invalidExc_T_2 = and(io.a.isNaN, _io_invalidExc_T_1) @[common.scala 82:46]
    node _io_invalidExc_T_3 = bits(io.b.sig, 22, 22) @[common.scala 82:56]
    node _io_invalidExc_T_4 = eq(_io_invalidExc_T_3, UInt<1>("h0")) @[common.scala 82:49]
    node _io_invalidExc_T_5 = and(io.b.isNaN, _io_invalidExc_T_4) @[common.scala 82:46]
    node _io_invalidExc_T_6 = or(_io_invalidExc_T_2, _io_invalidExc_T_5) @[MulRecFN.scala 66:45]
    node _io_invalidExc_T_7 = or(_io_invalidExc_T_6, notSigNaN_invalidExc) @[MulRecFN.scala 66:71]
    io.invalidExc <= _io_invalidExc_T_7 @[MulRecFN.scala 66:19]
    io.rawOut.isInf <= notNaN_isInfOut @[MulRecFN.scala 67:21]
    io.rawOut.isZero <= notNaN_isZeroOut @[MulRecFN.scala 68:22]
    io.rawOut.sExp <= common_sExpOut @[MulRecFN.scala 69:20]
    node _io_rawOut_isNaN_T = or(io.a.isNaN, io.b.isNaN) @[MulRecFN.scala 70:35]
    io.rawOut.isNaN <= _io_rawOut_isNaN_T @[MulRecFN.scala 70:21]
    io.rawOut.sign <= notNaN_signOut @[MulRecFN.scala 71:20]
    io.rawOut.sig <= common_sigOut @[MulRecFN.scala 72:19]

  module MulRawFN :
    output io : { flip a : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>}, flip b : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>}, invalidExc : UInt<1>, rawOut : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<27>}}

    inst mulFullRaw of MulFullRawFN @[MulRecFN.scala 84:28]
    mulFullRaw.io.a.sig <= io.a.sig @[MulRecFN.scala 86:21]
    mulFullRaw.io.a.sExp <= io.a.sExp @[MulRecFN.scala 86:21]
    mulFullRaw.io.a.sign <= io.a.sign @[MulRecFN.scala 86:21]
    mulFullRaw.io.a.isZero <= io.a.isZero @[MulRecFN.scala 86:21]
    mulFullRaw.io.a.isInf <= io.a.isInf @[MulRecFN.scala 86:21]
    mulFullRaw.io.a.isNaN <= io.a.isNaN @[MulRecFN.scala 86:21]
    mulFullRaw.io.b.sig <= io.b.sig @[MulRecFN.scala 87:21]
    mulFullRaw.io.b.sExp <= io.b.sExp @[MulRecFN.scala 87:21]
    mulFullRaw.io.b.sign <= io.b.sign @[MulRecFN.scala 87:21]
    mulFullRaw.io.b.isZero <= io.b.isZero @[MulRecFN.scala 87:21]
    mulFullRaw.io.b.isInf <= io.b.isInf @[MulRecFN.scala 87:21]
    mulFullRaw.io.b.isNaN <= io.b.isNaN @[MulRecFN.scala 87:21]
    io.invalidExc <= mulFullRaw.io.invalidExc @[MulRecFN.scala 89:19]
    io.rawOut <= mulFullRaw.io.rawOut @[MulRecFN.scala 90:15]
    node _io_rawOut_sig_T = shr(mulFullRaw.io.rawOut.sig, 22) @[MulRecFN.scala 93:15]
    node _io_rawOut_sig_T_1 = bits(mulFullRaw.io.rawOut.sig, 21, 0) @[MulRecFN.scala 93:37]
    node _io_rawOut_sig_T_2 = orr(_io_rawOut_sig_T_1) @[MulRecFN.scala 93:55]
    node _io_rawOut_sig_T_3 = cat(_io_rawOut_sig_T, _io_rawOut_sig_T_2) @[Cat.scala 33:92]
    io.rawOut.sig <= _io_rawOut_sig_T_3 @[MulRecFN.scala 91:19]

  module RoundAnyRawFNToRecFN_ie8_is26_oe8_os24 :
    output io : { flip invalidExc : UInt<1>, flip infiniteExc : UInt<1>, flip in : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<27>}, flip roundingMode : UInt<3>, flip detectTininess : UInt<1>, out : UInt<33>, exceptionFlags : UInt<5>}

    node roundingMode_near_even = eq(io.roundingMode, UInt<3>("h0")) @[RoundAnyRawFNToRecFN.scala 90:53]
    node roundingMode_minMag = eq(io.roundingMode, UInt<3>("h1")) @[RoundAnyRawFNToRecFN.scala 91:53]
    node roundingMode_min = eq(io.roundingMode, UInt<3>("h2")) @[RoundAnyRawFNToRecFN.scala 92:53]
    node roundingMode_max = eq(io.roundingMode, UInt<3>("h3")) @[RoundAnyRawFNToRecFN.scala 93:53]
    node roundingMode_near_maxMag = eq(io.roundingMode, UInt<3>("h4")) @[RoundAnyRawFNToRecFN.scala 94:53]
    node roundingMode_odd = eq(io.roundingMode, UInt<3>("h6")) @[RoundAnyRawFNToRecFN.scala 95:53]
    node _roundMagUp_T = and(roundingMode_min, io.in.sign) @[RoundAnyRawFNToRecFN.scala 98:27]
    node _roundMagUp_T_1 = eq(io.in.sign, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 98:66]
    node _roundMagUp_T_2 = and(roundingMode_max, _roundMagUp_T_1) @[RoundAnyRawFNToRecFN.scala 98:63]
    node roundMagUp = or(_roundMagUp_T, _roundMagUp_T_2) @[RoundAnyRawFNToRecFN.scala 98:42]
    node adjustedSig = shl(io.in.sig, 0) @[RoundAnyRawFNToRecFN.scala 114:22]
    node doShiftSigDown1 = bits(adjustedSig, 26, 26) @[RoundAnyRawFNToRecFN.scala 120:57]
    wire common_expOut : UInt<9> @[RoundAnyRawFNToRecFN.scala 122:31]
    wire common_fractOut : UInt<23> @[RoundAnyRawFNToRecFN.scala 123:31]
    wire common_overflow : UInt<1> @[RoundAnyRawFNToRecFN.scala 124:37]
    wire common_totalUnderflow : UInt<1> @[RoundAnyRawFNToRecFN.scala 125:37]
    wire common_underflow : UInt<1> @[RoundAnyRawFNToRecFN.scala 126:37]
    wire common_inexact : UInt<1> @[RoundAnyRawFNToRecFN.scala 127:37]
    node _roundMask_T = bits(io.in.sExp, 8, 0) @[RoundAnyRawFNToRecFN.scala 156:37]
    node _roundMask_T_1 = not(_roundMask_T) @[primitives.scala 52:21]
    node roundMask_msb = bits(_roundMask_T_1, 8, 8) @[primitives.scala 58:25]
    node roundMask_lsbs = bits(_roundMask_T_1, 7, 0) @[primitives.scala 59:26]
    node roundMask_msb_1 = bits(roundMask_lsbs, 7, 7) @[primitives.scala 58:25]
    node roundMask_lsbs_1 = bits(roundMask_lsbs, 6, 0) @[primitives.scala 59:26]
    node roundMask_msb_2 = bits(roundMask_lsbs_1, 6, 6) @[primitives.scala 58:25]
    node roundMask_lsbs_2 = bits(roundMask_lsbs_1, 5, 0) @[primitives.scala 59:26]
    node roundMask_shift = dshr(asSInt(UInt<65>("h10000000000000000")), roundMask_lsbs_2) @[primitives.scala 76:56]
    node _roundMask_T_2 = bits(roundMask_shift, 63, 42) @[primitives.scala 78:22]
    node _roundMask_T_3 = bits(_roundMask_T_2, 15, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_4 = shl(UInt<8>("hff"), 8) @[Bitwise.scala 107:52]
    node _roundMask_T_5 = xor(UInt<16>("hffff"), _roundMask_T_4) @[Bitwise.scala 107:21]
    node _roundMask_T_6 = shr(_roundMask_T_3, 8) @[Bitwise.scala 108:21]
    node _roundMask_T_7 = and(_roundMask_T_6, _roundMask_T_5) @[Bitwise.scala 108:31]
    node _roundMask_T_8 = bits(_roundMask_T_3, 7, 0) @[Bitwise.scala 108:46]
    node _roundMask_T_9 = shl(_roundMask_T_8, 8) @[Bitwise.scala 108:70]
    node _roundMask_T_10 = not(_roundMask_T_5) @[Bitwise.scala 108:82]
    node _roundMask_T_11 = and(_roundMask_T_9, _roundMask_T_10) @[Bitwise.scala 108:80]
    node _roundMask_T_12 = or(_roundMask_T_7, _roundMask_T_11) @[Bitwise.scala 108:39]
    node _roundMask_T_13 = bits(_roundMask_T_5, 11, 0) @[Bitwise.scala 107:28]
    node _roundMask_T_14 = shl(_roundMask_T_13, 4) @[Bitwise.scala 107:52]
    node _roundMask_T_15 = xor(_roundMask_T_5, _roundMask_T_14) @[Bitwise.scala 107:21]
    node _roundMask_T_16 = shr(_roundMask_T_12, 4) @[Bitwise.scala 108:21]
    node _roundMask_T_17 = and(_roundMask_T_16, _roundMask_T_15) @[Bitwise.scala 108:31]
    node _roundMask_T_18 = bits(_roundMask_T_12, 11, 0) @[Bitwise.scala 108:46]
    node _roundMask_T_19 = shl(_roundMask_T_18, 4) @[Bitwise.scala 108:70]
    node _roundMask_T_20 = not(_roundMask_T_15) @[Bitwise.scala 108:82]
    node _roundMask_T_21 = and(_roundMask_T_19, _roundMask_T_20) @[Bitwise.scala 108:80]
    node _roundMask_T_22 = or(_roundMask_T_17, _roundMask_T_21) @[Bitwise.scala 108:39]
    node _roundMask_T_23 = bits(_roundMask_T_15, 13, 0) @[Bitwise.scala 107:28]
    node _roundMask_T_24 = shl(_roundMask_T_23, 2) @[Bitwise.scala 107:52]
    node _roundMask_T_25 = xor(_roundMask_T_15, _roundMask_T_24) @[Bitwise.scala 107:21]
    node _roundMask_T_26 = shr(_roundMask_T_22, 2) @[Bitwise.scala 108:21]
    node _roundMask_T_27 = and(_roundMask_T_26, _roundMask_T_25) @[Bitwise.scala 108:31]
    node _roundMask_T_28 = bits(_roundMask_T_22, 13, 0) @[Bitwise.scala 108:46]
    node _roundMask_T_29 = shl(_roundMask_T_28, 2) @[Bitwise.scala 108:70]
    node _roundMask_T_30 = not(_roundMask_T_25) @[Bitwise.scala 108:82]
    node _roundMask_T_31 = and(_roundMask_T_29, _roundMask_T_30) @[Bitwise.scala 108:80]
    node _roundMask_T_32 = or(_roundMask_T_27, _roundMask_T_31) @[Bitwise.scala 108:39]
    node _roundMask_T_33 = bits(_roundMask_T_25, 14, 0) @[Bitwise.scala 107:28]
    node _roundMask_T_34 = shl(_roundMask_T_33, 1) @[Bitwise.scala 107:52]
    node _roundMask_T_35 = xor(_roundMask_T_25, _roundMask_T_34) @[Bitwise.scala 107:21]
    node _roundMask_T_36 = shr(_roundMask_T_32, 1) @[Bitwise.scala 108:21]
    node _roundMask_T_37 = and(_roundMask_T_36, _roundMask_T_35) @[Bitwise.scala 108:31]
    node _roundMask_T_38 = bits(_roundMask_T_32, 14, 0) @[Bitwise.scala 108:46]
    node _roundMask_T_39 = shl(_roundMask_T_38, 1) @[Bitwise.scala 108:70]
    node _roundMask_T_40 = not(_roundMask_T_35) @[Bitwise.scala 108:82]
    node _roundMask_T_41 = and(_roundMask_T_39, _roundMask_T_40) @[Bitwise.scala 108:80]
    node _roundMask_T_42 = or(_roundMask_T_37, _roundMask_T_41) @[Bitwise.scala 108:39]
    node _roundMask_T_43 = bits(_roundMask_T_2, 21, 16) @[Bitwise.scala 114:47]
    node _roundMask_T_44 = bits(_roundMask_T_43, 3, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_45 = bits(_roundMask_T_44, 1, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_46 = bits(_roundMask_T_45, 0, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_47 = bits(_roundMask_T_45, 1, 1) @[Bitwise.scala 114:47]
    node _roundMask_T_48 = cat(_roundMask_T_46, _roundMask_T_47) @[Cat.scala 33:92]
    node _roundMask_T_49 = bits(_roundMask_T_44, 3, 2) @[Bitwise.scala 114:47]
    node _roundMask_T_50 = bits(_roundMask_T_49, 0, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_51 = bits(_roundMask_T_49, 1, 1) @[Bitwise.scala 114:47]
    node _roundMask_T_52 = cat(_roundMask_T_50, _roundMask_T_51) @[Cat.scala 33:92]
    node _roundMask_T_53 = cat(_roundMask_T_48, _roundMask_T_52) @[Cat.scala 33:92]
    node _roundMask_T_54 = bits(_roundMask_T_43, 5, 4) @[Bitwise.scala 114:47]
    node _roundMask_T_55 = bits(_roundMask_T_54, 0, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_56 = bits(_roundMask_T_54, 1, 1) @[Bitwise.scala 114:47]
    node _roundMask_T_57 = cat(_roundMask_T_55, _roundMask_T_56) @[Cat.scala 33:92]
    node _roundMask_T_58 = cat(_roundMask_T_53, _roundMask_T_57) @[Cat.scala 33:92]
    node _roundMask_T_59 = cat(_roundMask_T_42, _roundMask_T_58) @[Cat.scala 33:92]
    node _roundMask_T_60 = not(_roundMask_T_59) @[primitives.scala 73:32]
    node _roundMask_T_61 = mux(roundMask_msb_2, UInt<1>("h0"), _roundMask_T_60) @[primitives.scala 73:21]
    node _roundMask_T_62 = not(_roundMask_T_61) @[primitives.scala 73:17]
    node _roundMask_T_63 = cat(_roundMask_T_62, UInt<3>("h7")) @[primitives.scala 68:58]
    node roundMask_msb_3 = bits(roundMask_lsbs_1, 6, 6) @[primitives.scala 58:25]
    node roundMask_lsbs_3 = bits(roundMask_lsbs_1, 5, 0) @[primitives.scala 59:26]
    node roundMask_shift_1 = dshr(asSInt(UInt<65>("h10000000000000000")), roundMask_lsbs_3) @[primitives.scala 76:56]
    node _roundMask_T_64 = bits(roundMask_shift_1, 2, 0) @[primitives.scala 78:22]
    node _roundMask_T_65 = bits(_roundMask_T_64, 1, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_66 = bits(_roundMask_T_65, 0, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_67 = bits(_roundMask_T_65, 1, 1) @[Bitwise.scala 114:47]
    node _roundMask_T_68 = cat(_roundMask_T_66, _roundMask_T_67) @[Cat.scala 33:92]
    node _roundMask_T_69 = bits(_roundMask_T_64, 2, 2) @[Bitwise.scala 114:47]
    node _roundMask_T_70 = cat(_roundMask_T_68, _roundMask_T_69) @[Cat.scala 33:92]
    node _roundMask_T_71 = mux(roundMask_msb_3, _roundMask_T_70, UInt<1>("h0")) @[primitives.scala 62:24]
    node _roundMask_T_72 = mux(roundMask_msb_1, _roundMask_T_63, _roundMask_T_71) @[primitives.scala 67:24]
    node _roundMask_T_73 = mux(roundMask_msb, _roundMask_T_72, UInt<1>("h0")) @[primitives.scala 62:24]
    node _roundMask_T_74 = or(_roundMask_T_73, doShiftSigDown1) @[RoundAnyRawFNToRecFN.scala 159:23]
    node roundMask = cat(_roundMask_T_74, UInt<2>("h3")) @[RoundAnyRawFNToRecFN.scala 159:42]
    node _shiftedRoundMask_T = cat(UInt<1>("h0"), roundMask) @[RoundAnyRawFNToRecFN.scala 162:41]
    node shiftedRoundMask = shr(_shiftedRoundMask_T, 1) @[RoundAnyRawFNToRecFN.scala 162:53]
    node _roundPosMask_T = not(shiftedRoundMask) @[RoundAnyRawFNToRecFN.scala 163:28]
    node roundPosMask = and(_roundPosMask_T, roundMask) @[RoundAnyRawFNToRecFN.scala 163:46]
    node _roundPosBit_T = and(adjustedSig, roundPosMask) @[RoundAnyRawFNToRecFN.scala 164:40]
    node roundPosBit = orr(_roundPosBit_T) @[RoundAnyRawFNToRecFN.scala 164:56]
    node _anyRoundExtra_T = and(adjustedSig, shiftedRoundMask) @[RoundAnyRawFNToRecFN.scala 165:42]
    node anyRoundExtra = orr(_anyRoundExtra_T) @[RoundAnyRawFNToRecFN.scala 165:62]
    node anyRound = or(roundPosBit, anyRoundExtra) @[RoundAnyRawFNToRecFN.scala 166:36]
    node _roundIncr_T = or(roundingMode_near_even, roundingMode_near_maxMag) @[RoundAnyRawFNToRecFN.scala 169:38]
    node _roundIncr_T_1 = and(_roundIncr_T, roundPosBit) @[RoundAnyRawFNToRecFN.scala 169:67]
    node _roundIncr_T_2 = and(roundMagUp, anyRound) @[RoundAnyRawFNToRecFN.scala 171:29]
    node roundIncr = or(_roundIncr_T_1, _roundIncr_T_2) @[RoundAnyRawFNToRecFN.scala 170:31]
    node _roundedSig_T = or(adjustedSig, roundMask) @[RoundAnyRawFNToRecFN.scala 174:32]
    node _roundedSig_T_1 = shr(_roundedSig_T, 2) @[RoundAnyRawFNToRecFN.scala 174:44]
    node _roundedSig_T_2 = add(_roundedSig_T_1, UInt<1>("h1")) @[RoundAnyRawFNToRecFN.scala 174:49]
    node _roundedSig_T_3 = and(roundingMode_near_even, roundPosBit) @[RoundAnyRawFNToRecFN.scala 175:49]
    node _roundedSig_T_4 = eq(anyRoundExtra, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 176:30]
    node _roundedSig_T_5 = and(_roundedSig_T_3, _roundedSig_T_4) @[RoundAnyRawFNToRecFN.scala 175:64]
    node _roundedSig_T_6 = shr(roundMask, 1) @[RoundAnyRawFNToRecFN.scala 177:35]
    node _roundedSig_T_7 = mux(_roundedSig_T_5, _roundedSig_T_6, UInt<26>("h0")) @[RoundAnyRawFNToRecFN.scala 175:25]
    node _roundedSig_T_8 = not(_roundedSig_T_7) @[RoundAnyRawFNToRecFN.scala 175:21]
    node _roundedSig_T_9 = and(_roundedSig_T_2, _roundedSig_T_8) @[RoundAnyRawFNToRecFN.scala 174:57]
    node _roundedSig_T_10 = not(roundMask) @[RoundAnyRawFNToRecFN.scala 180:32]
    node _roundedSig_T_11 = and(adjustedSig, _roundedSig_T_10) @[RoundAnyRawFNToRecFN.scala 180:30]
    node _roundedSig_T_12 = shr(_roundedSig_T_11, 2) @[RoundAnyRawFNToRecFN.scala 180:43]
    node _roundedSig_T_13 = and(roundingMode_odd, anyRound) @[RoundAnyRawFNToRecFN.scala 181:42]
    node _roundedSig_T_14 = shr(roundPosMask, 1) @[RoundAnyRawFNToRecFN.scala 181:67]
    node _roundedSig_T_15 = mux(_roundedSig_T_13, _roundedSig_T_14, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 181:24]
    node _roundedSig_T_16 = or(_roundedSig_T_12, _roundedSig_T_15) @[RoundAnyRawFNToRecFN.scala 180:47]
    node roundedSig = mux(roundIncr, _roundedSig_T_9, _roundedSig_T_16) @[RoundAnyRawFNToRecFN.scala 173:16]
    node _sRoundedExp_T = shr(roundedSig, 24) @[RoundAnyRawFNToRecFN.scala 185:54]
    node _sRoundedExp_T_1 = cvt(_sRoundedExp_T) @[RoundAnyRawFNToRecFN.scala 185:76]
    node sRoundedExp = add(io.in.sExp, _sRoundedExp_T_1) @[RoundAnyRawFNToRecFN.scala 185:40]
    node _common_expOut_T = bits(sRoundedExp, 8, 0) @[RoundAnyRawFNToRecFN.scala 187:37]
    common_expOut <= _common_expOut_T @[RoundAnyRawFNToRecFN.scala 187:23]
    node _common_fractOut_T = bits(roundedSig, 23, 1) @[RoundAnyRawFNToRecFN.scala 190:27]
    node _common_fractOut_T_1 = bits(roundedSig, 22, 0) @[RoundAnyRawFNToRecFN.scala 191:27]
    node _common_fractOut_T_2 = mux(doShiftSigDown1, _common_fractOut_T, _common_fractOut_T_1) @[RoundAnyRawFNToRecFN.scala 189:16]
    common_fractOut <= _common_fractOut_T_2 @[RoundAnyRawFNToRecFN.scala 188:25]
    node _common_overflow_T = shr(sRoundedExp, 7) @[RoundAnyRawFNToRecFN.scala 196:30]
    node _common_overflow_T_1 = geq(_common_overflow_T, asSInt(UInt<3>("h3"))) @[RoundAnyRawFNToRecFN.scala 196:50]
    common_overflow <= _common_overflow_T_1 @[RoundAnyRawFNToRecFN.scala 193:25]
    node _common_totalUnderflow_T = lt(sRoundedExp, asSInt(UInt<8>("h6b"))) @[RoundAnyRawFNToRecFN.scala 200:31]
    common_totalUnderflow <= _common_totalUnderflow_T @[RoundAnyRawFNToRecFN.scala 197:31]
    node _unboundedRange_roundPosBit_T = bits(adjustedSig, 2, 2) @[RoundAnyRawFNToRecFN.scala 203:45]
    node _unboundedRange_roundPosBit_T_1 = bits(adjustedSig, 1, 1) @[RoundAnyRawFNToRecFN.scala 203:61]
    node unboundedRange_roundPosBit = mux(doShiftSigDown1, _unboundedRange_roundPosBit_T, _unboundedRange_roundPosBit_T_1) @[RoundAnyRawFNToRecFN.scala 203:16]
    node _unboundedRange_anyRound_T = bits(adjustedSig, 2, 2) @[RoundAnyRawFNToRecFN.scala 205:44]
    node _unboundedRange_anyRound_T_1 = and(doShiftSigDown1, _unboundedRange_anyRound_T) @[RoundAnyRawFNToRecFN.scala 205:30]
    node _unboundedRange_anyRound_T_2 = bits(adjustedSig, 1, 0) @[RoundAnyRawFNToRecFN.scala 205:63]
    node _unboundedRange_anyRound_T_3 = orr(_unboundedRange_anyRound_T_2) @[RoundAnyRawFNToRecFN.scala 205:70]
    node unboundedRange_anyRound = or(_unboundedRange_anyRound_T_1, _unboundedRange_anyRound_T_3) @[RoundAnyRawFNToRecFN.scala 205:49]
    node _unboundedRange_roundIncr_T = or(roundingMode_near_even, roundingMode_near_maxMag) @[RoundAnyRawFNToRecFN.scala 207:38]
    node _unboundedRange_roundIncr_T_1 = and(_unboundedRange_roundIncr_T, unboundedRange_roundPosBit) @[RoundAnyRawFNToRecFN.scala 207:67]
    node _unboundedRange_roundIncr_T_2 = and(roundMagUp, unboundedRange_anyRound) @[RoundAnyRawFNToRecFN.scala 209:29]
    node unboundedRange_roundIncr = or(_unboundedRange_roundIncr_T_1, _unboundedRange_roundIncr_T_2) @[RoundAnyRawFNToRecFN.scala 208:46]
    node _roundCarry_T = bits(roundedSig, 25, 25) @[RoundAnyRawFNToRecFN.scala 212:27]
    node _roundCarry_T_1 = bits(roundedSig, 24, 24) @[RoundAnyRawFNToRecFN.scala 213:27]
    node roundCarry = mux(doShiftSigDown1, _roundCarry_T, _roundCarry_T_1) @[RoundAnyRawFNToRecFN.scala 211:16]
    node _common_underflow_T = shr(io.in.sExp, 8) @[RoundAnyRawFNToRecFN.scala 220:49]
    node _common_underflow_T_1 = leq(_common_underflow_T, asSInt(UInt<1>("h0"))) @[RoundAnyRawFNToRecFN.scala 220:64]
    node _common_underflow_T_2 = and(anyRound, _common_underflow_T_1) @[RoundAnyRawFNToRecFN.scala 220:32]
    node _common_underflow_T_3 = bits(roundMask, 3, 3) @[RoundAnyRawFNToRecFN.scala 221:57]
    node _common_underflow_T_4 = bits(roundMask, 2, 2) @[RoundAnyRawFNToRecFN.scala 221:71]
    node _common_underflow_T_5 = mux(doShiftSigDown1, _common_underflow_T_3, _common_underflow_T_4) @[RoundAnyRawFNToRecFN.scala 221:30]
    node _common_underflow_T_6 = and(_common_underflow_T_2, _common_underflow_T_5) @[RoundAnyRawFNToRecFN.scala 220:72]
    node _common_underflow_T_7 = eq(io.detectTininess, UInt<1>("h1")) @[RoundAnyRawFNToRecFN.scala 222:49]
    node _common_underflow_T_8 = bits(roundMask, 4, 4) @[RoundAnyRawFNToRecFN.scala 224:49]
    node _common_underflow_T_9 = bits(roundMask, 3, 3) @[RoundAnyRawFNToRecFN.scala 225:49]
    node _common_underflow_T_10 = mux(doShiftSigDown1, _common_underflow_T_8, _common_underflow_T_9) @[RoundAnyRawFNToRecFN.scala 223:39]
    node _common_underflow_T_11 = eq(_common_underflow_T_10, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 223:34]
    node _common_underflow_T_12 = and(_common_underflow_T_7, _common_underflow_T_11) @[RoundAnyRawFNToRecFN.scala 222:77]
    node _common_underflow_T_13 = and(_common_underflow_T_12, roundCarry) @[RoundAnyRawFNToRecFN.scala 226:38]
    node _common_underflow_T_14 = and(_common_underflow_T_13, roundPosBit) @[RoundAnyRawFNToRecFN.scala 227:45]
    node _common_underflow_T_15 = and(_common_underflow_T_14, unboundedRange_roundIncr) @[RoundAnyRawFNToRecFN.scala 227:60]
    node _common_underflow_T_16 = eq(_common_underflow_T_15, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 222:27]
    node _common_underflow_T_17 = and(_common_underflow_T_6, _common_underflow_T_16) @[RoundAnyRawFNToRecFN.scala 221:76]
    node _common_underflow_T_18 = or(common_totalUnderflow, _common_underflow_T_17) @[RoundAnyRawFNToRecFN.scala 217:40]
    common_underflow <= _common_underflow_T_18 @[RoundAnyRawFNToRecFN.scala 215:26]
    node _common_inexact_T = or(common_totalUnderflow, anyRound) @[RoundAnyRawFNToRecFN.scala 230:49]
    common_inexact <= _common_inexact_T @[RoundAnyRawFNToRecFN.scala 230:24]
    node isNaNOut = or(io.invalidExc, io.in.isNaN) @[RoundAnyRawFNToRecFN.scala 235:34]
    node notNaN_isSpecialInfOut = or(io.infiniteExc, io.in.isInf) @[RoundAnyRawFNToRecFN.scala 236:49]
    node _commonCase_T = eq(isNaNOut, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 237:22]
    node _commonCase_T_1 = eq(notNaN_isSpecialInfOut, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 237:36]
    node _commonCase_T_2 = and(_commonCase_T, _commonCase_T_1) @[RoundAnyRawFNToRecFN.scala 237:33]
    node _commonCase_T_3 = eq(io.in.isZero, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 237:64]
    node commonCase = and(_commonCase_T_2, _commonCase_T_3) @[RoundAnyRawFNToRecFN.scala 237:61]
    node overflow = and(commonCase, common_overflow) @[RoundAnyRawFNToRecFN.scala 238:32]
    node underflow = and(commonCase, common_underflow) @[RoundAnyRawFNToRecFN.scala 239:32]
    node _inexact_T = and(commonCase, common_inexact) @[RoundAnyRawFNToRecFN.scala 240:43]
    node inexact = or(overflow, _inexact_T) @[RoundAnyRawFNToRecFN.scala 240:28]
    node _overflow_roundMagUp_T = or(roundingMode_near_even, roundingMode_near_maxMag) @[RoundAnyRawFNToRecFN.scala 243:32]
    node overflow_roundMagUp = or(_overflow_roundMagUp_T, roundMagUp) @[RoundAnyRawFNToRecFN.scala 243:60]
    node _pegMinNonzeroMagOut_T = and(commonCase, common_totalUnderflow) @[RoundAnyRawFNToRecFN.scala 245:20]
    node _pegMinNonzeroMagOut_T_1 = or(roundMagUp, roundingMode_odd) @[RoundAnyRawFNToRecFN.scala 245:60]
    node pegMinNonzeroMagOut = and(_pegMinNonzeroMagOut_T, _pegMinNonzeroMagOut_T_1) @[RoundAnyRawFNToRecFN.scala 245:45]
    node _pegMaxFiniteMagOut_T = eq(overflow_roundMagUp, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 246:42]
    node pegMaxFiniteMagOut = and(overflow, _pegMaxFiniteMagOut_T) @[RoundAnyRawFNToRecFN.scala 246:39]
    node _notNaN_isInfOut_T = and(overflow, overflow_roundMagUp) @[RoundAnyRawFNToRecFN.scala 248:45]
    node notNaN_isInfOut = or(notNaN_isSpecialInfOut, _notNaN_isInfOut_T) @[RoundAnyRawFNToRecFN.scala 248:32]
    node signOut = mux(isNaNOut, UInt<1>("h0"), io.in.sign) @[RoundAnyRawFNToRecFN.scala 250:22]
    node _expOut_T = or(io.in.isZero, common_totalUnderflow) @[RoundAnyRawFNToRecFN.scala 253:32]
    node _expOut_T_1 = mux(_expOut_T, UInt<9>("h1c0"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 253:18]
    node _expOut_T_2 = not(_expOut_T_1) @[RoundAnyRawFNToRecFN.scala 253:14]
    node _expOut_T_3 = and(common_expOut, _expOut_T_2) @[RoundAnyRawFNToRecFN.scala 252:24]
    node _expOut_T_4 = not(UInt<9>("h6b")) @[RoundAnyRawFNToRecFN.scala 258:19]
    node _expOut_T_5 = mux(pegMinNonzeroMagOut, _expOut_T_4, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 257:18]
    node _expOut_T_6 = not(_expOut_T_5) @[RoundAnyRawFNToRecFN.scala 257:14]
    node _expOut_T_7 = and(_expOut_T_3, _expOut_T_6) @[RoundAnyRawFNToRecFN.scala 256:17]
    node _expOut_T_8 = mux(pegMaxFiniteMagOut, UInt<9>("h80"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 261:18]
    node _expOut_T_9 = not(_expOut_T_8) @[RoundAnyRawFNToRecFN.scala 261:14]
    node _expOut_T_10 = and(_expOut_T_7, _expOut_T_9) @[RoundAnyRawFNToRecFN.scala 260:17]
    node _expOut_T_11 = mux(notNaN_isInfOut, UInt<9>("h40"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 265:18]
    node _expOut_T_12 = not(_expOut_T_11) @[RoundAnyRawFNToRecFN.scala 265:14]
    node _expOut_T_13 = and(_expOut_T_10, _expOut_T_12) @[RoundAnyRawFNToRecFN.scala 264:17]
    node _expOut_T_14 = mux(pegMinNonzeroMagOut, UInt<9>("h6b"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 269:16]
    node _expOut_T_15 = or(_expOut_T_13, _expOut_T_14) @[RoundAnyRawFNToRecFN.scala 268:18]
    node _expOut_T_16 = mux(pegMaxFiniteMagOut, UInt<9>("h17f"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 273:16]
    node _expOut_T_17 = or(_expOut_T_15, _expOut_T_16) @[RoundAnyRawFNToRecFN.scala 272:15]
    node _expOut_T_18 = mux(notNaN_isInfOut, UInt<9>("h180"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 277:16]
    node _expOut_T_19 = or(_expOut_T_17, _expOut_T_18) @[RoundAnyRawFNToRecFN.scala 276:15]
    node _expOut_T_20 = mux(isNaNOut, UInt<9>("h1c0"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 278:16]
    node expOut = or(_expOut_T_19, _expOut_T_20) @[RoundAnyRawFNToRecFN.scala 277:73]
    node _fractOut_T = or(isNaNOut, io.in.isZero) @[RoundAnyRawFNToRecFN.scala 280:22]
    node _fractOut_T_1 = or(_fractOut_T, common_totalUnderflow) @[RoundAnyRawFNToRecFN.scala 280:38]
    node _fractOut_T_2 = mux(isNaNOut, UInt<23>("h400000"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 281:16]
    node _fractOut_T_3 = mux(_fractOut_T_1, _fractOut_T_2, common_fractOut) @[RoundAnyRawFNToRecFN.scala 280:12]
    node _fractOut_T_4 = bits(pegMaxFiniteMagOut, 0, 0) @[Bitwise.scala 77:15]
    node _fractOut_T_5 = mux(_fractOut_T_4, UInt<23>("h7fffff"), UInt<23>("h0")) @[Bitwise.scala 77:12]
    node fractOut = or(_fractOut_T_3, _fractOut_T_5) @[RoundAnyRawFNToRecFN.scala 283:11]
    node _io_out_T = cat(signOut, expOut) @[RoundAnyRawFNToRecFN.scala 286:23]
    node _io_out_T_1 = cat(_io_out_T, fractOut) @[RoundAnyRawFNToRecFN.scala 286:33]
    io.out <= _io_out_T_1 @[RoundAnyRawFNToRecFN.scala 286:12]
    node _io_exceptionFlags_T = cat(io.invalidExc, io.infiniteExc) @[RoundAnyRawFNToRecFN.scala 288:23]
    node _io_exceptionFlags_T_1 = cat(_io_exceptionFlags_T, overflow) @[RoundAnyRawFNToRecFN.scala 288:41]
    node _io_exceptionFlags_T_2 = cat(_io_exceptionFlags_T_1, underflow) @[RoundAnyRawFNToRecFN.scala 288:53]
    node _io_exceptionFlags_T_3 = cat(_io_exceptionFlags_T_2, inexact) @[RoundAnyRawFNToRecFN.scala 288:66]
    io.exceptionFlags <= _io_exceptionFlags_T_3 @[RoundAnyRawFNToRecFN.scala 287:23]

  module RoundRawFNToRecFN_e8_s24 :
    output io : { flip invalidExc : UInt<1>, flip infiniteExc : UInt<1>, flip in : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<27>}, flip roundingMode : UInt<3>, flip detectTininess : UInt<1>, out : UInt<33>, exceptionFlags : UInt<5>}

    inst roundAnyRawFNToRecFN of RoundAnyRawFNToRecFN_ie8_is26_oe8_os24 @[RoundAnyRawFNToRecFN.scala 310:15]
    roundAnyRawFNToRecFN.io.invalidExc <= io.invalidExc @[RoundAnyRawFNToRecFN.scala 313:44]
    roundAnyRawFNToRecFN.io.infiniteExc <= io.infiniteExc @[RoundAnyRawFNToRecFN.scala 314:44]
    roundAnyRawFNToRecFN.io.in.sig <= io.in.sig @[RoundAnyRawFNToRecFN.scala 315:44]
    roundAnyRawFNToRecFN.io.in.sExp <= io.in.sExp @[RoundAnyRawFNToRecFN.scala 315:44]
    roundAnyRawFNToRecFN.io.in.sign <= io.in.sign @[RoundAnyRawFNToRecFN.scala 315:44]
    roundAnyRawFNToRecFN.io.in.isZero <= io.in.isZero @[RoundAnyRawFNToRecFN.scala 315:44]
    roundAnyRawFNToRecFN.io.in.isInf <= io.in.isInf @[RoundAnyRawFNToRecFN.scala 315:44]
    roundAnyRawFNToRecFN.io.in.isNaN <= io.in.isNaN @[RoundAnyRawFNToRecFN.scala 315:44]
    roundAnyRawFNToRecFN.io.roundingMode <= io.roundingMode @[RoundAnyRawFNToRecFN.scala 316:44]
    roundAnyRawFNToRecFN.io.detectTininess <= io.detectTininess @[RoundAnyRawFNToRecFN.scala 317:44]
    io.out <= roundAnyRawFNToRecFN.io.out @[RoundAnyRawFNToRecFN.scala 318:23]
    io.exceptionFlags <= roundAnyRawFNToRecFN.io.exceptionFlags @[RoundAnyRawFNToRecFN.scala 319:23]

  module MulRecFN :
    output io : { flip a : UInt<33>, flip b : UInt<33>, flip roundingMode : UInt<3>, flip detectTininess : UInt<1>, out : UInt<33>, exceptionFlags : UInt<5>}

    inst mulRawFN of MulRawFN @[MulRecFN.scala 113:26]
    node mulRawFN_io_a_exp = bits(io.a, 31, 23) @[rawFloatFromRecFN.scala 51:21]
    node _mulRawFN_io_a_isZero_T = bits(mulRawFN_io_a_exp, 8, 6) @[rawFloatFromRecFN.scala 52:28]
    node mulRawFN_io_a_isZero = eq(_mulRawFN_io_a_isZero_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 52:53]
    node _mulRawFN_io_a_isSpecial_T = bits(mulRawFN_io_a_exp, 8, 7) @[rawFloatFromRecFN.scala 53:28]
    node mulRawFN_io_a_isSpecial = eq(_mulRawFN_io_a_isSpecial_T, UInt<2>("h3")) @[rawFloatFromRecFN.scala 53:53]
    wire mulRawFN_io_a_out : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>} @[rawFloatFromRecFN.scala 55:23]
    node _mulRawFN_io_a_out_isNaN_T = bits(mulRawFN_io_a_exp, 6, 6) @[rawFloatFromRecFN.scala 56:41]
    node _mulRawFN_io_a_out_isNaN_T_1 = and(mulRawFN_io_a_isSpecial, _mulRawFN_io_a_out_isNaN_T) @[rawFloatFromRecFN.scala 56:33]
    mulRawFN_io_a_out.isNaN <= _mulRawFN_io_a_out_isNaN_T_1 @[rawFloatFromRecFN.scala 56:20]
    node _mulRawFN_io_a_out_isInf_T = bits(mulRawFN_io_a_exp, 6, 6) @[rawFloatFromRecFN.scala 57:41]
    node _mulRawFN_io_a_out_isInf_T_1 = eq(_mulRawFN_io_a_out_isInf_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 57:36]
    node _mulRawFN_io_a_out_isInf_T_2 = and(mulRawFN_io_a_isSpecial, _mulRawFN_io_a_out_isInf_T_1) @[rawFloatFromRecFN.scala 57:33]
    mulRawFN_io_a_out.isInf <= _mulRawFN_io_a_out_isInf_T_2 @[rawFloatFromRecFN.scala 57:20]
    mulRawFN_io_a_out.isZero <= mulRawFN_io_a_isZero @[rawFloatFromRecFN.scala 58:20]
    node _mulRawFN_io_a_out_sign_T = bits(io.a, 32, 32) @[rawFloatFromRecFN.scala 59:25]
    mulRawFN_io_a_out.sign <= _mulRawFN_io_a_out_sign_T @[rawFloatFromRecFN.scala 59:20]
    node _mulRawFN_io_a_out_sExp_T = cvt(mulRawFN_io_a_exp) @[rawFloatFromRecFN.scala 60:27]
    mulRawFN_io_a_out.sExp <= _mulRawFN_io_a_out_sExp_T @[rawFloatFromRecFN.scala 60:20]
    node _mulRawFN_io_a_out_sig_T = eq(mulRawFN_io_a_isZero, UInt<1>("h0")) @[rawFloatFromRecFN.scala 61:35]
    node _mulRawFN_io_a_out_sig_T_1 = cat(UInt<1>("h0"), _mulRawFN_io_a_out_sig_T) @[rawFloatFromRecFN.scala 61:32]
    node _mulRawFN_io_a_out_sig_T_2 = bits(io.a, 22, 0) @[rawFloatFromRecFN.scala 61:49]
    node _mulRawFN_io_a_out_sig_T_3 = cat(_mulRawFN_io_a_out_sig_T_1, _mulRawFN_io_a_out_sig_T_2) @[rawFloatFromRecFN.scala 61:44]
    mulRawFN_io_a_out.sig <= _mulRawFN_io_a_out_sig_T_3 @[rawFloatFromRecFN.scala 61:20]
    mulRawFN.io.a.sig <= mulRawFN_io_a_out.sig @[MulRecFN.scala 115:19]
    mulRawFN.io.a.sExp <= mulRawFN_io_a_out.sExp @[MulRecFN.scala 115:19]
    mulRawFN.io.a.sign <= mulRawFN_io_a_out.sign @[MulRecFN.scala 115:19]
    mulRawFN.io.a.isZero <= mulRawFN_io_a_out.isZero @[MulRecFN.scala 115:19]
    mulRawFN.io.a.isInf <= mulRawFN_io_a_out.isInf @[MulRecFN.scala 115:19]
    mulRawFN.io.a.isNaN <= mulRawFN_io_a_out.isNaN @[MulRecFN.scala 115:19]
    node mulRawFN_io_b_exp = bits(io.b, 31, 23) @[rawFloatFromRecFN.scala 51:21]
    node _mulRawFN_io_b_isZero_T = bits(mulRawFN_io_b_exp, 8, 6) @[rawFloatFromRecFN.scala 52:28]
    node mulRawFN_io_b_isZero = eq(_mulRawFN_io_b_isZero_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 52:53]
    node _mulRawFN_io_b_isSpecial_T = bits(mulRawFN_io_b_exp, 8, 7) @[rawFloatFromRecFN.scala 53:28]
    node mulRawFN_io_b_isSpecial = eq(_mulRawFN_io_b_isSpecial_T, UInt<2>("h3")) @[rawFloatFromRecFN.scala 53:53]
    wire mulRawFN_io_b_out : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>} @[rawFloatFromRecFN.scala 55:23]
    node _mulRawFN_io_b_out_isNaN_T = bits(mulRawFN_io_b_exp, 6, 6) @[rawFloatFromRecFN.scala 56:41]
    node _mulRawFN_io_b_out_isNaN_T_1 = and(mulRawFN_io_b_isSpecial, _mulRawFN_io_b_out_isNaN_T) @[rawFloatFromRecFN.scala 56:33]
    mulRawFN_io_b_out.isNaN <= _mulRawFN_io_b_out_isNaN_T_1 @[rawFloatFromRecFN.scala 56:20]
    node _mulRawFN_io_b_out_isInf_T = bits(mulRawFN_io_b_exp, 6, 6) @[rawFloatFromRecFN.scala 57:41]
    node _mulRawFN_io_b_out_isInf_T_1 = eq(_mulRawFN_io_b_out_isInf_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 57:36]
    node _mulRawFN_io_b_out_isInf_T_2 = and(mulRawFN_io_b_isSpecial, _mulRawFN_io_b_out_isInf_T_1) @[rawFloatFromRecFN.scala 57:33]
    mulRawFN_io_b_out.isInf <= _mulRawFN_io_b_out_isInf_T_2 @[rawFloatFromRecFN.scala 57:20]
    mulRawFN_io_b_out.isZero <= mulRawFN_io_b_isZero @[rawFloatFromRecFN.scala 58:20]
    node _mulRawFN_io_b_out_sign_T = bits(io.b, 32, 32) @[rawFloatFromRecFN.scala 59:25]
    mulRawFN_io_b_out.sign <= _mulRawFN_io_b_out_sign_T @[rawFloatFromRecFN.scala 59:20]
    node _mulRawFN_io_b_out_sExp_T = cvt(mulRawFN_io_b_exp) @[rawFloatFromRecFN.scala 60:27]
    mulRawFN_io_b_out.sExp <= _mulRawFN_io_b_out_sExp_T @[rawFloatFromRecFN.scala 60:20]
    node _mulRawFN_io_b_out_sig_T = eq(mulRawFN_io_b_isZero, UInt<1>("h0")) @[rawFloatFromRecFN.scala 61:35]
    node _mulRawFN_io_b_out_sig_T_1 = cat(UInt<1>("h0"), _mulRawFN_io_b_out_sig_T) @[rawFloatFromRecFN.scala 61:32]
    node _mulRawFN_io_b_out_sig_T_2 = bits(io.b, 22, 0) @[rawFloatFromRecFN.scala 61:49]
    node _mulRawFN_io_b_out_sig_T_3 = cat(_mulRawFN_io_b_out_sig_T_1, _mulRawFN_io_b_out_sig_T_2) @[rawFloatFromRecFN.scala 61:44]
    mulRawFN_io_b_out.sig <= _mulRawFN_io_b_out_sig_T_3 @[rawFloatFromRecFN.scala 61:20]
    mulRawFN.io.b.sig <= mulRawFN_io_b_out.sig @[MulRecFN.scala 116:19]
    mulRawFN.io.b.sExp <= mulRawFN_io_b_out.sExp @[MulRecFN.scala 116:19]
    mulRawFN.io.b.sign <= mulRawFN_io_b_out.sign @[MulRecFN.scala 116:19]
    mulRawFN.io.b.isZero <= mulRawFN_io_b_out.isZero @[MulRecFN.scala 116:19]
    mulRawFN.io.b.isInf <= mulRawFN_io_b_out.isInf @[MulRecFN.scala 116:19]
    mulRawFN.io.b.isNaN <= mulRawFN_io_b_out.isNaN @[MulRecFN.scala 116:19]
    inst roundRawFNToRecFN of RoundRawFNToRecFN_e8_s24 @[MulRecFN.scala 121:15]
    roundRawFNToRecFN.io.invalidExc <= mulRawFN.io.invalidExc @[MulRecFN.scala 122:39]
    roundRawFNToRecFN.io.infiniteExc <= UInt<1>("h0") @[MulRecFN.scala 123:39]
    roundRawFNToRecFN.io.in.sig <= mulRawFN.io.rawOut.sig @[MulRecFN.scala 124:39]
    roundRawFNToRecFN.io.in.sExp <= mulRawFN.io.rawOut.sExp @[MulRecFN.scala 124:39]
    roundRawFNToRecFN.io.in.sign <= mulRawFN.io.rawOut.sign @[MulRecFN.scala 124:39]
    roundRawFNToRecFN.io.in.isZero <= mulRawFN.io.rawOut.isZero @[MulRecFN.scala 124:39]
    roundRawFNToRecFN.io.in.isInf <= mulRawFN.io.rawOut.isInf @[MulRecFN.scala 124:39]
    roundRawFNToRecFN.io.in.isNaN <= mulRawFN.io.rawOut.isNaN @[MulRecFN.scala 124:39]
    roundRawFNToRecFN.io.roundingMode <= io.roundingMode @[MulRecFN.scala 125:39]
    roundRawFNToRecFN.io.detectTininess <= io.detectTininess @[MulRecFN.scala 126:41]
    io.out <= roundRawFNToRecFN.io.out @[MulRecFN.scala 127:23]
    io.exceptionFlags <= roundRawFNToRecFN.io.exceptionFlags @[MulRecFN.scala 128:23]

  module FP32Multiplier :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<32>, flip b : UInt<32>, result : UInt<32>}

    inst mulRecFN of MulRecFN @[FPU.scala 88:26]
    node a_recoded_rawIn_sign = bits(io.a, 31, 31) @[rawFloatFromFN.scala 44:18]
    node a_recoded_rawIn_expIn = bits(io.a, 30, 23) @[rawFloatFromFN.scala 45:19]
    node a_recoded_rawIn_fractIn = bits(io.a, 22, 0) @[rawFloatFromFN.scala 46:21]
    node a_recoded_rawIn_isZeroExpIn = eq(a_recoded_rawIn_expIn, UInt<1>("h0")) @[rawFloatFromFN.scala 48:30]
    node a_recoded_rawIn_isZeroFractIn = eq(a_recoded_rawIn_fractIn, UInt<1>("h0")) @[rawFloatFromFN.scala 49:34]
    node _a_recoded_rawIn_normDist_T = bits(a_recoded_rawIn_fractIn, 0, 0) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_1 = bits(a_recoded_rawIn_fractIn, 1, 1) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_2 = bits(a_recoded_rawIn_fractIn, 2, 2) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_3 = bits(a_recoded_rawIn_fractIn, 3, 3) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_4 = bits(a_recoded_rawIn_fractIn, 4, 4) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_5 = bits(a_recoded_rawIn_fractIn, 5, 5) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_6 = bits(a_recoded_rawIn_fractIn, 6, 6) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_7 = bits(a_recoded_rawIn_fractIn, 7, 7) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_8 = bits(a_recoded_rawIn_fractIn, 8, 8) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_9 = bits(a_recoded_rawIn_fractIn, 9, 9) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_10 = bits(a_recoded_rawIn_fractIn, 10, 10) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_11 = bits(a_recoded_rawIn_fractIn, 11, 11) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_12 = bits(a_recoded_rawIn_fractIn, 12, 12) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_13 = bits(a_recoded_rawIn_fractIn, 13, 13) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_14 = bits(a_recoded_rawIn_fractIn, 14, 14) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_15 = bits(a_recoded_rawIn_fractIn, 15, 15) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_16 = bits(a_recoded_rawIn_fractIn, 16, 16) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_17 = bits(a_recoded_rawIn_fractIn, 17, 17) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_18 = bits(a_recoded_rawIn_fractIn, 18, 18) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_19 = bits(a_recoded_rawIn_fractIn, 19, 19) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_20 = bits(a_recoded_rawIn_fractIn, 20, 20) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_21 = bits(a_recoded_rawIn_fractIn, 21, 21) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_22 = bits(a_recoded_rawIn_fractIn, 22, 22) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_23 = mux(_a_recoded_rawIn_normDist_T_1, UInt<5>("h15"), UInt<5>("h16")) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_24 = mux(_a_recoded_rawIn_normDist_T_2, UInt<5>("h14"), _a_recoded_rawIn_normDist_T_23) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_25 = mux(_a_recoded_rawIn_normDist_T_3, UInt<5>("h13"), _a_recoded_rawIn_normDist_T_24) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_26 = mux(_a_recoded_rawIn_normDist_T_4, UInt<5>("h12"), _a_recoded_rawIn_normDist_T_25) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_27 = mux(_a_recoded_rawIn_normDist_T_5, UInt<5>("h11"), _a_recoded_rawIn_normDist_T_26) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_28 = mux(_a_recoded_rawIn_normDist_T_6, UInt<5>("h10"), _a_recoded_rawIn_normDist_T_27) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_29 = mux(_a_recoded_rawIn_normDist_T_7, UInt<4>("hf"), _a_recoded_rawIn_normDist_T_28) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_30 = mux(_a_recoded_rawIn_normDist_T_8, UInt<4>("he"), _a_recoded_rawIn_normDist_T_29) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_31 = mux(_a_recoded_rawIn_normDist_T_9, UInt<4>("hd"), _a_recoded_rawIn_normDist_T_30) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_32 = mux(_a_recoded_rawIn_normDist_T_10, UInt<4>("hc"), _a_recoded_rawIn_normDist_T_31) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_33 = mux(_a_recoded_rawIn_normDist_T_11, UInt<4>("hb"), _a_recoded_rawIn_normDist_T_32) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_34 = mux(_a_recoded_rawIn_normDist_T_12, UInt<4>("ha"), _a_recoded_rawIn_normDist_T_33) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_35 = mux(_a_recoded_rawIn_normDist_T_13, UInt<4>("h9"), _a_recoded_rawIn_normDist_T_34) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_36 = mux(_a_recoded_rawIn_normDist_T_14, UInt<4>("h8"), _a_recoded_rawIn_normDist_T_35) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_37 = mux(_a_recoded_rawIn_normDist_T_15, UInt<3>("h7"), _a_recoded_rawIn_normDist_T_36) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_38 = mux(_a_recoded_rawIn_normDist_T_16, UInt<3>("h6"), _a_recoded_rawIn_normDist_T_37) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_39 = mux(_a_recoded_rawIn_normDist_T_17, UInt<3>("h5"), _a_recoded_rawIn_normDist_T_38) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_40 = mux(_a_recoded_rawIn_normDist_T_18, UInt<3>("h4"), _a_recoded_rawIn_normDist_T_39) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_41 = mux(_a_recoded_rawIn_normDist_T_19, UInt<2>("h3"), _a_recoded_rawIn_normDist_T_40) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_42 = mux(_a_recoded_rawIn_normDist_T_20, UInt<2>("h2"), _a_recoded_rawIn_normDist_T_41) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_43 = mux(_a_recoded_rawIn_normDist_T_21, UInt<1>("h1"), _a_recoded_rawIn_normDist_T_42) @[Mux.scala 47:70]
    node a_recoded_rawIn_normDist = mux(_a_recoded_rawIn_normDist_T_22, UInt<1>("h0"), _a_recoded_rawIn_normDist_T_43) @[Mux.scala 47:70]
    node _a_recoded_rawIn_subnormFract_T = dshl(a_recoded_rawIn_fractIn, a_recoded_rawIn_normDist) @[rawFloatFromFN.scala 52:33]
    node _a_recoded_rawIn_subnormFract_T_1 = bits(_a_recoded_rawIn_subnormFract_T, 21, 0) @[rawFloatFromFN.scala 52:46]
    node a_recoded_rawIn_subnormFract = shl(_a_recoded_rawIn_subnormFract_T_1, 1) @[rawFloatFromFN.scala 52:64]
    node _a_recoded_rawIn_adjustedExp_T = xor(a_recoded_rawIn_normDist, UInt<9>("h1ff")) @[rawFloatFromFN.scala 55:18]
    node _a_recoded_rawIn_adjustedExp_T_1 = mux(a_recoded_rawIn_isZeroExpIn, _a_recoded_rawIn_adjustedExp_T, a_recoded_rawIn_expIn) @[rawFloatFromFN.scala 54:10]
    node _a_recoded_rawIn_adjustedExp_T_2 = mux(a_recoded_rawIn_isZeroExpIn, UInt<2>("h2"), UInt<1>("h1")) @[rawFloatFromFN.scala 58:14]
    node _a_recoded_rawIn_adjustedExp_T_3 = or(UInt<8>("h80"), _a_recoded_rawIn_adjustedExp_T_2) @[rawFloatFromFN.scala 58:9]
    node _a_recoded_rawIn_adjustedExp_T_4 = add(_a_recoded_rawIn_adjustedExp_T_1, _a_recoded_rawIn_adjustedExp_T_3) @[rawFloatFromFN.scala 57:9]
    node a_recoded_rawIn_adjustedExp = tail(_a_recoded_rawIn_adjustedExp_T_4, 1) @[rawFloatFromFN.scala 57:9]
    node a_recoded_rawIn_isZero = and(a_recoded_rawIn_isZeroExpIn, a_recoded_rawIn_isZeroFractIn) @[rawFloatFromFN.scala 60:30]
    node _a_recoded_rawIn_isSpecial_T = bits(a_recoded_rawIn_adjustedExp, 8, 7) @[rawFloatFromFN.scala 61:32]
    node a_recoded_rawIn_isSpecial = eq(_a_recoded_rawIn_isSpecial_T, UInt<2>("h3")) @[rawFloatFromFN.scala 61:57]
    wire a_recoded_rawIn : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>} @[rawFloatFromFN.scala 63:19]
    node _a_recoded_rawIn_out_isNaN_T = eq(a_recoded_rawIn_isZeroFractIn, UInt<1>("h0")) @[rawFloatFromFN.scala 64:31]
    node _a_recoded_rawIn_out_isNaN_T_1 = and(a_recoded_rawIn_isSpecial, _a_recoded_rawIn_out_isNaN_T) @[rawFloatFromFN.scala 64:28]
    a_recoded_rawIn.isNaN <= _a_recoded_rawIn_out_isNaN_T_1 @[rawFloatFromFN.scala 64:15]
    node _a_recoded_rawIn_out_isInf_T = and(a_recoded_rawIn_isSpecial, a_recoded_rawIn_isZeroFractIn) @[rawFloatFromFN.scala 65:28]
    a_recoded_rawIn.isInf <= _a_recoded_rawIn_out_isInf_T @[rawFloatFromFN.scala 65:15]
    a_recoded_rawIn.isZero <= a_recoded_rawIn_isZero @[rawFloatFromFN.scala 66:16]
    a_recoded_rawIn.sign <= a_recoded_rawIn_sign @[rawFloatFromFN.scala 67:14]
    node _a_recoded_rawIn_out_sExp_T = bits(a_recoded_rawIn_adjustedExp, 8, 0) @[rawFloatFromFN.scala 68:28]
    node _a_recoded_rawIn_out_sExp_T_1 = cvt(_a_recoded_rawIn_out_sExp_T) @[rawFloatFromFN.scala 68:42]
    a_recoded_rawIn.sExp <= _a_recoded_rawIn_out_sExp_T_1 @[rawFloatFromFN.scala 68:14]
    node _a_recoded_rawIn_out_sig_T = eq(a_recoded_rawIn_isZero, UInt<1>("h0")) @[rawFloatFromFN.scala 70:19]
    node _a_recoded_rawIn_out_sig_T_1 = cat(UInt<1>("h0"), _a_recoded_rawIn_out_sig_T) @[rawFloatFromFN.scala 70:16]
    node _a_recoded_rawIn_out_sig_T_2 = mux(a_recoded_rawIn_isZeroExpIn, a_recoded_rawIn_subnormFract, a_recoded_rawIn_fractIn) @[rawFloatFromFN.scala 70:33]
    node _a_recoded_rawIn_out_sig_T_3 = cat(_a_recoded_rawIn_out_sig_T_1, _a_recoded_rawIn_out_sig_T_2) @[rawFloatFromFN.scala 70:27]
    a_recoded_rawIn.sig <= _a_recoded_rawIn_out_sig_T_3 @[rawFloatFromFN.scala 69:13]
    node _a_recoded_T = bits(a_recoded_rawIn.sExp, 8, 6) @[recFNFromFN.scala 48:50]
    node _a_recoded_T_1 = mux(a_recoded_rawIn.isZero, UInt<3>("h0"), _a_recoded_T) @[recFNFromFN.scala 48:15]
    node _a_recoded_T_2 = mux(a_recoded_rawIn.isNaN, UInt<1>("h1"), UInt<1>("h0")) @[recFNFromFN.scala 49:20]
    node _a_recoded_T_3 = or(_a_recoded_T_1, _a_recoded_T_2) @[recFNFromFN.scala 48:76]
    node _a_recoded_T_4 = cat(a_recoded_rawIn.sign, _a_recoded_T_3) @[recFNFromFN.scala 47:20]
    node _a_recoded_T_5 = bits(a_recoded_rawIn.sExp, 5, 0) @[recFNFromFN.scala 50:23]
    node _a_recoded_T_6 = cat(_a_recoded_T_4, _a_recoded_T_5) @[recFNFromFN.scala 49:45]
    node _a_recoded_T_7 = bits(a_recoded_rawIn.sig, 22, 0) @[recFNFromFN.scala 51:22]
    node a_recoded = cat(_a_recoded_T_6, _a_recoded_T_7) @[recFNFromFN.scala 50:41]
    node b_recoded_rawIn_sign = bits(io.b, 31, 31) @[rawFloatFromFN.scala 44:18]
    node b_recoded_rawIn_expIn = bits(io.b, 30, 23) @[rawFloatFromFN.scala 45:19]
    node b_recoded_rawIn_fractIn = bits(io.b, 22, 0) @[rawFloatFromFN.scala 46:21]
    node b_recoded_rawIn_isZeroExpIn = eq(b_recoded_rawIn_expIn, UInt<1>("h0")) @[rawFloatFromFN.scala 48:30]
    node b_recoded_rawIn_isZeroFractIn = eq(b_recoded_rawIn_fractIn, UInt<1>("h0")) @[rawFloatFromFN.scala 49:34]
    node _b_recoded_rawIn_normDist_T = bits(b_recoded_rawIn_fractIn, 0, 0) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_1 = bits(b_recoded_rawIn_fractIn, 1, 1) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_2 = bits(b_recoded_rawIn_fractIn, 2, 2) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_3 = bits(b_recoded_rawIn_fractIn, 3, 3) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_4 = bits(b_recoded_rawIn_fractIn, 4, 4) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_5 = bits(b_recoded_rawIn_fractIn, 5, 5) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_6 = bits(b_recoded_rawIn_fractIn, 6, 6) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_7 = bits(b_recoded_rawIn_fractIn, 7, 7) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_8 = bits(b_recoded_rawIn_fractIn, 8, 8) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_9 = bits(b_recoded_rawIn_fractIn, 9, 9) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_10 = bits(b_recoded_rawIn_fractIn, 10, 10) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_11 = bits(b_recoded_rawIn_fractIn, 11, 11) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_12 = bits(b_recoded_rawIn_fractIn, 12, 12) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_13 = bits(b_recoded_rawIn_fractIn, 13, 13) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_14 = bits(b_recoded_rawIn_fractIn, 14, 14) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_15 = bits(b_recoded_rawIn_fractIn, 15, 15) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_16 = bits(b_recoded_rawIn_fractIn, 16, 16) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_17 = bits(b_recoded_rawIn_fractIn, 17, 17) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_18 = bits(b_recoded_rawIn_fractIn, 18, 18) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_19 = bits(b_recoded_rawIn_fractIn, 19, 19) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_20 = bits(b_recoded_rawIn_fractIn, 20, 20) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_21 = bits(b_recoded_rawIn_fractIn, 21, 21) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_22 = bits(b_recoded_rawIn_fractIn, 22, 22) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_23 = mux(_b_recoded_rawIn_normDist_T_1, UInt<5>("h15"), UInt<5>("h16")) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_24 = mux(_b_recoded_rawIn_normDist_T_2, UInt<5>("h14"), _b_recoded_rawIn_normDist_T_23) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_25 = mux(_b_recoded_rawIn_normDist_T_3, UInt<5>("h13"), _b_recoded_rawIn_normDist_T_24) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_26 = mux(_b_recoded_rawIn_normDist_T_4, UInt<5>("h12"), _b_recoded_rawIn_normDist_T_25) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_27 = mux(_b_recoded_rawIn_normDist_T_5, UInt<5>("h11"), _b_recoded_rawIn_normDist_T_26) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_28 = mux(_b_recoded_rawIn_normDist_T_6, UInt<5>("h10"), _b_recoded_rawIn_normDist_T_27) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_29 = mux(_b_recoded_rawIn_normDist_T_7, UInt<4>("hf"), _b_recoded_rawIn_normDist_T_28) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_30 = mux(_b_recoded_rawIn_normDist_T_8, UInt<4>("he"), _b_recoded_rawIn_normDist_T_29) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_31 = mux(_b_recoded_rawIn_normDist_T_9, UInt<4>("hd"), _b_recoded_rawIn_normDist_T_30) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_32 = mux(_b_recoded_rawIn_normDist_T_10, UInt<4>("hc"), _b_recoded_rawIn_normDist_T_31) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_33 = mux(_b_recoded_rawIn_normDist_T_11, UInt<4>("hb"), _b_recoded_rawIn_normDist_T_32) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_34 = mux(_b_recoded_rawIn_normDist_T_12, UInt<4>("ha"), _b_recoded_rawIn_normDist_T_33) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_35 = mux(_b_recoded_rawIn_normDist_T_13, UInt<4>("h9"), _b_recoded_rawIn_normDist_T_34) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_36 = mux(_b_recoded_rawIn_normDist_T_14, UInt<4>("h8"), _b_recoded_rawIn_normDist_T_35) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_37 = mux(_b_recoded_rawIn_normDist_T_15, UInt<3>("h7"), _b_recoded_rawIn_normDist_T_36) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_38 = mux(_b_recoded_rawIn_normDist_T_16, UInt<3>("h6"), _b_recoded_rawIn_normDist_T_37) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_39 = mux(_b_recoded_rawIn_normDist_T_17, UInt<3>("h5"), _b_recoded_rawIn_normDist_T_38) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_40 = mux(_b_recoded_rawIn_normDist_T_18, UInt<3>("h4"), _b_recoded_rawIn_normDist_T_39) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_41 = mux(_b_recoded_rawIn_normDist_T_19, UInt<2>("h3"), _b_recoded_rawIn_normDist_T_40) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_42 = mux(_b_recoded_rawIn_normDist_T_20, UInt<2>("h2"), _b_recoded_rawIn_normDist_T_41) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_43 = mux(_b_recoded_rawIn_normDist_T_21, UInt<1>("h1"), _b_recoded_rawIn_normDist_T_42) @[Mux.scala 47:70]
    node b_recoded_rawIn_normDist = mux(_b_recoded_rawIn_normDist_T_22, UInt<1>("h0"), _b_recoded_rawIn_normDist_T_43) @[Mux.scala 47:70]
    node _b_recoded_rawIn_subnormFract_T = dshl(b_recoded_rawIn_fractIn, b_recoded_rawIn_normDist) @[rawFloatFromFN.scala 52:33]
    node _b_recoded_rawIn_subnormFract_T_1 = bits(_b_recoded_rawIn_subnormFract_T, 21, 0) @[rawFloatFromFN.scala 52:46]
    node b_recoded_rawIn_subnormFract = shl(_b_recoded_rawIn_subnormFract_T_1, 1) @[rawFloatFromFN.scala 52:64]
    node _b_recoded_rawIn_adjustedExp_T = xor(b_recoded_rawIn_normDist, UInt<9>("h1ff")) @[rawFloatFromFN.scala 55:18]
    node _b_recoded_rawIn_adjustedExp_T_1 = mux(b_recoded_rawIn_isZeroExpIn, _b_recoded_rawIn_adjustedExp_T, b_recoded_rawIn_expIn) @[rawFloatFromFN.scala 54:10]
    node _b_recoded_rawIn_adjustedExp_T_2 = mux(b_recoded_rawIn_isZeroExpIn, UInt<2>("h2"), UInt<1>("h1")) @[rawFloatFromFN.scala 58:14]
    node _b_recoded_rawIn_adjustedExp_T_3 = or(UInt<8>("h80"), _b_recoded_rawIn_adjustedExp_T_2) @[rawFloatFromFN.scala 58:9]
    node _b_recoded_rawIn_adjustedExp_T_4 = add(_b_recoded_rawIn_adjustedExp_T_1, _b_recoded_rawIn_adjustedExp_T_3) @[rawFloatFromFN.scala 57:9]
    node b_recoded_rawIn_adjustedExp = tail(_b_recoded_rawIn_adjustedExp_T_4, 1) @[rawFloatFromFN.scala 57:9]
    node b_recoded_rawIn_isZero = and(b_recoded_rawIn_isZeroExpIn, b_recoded_rawIn_isZeroFractIn) @[rawFloatFromFN.scala 60:30]
    node _b_recoded_rawIn_isSpecial_T = bits(b_recoded_rawIn_adjustedExp, 8, 7) @[rawFloatFromFN.scala 61:32]
    node b_recoded_rawIn_isSpecial = eq(_b_recoded_rawIn_isSpecial_T, UInt<2>("h3")) @[rawFloatFromFN.scala 61:57]
    wire b_recoded_rawIn : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>} @[rawFloatFromFN.scala 63:19]
    node _b_recoded_rawIn_out_isNaN_T = eq(b_recoded_rawIn_isZeroFractIn, UInt<1>("h0")) @[rawFloatFromFN.scala 64:31]
    node _b_recoded_rawIn_out_isNaN_T_1 = and(b_recoded_rawIn_isSpecial, _b_recoded_rawIn_out_isNaN_T) @[rawFloatFromFN.scala 64:28]
    b_recoded_rawIn.isNaN <= _b_recoded_rawIn_out_isNaN_T_1 @[rawFloatFromFN.scala 64:15]
    node _b_recoded_rawIn_out_isInf_T = and(b_recoded_rawIn_isSpecial, b_recoded_rawIn_isZeroFractIn) @[rawFloatFromFN.scala 65:28]
    b_recoded_rawIn.isInf <= _b_recoded_rawIn_out_isInf_T @[rawFloatFromFN.scala 65:15]
    b_recoded_rawIn.isZero <= b_recoded_rawIn_isZero @[rawFloatFromFN.scala 66:16]
    b_recoded_rawIn.sign <= b_recoded_rawIn_sign @[rawFloatFromFN.scala 67:14]
    node _b_recoded_rawIn_out_sExp_T = bits(b_recoded_rawIn_adjustedExp, 8, 0) @[rawFloatFromFN.scala 68:28]
    node _b_recoded_rawIn_out_sExp_T_1 = cvt(_b_recoded_rawIn_out_sExp_T) @[rawFloatFromFN.scala 68:42]
    b_recoded_rawIn.sExp <= _b_recoded_rawIn_out_sExp_T_1 @[rawFloatFromFN.scala 68:14]
    node _b_recoded_rawIn_out_sig_T = eq(b_recoded_rawIn_isZero, UInt<1>("h0")) @[rawFloatFromFN.scala 70:19]
    node _b_recoded_rawIn_out_sig_T_1 = cat(UInt<1>("h0"), _b_recoded_rawIn_out_sig_T) @[rawFloatFromFN.scala 70:16]
    node _b_recoded_rawIn_out_sig_T_2 = mux(b_recoded_rawIn_isZeroExpIn, b_recoded_rawIn_subnormFract, b_recoded_rawIn_fractIn) @[rawFloatFromFN.scala 70:33]
    node _b_recoded_rawIn_out_sig_T_3 = cat(_b_recoded_rawIn_out_sig_T_1, _b_recoded_rawIn_out_sig_T_2) @[rawFloatFromFN.scala 70:27]
    b_recoded_rawIn.sig <= _b_recoded_rawIn_out_sig_T_3 @[rawFloatFromFN.scala 69:13]
    node _b_recoded_T = bits(b_recoded_rawIn.sExp, 8, 6) @[recFNFromFN.scala 48:50]
    node _b_recoded_T_1 = mux(b_recoded_rawIn.isZero, UInt<3>("h0"), _b_recoded_T) @[recFNFromFN.scala 48:15]
    node _b_recoded_T_2 = mux(b_recoded_rawIn.isNaN, UInt<1>("h1"), UInt<1>("h0")) @[recFNFromFN.scala 49:20]
    node _b_recoded_T_3 = or(_b_recoded_T_1, _b_recoded_T_2) @[recFNFromFN.scala 48:76]
    node _b_recoded_T_4 = cat(b_recoded_rawIn.sign, _b_recoded_T_3) @[recFNFromFN.scala 47:20]
    node _b_recoded_T_5 = bits(b_recoded_rawIn.sExp, 5, 0) @[recFNFromFN.scala 50:23]
    node _b_recoded_T_6 = cat(_b_recoded_T_4, _b_recoded_T_5) @[recFNFromFN.scala 49:45]
    node _b_recoded_T_7 = bits(b_recoded_rawIn.sig, 22, 0) @[recFNFromFN.scala 51:22]
    node b_recoded = cat(_b_recoded_T_6, _b_recoded_T_7) @[recFNFromFN.scala 50:41]
    mulRecFN.io.a <= a_recoded @[FPU.scala 95:19]
    mulRecFN.io.b <= b_recoded @[FPU.scala 96:19]
    mulRecFN.io.roundingMode <= UInt<3>("h0") @[FPU.scala 97:30]
    mulRecFN.io.detectTininess <= UInt<1>("h1") @[FPU.scala 98:32]
    node io_result_rawIn_exp = bits(mulRecFN.io.out, 31, 23) @[rawFloatFromRecFN.scala 51:21]
    node _io_result_rawIn_isZero_T = bits(io_result_rawIn_exp, 8, 6) @[rawFloatFromRecFN.scala 52:28]
    node io_result_rawIn_isZero = eq(_io_result_rawIn_isZero_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 52:53]
    node _io_result_rawIn_isSpecial_T = bits(io_result_rawIn_exp, 8, 7) @[rawFloatFromRecFN.scala 53:28]
    node io_result_rawIn_isSpecial = eq(_io_result_rawIn_isSpecial_T, UInt<2>("h3")) @[rawFloatFromRecFN.scala 53:53]
    wire io_result_rawIn : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>} @[rawFloatFromRecFN.scala 55:23]
    node _io_result_rawIn_out_isNaN_T = bits(io_result_rawIn_exp, 6, 6) @[rawFloatFromRecFN.scala 56:41]
    node _io_result_rawIn_out_isNaN_T_1 = and(io_result_rawIn_isSpecial, _io_result_rawIn_out_isNaN_T) @[rawFloatFromRecFN.scala 56:33]
    io_result_rawIn.isNaN <= _io_result_rawIn_out_isNaN_T_1 @[rawFloatFromRecFN.scala 56:20]
    node _io_result_rawIn_out_isInf_T = bits(io_result_rawIn_exp, 6, 6) @[rawFloatFromRecFN.scala 57:41]
    node _io_result_rawIn_out_isInf_T_1 = eq(_io_result_rawIn_out_isInf_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 57:36]
    node _io_result_rawIn_out_isInf_T_2 = and(io_result_rawIn_isSpecial, _io_result_rawIn_out_isInf_T_1) @[rawFloatFromRecFN.scala 57:33]
    io_result_rawIn.isInf <= _io_result_rawIn_out_isInf_T_2 @[rawFloatFromRecFN.scala 57:20]
    io_result_rawIn.isZero <= io_result_rawIn_isZero @[rawFloatFromRecFN.scala 58:20]
    node _io_result_rawIn_out_sign_T = bits(mulRecFN.io.out, 32, 32) @[rawFloatFromRecFN.scala 59:25]
    io_result_rawIn.sign <= _io_result_rawIn_out_sign_T @[rawFloatFromRecFN.scala 59:20]
    node _io_result_rawIn_out_sExp_T = cvt(io_result_rawIn_exp) @[rawFloatFromRecFN.scala 60:27]
    io_result_rawIn.sExp <= _io_result_rawIn_out_sExp_T @[rawFloatFromRecFN.scala 60:20]
    node _io_result_rawIn_out_sig_T = eq(io_result_rawIn_isZero, UInt<1>("h0")) @[rawFloatFromRecFN.scala 61:35]
    node _io_result_rawIn_out_sig_T_1 = cat(UInt<1>("h0"), _io_result_rawIn_out_sig_T) @[rawFloatFromRecFN.scala 61:32]
    node _io_result_rawIn_out_sig_T_2 = bits(mulRecFN.io.out, 22, 0) @[rawFloatFromRecFN.scala 61:49]
    node _io_result_rawIn_out_sig_T_3 = cat(_io_result_rawIn_out_sig_T_1, _io_result_rawIn_out_sig_T_2) @[rawFloatFromRecFN.scala 61:44]
    io_result_rawIn.sig <= _io_result_rawIn_out_sig_T_3 @[rawFloatFromRecFN.scala 61:20]
    node io_result_isSubnormal = lt(io_result_rawIn.sExp, asSInt(UInt<9>("h82"))) @[fNFromRecFN.scala 51:38]
    node _io_result_denormShiftDist_T = bits(io_result_rawIn.sExp, 4, 0) @[fNFromRecFN.scala 52:47]
    node _io_result_denormShiftDist_T_1 = sub(UInt<1>("h1"), _io_result_denormShiftDist_T) @[fNFromRecFN.scala 52:35]
    node io_result_denormShiftDist = tail(_io_result_denormShiftDist_T_1, 1) @[fNFromRecFN.scala 52:35]
    node _io_result_denormFract_T = shr(io_result_rawIn.sig, 1) @[fNFromRecFN.scala 53:38]
    node _io_result_denormFract_T_1 = dshr(_io_result_denormFract_T, io_result_denormShiftDist) @[fNFromRecFN.scala 53:42]
    node io_result_denormFract = bits(_io_result_denormFract_T_1, 22, 0) @[fNFromRecFN.scala 53:60]
    node _io_result_expOut_T = bits(io_result_rawIn.sExp, 7, 0) @[fNFromRecFN.scala 58:27]
    node _io_result_expOut_T_1 = sub(_io_result_expOut_T, UInt<8>("h81")) @[fNFromRecFN.scala 58:45]
    node _io_result_expOut_T_2 = tail(_io_result_expOut_T_1, 1) @[fNFromRecFN.scala 58:45]
    node _io_result_expOut_T_3 = mux(io_result_isSubnormal, UInt<1>("h0"), _io_result_expOut_T_2) @[fNFromRecFN.scala 56:16]
    node _io_result_expOut_T_4 = or(io_result_rawIn.isNaN, io_result_rawIn.isInf) @[fNFromRecFN.scala 60:44]
    node _io_result_expOut_T_5 = bits(_io_result_expOut_T_4, 0, 0) @[Bitwise.scala 77:15]
    node _io_result_expOut_T_6 = mux(_io_result_expOut_T_5, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 77:12]
    node io_result_expOut = or(_io_result_expOut_T_3, _io_result_expOut_T_6) @[fNFromRecFN.scala 60:15]
    node _io_result_fractOut_T = bits(io_result_rawIn.sig, 22, 0) @[fNFromRecFN.scala 64:48]
    node _io_result_fractOut_T_1 = mux(io_result_rawIn.isInf, UInt<1>("h0"), _io_result_fractOut_T) @[fNFromRecFN.scala 64:20]
    node io_result_fractOut = mux(io_result_isSubnormal, io_result_denormFract, _io_result_fractOut_T_1) @[fNFromRecFN.scala 62:16]
    node io_result_hi = cat(io_result_rawIn.sign, io_result_expOut) @[Cat.scala 33:92]
    node _io_result_T = cat(io_result_hi, io_result_fractOut) @[Cat.scala 33:92]
    io.result <= _io_result_T @[FPU.scala 101:15]

  module FP32DivPOW2 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<32>, flip x : UInt<12>, result : UInt<32>}

    node sign = bits(io.a, 31, 31) @[FPU.scala 168:18]
    node exponent = bits(io.a, 30, 23) @[FPU.scala 169:22]
    node mantissa = bits(io.a, 22, 0) @[FPU.scala 170:22]
    node _newExponent_T = sub(exponent, io.x) @[FPU.scala 173:30]
    node newExponent = asUInt(_newExponent_T) @[FPU.scala 173:30]
    node isLessThanZero = lt(newExponent, UInt<7>("h7f")) @[FPU.scala 176:36]
    node saturatedExponent = mux(isLessThanZero, UInt<8>("h0"), newExponent) @[FPU.scala 179:30]
    node saturatedMantissa = mux(isLessThanZero, UInt<23>("h0"), mantissa) @[FPU.scala 180:30]
    node io_result_hi = cat(UInt<1>("h0"), saturatedExponent) @[Cat.scala 33:92]
    node _io_result_T = cat(io_result_hi, saturatedMantissa) @[Cat.scala 33:92]
    io.result <= _io_result_T @[FPU.scala 183:13]

  module FP32Truncate :
    input clock : Clock
    input reset : Reset
    output io : { flip in : UInt<32>, out : UInt<32>}

    node sign = bits(io.in, 31, 31) @[FPU.scala 195:19]
    node exponent = bits(io.in, 30, 23) @[FPU.scala 196:23]
    node mantissa = bits(io.in, 22, 0) @[FPU.scala 197:23]
    wire result : UInt<32> @[FPU.scala 198:20]
    node _T = lt(exponent, UInt<7>("h7f")) @[FPU.scala 200:17]
    when _T : @[FPU.scala 200:26]
      result <= UInt<1>("h0") @[FPU.scala 202:12]
    else :
      node _T_1 = geq(exponent, UInt<8>("h96")) @[FPU.scala 203:23]
      when _T_1 : @[FPU.scala 203:33]
        result <= io.in @[FPU.scala 205:12]
      else :
        node _shift_T = sub(exponent, UInt<7>("h7f")) @[FPU.scala 208:26]
        node shift = tail(_shift_T, 1) @[FPU.scala 208:26]
        wire mask : UInt<23> @[FPU.scala 209:20]
        node _mask_T = dshl(UInt<23>("h1"), shift) @[FPU.scala 210:25]
        node _mask_T_1 = sub(_mask_T, UInt<1>("h1")) @[FPU.scala 210:35]
        node _mask_T_2 = tail(_mask_T_1, 1) @[FPU.scala 210:35]
        node _mask_T_3 = sub(UInt<5>("h17"), shift) @[FPU.scala 210:51]
        node _mask_T_4 = tail(_mask_T_3, 1) @[FPU.scala 210:51]
        node _mask_T_5 = dshl(_mask_T_2, _mask_T_4) @[FPU.scala 210:42]
        mask <= _mask_T_5 @[FPU.scala 210:10]
        wire truncated_mantissa : UInt<23> @[FPU.scala 211:34]
        node _truncated_mantissa_T = and(mantissa, mask) @[FPU.scala 212:36]
        truncated_mantissa <= _truncated_mantissa_T @[FPU.scala 212:24]
        node result_hi = cat(sign, exponent) @[Cat.scala 33:92]
        node _result_T = cat(result_hi, truncated_mantissa) @[Cat.scala 33:92]
        result <= _result_T @[FPU.scala 213:12]
    io.out <= result @[FPU.scala 216:10]

  module FP32DivPOW2INT :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<32>, flip x : UInt<12>, result : UInt<32>}

    inst FP32Div of FP32DivPOW2 @[FPU.scala 225:23]
    FP32Div.clock <= clock
    FP32Div.reset <= reset
    FP32Div.io.a <= io.a @[FPU.scala 226:16]
    FP32Div.io.x <= io.x @[FPU.scala 227:16]
    inst FP32Truncate of FP32Truncate @[FPU.scala 229:28]
    FP32Truncate.clock <= clock
    FP32Truncate.reset <= reset
    FP32Truncate.io.in <= FP32Div.io.result @[FPU.scala 230:22]
    io.result <= FP32Truncate.io.out @[FPU.scala 232:13]

  module MulFullRawFN_1 :
    output io : { flip a : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>}, flip b : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>}, invalidExc : UInt<1>, rawOut : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<48>}}

    node _notSigNaN_invalidExc_T = and(io.a.isInf, io.b.isZero) @[MulRecFN.scala 58:44]
    node _notSigNaN_invalidExc_T_1 = and(io.a.isZero, io.b.isInf) @[MulRecFN.scala 58:76]
    node notSigNaN_invalidExc = or(_notSigNaN_invalidExc_T, _notSigNaN_invalidExc_T_1) @[MulRecFN.scala 58:60]
    node notNaN_isInfOut = or(io.a.isInf, io.b.isInf) @[MulRecFN.scala 59:38]
    node notNaN_isZeroOut = or(io.a.isZero, io.b.isZero) @[MulRecFN.scala 60:40]
    node notNaN_signOut = xor(io.a.sign, io.b.sign) @[MulRecFN.scala 61:36]
    node _common_sExpOut_T = add(io.a.sExp, io.b.sExp) @[MulRecFN.scala 62:36]
    node _common_sExpOut_T_1 = tail(_common_sExpOut_T, 1) @[MulRecFN.scala 62:36]
    node _common_sExpOut_T_2 = asSInt(_common_sExpOut_T_1) @[MulRecFN.scala 62:36]
    node _common_sExpOut_T_3 = sub(_common_sExpOut_T_2, asSInt(UInt<10>("h100"))) @[MulRecFN.scala 62:48]
    node _common_sExpOut_T_4 = tail(_common_sExpOut_T_3, 1) @[MulRecFN.scala 62:48]
    node common_sExpOut = asSInt(_common_sExpOut_T_4) @[MulRecFN.scala 62:48]
    node _common_sigOut_T = mul(io.a.sig, io.b.sig) @[MulRecFN.scala 63:35]
    node common_sigOut = bits(_common_sigOut_T, 47, 0) @[MulRecFN.scala 63:46]
    node _io_invalidExc_T = bits(io.a.sig, 22, 22) @[common.scala 82:56]
    node _io_invalidExc_T_1 = eq(_io_invalidExc_T, UInt<1>("h0")) @[common.scala 82:49]
    node _io_invalidExc_T_2 = and(io.a.isNaN, _io_invalidExc_T_1) @[common.scala 82:46]
    node _io_invalidExc_T_3 = bits(io.b.sig, 22, 22) @[common.scala 82:56]
    node _io_invalidExc_T_4 = eq(_io_invalidExc_T_3, UInt<1>("h0")) @[common.scala 82:49]
    node _io_invalidExc_T_5 = and(io.b.isNaN, _io_invalidExc_T_4) @[common.scala 82:46]
    node _io_invalidExc_T_6 = or(_io_invalidExc_T_2, _io_invalidExc_T_5) @[MulRecFN.scala 66:45]
    node _io_invalidExc_T_7 = or(_io_invalidExc_T_6, notSigNaN_invalidExc) @[MulRecFN.scala 66:71]
    io.invalidExc <= _io_invalidExc_T_7 @[MulRecFN.scala 66:19]
    io.rawOut.isInf <= notNaN_isInfOut @[MulRecFN.scala 67:21]
    io.rawOut.isZero <= notNaN_isZeroOut @[MulRecFN.scala 68:22]
    io.rawOut.sExp <= common_sExpOut @[MulRecFN.scala 69:20]
    node _io_rawOut_isNaN_T = or(io.a.isNaN, io.b.isNaN) @[MulRecFN.scala 70:35]
    io.rawOut.isNaN <= _io_rawOut_isNaN_T @[MulRecFN.scala 70:21]
    io.rawOut.sign <= notNaN_signOut @[MulRecFN.scala 71:20]
    io.rawOut.sig <= common_sigOut @[MulRecFN.scala 72:19]

  module MulRawFN_1 :
    output io : { flip a : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>}, flip b : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>}, invalidExc : UInt<1>, rawOut : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<27>}}

    inst mulFullRaw of MulFullRawFN_1 @[MulRecFN.scala 84:28]
    mulFullRaw.io.a.sig <= io.a.sig @[MulRecFN.scala 86:21]
    mulFullRaw.io.a.sExp <= io.a.sExp @[MulRecFN.scala 86:21]
    mulFullRaw.io.a.sign <= io.a.sign @[MulRecFN.scala 86:21]
    mulFullRaw.io.a.isZero <= io.a.isZero @[MulRecFN.scala 86:21]
    mulFullRaw.io.a.isInf <= io.a.isInf @[MulRecFN.scala 86:21]
    mulFullRaw.io.a.isNaN <= io.a.isNaN @[MulRecFN.scala 86:21]
    mulFullRaw.io.b.sig <= io.b.sig @[MulRecFN.scala 87:21]
    mulFullRaw.io.b.sExp <= io.b.sExp @[MulRecFN.scala 87:21]
    mulFullRaw.io.b.sign <= io.b.sign @[MulRecFN.scala 87:21]
    mulFullRaw.io.b.isZero <= io.b.isZero @[MulRecFN.scala 87:21]
    mulFullRaw.io.b.isInf <= io.b.isInf @[MulRecFN.scala 87:21]
    mulFullRaw.io.b.isNaN <= io.b.isNaN @[MulRecFN.scala 87:21]
    io.invalidExc <= mulFullRaw.io.invalidExc @[MulRecFN.scala 89:19]
    io.rawOut <= mulFullRaw.io.rawOut @[MulRecFN.scala 90:15]
    node _io_rawOut_sig_T = shr(mulFullRaw.io.rawOut.sig, 22) @[MulRecFN.scala 93:15]
    node _io_rawOut_sig_T_1 = bits(mulFullRaw.io.rawOut.sig, 21, 0) @[MulRecFN.scala 93:37]
    node _io_rawOut_sig_T_2 = orr(_io_rawOut_sig_T_1) @[MulRecFN.scala 93:55]
    node _io_rawOut_sig_T_3 = cat(_io_rawOut_sig_T, _io_rawOut_sig_T_2) @[Cat.scala 33:92]
    io.rawOut.sig <= _io_rawOut_sig_T_3 @[MulRecFN.scala 91:19]

  module RoundAnyRawFNToRecFN_ie8_is26_oe8_os24_1 :
    output io : { flip invalidExc : UInt<1>, flip infiniteExc : UInt<1>, flip in : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<27>}, flip roundingMode : UInt<3>, flip detectTininess : UInt<1>, out : UInt<33>, exceptionFlags : UInt<5>}

    node roundingMode_near_even = eq(io.roundingMode, UInt<3>("h0")) @[RoundAnyRawFNToRecFN.scala 90:53]
    node roundingMode_minMag = eq(io.roundingMode, UInt<3>("h1")) @[RoundAnyRawFNToRecFN.scala 91:53]
    node roundingMode_min = eq(io.roundingMode, UInt<3>("h2")) @[RoundAnyRawFNToRecFN.scala 92:53]
    node roundingMode_max = eq(io.roundingMode, UInt<3>("h3")) @[RoundAnyRawFNToRecFN.scala 93:53]
    node roundingMode_near_maxMag = eq(io.roundingMode, UInt<3>("h4")) @[RoundAnyRawFNToRecFN.scala 94:53]
    node roundingMode_odd = eq(io.roundingMode, UInt<3>("h6")) @[RoundAnyRawFNToRecFN.scala 95:53]
    node _roundMagUp_T = and(roundingMode_min, io.in.sign) @[RoundAnyRawFNToRecFN.scala 98:27]
    node _roundMagUp_T_1 = eq(io.in.sign, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 98:66]
    node _roundMagUp_T_2 = and(roundingMode_max, _roundMagUp_T_1) @[RoundAnyRawFNToRecFN.scala 98:63]
    node roundMagUp = or(_roundMagUp_T, _roundMagUp_T_2) @[RoundAnyRawFNToRecFN.scala 98:42]
    node adjustedSig = shl(io.in.sig, 0) @[RoundAnyRawFNToRecFN.scala 114:22]
    node doShiftSigDown1 = bits(adjustedSig, 26, 26) @[RoundAnyRawFNToRecFN.scala 120:57]
    wire common_expOut : UInt<9> @[RoundAnyRawFNToRecFN.scala 122:31]
    wire common_fractOut : UInt<23> @[RoundAnyRawFNToRecFN.scala 123:31]
    wire common_overflow : UInt<1> @[RoundAnyRawFNToRecFN.scala 124:37]
    wire common_totalUnderflow : UInt<1> @[RoundAnyRawFNToRecFN.scala 125:37]
    wire common_underflow : UInt<1> @[RoundAnyRawFNToRecFN.scala 126:37]
    wire common_inexact : UInt<1> @[RoundAnyRawFNToRecFN.scala 127:37]
    node _roundMask_T = bits(io.in.sExp, 8, 0) @[RoundAnyRawFNToRecFN.scala 156:37]
    node _roundMask_T_1 = not(_roundMask_T) @[primitives.scala 52:21]
    node roundMask_msb = bits(_roundMask_T_1, 8, 8) @[primitives.scala 58:25]
    node roundMask_lsbs = bits(_roundMask_T_1, 7, 0) @[primitives.scala 59:26]
    node roundMask_msb_1 = bits(roundMask_lsbs, 7, 7) @[primitives.scala 58:25]
    node roundMask_lsbs_1 = bits(roundMask_lsbs, 6, 0) @[primitives.scala 59:26]
    node roundMask_msb_2 = bits(roundMask_lsbs_1, 6, 6) @[primitives.scala 58:25]
    node roundMask_lsbs_2 = bits(roundMask_lsbs_1, 5, 0) @[primitives.scala 59:26]
    node roundMask_shift = dshr(asSInt(UInt<65>("h10000000000000000")), roundMask_lsbs_2) @[primitives.scala 76:56]
    node _roundMask_T_2 = bits(roundMask_shift, 63, 42) @[primitives.scala 78:22]
    node _roundMask_T_3 = bits(_roundMask_T_2, 15, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_4 = shl(UInt<8>("hff"), 8) @[Bitwise.scala 107:52]
    node _roundMask_T_5 = xor(UInt<16>("hffff"), _roundMask_T_4) @[Bitwise.scala 107:21]
    node _roundMask_T_6 = shr(_roundMask_T_3, 8) @[Bitwise.scala 108:21]
    node _roundMask_T_7 = and(_roundMask_T_6, _roundMask_T_5) @[Bitwise.scala 108:31]
    node _roundMask_T_8 = bits(_roundMask_T_3, 7, 0) @[Bitwise.scala 108:46]
    node _roundMask_T_9 = shl(_roundMask_T_8, 8) @[Bitwise.scala 108:70]
    node _roundMask_T_10 = not(_roundMask_T_5) @[Bitwise.scala 108:82]
    node _roundMask_T_11 = and(_roundMask_T_9, _roundMask_T_10) @[Bitwise.scala 108:80]
    node _roundMask_T_12 = or(_roundMask_T_7, _roundMask_T_11) @[Bitwise.scala 108:39]
    node _roundMask_T_13 = bits(_roundMask_T_5, 11, 0) @[Bitwise.scala 107:28]
    node _roundMask_T_14 = shl(_roundMask_T_13, 4) @[Bitwise.scala 107:52]
    node _roundMask_T_15 = xor(_roundMask_T_5, _roundMask_T_14) @[Bitwise.scala 107:21]
    node _roundMask_T_16 = shr(_roundMask_T_12, 4) @[Bitwise.scala 108:21]
    node _roundMask_T_17 = and(_roundMask_T_16, _roundMask_T_15) @[Bitwise.scala 108:31]
    node _roundMask_T_18 = bits(_roundMask_T_12, 11, 0) @[Bitwise.scala 108:46]
    node _roundMask_T_19 = shl(_roundMask_T_18, 4) @[Bitwise.scala 108:70]
    node _roundMask_T_20 = not(_roundMask_T_15) @[Bitwise.scala 108:82]
    node _roundMask_T_21 = and(_roundMask_T_19, _roundMask_T_20) @[Bitwise.scala 108:80]
    node _roundMask_T_22 = or(_roundMask_T_17, _roundMask_T_21) @[Bitwise.scala 108:39]
    node _roundMask_T_23 = bits(_roundMask_T_15, 13, 0) @[Bitwise.scala 107:28]
    node _roundMask_T_24 = shl(_roundMask_T_23, 2) @[Bitwise.scala 107:52]
    node _roundMask_T_25 = xor(_roundMask_T_15, _roundMask_T_24) @[Bitwise.scala 107:21]
    node _roundMask_T_26 = shr(_roundMask_T_22, 2) @[Bitwise.scala 108:21]
    node _roundMask_T_27 = and(_roundMask_T_26, _roundMask_T_25) @[Bitwise.scala 108:31]
    node _roundMask_T_28 = bits(_roundMask_T_22, 13, 0) @[Bitwise.scala 108:46]
    node _roundMask_T_29 = shl(_roundMask_T_28, 2) @[Bitwise.scala 108:70]
    node _roundMask_T_30 = not(_roundMask_T_25) @[Bitwise.scala 108:82]
    node _roundMask_T_31 = and(_roundMask_T_29, _roundMask_T_30) @[Bitwise.scala 108:80]
    node _roundMask_T_32 = or(_roundMask_T_27, _roundMask_T_31) @[Bitwise.scala 108:39]
    node _roundMask_T_33 = bits(_roundMask_T_25, 14, 0) @[Bitwise.scala 107:28]
    node _roundMask_T_34 = shl(_roundMask_T_33, 1) @[Bitwise.scala 107:52]
    node _roundMask_T_35 = xor(_roundMask_T_25, _roundMask_T_34) @[Bitwise.scala 107:21]
    node _roundMask_T_36 = shr(_roundMask_T_32, 1) @[Bitwise.scala 108:21]
    node _roundMask_T_37 = and(_roundMask_T_36, _roundMask_T_35) @[Bitwise.scala 108:31]
    node _roundMask_T_38 = bits(_roundMask_T_32, 14, 0) @[Bitwise.scala 108:46]
    node _roundMask_T_39 = shl(_roundMask_T_38, 1) @[Bitwise.scala 108:70]
    node _roundMask_T_40 = not(_roundMask_T_35) @[Bitwise.scala 108:82]
    node _roundMask_T_41 = and(_roundMask_T_39, _roundMask_T_40) @[Bitwise.scala 108:80]
    node _roundMask_T_42 = or(_roundMask_T_37, _roundMask_T_41) @[Bitwise.scala 108:39]
    node _roundMask_T_43 = bits(_roundMask_T_2, 21, 16) @[Bitwise.scala 114:47]
    node _roundMask_T_44 = bits(_roundMask_T_43, 3, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_45 = bits(_roundMask_T_44, 1, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_46 = bits(_roundMask_T_45, 0, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_47 = bits(_roundMask_T_45, 1, 1) @[Bitwise.scala 114:47]
    node _roundMask_T_48 = cat(_roundMask_T_46, _roundMask_T_47) @[Cat.scala 33:92]
    node _roundMask_T_49 = bits(_roundMask_T_44, 3, 2) @[Bitwise.scala 114:47]
    node _roundMask_T_50 = bits(_roundMask_T_49, 0, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_51 = bits(_roundMask_T_49, 1, 1) @[Bitwise.scala 114:47]
    node _roundMask_T_52 = cat(_roundMask_T_50, _roundMask_T_51) @[Cat.scala 33:92]
    node _roundMask_T_53 = cat(_roundMask_T_48, _roundMask_T_52) @[Cat.scala 33:92]
    node _roundMask_T_54 = bits(_roundMask_T_43, 5, 4) @[Bitwise.scala 114:47]
    node _roundMask_T_55 = bits(_roundMask_T_54, 0, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_56 = bits(_roundMask_T_54, 1, 1) @[Bitwise.scala 114:47]
    node _roundMask_T_57 = cat(_roundMask_T_55, _roundMask_T_56) @[Cat.scala 33:92]
    node _roundMask_T_58 = cat(_roundMask_T_53, _roundMask_T_57) @[Cat.scala 33:92]
    node _roundMask_T_59 = cat(_roundMask_T_42, _roundMask_T_58) @[Cat.scala 33:92]
    node _roundMask_T_60 = not(_roundMask_T_59) @[primitives.scala 73:32]
    node _roundMask_T_61 = mux(roundMask_msb_2, UInt<1>("h0"), _roundMask_T_60) @[primitives.scala 73:21]
    node _roundMask_T_62 = not(_roundMask_T_61) @[primitives.scala 73:17]
    node _roundMask_T_63 = cat(_roundMask_T_62, UInt<3>("h7")) @[primitives.scala 68:58]
    node roundMask_msb_3 = bits(roundMask_lsbs_1, 6, 6) @[primitives.scala 58:25]
    node roundMask_lsbs_3 = bits(roundMask_lsbs_1, 5, 0) @[primitives.scala 59:26]
    node roundMask_shift_1 = dshr(asSInt(UInt<65>("h10000000000000000")), roundMask_lsbs_3) @[primitives.scala 76:56]
    node _roundMask_T_64 = bits(roundMask_shift_1, 2, 0) @[primitives.scala 78:22]
    node _roundMask_T_65 = bits(_roundMask_T_64, 1, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_66 = bits(_roundMask_T_65, 0, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_67 = bits(_roundMask_T_65, 1, 1) @[Bitwise.scala 114:47]
    node _roundMask_T_68 = cat(_roundMask_T_66, _roundMask_T_67) @[Cat.scala 33:92]
    node _roundMask_T_69 = bits(_roundMask_T_64, 2, 2) @[Bitwise.scala 114:47]
    node _roundMask_T_70 = cat(_roundMask_T_68, _roundMask_T_69) @[Cat.scala 33:92]
    node _roundMask_T_71 = mux(roundMask_msb_3, _roundMask_T_70, UInt<1>("h0")) @[primitives.scala 62:24]
    node _roundMask_T_72 = mux(roundMask_msb_1, _roundMask_T_63, _roundMask_T_71) @[primitives.scala 67:24]
    node _roundMask_T_73 = mux(roundMask_msb, _roundMask_T_72, UInt<1>("h0")) @[primitives.scala 62:24]
    node _roundMask_T_74 = or(_roundMask_T_73, doShiftSigDown1) @[RoundAnyRawFNToRecFN.scala 159:23]
    node roundMask = cat(_roundMask_T_74, UInt<2>("h3")) @[RoundAnyRawFNToRecFN.scala 159:42]
    node _shiftedRoundMask_T = cat(UInt<1>("h0"), roundMask) @[RoundAnyRawFNToRecFN.scala 162:41]
    node shiftedRoundMask = shr(_shiftedRoundMask_T, 1) @[RoundAnyRawFNToRecFN.scala 162:53]
    node _roundPosMask_T = not(shiftedRoundMask) @[RoundAnyRawFNToRecFN.scala 163:28]
    node roundPosMask = and(_roundPosMask_T, roundMask) @[RoundAnyRawFNToRecFN.scala 163:46]
    node _roundPosBit_T = and(adjustedSig, roundPosMask) @[RoundAnyRawFNToRecFN.scala 164:40]
    node roundPosBit = orr(_roundPosBit_T) @[RoundAnyRawFNToRecFN.scala 164:56]
    node _anyRoundExtra_T = and(adjustedSig, shiftedRoundMask) @[RoundAnyRawFNToRecFN.scala 165:42]
    node anyRoundExtra = orr(_anyRoundExtra_T) @[RoundAnyRawFNToRecFN.scala 165:62]
    node anyRound = or(roundPosBit, anyRoundExtra) @[RoundAnyRawFNToRecFN.scala 166:36]
    node _roundIncr_T = or(roundingMode_near_even, roundingMode_near_maxMag) @[RoundAnyRawFNToRecFN.scala 169:38]
    node _roundIncr_T_1 = and(_roundIncr_T, roundPosBit) @[RoundAnyRawFNToRecFN.scala 169:67]
    node _roundIncr_T_2 = and(roundMagUp, anyRound) @[RoundAnyRawFNToRecFN.scala 171:29]
    node roundIncr = or(_roundIncr_T_1, _roundIncr_T_2) @[RoundAnyRawFNToRecFN.scala 170:31]
    node _roundedSig_T = or(adjustedSig, roundMask) @[RoundAnyRawFNToRecFN.scala 174:32]
    node _roundedSig_T_1 = shr(_roundedSig_T, 2) @[RoundAnyRawFNToRecFN.scala 174:44]
    node _roundedSig_T_2 = add(_roundedSig_T_1, UInt<1>("h1")) @[RoundAnyRawFNToRecFN.scala 174:49]
    node _roundedSig_T_3 = and(roundingMode_near_even, roundPosBit) @[RoundAnyRawFNToRecFN.scala 175:49]
    node _roundedSig_T_4 = eq(anyRoundExtra, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 176:30]
    node _roundedSig_T_5 = and(_roundedSig_T_3, _roundedSig_T_4) @[RoundAnyRawFNToRecFN.scala 175:64]
    node _roundedSig_T_6 = shr(roundMask, 1) @[RoundAnyRawFNToRecFN.scala 177:35]
    node _roundedSig_T_7 = mux(_roundedSig_T_5, _roundedSig_T_6, UInt<26>("h0")) @[RoundAnyRawFNToRecFN.scala 175:25]
    node _roundedSig_T_8 = not(_roundedSig_T_7) @[RoundAnyRawFNToRecFN.scala 175:21]
    node _roundedSig_T_9 = and(_roundedSig_T_2, _roundedSig_T_8) @[RoundAnyRawFNToRecFN.scala 174:57]
    node _roundedSig_T_10 = not(roundMask) @[RoundAnyRawFNToRecFN.scala 180:32]
    node _roundedSig_T_11 = and(adjustedSig, _roundedSig_T_10) @[RoundAnyRawFNToRecFN.scala 180:30]
    node _roundedSig_T_12 = shr(_roundedSig_T_11, 2) @[RoundAnyRawFNToRecFN.scala 180:43]
    node _roundedSig_T_13 = and(roundingMode_odd, anyRound) @[RoundAnyRawFNToRecFN.scala 181:42]
    node _roundedSig_T_14 = shr(roundPosMask, 1) @[RoundAnyRawFNToRecFN.scala 181:67]
    node _roundedSig_T_15 = mux(_roundedSig_T_13, _roundedSig_T_14, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 181:24]
    node _roundedSig_T_16 = or(_roundedSig_T_12, _roundedSig_T_15) @[RoundAnyRawFNToRecFN.scala 180:47]
    node roundedSig = mux(roundIncr, _roundedSig_T_9, _roundedSig_T_16) @[RoundAnyRawFNToRecFN.scala 173:16]
    node _sRoundedExp_T = shr(roundedSig, 24) @[RoundAnyRawFNToRecFN.scala 185:54]
    node _sRoundedExp_T_1 = cvt(_sRoundedExp_T) @[RoundAnyRawFNToRecFN.scala 185:76]
    node sRoundedExp = add(io.in.sExp, _sRoundedExp_T_1) @[RoundAnyRawFNToRecFN.scala 185:40]
    node _common_expOut_T = bits(sRoundedExp, 8, 0) @[RoundAnyRawFNToRecFN.scala 187:37]
    common_expOut <= _common_expOut_T @[RoundAnyRawFNToRecFN.scala 187:23]
    node _common_fractOut_T = bits(roundedSig, 23, 1) @[RoundAnyRawFNToRecFN.scala 190:27]
    node _common_fractOut_T_1 = bits(roundedSig, 22, 0) @[RoundAnyRawFNToRecFN.scala 191:27]
    node _common_fractOut_T_2 = mux(doShiftSigDown1, _common_fractOut_T, _common_fractOut_T_1) @[RoundAnyRawFNToRecFN.scala 189:16]
    common_fractOut <= _common_fractOut_T_2 @[RoundAnyRawFNToRecFN.scala 188:25]
    node _common_overflow_T = shr(sRoundedExp, 7) @[RoundAnyRawFNToRecFN.scala 196:30]
    node _common_overflow_T_1 = geq(_common_overflow_T, asSInt(UInt<3>("h3"))) @[RoundAnyRawFNToRecFN.scala 196:50]
    common_overflow <= _common_overflow_T_1 @[RoundAnyRawFNToRecFN.scala 193:25]
    node _common_totalUnderflow_T = lt(sRoundedExp, asSInt(UInt<8>("h6b"))) @[RoundAnyRawFNToRecFN.scala 200:31]
    common_totalUnderflow <= _common_totalUnderflow_T @[RoundAnyRawFNToRecFN.scala 197:31]
    node _unboundedRange_roundPosBit_T = bits(adjustedSig, 2, 2) @[RoundAnyRawFNToRecFN.scala 203:45]
    node _unboundedRange_roundPosBit_T_1 = bits(adjustedSig, 1, 1) @[RoundAnyRawFNToRecFN.scala 203:61]
    node unboundedRange_roundPosBit = mux(doShiftSigDown1, _unboundedRange_roundPosBit_T, _unboundedRange_roundPosBit_T_1) @[RoundAnyRawFNToRecFN.scala 203:16]
    node _unboundedRange_anyRound_T = bits(adjustedSig, 2, 2) @[RoundAnyRawFNToRecFN.scala 205:44]
    node _unboundedRange_anyRound_T_1 = and(doShiftSigDown1, _unboundedRange_anyRound_T) @[RoundAnyRawFNToRecFN.scala 205:30]
    node _unboundedRange_anyRound_T_2 = bits(adjustedSig, 1, 0) @[RoundAnyRawFNToRecFN.scala 205:63]
    node _unboundedRange_anyRound_T_3 = orr(_unboundedRange_anyRound_T_2) @[RoundAnyRawFNToRecFN.scala 205:70]
    node unboundedRange_anyRound = or(_unboundedRange_anyRound_T_1, _unboundedRange_anyRound_T_3) @[RoundAnyRawFNToRecFN.scala 205:49]
    node _unboundedRange_roundIncr_T = or(roundingMode_near_even, roundingMode_near_maxMag) @[RoundAnyRawFNToRecFN.scala 207:38]
    node _unboundedRange_roundIncr_T_1 = and(_unboundedRange_roundIncr_T, unboundedRange_roundPosBit) @[RoundAnyRawFNToRecFN.scala 207:67]
    node _unboundedRange_roundIncr_T_2 = and(roundMagUp, unboundedRange_anyRound) @[RoundAnyRawFNToRecFN.scala 209:29]
    node unboundedRange_roundIncr = or(_unboundedRange_roundIncr_T_1, _unboundedRange_roundIncr_T_2) @[RoundAnyRawFNToRecFN.scala 208:46]
    node _roundCarry_T = bits(roundedSig, 25, 25) @[RoundAnyRawFNToRecFN.scala 212:27]
    node _roundCarry_T_1 = bits(roundedSig, 24, 24) @[RoundAnyRawFNToRecFN.scala 213:27]
    node roundCarry = mux(doShiftSigDown1, _roundCarry_T, _roundCarry_T_1) @[RoundAnyRawFNToRecFN.scala 211:16]
    node _common_underflow_T = shr(io.in.sExp, 8) @[RoundAnyRawFNToRecFN.scala 220:49]
    node _common_underflow_T_1 = leq(_common_underflow_T, asSInt(UInt<1>("h0"))) @[RoundAnyRawFNToRecFN.scala 220:64]
    node _common_underflow_T_2 = and(anyRound, _common_underflow_T_1) @[RoundAnyRawFNToRecFN.scala 220:32]
    node _common_underflow_T_3 = bits(roundMask, 3, 3) @[RoundAnyRawFNToRecFN.scala 221:57]
    node _common_underflow_T_4 = bits(roundMask, 2, 2) @[RoundAnyRawFNToRecFN.scala 221:71]
    node _common_underflow_T_5 = mux(doShiftSigDown1, _common_underflow_T_3, _common_underflow_T_4) @[RoundAnyRawFNToRecFN.scala 221:30]
    node _common_underflow_T_6 = and(_common_underflow_T_2, _common_underflow_T_5) @[RoundAnyRawFNToRecFN.scala 220:72]
    node _common_underflow_T_7 = eq(io.detectTininess, UInt<1>("h1")) @[RoundAnyRawFNToRecFN.scala 222:49]
    node _common_underflow_T_8 = bits(roundMask, 4, 4) @[RoundAnyRawFNToRecFN.scala 224:49]
    node _common_underflow_T_9 = bits(roundMask, 3, 3) @[RoundAnyRawFNToRecFN.scala 225:49]
    node _common_underflow_T_10 = mux(doShiftSigDown1, _common_underflow_T_8, _common_underflow_T_9) @[RoundAnyRawFNToRecFN.scala 223:39]
    node _common_underflow_T_11 = eq(_common_underflow_T_10, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 223:34]
    node _common_underflow_T_12 = and(_common_underflow_T_7, _common_underflow_T_11) @[RoundAnyRawFNToRecFN.scala 222:77]
    node _common_underflow_T_13 = and(_common_underflow_T_12, roundCarry) @[RoundAnyRawFNToRecFN.scala 226:38]
    node _common_underflow_T_14 = and(_common_underflow_T_13, roundPosBit) @[RoundAnyRawFNToRecFN.scala 227:45]
    node _common_underflow_T_15 = and(_common_underflow_T_14, unboundedRange_roundIncr) @[RoundAnyRawFNToRecFN.scala 227:60]
    node _common_underflow_T_16 = eq(_common_underflow_T_15, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 222:27]
    node _common_underflow_T_17 = and(_common_underflow_T_6, _common_underflow_T_16) @[RoundAnyRawFNToRecFN.scala 221:76]
    node _common_underflow_T_18 = or(common_totalUnderflow, _common_underflow_T_17) @[RoundAnyRawFNToRecFN.scala 217:40]
    common_underflow <= _common_underflow_T_18 @[RoundAnyRawFNToRecFN.scala 215:26]
    node _common_inexact_T = or(common_totalUnderflow, anyRound) @[RoundAnyRawFNToRecFN.scala 230:49]
    common_inexact <= _common_inexact_T @[RoundAnyRawFNToRecFN.scala 230:24]
    node isNaNOut = or(io.invalidExc, io.in.isNaN) @[RoundAnyRawFNToRecFN.scala 235:34]
    node notNaN_isSpecialInfOut = or(io.infiniteExc, io.in.isInf) @[RoundAnyRawFNToRecFN.scala 236:49]
    node _commonCase_T = eq(isNaNOut, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 237:22]
    node _commonCase_T_1 = eq(notNaN_isSpecialInfOut, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 237:36]
    node _commonCase_T_2 = and(_commonCase_T, _commonCase_T_1) @[RoundAnyRawFNToRecFN.scala 237:33]
    node _commonCase_T_3 = eq(io.in.isZero, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 237:64]
    node commonCase = and(_commonCase_T_2, _commonCase_T_3) @[RoundAnyRawFNToRecFN.scala 237:61]
    node overflow = and(commonCase, common_overflow) @[RoundAnyRawFNToRecFN.scala 238:32]
    node underflow = and(commonCase, common_underflow) @[RoundAnyRawFNToRecFN.scala 239:32]
    node _inexact_T = and(commonCase, common_inexact) @[RoundAnyRawFNToRecFN.scala 240:43]
    node inexact = or(overflow, _inexact_T) @[RoundAnyRawFNToRecFN.scala 240:28]
    node _overflow_roundMagUp_T = or(roundingMode_near_even, roundingMode_near_maxMag) @[RoundAnyRawFNToRecFN.scala 243:32]
    node overflow_roundMagUp = or(_overflow_roundMagUp_T, roundMagUp) @[RoundAnyRawFNToRecFN.scala 243:60]
    node _pegMinNonzeroMagOut_T = and(commonCase, common_totalUnderflow) @[RoundAnyRawFNToRecFN.scala 245:20]
    node _pegMinNonzeroMagOut_T_1 = or(roundMagUp, roundingMode_odd) @[RoundAnyRawFNToRecFN.scala 245:60]
    node pegMinNonzeroMagOut = and(_pegMinNonzeroMagOut_T, _pegMinNonzeroMagOut_T_1) @[RoundAnyRawFNToRecFN.scala 245:45]
    node _pegMaxFiniteMagOut_T = eq(overflow_roundMagUp, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 246:42]
    node pegMaxFiniteMagOut = and(overflow, _pegMaxFiniteMagOut_T) @[RoundAnyRawFNToRecFN.scala 246:39]
    node _notNaN_isInfOut_T = and(overflow, overflow_roundMagUp) @[RoundAnyRawFNToRecFN.scala 248:45]
    node notNaN_isInfOut = or(notNaN_isSpecialInfOut, _notNaN_isInfOut_T) @[RoundAnyRawFNToRecFN.scala 248:32]
    node signOut = mux(isNaNOut, UInt<1>("h0"), io.in.sign) @[RoundAnyRawFNToRecFN.scala 250:22]
    node _expOut_T = or(io.in.isZero, common_totalUnderflow) @[RoundAnyRawFNToRecFN.scala 253:32]
    node _expOut_T_1 = mux(_expOut_T, UInt<9>("h1c0"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 253:18]
    node _expOut_T_2 = not(_expOut_T_1) @[RoundAnyRawFNToRecFN.scala 253:14]
    node _expOut_T_3 = and(common_expOut, _expOut_T_2) @[RoundAnyRawFNToRecFN.scala 252:24]
    node _expOut_T_4 = not(UInt<9>("h6b")) @[RoundAnyRawFNToRecFN.scala 258:19]
    node _expOut_T_5 = mux(pegMinNonzeroMagOut, _expOut_T_4, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 257:18]
    node _expOut_T_6 = not(_expOut_T_5) @[RoundAnyRawFNToRecFN.scala 257:14]
    node _expOut_T_7 = and(_expOut_T_3, _expOut_T_6) @[RoundAnyRawFNToRecFN.scala 256:17]
    node _expOut_T_8 = mux(pegMaxFiniteMagOut, UInt<9>("h80"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 261:18]
    node _expOut_T_9 = not(_expOut_T_8) @[RoundAnyRawFNToRecFN.scala 261:14]
    node _expOut_T_10 = and(_expOut_T_7, _expOut_T_9) @[RoundAnyRawFNToRecFN.scala 260:17]
    node _expOut_T_11 = mux(notNaN_isInfOut, UInt<9>("h40"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 265:18]
    node _expOut_T_12 = not(_expOut_T_11) @[RoundAnyRawFNToRecFN.scala 265:14]
    node _expOut_T_13 = and(_expOut_T_10, _expOut_T_12) @[RoundAnyRawFNToRecFN.scala 264:17]
    node _expOut_T_14 = mux(pegMinNonzeroMagOut, UInt<9>("h6b"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 269:16]
    node _expOut_T_15 = or(_expOut_T_13, _expOut_T_14) @[RoundAnyRawFNToRecFN.scala 268:18]
    node _expOut_T_16 = mux(pegMaxFiniteMagOut, UInt<9>("h17f"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 273:16]
    node _expOut_T_17 = or(_expOut_T_15, _expOut_T_16) @[RoundAnyRawFNToRecFN.scala 272:15]
    node _expOut_T_18 = mux(notNaN_isInfOut, UInt<9>("h180"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 277:16]
    node _expOut_T_19 = or(_expOut_T_17, _expOut_T_18) @[RoundAnyRawFNToRecFN.scala 276:15]
    node _expOut_T_20 = mux(isNaNOut, UInt<9>("h1c0"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 278:16]
    node expOut = or(_expOut_T_19, _expOut_T_20) @[RoundAnyRawFNToRecFN.scala 277:73]
    node _fractOut_T = or(isNaNOut, io.in.isZero) @[RoundAnyRawFNToRecFN.scala 280:22]
    node _fractOut_T_1 = or(_fractOut_T, common_totalUnderflow) @[RoundAnyRawFNToRecFN.scala 280:38]
    node _fractOut_T_2 = mux(isNaNOut, UInt<23>("h400000"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 281:16]
    node _fractOut_T_3 = mux(_fractOut_T_1, _fractOut_T_2, common_fractOut) @[RoundAnyRawFNToRecFN.scala 280:12]
    node _fractOut_T_4 = bits(pegMaxFiniteMagOut, 0, 0) @[Bitwise.scala 77:15]
    node _fractOut_T_5 = mux(_fractOut_T_4, UInt<23>("h7fffff"), UInt<23>("h0")) @[Bitwise.scala 77:12]
    node fractOut = or(_fractOut_T_3, _fractOut_T_5) @[RoundAnyRawFNToRecFN.scala 283:11]
    node _io_out_T = cat(signOut, expOut) @[RoundAnyRawFNToRecFN.scala 286:23]
    node _io_out_T_1 = cat(_io_out_T, fractOut) @[RoundAnyRawFNToRecFN.scala 286:33]
    io.out <= _io_out_T_1 @[RoundAnyRawFNToRecFN.scala 286:12]
    node _io_exceptionFlags_T = cat(io.invalidExc, io.infiniteExc) @[RoundAnyRawFNToRecFN.scala 288:23]
    node _io_exceptionFlags_T_1 = cat(_io_exceptionFlags_T, overflow) @[RoundAnyRawFNToRecFN.scala 288:41]
    node _io_exceptionFlags_T_2 = cat(_io_exceptionFlags_T_1, underflow) @[RoundAnyRawFNToRecFN.scala 288:53]
    node _io_exceptionFlags_T_3 = cat(_io_exceptionFlags_T_2, inexact) @[RoundAnyRawFNToRecFN.scala 288:66]
    io.exceptionFlags <= _io_exceptionFlags_T_3 @[RoundAnyRawFNToRecFN.scala 287:23]

  module RoundRawFNToRecFN_e8_s24_1 :
    output io : { flip invalidExc : UInt<1>, flip infiniteExc : UInt<1>, flip in : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<27>}, flip roundingMode : UInt<3>, flip detectTininess : UInt<1>, out : UInt<33>, exceptionFlags : UInt<5>}

    inst roundAnyRawFNToRecFN of RoundAnyRawFNToRecFN_ie8_is26_oe8_os24_1 @[RoundAnyRawFNToRecFN.scala 310:15]
    roundAnyRawFNToRecFN.io.invalidExc <= io.invalidExc @[RoundAnyRawFNToRecFN.scala 313:44]
    roundAnyRawFNToRecFN.io.infiniteExc <= io.infiniteExc @[RoundAnyRawFNToRecFN.scala 314:44]
    roundAnyRawFNToRecFN.io.in.sig <= io.in.sig @[RoundAnyRawFNToRecFN.scala 315:44]
    roundAnyRawFNToRecFN.io.in.sExp <= io.in.sExp @[RoundAnyRawFNToRecFN.scala 315:44]
    roundAnyRawFNToRecFN.io.in.sign <= io.in.sign @[RoundAnyRawFNToRecFN.scala 315:44]
    roundAnyRawFNToRecFN.io.in.isZero <= io.in.isZero @[RoundAnyRawFNToRecFN.scala 315:44]
    roundAnyRawFNToRecFN.io.in.isInf <= io.in.isInf @[RoundAnyRawFNToRecFN.scala 315:44]
    roundAnyRawFNToRecFN.io.in.isNaN <= io.in.isNaN @[RoundAnyRawFNToRecFN.scala 315:44]
    roundAnyRawFNToRecFN.io.roundingMode <= io.roundingMode @[RoundAnyRawFNToRecFN.scala 316:44]
    roundAnyRawFNToRecFN.io.detectTininess <= io.detectTininess @[RoundAnyRawFNToRecFN.scala 317:44]
    io.out <= roundAnyRawFNToRecFN.io.out @[RoundAnyRawFNToRecFN.scala 318:23]
    io.exceptionFlags <= roundAnyRawFNToRecFN.io.exceptionFlags @[RoundAnyRawFNToRecFN.scala 319:23]

  module MulRecFN_1 :
    output io : { flip a : UInt<33>, flip b : UInt<33>, flip roundingMode : UInt<3>, flip detectTininess : UInt<1>, out : UInt<33>, exceptionFlags : UInt<5>}

    inst mulRawFN of MulRawFN_1 @[MulRecFN.scala 113:26]
    node mulRawFN_io_a_exp = bits(io.a, 31, 23) @[rawFloatFromRecFN.scala 51:21]
    node _mulRawFN_io_a_isZero_T = bits(mulRawFN_io_a_exp, 8, 6) @[rawFloatFromRecFN.scala 52:28]
    node mulRawFN_io_a_isZero = eq(_mulRawFN_io_a_isZero_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 52:53]
    node _mulRawFN_io_a_isSpecial_T = bits(mulRawFN_io_a_exp, 8, 7) @[rawFloatFromRecFN.scala 53:28]
    node mulRawFN_io_a_isSpecial = eq(_mulRawFN_io_a_isSpecial_T, UInt<2>("h3")) @[rawFloatFromRecFN.scala 53:53]
    wire mulRawFN_io_a_out : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>} @[rawFloatFromRecFN.scala 55:23]
    node _mulRawFN_io_a_out_isNaN_T = bits(mulRawFN_io_a_exp, 6, 6) @[rawFloatFromRecFN.scala 56:41]
    node _mulRawFN_io_a_out_isNaN_T_1 = and(mulRawFN_io_a_isSpecial, _mulRawFN_io_a_out_isNaN_T) @[rawFloatFromRecFN.scala 56:33]
    mulRawFN_io_a_out.isNaN <= _mulRawFN_io_a_out_isNaN_T_1 @[rawFloatFromRecFN.scala 56:20]
    node _mulRawFN_io_a_out_isInf_T = bits(mulRawFN_io_a_exp, 6, 6) @[rawFloatFromRecFN.scala 57:41]
    node _mulRawFN_io_a_out_isInf_T_1 = eq(_mulRawFN_io_a_out_isInf_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 57:36]
    node _mulRawFN_io_a_out_isInf_T_2 = and(mulRawFN_io_a_isSpecial, _mulRawFN_io_a_out_isInf_T_1) @[rawFloatFromRecFN.scala 57:33]
    mulRawFN_io_a_out.isInf <= _mulRawFN_io_a_out_isInf_T_2 @[rawFloatFromRecFN.scala 57:20]
    mulRawFN_io_a_out.isZero <= mulRawFN_io_a_isZero @[rawFloatFromRecFN.scala 58:20]
    node _mulRawFN_io_a_out_sign_T = bits(io.a, 32, 32) @[rawFloatFromRecFN.scala 59:25]
    mulRawFN_io_a_out.sign <= _mulRawFN_io_a_out_sign_T @[rawFloatFromRecFN.scala 59:20]
    node _mulRawFN_io_a_out_sExp_T = cvt(mulRawFN_io_a_exp) @[rawFloatFromRecFN.scala 60:27]
    mulRawFN_io_a_out.sExp <= _mulRawFN_io_a_out_sExp_T @[rawFloatFromRecFN.scala 60:20]
    node _mulRawFN_io_a_out_sig_T = eq(mulRawFN_io_a_isZero, UInt<1>("h0")) @[rawFloatFromRecFN.scala 61:35]
    node _mulRawFN_io_a_out_sig_T_1 = cat(UInt<1>("h0"), _mulRawFN_io_a_out_sig_T) @[rawFloatFromRecFN.scala 61:32]
    node _mulRawFN_io_a_out_sig_T_2 = bits(io.a, 22, 0) @[rawFloatFromRecFN.scala 61:49]
    node _mulRawFN_io_a_out_sig_T_3 = cat(_mulRawFN_io_a_out_sig_T_1, _mulRawFN_io_a_out_sig_T_2) @[rawFloatFromRecFN.scala 61:44]
    mulRawFN_io_a_out.sig <= _mulRawFN_io_a_out_sig_T_3 @[rawFloatFromRecFN.scala 61:20]
    mulRawFN.io.a.sig <= mulRawFN_io_a_out.sig @[MulRecFN.scala 115:19]
    mulRawFN.io.a.sExp <= mulRawFN_io_a_out.sExp @[MulRecFN.scala 115:19]
    mulRawFN.io.a.sign <= mulRawFN_io_a_out.sign @[MulRecFN.scala 115:19]
    mulRawFN.io.a.isZero <= mulRawFN_io_a_out.isZero @[MulRecFN.scala 115:19]
    mulRawFN.io.a.isInf <= mulRawFN_io_a_out.isInf @[MulRecFN.scala 115:19]
    mulRawFN.io.a.isNaN <= mulRawFN_io_a_out.isNaN @[MulRecFN.scala 115:19]
    node mulRawFN_io_b_exp = bits(io.b, 31, 23) @[rawFloatFromRecFN.scala 51:21]
    node _mulRawFN_io_b_isZero_T = bits(mulRawFN_io_b_exp, 8, 6) @[rawFloatFromRecFN.scala 52:28]
    node mulRawFN_io_b_isZero = eq(_mulRawFN_io_b_isZero_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 52:53]
    node _mulRawFN_io_b_isSpecial_T = bits(mulRawFN_io_b_exp, 8, 7) @[rawFloatFromRecFN.scala 53:28]
    node mulRawFN_io_b_isSpecial = eq(_mulRawFN_io_b_isSpecial_T, UInt<2>("h3")) @[rawFloatFromRecFN.scala 53:53]
    wire mulRawFN_io_b_out : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>} @[rawFloatFromRecFN.scala 55:23]
    node _mulRawFN_io_b_out_isNaN_T = bits(mulRawFN_io_b_exp, 6, 6) @[rawFloatFromRecFN.scala 56:41]
    node _mulRawFN_io_b_out_isNaN_T_1 = and(mulRawFN_io_b_isSpecial, _mulRawFN_io_b_out_isNaN_T) @[rawFloatFromRecFN.scala 56:33]
    mulRawFN_io_b_out.isNaN <= _mulRawFN_io_b_out_isNaN_T_1 @[rawFloatFromRecFN.scala 56:20]
    node _mulRawFN_io_b_out_isInf_T = bits(mulRawFN_io_b_exp, 6, 6) @[rawFloatFromRecFN.scala 57:41]
    node _mulRawFN_io_b_out_isInf_T_1 = eq(_mulRawFN_io_b_out_isInf_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 57:36]
    node _mulRawFN_io_b_out_isInf_T_2 = and(mulRawFN_io_b_isSpecial, _mulRawFN_io_b_out_isInf_T_1) @[rawFloatFromRecFN.scala 57:33]
    mulRawFN_io_b_out.isInf <= _mulRawFN_io_b_out_isInf_T_2 @[rawFloatFromRecFN.scala 57:20]
    mulRawFN_io_b_out.isZero <= mulRawFN_io_b_isZero @[rawFloatFromRecFN.scala 58:20]
    node _mulRawFN_io_b_out_sign_T = bits(io.b, 32, 32) @[rawFloatFromRecFN.scala 59:25]
    mulRawFN_io_b_out.sign <= _mulRawFN_io_b_out_sign_T @[rawFloatFromRecFN.scala 59:20]
    node _mulRawFN_io_b_out_sExp_T = cvt(mulRawFN_io_b_exp) @[rawFloatFromRecFN.scala 60:27]
    mulRawFN_io_b_out.sExp <= _mulRawFN_io_b_out_sExp_T @[rawFloatFromRecFN.scala 60:20]
    node _mulRawFN_io_b_out_sig_T = eq(mulRawFN_io_b_isZero, UInt<1>("h0")) @[rawFloatFromRecFN.scala 61:35]
    node _mulRawFN_io_b_out_sig_T_1 = cat(UInt<1>("h0"), _mulRawFN_io_b_out_sig_T) @[rawFloatFromRecFN.scala 61:32]
    node _mulRawFN_io_b_out_sig_T_2 = bits(io.b, 22, 0) @[rawFloatFromRecFN.scala 61:49]
    node _mulRawFN_io_b_out_sig_T_3 = cat(_mulRawFN_io_b_out_sig_T_1, _mulRawFN_io_b_out_sig_T_2) @[rawFloatFromRecFN.scala 61:44]
    mulRawFN_io_b_out.sig <= _mulRawFN_io_b_out_sig_T_3 @[rawFloatFromRecFN.scala 61:20]
    mulRawFN.io.b.sig <= mulRawFN_io_b_out.sig @[MulRecFN.scala 116:19]
    mulRawFN.io.b.sExp <= mulRawFN_io_b_out.sExp @[MulRecFN.scala 116:19]
    mulRawFN.io.b.sign <= mulRawFN_io_b_out.sign @[MulRecFN.scala 116:19]
    mulRawFN.io.b.isZero <= mulRawFN_io_b_out.isZero @[MulRecFN.scala 116:19]
    mulRawFN.io.b.isInf <= mulRawFN_io_b_out.isInf @[MulRecFN.scala 116:19]
    mulRawFN.io.b.isNaN <= mulRawFN_io_b_out.isNaN @[MulRecFN.scala 116:19]
    inst roundRawFNToRecFN of RoundRawFNToRecFN_e8_s24_1 @[MulRecFN.scala 121:15]
    roundRawFNToRecFN.io.invalidExc <= mulRawFN.io.invalidExc @[MulRecFN.scala 122:39]
    roundRawFNToRecFN.io.infiniteExc <= UInt<1>("h0") @[MulRecFN.scala 123:39]
    roundRawFNToRecFN.io.in.sig <= mulRawFN.io.rawOut.sig @[MulRecFN.scala 124:39]
    roundRawFNToRecFN.io.in.sExp <= mulRawFN.io.rawOut.sExp @[MulRecFN.scala 124:39]
    roundRawFNToRecFN.io.in.sign <= mulRawFN.io.rawOut.sign @[MulRecFN.scala 124:39]
    roundRawFNToRecFN.io.in.isZero <= mulRawFN.io.rawOut.isZero @[MulRecFN.scala 124:39]
    roundRawFNToRecFN.io.in.isInf <= mulRawFN.io.rawOut.isInf @[MulRecFN.scala 124:39]
    roundRawFNToRecFN.io.in.isNaN <= mulRawFN.io.rawOut.isNaN @[MulRecFN.scala 124:39]
    roundRawFNToRecFN.io.roundingMode <= io.roundingMode @[MulRecFN.scala 125:39]
    roundRawFNToRecFN.io.detectTininess <= io.detectTininess @[MulRecFN.scala 126:41]
    io.out <= roundRawFNToRecFN.io.out @[MulRecFN.scala 127:23]
    io.exceptionFlags <= roundRawFNToRecFN.io.exceptionFlags @[MulRecFN.scala 128:23]

  module FP32Multiplier_1 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<32>, flip b : UInt<32>, result : UInt<32>}

    inst mulRecFN of MulRecFN_1 @[FPU.scala 88:26]
    node a_recoded_rawIn_sign = bits(io.a, 31, 31) @[rawFloatFromFN.scala 44:18]
    node a_recoded_rawIn_expIn = bits(io.a, 30, 23) @[rawFloatFromFN.scala 45:19]
    node a_recoded_rawIn_fractIn = bits(io.a, 22, 0) @[rawFloatFromFN.scala 46:21]
    node a_recoded_rawIn_isZeroExpIn = eq(a_recoded_rawIn_expIn, UInt<1>("h0")) @[rawFloatFromFN.scala 48:30]
    node a_recoded_rawIn_isZeroFractIn = eq(a_recoded_rawIn_fractIn, UInt<1>("h0")) @[rawFloatFromFN.scala 49:34]
    node _a_recoded_rawIn_normDist_T = bits(a_recoded_rawIn_fractIn, 0, 0) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_1 = bits(a_recoded_rawIn_fractIn, 1, 1) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_2 = bits(a_recoded_rawIn_fractIn, 2, 2) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_3 = bits(a_recoded_rawIn_fractIn, 3, 3) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_4 = bits(a_recoded_rawIn_fractIn, 4, 4) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_5 = bits(a_recoded_rawIn_fractIn, 5, 5) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_6 = bits(a_recoded_rawIn_fractIn, 6, 6) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_7 = bits(a_recoded_rawIn_fractIn, 7, 7) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_8 = bits(a_recoded_rawIn_fractIn, 8, 8) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_9 = bits(a_recoded_rawIn_fractIn, 9, 9) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_10 = bits(a_recoded_rawIn_fractIn, 10, 10) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_11 = bits(a_recoded_rawIn_fractIn, 11, 11) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_12 = bits(a_recoded_rawIn_fractIn, 12, 12) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_13 = bits(a_recoded_rawIn_fractIn, 13, 13) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_14 = bits(a_recoded_rawIn_fractIn, 14, 14) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_15 = bits(a_recoded_rawIn_fractIn, 15, 15) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_16 = bits(a_recoded_rawIn_fractIn, 16, 16) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_17 = bits(a_recoded_rawIn_fractIn, 17, 17) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_18 = bits(a_recoded_rawIn_fractIn, 18, 18) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_19 = bits(a_recoded_rawIn_fractIn, 19, 19) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_20 = bits(a_recoded_rawIn_fractIn, 20, 20) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_21 = bits(a_recoded_rawIn_fractIn, 21, 21) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_22 = bits(a_recoded_rawIn_fractIn, 22, 22) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_23 = mux(_a_recoded_rawIn_normDist_T_1, UInt<5>("h15"), UInt<5>("h16")) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_24 = mux(_a_recoded_rawIn_normDist_T_2, UInt<5>("h14"), _a_recoded_rawIn_normDist_T_23) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_25 = mux(_a_recoded_rawIn_normDist_T_3, UInt<5>("h13"), _a_recoded_rawIn_normDist_T_24) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_26 = mux(_a_recoded_rawIn_normDist_T_4, UInt<5>("h12"), _a_recoded_rawIn_normDist_T_25) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_27 = mux(_a_recoded_rawIn_normDist_T_5, UInt<5>("h11"), _a_recoded_rawIn_normDist_T_26) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_28 = mux(_a_recoded_rawIn_normDist_T_6, UInt<5>("h10"), _a_recoded_rawIn_normDist_T_27) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_29 = mux(_a_recoded_rawIn_normDist_T_7, UInt<4>("hf"), _a_recoded_rawIn_normDist_T_28) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_30 = mux(_a_recoded_rawIn_normDist_T_8, UInt<4>("he"), _a_recoded_rawIn_normDist_T_29) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_31 = mux(_a_recoded_rawIn_normDist_T_9, UInt<4>("hd"), _a_recoded_rawIn_normDist_T_30) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_32 = mux(_a_recoded_rawIn_normDist_T_10, UInt<4>("hc"), _a_recoded_rawIn_normDist_T_31) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_33 = mux(_a_recoded_rawIn_normDist_T_11, UInt<4>("hb"), _a_recoded_rawIn_normDist_T_32) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_34 = mux(_a_recoded_rawIn_normDist_T_12, UInt<4>("ha"), _a_recoded_rawIn_normDist_T_33) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_35 = mux(_a_recoded_rawIn_normDist_T_13, UInt<4>("h9"), _a_recoded_rawIn_normDist_T_34) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_36 = mux(_a_recoded_rawIn_normDist_T_14, UInt<4>("h8"), _a_recoded_rawIn_normDist_T_35) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_37 = mux(_a_recoded_rawIn_normDist_T_15, UInt<3>("h7"), _a_recoded_rawIn_normDist_T_36) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_38 = mux(_a_recoded_rawIn_normDist_T_16, UInt<3>("h6"), _a_recoded_rawIn_normDist_T_37) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_39 = mux(_a_recoded_rawIn_normDist_T_17, UInt<3>("h5"), _a_recoded_rawIn_normDist_T_38) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_40 = mux(_a_recoded_rawIn_normDist_T_18, UInt<3>("h4"), _a_recoded_rawIn_normDist_T_39) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_41 = mux(_a_recoded_rawIn_normDist_T_19, UInt<2>("h3"), _a_recoded_rawIn_normDist_T_40) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_42 = mux(_a_recoded_rawIn_normDist_T_20, UInt<2>("h2"), _a_recoded_rawIn_normDist_T_41) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_43 = mux(_a_recoded_rawIn_normDist_T_21, UInt<1>("h1"), _a_recoded_rawIn_normDist_T_42) @[Mux.scala 47:70]
    node a_recoded_rawIn_normDist = mux(_a_recoded_rawIn_normDist_T_22, UInt<1>("h0"), _a_recoded_rawIn_normDist_T_43) @[Mux.scala 47:70]
    node _a_recoded_rawIn_subnormFract_T = dshl(a_recoded_rawIn_fractIn, a_recoded_rawIn_normDist) @[rawFloatFromFN.scala 52:33]
    node _a_recoded_rawIn_subnormFract_T_1 = bits(_a_recoded_rawIn_subnormFract_T, 21, 0) @[rawFloatFromFN.scala 52:46]
    node a_recoded_rawIn_subnormFract = shl(_a_recoded_rawIn_subnormFract_T_1, 1) @[rawFloatFromFN.scala 52:64]
    node _a_recoded_rawIn_adjustedExp_T = xor(a_recoded_rawIn_normDist, UInt<9>("h1ff")) @[rawFloatFromFN.scala 55:18]
    node _a_recoded_rawIn_adjustedExp_T_1 = mux(a_recoded_rawIn_isZeroExpIn, _a_recoded_rawIn_adjustedExp_T, a_recoded_rawIn_expIn) @[rawFloatFromFN.scala 54:10]
    node _a_recoded_rawIn_adjustedExp_T_2 = mux(a_recoded_rawIn_isZeroExpIn, UInt<2>("h2"), UInt<1>("h1")) @[rawFloatFromFN.scala 58:14]
    node _a_recoded_rawIn_adjustedExp_T_3 = or(UInt<8>("h80"), _a_recoded_rawIn_adjustedExp_T_2) @[rawFloatFromFN.scala 58:9]
    node _a_recoded_rawIn_adjustedExp_T_4 = add(_a_recoded_rawIn_adjustedExp_T_1, _a_recoded_rawIn_adjustedExp_T_3) @[rawFloatFromFN.scala 57:9]
    node a_recoded_rawIn_adjustedExp = tail(_a_recoded_rawIn_adjustedExp_T_4, 1) @[rawFloatFromFN.scala 57:9]
    node a_recoded_rawIn_isZero = and(a_recoded_rawIn_isZeroExpIn, a_recoded_rawIn_isZeroFractIn) @[rawFloatFromFN.scala 60:30]
    node _a_recoded_rawIn_isSpecial_T = bits(a_recoded_rawIn_adjustedExp, 8, 7) @[rawFloatFromFN.scala 61:32]
    node a_recoded_rawIn_isSpecial = eq(_a_recoded_rawIn_isSpecial_T, UInt<2>("h3")) @[rawFloatFromFN.scala 61:57]
    wire a_recoded_rawIn : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>} @[rawFloatFromFN.scala 63:19]
    node _a_recoded_rawIn_out_isNaN_T = eq(a_recoded_rawIn_isZeroFractIn, UInt<1>("h0")) @[rawFloatFromFN.scala 64:31]
    node _a_recoded_rawIn_out_isNaN_T_1 = and(a_recoded_rawIn_isSpecial, _a_recoded_rawIn_out_isNaN_T) @[rawFloatFromFN.scala 64:28]
    a_recoded_rawIn.isNaN <= _a_recoded_rawIn_out_isNaN_T_1 @[rawFloatFromFN.scala 64:15]
    node _a_recoded_rawIn_out_isInf_T = and(a_recoded_rawIn_isSpecial, a_recoded_rawIn_isZeroFractIn) @[rawFloatFromFN.scala 65:28]
    a_recoded_rawIn.isInf <= _a_recoded_rawIn_out_isInf_T @[rawFloatFromFN.scala 65:15]
    a_recoded_rawIn.isZero <= a_recoded_rawIn_isZero @[rawFloatFromFN.scala 66:16]
    a_recoded_rawIn.sign <= a_recoded_rawIn_sign @[rawFloatFromFN.scala 67:14]
    node _a_recoded_rawIn_out_sExp_T = bits(a_recoded_rawIn_adjustedExp, 8, 0) @[rawFloatFromFN.scala 68:28]
    node _a_recoded_rawIn_out_sExp_T_1 = cvt(_a_recoded_rawIn_out_sExp_T) @[rawFloatFromFN.scala 68:42]
    a_recoded_rawIn.sExp <= _a_recoded_rawIn_out_sExp_T_1 @[rawFloatFromFN.scala 68:14]
    node _a_recoded_rawIn_out_sig_T = eq(a_recoded_rawIn_isZero, UInt<1>("h0")) @[rawFloatFromFN.scala 70:19]
    node _a_recoded_rawIn_out_sig_T_1 = cat(UInt<1>("h0"), _a_recoded_rawIn_out_sig_T) @[rawFloatFromFN.scala 70:16]
    node _a_recoded_rawIn_out_sig_T_2 = mux(a_recoded_rawIn_isZeroExpIn, a_recoded_rawIn_subnormFract, a_recoded_rawIn_fractIn) @[rawFloatFromFN.scala 70:33]
    node _a_recoded_rawIn_out_sig_T_3 = cat(_a_recoded_rawIn_out_sig_T_1, _a_recoded_rawIn_out_sig_T_2) @[rawFloatFromFN.scala 70:27]
    a_recoded_rawIn.sig <= _a_recoded_rawIn_out_sig_T_3 @[rawFloatFromFN.scala 69:13]
    node _a_recoded_T = bits(a_recoded_rawIn.sExp, 8, 6) @[recFNFromFN.scala 48:50]
    node _a_recoded_T_1 = mux(a_recoded_rawIn.isZero, UInt<3>("h0"), _a_recoded_T) @[recFNFromFN.scala 48:15]
    node _a_recoded_T_2 = mux(a_recoded_rawIn.isNaN, UInt<1>("h1"), UInt<1>("h0")) @[recFNFromFN.scala 49:20]
    node _a_recoded_T_3 = or(_a_recoded_T_1, _a_recoded_T_2) @[recFNFromFN.scala 48:76]
    node _a_recoded_T_4 = cat(a_recoded_rawIn.sign, _a_recoded_T_3) @[recFNFromFN.scala 47:20]
    node _a_recoded_T_5 = bits(a_recoded_rawIn.sExp, 5, 0) @[recFNFromFN.scala 50:23]
    node _a_recoded_T_6 = cat(_a_recoded_T_4, _a_recoded_T_5) @[recFNFromFN.scala 49:45]
    node _a_recoded_T_7 = bits(a_recoded_rawIn.sig, 22, 0) @[recFNFromFN.scala 51:22]
    node a_recoded = cat(_a_recoded_T_6, _a_recoded_T_7) @[recFNFromFN.scala 50:41]
    node b_recoded_rawIn_sign = bits(io.b, 31, 31) @[rawFloatFromFN.scala 44:18]
    node b_recoded_rawIn_expIn = bits(io.b, 30, 23) @[rawFloatFromFN.scala 45:19]
    node b_recoded_rawIn_fractIn = bits(io.b, 22, 0) @[rawFloatFromFN.scala 46:21]
    node b_recoded_rawIn_isZeroExpIn = eq(b_recoded_rawIn_expIn, UInt<1>("h0")) @[rawFloatFromFN.scala 48:30]
    node b_recoded_rawIn_isZeroFractIn = eq(b_recoded_rawIn_fractIn, UInt<1>("h0")) @[rawFloatFromFN.scala 49:34]
    node _b_recoded_rawIn_normDist_T = bits(b_recoded_rawIn_fractIn, 0, 0) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_1 = bits(b_recoded_rawIn_fractIn, 1, 1) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_2 = bits(b_recoded_rawIn_fractIn, 2, 2) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_3 = bits(b_recoded_rawIn_fractIn, 3, 3) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_4 = bits(b_recoded_rawIn_fractIn, 4, 4) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_5 = bits(b_recoded_rawIn_fractIn, 5, 5) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_6 = bits(b_recoded_rawIn_fractIn, 6, 6) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_7 = bits(b_recoded_rawIn_fractIn, 7, 7) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_8 = bits(b_recoded_rawIn_fractIn, 8, 8) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_9 = bits(b_recoded_rawIn_fractIn, 9, 9) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_10 = bits(b_recoded_rawIn_fractIn, 10, 10) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_11 = bits(b_recoded_rawIn_fractIn, 11, 11) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_12 = bits(b_recoded_rawIn_fractIn, 12, 12) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_13 = bits(b_recoded_rawIn_fractIn, 13, 13) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_14 = bits(b_recoded_rawIn_fractIn, 14, 14) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_15 = bits(b_recoded_rawIn_fractIn, 15, 15) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_16 = bits(b_recoded_rawIn_fractIn, 16, 16) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_17 = bits(b_recoded_rawIn_fractIn, 17, 17) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_18 = bits(b_recoded_rawIn_fractIn, 18, 18) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_19 = bits(b_recoded_rawIn_fractIn, 19, 19) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_20 = bits(b_recoded_rawIn_fractIn, 20, 20) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_21 = bits(b_recoded_rawIn_fractIn, 21, 21) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_22 = bits(b_recoded_rawIn_fractIn, 22, 22) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_23 = mux(_b_recoded_rawIn_normDist_T_1, UInt<5>("h15"), UInt<5>("h16")) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_24 = mux(_b_recoded_rawIn_normDist_T_2, UInt<5>("h14"), _b_recoded_rawIn_normDist_T_23) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_25 = mux(_b_recoded_rawIn_normDist_T_3, UInt<5>("h13"), _b_recoded_rawIn_normDist_T_24) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_26 = mux(_b_recoded_rawIn_normDist_T_4, UInt<5>("h12"), _b_recoded_rawIn_normDist_T_25) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_27 = mux(_b_recoded_rawIn_normDist_T_5, UInt<5>("h11"), _b_recoded_rawIn_normDist_T_26) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_28 = mux(_b_recoded_rawIn_normDist_T_6, UInt<5>("h10"), _b_recoded_rawIn_normDist_T_27) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_29 = mux(_b_recoded_rawIn_normDist_T_7, UInt<4>("hf"), _b_recoded_rawIn_normDist_T_28) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_30 = mux(_b_recoded_rawIn_normDist_T_8, UInt<4>("he"), _b_recoded_rawIn_normDist_T_29) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_31 = mux(_b_recoded_rawIn_normDist_T_9, UInt<4>("hd"), _b_recoded_rawIn_normDist_T_30) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_32 = mux(_b_recoded_rawIn_normDist_T_10, UInt<4>("hc"), _b_recoded_rawIn_normDist_T_31) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_33 = mux(_b_recoded_rawIn_normDist_T_11, UInt<4>("hb"), _b_recoded_rawIn_normDist_T_32) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_34 = mux(_b_recoded_rawIn_normDist_T_12, UInt<4>("ha"), _b_recoded_rawIn_normDist_T_33) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_35 = mux(_b_recoded_rawIn_normDist_T_13, UInt<4>("h9"), _b_recoded_rawIn_normDist_T_34) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_36 = mux(_b_recoded_rawIn_normDist_T_14, UInt<4>("h8"), _b_recoded_rawIn_normDist_T_35) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_37 = mux(_b_recoded_rawIn_normDist_T_15, UInt<3>("h7"), _b_recoded_rawIn_normDist_T_36) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_38 = mux(_b_recoded_rawIn_normDist_T_16, UInt<3>("h6"), _b_recoded_rawIn_normDist_T_37) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_39 = mux(_b_recoded_rawIn_normDist_T_17, UInt<3>("h5"), _b_recoded_rawIn_normDist_T_38) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_40 = mux(_b_recoded_rawIn_normDist_T_18, UInt<3>("h4"), _b_recoded_rawIn_normDist_T_39) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_41 = mux(_b_recoded_rawIn_normDist_T_19, UInt<2>("h3"), _b_recoded_rawIn_normDist_T_40) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_42 = mux(_b_recoded_rawIn_normDist_T_20, UInt<2>("h2"), _b_recoded_rawIn_normDist_T_41) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_43 = mux(_b_recoded_rawIn_normDist_T_21, UInt<1>("h1"), _b_recoded_rawIn_normDist_T_42) @[Mux.scala 47:70]
    node b_recoded_rawIn_normDist = mux(_b_recoded_rawIn_normDist_T_22, UInt<1>("h0"), _b_recoded_rawIn_normDist_T_43) @[Mux.scala 47:70]
    node _b_recoded_rawIn_subnormFract_T = dshl(b_recoded_rawIn_fractIn, b_recoded_rawIn_normDist) @[rawFloatFromFN.scala 52:33]
    node _b_recoded_rawIn_subnormFract_T_1 = bits(_b_recoded_rawIn_subnormFract_T, 21, 0) @[rawFloatFromFN.scala 52:46]
    node b_recoded_rawIn_subnormFract = shl(_b_recoded_rawIn_subnormFract_T_1, 1) @[rawFloatFromFN.scala 52:64]
    node _b_recoded_rawIn_adjustedExp_T = xor(b_recoded_rawIn_normDist, UInt<9>("h1ff")) @[rawFloatFromFN.scala 55:18]
    node _b_recoded_rawIn_adjustedExp_T_1 = mux(b_recoded_rawIn_isZeroExpIn, _b_recoded_rawIn_adjustedExp_T, b_recoded_rawIn_expIn) @[rawFloatFromFN.scala 54:10]
    node _b_recoded_rawIn_adjustedExp_T_2 = mux(b_recoded_rawIn_isZeroExpIn, UInt<2>("h2"), UInt<1>("h1")) @[rawFloatFromFN.scala 58:14]
    node _b_recoded_rawIn_adjustedExp_T_3 = or(UInt<8>("h80"), _b_recoded_rawIn_adjustedExp_T_2) @[rawFloatFromFN.scala 58:9]
    node _b_recoded_rawIn_adjustedExp_T_4 = add(_b_recoded_rawIn_adjustedExp_T_1, _b_recoded_rawIn_adjustedExp_T_3) @[rawFloatFromFN.scala 57:9]
    node b_recoded_rawIn_adjustedExp = tail(_b_recoded_rawIn_adjustedExp_T_4, 1) @[rawFloatFromFN.scala 57:9]
    node b_recoded_rawIn_isZero = and(b_recoded_rawIn_isZeroExpIn, b_recoded_rawIn_isZeroFractIn) @[rawFloatFromFN.scala 60:30]
    node _b_recoded_rawIn_isSpecial_T = bits(b_recoded_rawIn_adjustedExp, 8, 7) @[rawFloatFromFN.scala 61:32]
    node b_recoded_rawIn_isSpecial = eq(_b_recoded_rawIn_isSpecial_T, UInt<2>("h3")) @[rawFloatFromFN.scala 61:57]
    wire b_recoded_rawIn : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>} @[rawFloatFromFN.scala 63:19]
    node _b_recoded_rawIn_out_isNaN_T = eq(b_recoded_rawIn_isZeroFractIn, UInt<1>("h0")) @[rawFloatFromFN.scala 64:31]
    node _b_recoded_rawIn_out_isNaN_T_1 = and(b_recoded_rawIn_isSpecial, _b_recoded_rawIn_out_isNaN_T) @[rawFloatFromFN.scala 64:28]
    b_recoded_rawIn.isNaN <= _b_recoded_rawIn_out_isNaN_T_1 @[rawFloatFromFN.scala 64:15]
    node _b_recoded_rawIn_out_isInf_T = and(b_recoded_rawIn_isSpecial, b_recoded_rawIn_isZeroFractIn) @[rawFloatFromFN.scala 65:28]
    b_recoded_rawIn.isInf <= _b_recoded_rawIn_out_isInf_T @[rawFloatFromFN.scala 65:15]
    b_recoded_rawIn.isZero <= b_recoded_rawIn_isZero @[rawFloatFromFN.scala 66:16]
    b_recoded_rawIn.sign <= b_recoded_rawIn_sign @[rawFloatFromFN.scala 67:14]
    node _b_recoded_rawIn_out_sExp_T = bits(b_recoded_rawIn_adjustedExp, 8, 0) @[rawFloatFromFN.scala 68:28]
    node _b_recoded_rawIn_out_sExp_T_1 = cvt(_b_recoded_rawIn_out_sExp_T) @[rawFloatFromFN.scala 68:42]
    b_recoded_rawIn.sExp <= _b_recoded_rawIn_out_sExp_T_1 @[rawFloatFromFN.scala 68:14]
    node _b_recoded_rawIn_out_sig_T = eq(b_recoded_rawIn_isZero, UInt<1>("h0")) @[rawFloatFromFN.scala 70:19]
    node _b_recoded_rawIn_out_sig_T_1 = cat(UInt<1>("h0"), _b_recoded_rawIn_out_sig_T) @[rawFloatFromFN.scala 70:16]
    node _b_recoded_rawIn_out_sig_T_2 = mux(b_recoded_rawIn_isZeroExpIn, b_recoded_rawIn_subnormFract, b_recoded_rawIn_fractIn) @[rawFloatFromFN.scala 70:33]
    node _b_recoded_rawIn_out_sig_T_3 = cat(_b_recoded_rawIn_out_sig_T_1, _b_recoded_rawIn_out_sig_T_2) @[rawFloatFromFN.scala 70:27]
    b_recoded_rawIn.sig <= _b_recoded_rawIn_out_sig_T_3 @[rawFloatFromFN.scala 69:13]
    node _b_recoded_T = bits(b_recoded_rawIn.sExp, 8, 6) @[recFNFromFN.scala 48:50]
    node _b_recoded_T_1 = mux(b_recoded_rawIn.isZero, UInt<3>("h0"), _b_recoded_T) @[recFNFromFN.scala 48:15]
    node _b_recoded_T_2 = mux(b_recoded_rawIn.isNaN, UInt<1>("h1"), UInt<1>("h0")) @[recFNFromFN.scala 49:20]
    node _b_recoded_T_3 = or(_b_recoded_T_1, _b_recoded_T_2) @[recFNFromFN.scala 48:76]
    node _b_recoded_T_4 = cat(b_recoded_rawIn.sign, _b_recoded_T_3) @[recFNFromFN.scala 47:20]
    node _b_recoded_T_5 = bits(b_recoded_rawIn.sExp, 5, 0) @[recFNFromFN.scala 50:23]
    node _b_recoded_T_6 = cat(_b_recoded_T_4, _b_recoded_T_5) @[recFNFromFN.scala 49:45]
    node _b_recoded_T_7 = bits(b_recoded_rawIn.sig, 22, 0) @[recFNFromFN.scala 51:22]
    node b_recoded = cat(_b_recoded_T_6, _b_recoded_T_7) @[recFNFromFN.scala 50:41]
    mulRecFN.io.a <= a_recoded @[FPU.scala 95:19]
    mulRecFN.io.b <= b_recoded @[FPU.scala 96:19]
    mulRecFN.io.roundingMode <= UInt<3>("h0") @[FPU.scala 97:30]
    mulRecFN.io.detectTininess <= UInt<1>("h1") @[FPU.scala 98:32]
    node io_result_rawIn_exp = bits(mulRecFN.io.out, 31, 23) @[rawFloatFromRecFN.scala 51:21]
    node _io_result_rawIn_isZero_T = bits(io_result_rawIn_exp, 8, 6) @[rawFloatFromRecFN.scala 52:28]
    node io_result_rawIn_isZero = eq(_io_result_rawIn_isZero_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 52:53]
    node _io_result_rawIn_isSpecial_T = bits(io_result_rawIn_exp, 8, 7) @[rawFloatFromRecFN.scala 53:28]
    node io_result_rawIn_isSpecial = eq(_io_result_rawIn_isSpecial_T, UInt<2>("h3")) @[rawFloatFromRecFN.scala 53:53]
    wire io_result_rawIn : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>} @[rawFloatFromRecFN.scala 55:23]
    node _io_result_rawIn_out_isNaN_T = bits(io_result_rawIn_exp, 6, 6) @[rawFloatFromRecFN.scala 56:41]
    node _io_result_rawIn_out_isNaN_T_1 = and(io_result_rawIn_isSpecial, _io_result_rawIn_out_isNaN_T) @[rawFloatFromRecFN.scala 56:33]
    io_result_rawIn.isNaN <= _io_result_rawIn_out_isNaN_T_1 @[rawFloatFromRecFN.scala 56:20]
    node _io_result_rawIn_out_isInf_T = bits(io_result_rawIn_exp, 6, 6) @[rawFloatFromRecFN.scala 57:41]
    node _io_result_rawIn_out_isInf_T_1 = eq(_io_result_rawIn_out_isInf_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 57:36]
    node _io_result_rawIn_out_isInf_T_2 = and(io_result_rawIn_isSpecial, _io_result_rawIn_out_isInf_T_1) @[rawFloatFromRecFN.scala 57:33]
    io_result_rawIn.isInf <= _io_result_rawIn_out_isInf_T_2 @[rawFloatFromRecFN.scala 57:20]
    io_result_rawIn.isZero <= io_result_rawIn_isZero @[rawFloatFromRecFN.scala 58:20]
    node _io_result_rawIn_out_sign_T = bits(mulRecFN.io.out, 32, 32) @[rawFloatFromRecFN.scala 59:25]
    io_result_rawIn.sign <= _io_result_rawIn_out_sign_T @[rawFloatFromRecFN.scala 59:20]
    node _io_result_rawIn_out_sExp_T = cvt(io_result_rawIn_exp) @[rawFloatFromRecFN.scala 60:27]
    io_result_rawIn.sExp <= _io_result_rawIn_out_sExp_T @[rawFloatFromRecFN.scala 60:20]
    node _io_result_rawIn_out_sig_T = eq(io_result_rawIn_isZero, UInt<1>("h0")) @[rawFloatFromRecFN.scala 61:35]
    node _io_result_rawIn_out_sig_T_1 = cat(UInt<1>("h0"), _io_result_rawIn_out_sig_T) @[rawFloatFromRecFN.scala 61:32]
    node _io_result_rawIn_out_sig_T_2 = bits(mulRecFN.io.out, 22, 0) @[rawFloatFromRecFN.scala 61:49]
    node _io_result_rawIn_out_sig_T_3 = cat(_io_result_rawIn_out_sig_T_1, _io_result_rawIn_out_sig_T_2) @[rawFloatFromRecFN.scala 61:44]
    io_result_rawIn.sig <= _io_result_rawIn_out_sig_T_3 @[rawFloatFromRecFN.scala 61:20]
    node io_result_isSubnormal = lt(io_result_rawIn.sExp, asSInt(UInt<9>("h82"))) @[fNFromRecFN.scala 51:38]
    node _io_result_denormShiftDist_T = bits(io_result_rawIn.sExp, 4, 0) @[fNFromRecFN.scala 52:47]
    node _io_result_denormShiftDist_T_1 = sub(UInt<1>("h1"), _io_result_denormShiftDist_T) @[fNFromRecFN.scala 52:35]
    node io_result_denormShiftDist = tail(_io_result_denormShiftDist_T_1, 1) @[fNFromRecFN.scala 52:35]
    node _io_result_denormFract_T = shr(io_result_rawIn.sig, 1) @[fNFromRecFN.scala 53:38]
    node _io_result_denormFract_T_1 = dshr(_io_result_denormFract_T, io_result_denormShiftDist) @[fNFromRecFN.scala 53:42]
    node io_result_denormFract = bits(_io_result_denormFract_T_1, 22, 0) @[fNFromRecFN.scala 53:60]
    node _io_result_expOut_T = bits(io_result_rawIn.sExp, 7, 0) @[fNFromRecFN.scala 58:27]
    node _io_result_expOut_T_1 = sub(_io_result_expOut_T, UInt<8>("h81")) @[fNFromRecFN.scala 58:45]
    node _io_result_expOut_T_2 = tail(_io_result_expOut_T_1, 1) @[fNFromRecFN.scala 58:45]
    node _io_result_expOut_T_3 = mux(io_result_isSubnormal, UInt<1>("h0"), _io_result_expOut_T_2) @[fNFromRecFN.scala 56:16]
    node _io_result_expOut_T_4 = or(io_result_rawIn.isNaN, io_result_rawIn.isInf) @[fNFromRecFN.scala 60:44]
    node _io_result_expOut_T_5 = bits(_io_result_expOut_T_4, 0, 0) @[Bitwise.scala 77:15]
    node _io_result_expOut_T_6 = mux(_io_result_expOut_T_5, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 77:12]
    node io_result_expOut = or(_io_result_expOut_T_3, _io_result_expOut_T_6) @[fNFromRecFN.scala 60:15]
    node _io_result_fractOut_T = bits(io_result_rawIn.sig, 22, 0) @[fNFromRecFN.scala 64:48]
    node _io_result_fractOut_T_1 = mux(io_result_rawIn.isInf, UInt<1>("h0"), _io_result_fractOut_T) @[fNFromRecFN.scala 64:20]
    node io_result_fractOut = mux(io_result_isSubnormal, io_result_denormFract, _io_result_fractOut_T_1) @[fNFromRecFN.scala 62:16]
    node io_result_hi = cat(io_result_rawIn.sign, io_result_expOut) @[Cat.scala 33:92]
    node _io_result_T = cat(io_result_hi, io_result_fractOut) @[Cat.scala 33:92]
    io.result <= _io_result_T @[FPU.scala 101:15]

  module AddRawFN :
    output io : { flip subOp : UInt<1>, flip a : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>}, flip b : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>}, flip roundingMode : UInt<3>, invalidExc : UInt<1>, rawOut : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<27>}}

    node effSignB = xor(io.b.sign, io.subOp) @[AddRecFN.scala 60:30]
    node eqSigns = eq(io.a.sign, effSignB) @[AddRecFN.scala 61:29]
    node notEqSigns_signZero = eq(io.roundingMode, UInt<3>("h2")) @[AddRecFN.scala 62:47]
    node _sDiffExps_T = sub(io.a.sExp, io.b.sExp) @[AddRecFN.scala 63:31]
    node _sDiffExps_T_1 = tail(_sDiffExps_T, 1) @[AddRecFN.scala 63:31]
    node sDiffExps = asSInt(_sDiffExps_T_1) @[AddRecFN.scala 63:31]
    node _modNatAlignDist_T = lt(sDiffExps, asSInt(UInt<1>("h0"))) @[AddRecFN.scala 64:41]
    node _modNatAlignDist_T_1 = sub(io.b.sExp, io.a.sExp) @[AddRecFN.scala 64:58]
    node _modNatAlignDist_T_2 = tail(_modNatAlignDist_T_1, 1) @[AddRecFN.scala 64:58]
    node _modNatAlignDist_T_3 = asSInt(_modNatAlignDist_T_2) @[AddRecFN.scala 64:58]
    node _modNatAlignDist_T_4 = mux(_modNatAlignDist_T, _modNatAlignDist_T_3, sDiffExps) @[AddRecFN.scala 64:30]
    node modNatAlignDist = bits(_modNatAlignDist_T_4, 4, 0) @[AddRecFN.scala 64:81]
    node _isMaxAlign_T = shr(sDiffExps, 5) @[AddRecFN.scala 66:19]
    node _isMaxAlign_T_1 = neq(_isMaxAlign_T, asSInt(UInt<1>("h0"))) @[AddRecFN.scala 66:37]
    node _isMaxAlign_T_2 = shr(sDiffExps, 5) @[AddRecFN.scala 67:24]
    node _isMaxAlign_T_3 = neq(_isMaxAlign_T_2, asSInt(UInt<1>("h1"))) @[AddRecFN.scala 67:42]
    node _isMaxAlign_T_4 = bits(sDiffExps, 4, 0) @[AddRecFN.scala 67:63]
    node _isMaxAlign_T_5 = eq(_isMaxAlign_T_4, UInt<1>("h0")) @[AddRecFN.scala 67:87]
    node _isMaxAlign_T_6 = or(_isMaxAlign_T_3, _isMaxAlign_T_5) @[AddRecFN.scala 67:51]
    node isMaxAlign = and(_isMaxAlign_T_1, _isMaxAlign_T_6) @[AddRecFN.scala 66:45]
    node alignDist = mux(isMaxAlign, UInt<5>("h1f"), modNatAlignDist) @[AddRecFN.scala 68:24]
    node _closeSubMags_T = eq(eqSigns, UInt<1>("h0")) @[AddRecFN.scala 69:24]
    node _closeSubMags_T_1 = eq(isMaxAlign, UInt<1>("h0")) @[AddRecFN.scala 69:36]
    node _closeSubMags_T_2 = and(_closeSubMags_T, _closeSubMags_T_1) @[AddRecFN.scala 69:33]
    node _closeSubMags_T_3 = leq(modNatAlignDist, UInt<1>("h1")) @[AddRecFN.scala 69:68]
    node closeSubMags = and(_closeSubMags_T_2, _closeSubMags_T_3) @[AddRecFN.scala 69:48]
    node _close_alignedSigA_T = leq(asSInt(UInt<1>("h0")), sDiffExps) @[AddRecFN.scala 73:18]
    node _close_alignedSigA_T_1 = bits(sDiffExps, 0, 0) @[AddRecFN.scala 73:45]
    node _close_alignedSigA_T_2 = and(_close_alignedSigA_T, _close_alignedSigA_T_1) @[AddRecFN.scala 73:32]
    node _close_alignedSigA_T_3 = shl(io.a.sig, 2) @[AddRecFN.scala 73:58]
    node _close_alignedSigA_T_4 = mux(_close_alignedSigA_T_2, _close_alignedSigA_T_3, UInt<1>("h0")) @[AddRecFN.scala 73:12]
    node _close_alignedSigA_T_5 = leq(asSInt(UInt<1>("h0")), sDiffExps) @[AddRecFN.scala 74:18]
    node _close_alignedSigA_T_6 = bits(sDiffExps, 0, 0) @[AddRecFN.scala 74:45]
    node _close_alignedSigA_T_7 = eq(_close_alignedSigA_T_6, UInt<1>("h0")) @[AddRecFN.scala 74:35]
    node _close_alignedSigA_T_8 = and(_close_alignedSigA_T_5, _close_alignedSigA_T_7) @[AddRecFN.scala 74:32]
    node _close_alignedSigA_T_9 = shl(io.a.sig, 1) @[AddRecFN.scala 74:58]
    node _close_alignedSigA_T_10 = mux(_close_alignedSigA_T_8, _close_alignedSigA_T_9, UInt<1>("h0")) @[AddRecFN.scala 74:12]
    node _close_alignedSigA_T_11 = or(_close_alignedSigA_T_4, _close_alignedSigA_T_10) @[AddRecFN.scala 73:68]
    node _close_alignedSigA_T_12 = lt(sDiffExps, asSInt(UInt<1>("h0"))) @[AddRecFN.scala 75:24]
    node _close_alignedSigA_T_13 = mux(_close_alignedSigA_T_12, io.a.sig, UInt<1>("h0")) @[AddRecFN.scala 75:12]
    node close_alignedSigA = or(_close_alignedSigA_T_11, _close_alignedSigA_T_13) @[AddRecFN.scala 74:68]
    node _close_sSigSum_T = asSInt(close_alignedSigA) @[AddRecFN.scala 76:43]
    node _close_sSigSum_T_1 = shl(io.b.sig, 1) @[AddRecFN.scala 76:61]
    node _close_sSigSum_T_2 = asSInt(_close_sSigSum_T_1) @[AddRecFN.scala 76:66]
    node _close_sSigSum_T_3 = sub(_close_sSigSum_T, _close_sSigSum_T_2) @[AddRecFN.scala 76:50]
    node _close_sSigSum_T_4 = tail(_close_sSigSum_T_3, 1) @[AddRecFN.scala 76:50]
    node close_sSigSum = asSInt(_close_sSigSum_T_4) @[AddRecFN.scala 76:50]
    node _close_sigSum_T = lt(close_sSigSum, asSInt(UInt<1>("h0"))) @[AddRecFN.scala 77:42]
    node _close_sigSum_T_1 = sub(asSInt(UInt<1>("h0")), close_sSigSum) @[AddRecFN.scala 77:49]
    node _close_sigSum_T_2 = tail(_close_sigSum_T_1, 1) @[AddRecFN.scala 77:49]
    node _close_sigSum_T_3 = asSInt(_close_sigSum_T_2) @[AddRecFN.scala 77:49]
    node _close_sigSum_T_4 = mux(_close_sigSum_T, _close_sigSum_T_3, close_sSigSum) @[AddRecFN.scala 77:27]
    node close_sigSum = bits(_close_sigSum_T_4, 25, 0) @[AddRecFN.scala 77:79]
    node close_adjustedSigSum = shl(close_sigSum, 0) @[AddRecFN.scala 78:44]
    wire close_reduced2SigSum_reducedVec : UInt<1>[13] @[primitives.scala 101:30]
    node _close_reduced2SigSum_reducedVec_0_T = bits(close_adjustedSigSum, 1, 0) @[primitives.scala 103:33]
    node _close_reduced2SigSum_reducedVec_0_T_1 = orr(_close_reduced2SigSum_reducedVec_0_T) @[primitives.scala 103:54]
    close_reduced2SigSum_reducedVec[0] <= _close_reduced2SigSum_reducedVec_0_T_1 @[primitives.scala 103:28]
    node _close_reduced2SigSum_reducedVec_1_T = bits(close_adjustedSigSum, 3, 2) @[primitives.scala 103:33]
    node _close_reduced2SigSum_reducedVec_1_T_1 = orr(_close_reduced2SigSum_reducedVec_1_T) @[primitives.scala 103:54]
    close_reduced2SigSum_reducedVec[1] <= _close_reduced2SigSum_reducedVec_1_T_1 @[primitives.scala 103:28]
    node _close_reduced2SigSum_reducedVec_2_T = bits(close_adjustedSigSum, 5, 4) @[primitives.scala 103:33]
    node _close_reduced2SigSum_reducedVec_2_T_1 = orr(_close_reduced2SigSum_reducedVec_2_T) @[primitives.scala 103:54]
    close_reduced2SigSum_reducedVec[2] <= _close_reduced2SigSum_reducedVec_2_T_1 @[primitives.scala 103:28]
    node _close_reduced2SigSum_reducedVec_3_T = bits(close_adjustedSigSum, 7, 6) @[primitives.scala 103:33]
    node _close_reduced2SigSum_reducedVec_3_T_1 = orr(_close_reduced2SigSum_reducedVec_3_T) @[primitives.scala 103:54]
    close_reduced2SigSum_reducedVec[3] <= _close_reduced2SigSum_reducedVec_3_T_1 @[primitives.scala 103:28]
    node _close_reduced2SigSum_reducedVec_4_T = bits(close_adjustedSigSum, 9, 8) @[primitives.scala 103:33]
    node _close_reduced2SigSum_reducedVec_4_T_1 = orr(_close_reduced2SigSum_reducedVec_4_T) @[primitives.scala 103:54]
    close_reduced2SigSum_reducedVec[4] <= _close_reduced2SigSum_reducedVec_4_T_1 @[primitives.scala 103:28]
    node _close_reduced2SigSum_reducedVec_5_T = bits(close_adjustedSigSum, 11, 10) @[primitives.scala 103:33]
    node _close_reduced2SigSum_reducedVec_5_T_1 = orr(_close_reduced2SigSum_reducedVec_5_T) @[primitives.scala 103:54]
    close_reduced2SigSum_reducedVec[5] <= _close_reduced2SigSum_reducedVec_5_T_1 @[primitives.scala 103:28]
    node _close_reduced2SigSum_reducedVec_6_T = bits(close_adjustedSigSum, 13, 12) @[primitives.scala 103:33]
    node _close_reduced2SigSum_reducedVec_6_T_1 = orr(_close_reduced2SigSum_reducedVec_6_T) @[primitives.scala 103:54]
    close_reduced2SigSum_reducedVec[6] <= _close_reduced2SigSum_reducedVec_6_T_1 @[primitives.scala 103:28]
    node _close_reduced2SigSum_reducedVec_7_T = bits(close_adjustedSigSum, 15, 14) @[primitives.scala 103:33]
    node _close_reduced2SigSum_reducedVec_7_T_1 = orr(_close_reduced2SigSum_reducedVec_7_T) @[primitives.scala 103:54]
    close_reduced2SigSum_reducedVec[7] <= _close_reduced2SigSum_reducedVec_7_T_1 @[primitives.scala 103:28]
    node _close_reduced2SigSum_reducedVec_8_T = bits(close_adjustedSigSum, 17, 16) @[primitives.scala 103:33]
    node _close_reduced2SigSum_reducedVec_8_T_1 = orr(_close_reduced2SigSum_reducedVec_8_T) @[primitives.scala 103:54]
    close_reduced2SigSum_reducedVec[8] <= _close_reduced2SigSum_reducedVec_8_T_1 @[primitives.scala 103:28]
    node _close_reduced2SigSum_reducedVec_9_T = bits(close_adjustedSigSum, 19, 18) @[primitives.scala 103:33]
    node _close_reduced2SigSum_reducedVec_9_T_1 = orr(_close_reduced2SigSum_reducedVec_9_T) @[primitives.scala 103:54]
    close_reduced2SigSum_reducedVec[9] <= _close_reduced2SigSum_reducedVec_9_T_1 @[primitives.scala 103:28]
    node _close_reduced2SigSum_reducedVec_10_T = bits(close_adjustedSigSum, 21, 20) @[primitives.scala 103:33]
    node _close_reduced2SigSum_reducedVec_10_T_1 = orr(_close_reduced2SigSum_reducedVec_10_T) @[primitives.scala 103:54]
    close_reduced2SigSum_reducedVec[10] <= _close_reduced2SigSum_reducedVec_10_T_1 @[primitives.scala 103:28]
    node _close_reduced2SigSum_reducedVec_11_T = bits(close_adjustedSigSum, 23, 22) @[primitives.scala 103:33]
    node _close_reduced2SigSum_reducedVec_11_T_1 = orr(_close_reduced2SigSum_reducedVec_11_T) @[primitives.scala 103:54]
    close_reduced2SigSum_reducedVec[11] <= _close_reduced2SigSum_reducedVec_11_T_1 @[primitives.scala 103:28]
    node _close_reduced2SigSum_reducedVec_12_T = bits(close_adjustedSigSum, 25, 24) @[primitives.scala 106:15]
    node _close_reduced2SigSum_reducedVec_12_T_1 = orr(_close_reduced2SigSum_reducedVec_12_T) @[primitives.scala 106:57]
    close_reduced2SigSum_reducedVec[12] <= _close_reduced2SigSum_reducedVec_12_T_1 @[primitives.scala 105:38]
    node close_reduced2SigSum_lo_lo_hi = cat(close_reduced2SigSum_reducedVec[2], close_reduced2SigSum_reducedVec[1]) @[primitives.scala 107:20]
    node close_reduced2SigSum_lo_lo = cat(close_reduced2SigSum_lo_lo_hi, close_reduced2SigSum_reducedVec[0]) @[primitives.scala 107:20]
    node close_reduced2SigSum_lo_hi_hi = cat(close_reduced2SigSum_reducedVec[5], close_reduced2SigSum_reducedVec[4]) @[primitives.scala 107:20]
    node close_reduced2SigSum_lo_hi = cat(close_reduced2SigSum_lo_hi_hi, close_reduced2SigSum_reducedVec[3]) @[primitives.scala 107:20]
    node close_reduced2SigSum_lo = cat(close_reduced2SigSum_lo_hi, close_reduced2SigSum_lo_lo) @[primitives.scala 107:20]
    node close_reduced2SigSum_hi_lo_hi = cat(close_reduced2SigSum_reducedVec[8], close_reduced2SigSum_reducedVec[7]) @[primitives.scala 107:20]
    node close_reduced2SigSum_hi_lo = cat(close_reduced2SigSum_hi_lo_hi, close_reduced2SigSum_reducedVec[6]) @[primitives.scala 107:20]
    node close_reduced2SigSum_hi_hi_lo = cat(close_reduced2SigSum_reducedVec[10], close_reduced2SigSum_reducedVec[9]) @[primitives.scala 107:20]
    node close_reduced2SigSum_hi_hi_hi = cat(close_reduced2SigSum_reducedVec[12], close_reduced2SigSum_reducedVec[11]) @[primitives.scala 107:20]
    node close_reduced2SigSum_hi_hi = cat(close_reduced2SigSum_hi_hi_hi, close_reduced2SigSum_hi_hi_lo) @[primitives.scala 107:20]
    node close_reduced2SigSum_hi = cat(close_reduced2SigSum_hi_hi, close_reduced2SigSum_hi_lo) @[primitives.scala 107:20]
    node close_reduced2SigSum = cat(close_reduced2SigSum_hi, close_reduced2SigSum_lo) @[primitives.scala 107:20]
    node _close_normDistReduced2_T = bits(close_reduced2SigSum, 0, 0) @[primitives.scala 91:52]
    node _close_normDistReduced2_T_1 = bits(close_reduced2SigSum, 1, 1) @[primitives.scala 91:52]
    node _close_normDistReduced2_T_2 = bits(close_reduced2SigSum, 2, 2) @[primitives.scala 91:52]
    node _close_normDistReduced2_T_3 = bits(close_reduced2SigSum, 3, 3) @[primitives.scala 91:52]
    node _close_normDistReduced2_T_4 = bits(close_reduced2SigSum, 4, 4) @[primitives.scala 91:52]
    node _close_normDistReduced2_T_5 = bits(close_reduced2SigSum, 5, 5) @[primitives.scala 91:52]
    node _close_normDistReduced2_T_6 = bits(close_reduced2SigSum, 6, 6) @[primitives.scala 91:52]
    node _close_normDistReduced2_T_7 = bits(close_reduced2SigSum, 7, 7) @[primitives.scala 91:52]
    node _close_normDistReduced2_T_8 = bits(close_reduced2SigSum, 8, 8) @[primitives.scala 91:52]
    node _close_normDistReduced2_T_9 = bits(close_reduced2SigSum, 9, 9) @[primitives.scala 91:52]
    node _close_normDistReduced2_T_10 = bits(close_reduced2SigSum, 10, 10) @[primitives.scala 91:52]
    node _close_normDistReduced2_T_11 = bits(close_reduced2SigSum, 11, 11) @[primitives.scala 91:52]
    node _close_normDistReduced2_T_12 = bits(close_reduced2SigSum, 12, 12) @[primitives.scala 91:52]
    node _close_normDistReduced2_T_13 = mux(_close_normDistReduced2_T_1, UInt<4>("hb"), UInt<4>("hc")) @[Mux.scala 47:70]
    node _close_normDistReduced2_T_14 = mux(_close_normDistReduced2_T_2, UInt<4>("ha"), _close_normDistReduced2_T_13) @[Mux.scala 47:70]
    node _close_normDistReduced2_T_15 = mux(_close_normDistReduced2_T_3, UInt<4>("h9"), _close_normDistReduced2_T_14) @[Mux.scala 47:70]
    node _close_normDistReduced2_T_16 = mux(_close_normDistReduced2_T_4, UInt<4>("h8"), _close_normDistReduced2_T_15) @[Mux.scala 47:70]
    node _close_normDistReduced2_T_17 = mux(_close_normDistReduced2_T_5, UInt<3>("h7"), _close_normDistReduced2_T_16) @[Mux.scala 47:70]
    node _close_normDistReduced2_T_18 = mux(_close_normDistReduced2_T_6, UInt<3>("h6"), _close_normDistReduced2_T_17) @[Mux.scala 47:70]
    node _close_normDistReduced2_T_19 = mux(_close_normDistReduced2_T_7, UInt<3>("h5"), _close_normDistReduced2_T_18) @[Mux.scala 47:70]
    node _close_normDistReduced2_T_20 = mux(_close_normDistReduced2_T_8, UInt<3>("h4"), _close_normDistReduced2_T_19) @[Mux.scala 47:70]
    node _close_normDistReduced2_T_21 = mux(_close_normDistReduced2_T_9, UInt<2>("h3"), _close_normDistReduced2_T_20) @[Mux.scala 47:70]
    node _close_normDistReduced2_T_22 = mux(_close_normDistReduced2_T_10, UInt<2>("h2"), _close_normDistReduced2_T_21) @[Mux.scala 47:70]
    node _close_normDistReduced2_T_23 = mux(_close_normDistReduced2_T_11, UInt<1>("h1"), _close_normDistReduced2_T_22) @[Mux.scala 47:70]
    node close_normDistReduced2 = mux(_close_normDistReduced2_T_12, UInt<1>("h0"), _close_normDistReduced2_T_23) @[Mux.scala 47:70]
    node _close_nearNormDist_T = shl(close_normDistReduced2, 1) @[AddRecFN.scala 81:53]
    node close_nearNormDist = bits(_close_nearNormDist_T, 4, 0) @[AddRecFN.scala 81:57]
    node _close_sigOut_T = dshl(close_sigSum, close_nearNormDist) @[AddRecFN.scala 82:38]
    node _close_sigOut_T_1 = shl(_close_sigOut_T, 1) @[AddRecFN.scala 82:59]
    node close_sigOut = bits(_close_sigOut_T_1, 26, 0) @[AddRecFN.scala 82:63]
    node _close_totalCancellation_T = bits(close_sigOut, 26, 25) @[AddRecFN.scala 83:49]
    node _close_totalCancellation_T_1 = orr(_close_totalCancellation_T) @[AddRecFN.scala 83:82]
    node close_totalCancellation = eq(_close_totalCancellation_T_1, UInt<1>("h0")) @[AddRecFN.scala 83:35]
    node _close_notTotalCancellation_signOut_T = lt(close_sSigSum, asSInt(UInt<1>("h0"))) @[AddRecFN.scala 84:73]
    node close_notTotalCancellation_signOut = xor(io.a.sign, _close_notTotalCancellation_signOut_T) @[AddRecFN.scala 84:56]
    node _far_signOut_T = lt(sDiffExps, asSInt(UInt<1>("h0"))) @[AddRecFN.scala 87:37]
    node far_signOut = mux(_far_signOut_T, effSignB, io.a.sign) @[AddRecFN.scala 87:26]
    node _far_sigLarger_T = lt(sDiffExps, asSInt(UInt<1>("h0"))) @[AddRecFN.scala 88:40]
    node _far_sigLarger_T_1 = mux(_far_sigLarger_T, io.b.sig, io.a.sig) @[AddRecFN.scala 88:29]
    node far_sigLarger = bits(_far_sigLarger_T_1, 23, 0) @[AddRecFN.scala 88:66]
    node _far_sigSmaller_T = lt(sDiffExps, asSInt(UInt<1>("h0"))) @[AddRecFN.scala 89:40]
    node _far_sigSmaller_T_1 = mux(_far_sigSmaller_T, io.a.sig, io.b.sig) @[AddRecFN.scala 89:29]
    node far_sigSmaller = bits(_far_sigSmaller_T_1, 23, 0) @[AddRecFN.scala 89:66]
    node _far_mainAlignedSigSmaller_T = shl(far_sigSmaller, 5) @[AddRecFN.scala 90:52]
    node far_mainAlignedSigSmaller = dshr(_far_mainAlignedSigSmaller_T, alignDist) @[AddRecFN.scala 90:56]
    node _far_reduced4SigSmaller_T = shl(far_sigSmaller, 2) @[AddRecFN.scala 91:60]
    wire far_reduced4SigSmaller_reducedVec : UInt<1>[7] @[primitives.scala 118:30]
    node _far_reduced4SigSmaller_reducedVec_0_T = bits(_far_reduced4SigSmaller_T, 3, 0) @[primitives.scala 120:33]
    node _far_reduced4SigSmaller_reducedVec_0_T_1 = orr(_far_reduced4SigSmaller_reducedVec_0_T) @[primitives.scala 120:54]
    far_reduced4SigSmaller_reducedVec[0] <= _far_reduced4SigSmaller_reducedVec_0_T_1 @[primitives.scala 120:28]
    node _far_reduced4SigSmaller_reducedVec_1_T = bits(_far_reduced4SigSmaller_T, 7, 4) @[primitives.scala 120:33]
    node _far_reduced4SigSmaller_reducedVec_1_T_1 = orr(_far_reduced4SigSmaller_reducedVec_1_T) @[primitives.scala 120:54]
    far_reduced4SigSmaller_reducedVec[1] <= _far_reduced4SigSmaller_reducedVec_1_T_1 @[primitives.scala 120:28]
    node _far_reduced4SigSmaller_reducedVec_2_T = bits(_far_reduced4SigSmaller_T, 11, 8) @[primitives.scala 120:33]
    node _far_reduced4SigSmaller_reducedVec_2_T_1 = orr(_far_reduced4SigSmaller_reducedVec_2_T) @[primitives.scala 120:54]
    far_reduced4SigSmaller_reducedVec[2] <= _far_reduced4SigSmaller_reducedVec_2_T_1 @[primitives.scala 120:28]
    node _far_reduced4SigSmaller_reducedVec_3_T = bits(_far_reduced4SigSmaller_T, 15, 12) @[primitives.scala 120:33]
    node _far_reduced4SigSmaller_reducedVec_3_T_1 = orr(_far_reduced4SigSmaller_reducedVec_3_T) @[primitives.scala 120:54]
    far_reduced4SigSmaller_reducedVec[3] <= _far_reduced4SigSmaller_reducedVec_3_T_1 @[primitives.scala 120:28]
    node _far_reduced4SigSmaller_reducedVec_4_T = bits(_far_reduced4SigSmaller_T, 19, 16) @[primitives.scala 120:33]
    node _far_reduced4SigSmaller_reducedVec_4_T_1 = orr(_far_reduced4SigSmaller_reducedVec_4_T) @[primitives.scala 120:54]
    far_reduced4SigSmaller_reducedVec[4] <= _far_reduced4SigSmaller_reducedVec_4_T_1 @[primitives.scala 120:28]
    node _far_reduced4SigSmaller_reducedVec_5_T = bits(_far_reduced4SigSmaller_T, 23, 20) @[primitives.scala 120:33]
    node _far_reduced4SigSmaller_reducedVec_5_T_1 = orr(_far_reduced4SigSmaller_reducedVec_5_T) @[primitives.scala 120:54]
    far_reduced4SigSmaller_reducedVec[5] <= _far_reduced4SigSmaller_reducedVec_5_T_1 @[primitives.scala 120:28]
    node _far_reduced4SigSmaller_reducedVec_6_T = bits(_far_reduced4SigSmaller_T, 25, 24) @[primitives.scala 123:15]
    node _far_reduced4SigSmaller_reducedVec_6_T_1 = orr(_far_reduced4SigSmaller_reducedVec_6_T) @[primitives.scala 123:57]
    far_reduced4SigSmaller_reducedVec[6] <= _far_reduced4SigSmaller_reducedVec_6_T_1 @[primitives.scala 122:38]
    node far_reduced4SigSmaller_lo_hi = cat(far_reduced4SigSmaller_reducedVec[2], far_reduced4SigSmaller_reducedVec[1]) @[primitives.scala 124:20]
    node far_reduced4SigSmaller_lo = cat(far_reduced4SigSmaller_lo_hi, far_reduced4SigSmaller_reducedVec[0]) @[primitives.scala 124:20]
    node far_reduced4SigSmaller_hi_lo = cat(far_reduced4SigSmaller_reducedVec[4], far_reduced4SigSmaller_reducedVec[3]) @[primitives.scala 124:20]
    node far_reduced4SigSmaller_hi_hi = cat(far_reduced4SigSmaller_reducedVec[6], far_reduced4SigSmaller_reducedVec[5]) @[primitives.scala 124:20]
    node far_reduced4SigSmaller_hi = cat(far_reduced4SigSmaller_hi_hi, far_reduced4SigSmaller_hi_lo) @[primitives.scala 124:20]
    node far_reduced4SigSmaller = cat(far_reduced4SigSmaller_hi, far_reduced4SigSmaller_lo) @[primitives.scala 124:20]
    node _far_roundExtraMask_T = bits(alignDist, 4, 2) @[AddRecFN.scala 92:47]
    node far_roundExtraMask_shift = dshr(asSInt(UInt<9>("h100")), _far_roundExtraMask_T) @[primitives.scala 76:56]
    node _far_roundExtraMask_T_1 = bits(far_roundExtraMask_shift, 7, 1) @[primitives.scala 78:22]
    node _far_roundExtraMask_T_2 = bits(_far_roundExtraMask_T_1, 3, 0) @[Bitwise.scala 114:18]
    node _far_roundExtraMask_T_3 = bits(_far_roundExtraMask_T_2, 1, 0) @[Bitwise.scala 114:18]
    node _far_roundExtraMask_T_4 = bits(_far_roundExtraMask_T_3, 0, 0) @[Bitwise.scala 114:18]
    node _far_roundExtraMask_T_5 = bits(_far_roundExtraMask_T_3, 1, 1) @[Bitwise.scala 114:47]
    node _far_roundExtraMask_T_6 = cat(_far_roundExtraMask_T_4, _far_roundExtraMask_T_5) @[Cat.scala 33:92]
    node _far_roundExtraMask_T_7 = bits(_far_roundExtraMask_T_2, 3, 2) @[Bitwise.scala 114:47]
    node _far_roundExtraMask_T_8 = bits(_far_roundExtraMask_T_7, 0, 0) @[Bitwise.scala 114:18]
    node _far_roundExtraMask_T_9 = bits(_far_roundExtraMask_T_7, 1, 1) @[Bitwise.scala 114:47]
    node _far_roundExtraMask_T_10 = cat(_far_roundExtraMask_T_8, _far_roundExtraMask_T_9) @[Cat.scala 33:92]
    node _far_roundExtraMask_T_11 = cat(_far_roundExtraMask_T_6, _far_roundExtraMask_T_10) @[Cat.scala 33:92]
    node _far_roundExtraMask_T_12 = bits(_far_roundExtraMask_T_1, 6, 4) @[Bitwise.scala 114:47]
    node _far_roundExtraMask_T_13 = bits(_far_roundExtraMask_T_12, 1, 0) @[Bitwise.scala 114:18]
    node _far_roundExtraMask_T_14 = bits(_far_roundExtraMask_T_13, 0, 0) @[Bitwise.scala 114:18]
    node _far_roundExtraMask_T_15 = bits(_far_roundExtraMask_T_13, 1, 1) @[Bitwise.scala 114:47]
    node _far_roundExtraMask_T_16 = cat(_far_roundExtraMask_T_14, _far_roundExtraMask_T_15) @[Cat.scala 33:92]
    node _far_roundExtraMask_T_17 = bits(_far_roundExtraMask_T_12, 2, 2) @[Bitwise.scala 114:47]
    node _far_roundExtraMask_T_18 = cat(_far_roundExtraMask_T_16, _far_roundExtraMask_T_17) @[Cat.scala 33:92]
    node far_roundExtraMask = cat(_far_roundExtraMask_T_11, _far_roundExtraMask_T_18) @[Cat.scala 33:92]
    node _far_alignedSigSmaller_T = shr(far_mainAlignedSigSmaller, 3) @[AddRecFN.scala 94:38]
    node _far_alignedSigSmaller_T_1 = bits(far_mainAlignedSigSmaller, 2, 0) @[AddRecFN.scala 95:38]
    node _far_alignedSigSmaller_T_2 = orr(_far_alignedSigSmaller_T_1) @[AddRecFN.scala 95:45]
    node _far_alignedSigSmaller_T_3 = and(far_reduced4SigSmaller, far_roundExtraMask) @[AddRecFN.scala 95:76]
    node _far_alignedSigSmaller_T_4 = orr(_far_alignedSigSmaller_T_3) @[AddRecFN.scala 95:98]
    node _far_alignedSigSmaller_T_5 = or(_far_alignedSigSmaller_T_2, _far_alignedSigSmaller_T_4) @[AddRecFN.scala 95:49]
    node far_alignedSigSmaller = cat(_far_alignedSigSmaller_T, _far_alignedSigSmaller_T_5) @[Cat.scala 33:92]
    node far_subMags = eq(eqSigns, UInt<1>("h0")) @[AddRecFN.scala 96:23]
    node _far_negAlignedSigSmaller_T = not(far_alignedSigSmaller) @[AddRecFN.scala 97:62]
    node _far_negAlignedSigSmaller_T_1 = cat(UInt<1>("h1"), _far_negAlignedSigSmaller_T) @[Cat.scala 33:92]
    node far_negAlignedSigSmaller = mux(far_subMags, _far_negAlignedSigSmaller_T_1, far_alignedSigSmaller) @[AddRecFN.scala 97:39]
    node _far_sigSum_T = shl(far_sigLarger, 3) @[AddRecFN.scala 98:36]
    node _far_sigSum_T_1 = add(_far_sigSum_T, far_negAlignedSigSmaller) @[AddRecFN.scala 98:41]
    node _far_sigSum_T_2 = tail(_far_sigSum_T_1, 1) @[AddRecFN.scala 98:41]
    node _far_sigSum_T_3 = add(_far_sigSum_T_2, far_subMags) @[AddRecFN.scala 98:68]
    node far_sigSum = tail(_far_sigSum_T_3, 1) @[AddRecFN.scala 98:68]
    node _far_sigOut_T = shr(far_sigSum, 1) @[AddRecFN.scala 99:62]
    node _far_sigOut_T_1 = bits(far_sigSum, 0, 0) @[AddRecFN.scala 99:79]
    node _far_sigOut_T_2 = or(_far_sigOut_T, _far_sigOut_T_1) @[AddRecFN.scala 99:67]
    node _far_sigOut_T_3 = mux(far_subMags, far_sigSum, _far_sigOut_T_2) @[AddRecFN.scala 99:25]
    node far_sigOut = bits(_far_sigOut_T_3, 26, 0) @[AddRecFN.scala 99:83]
    node _notSigNaN_invalidExc_T = and(io.a.isInf, io.b.isInf) @[AddRecFN.scala 102:43]
    node _notSigNaN_invalidExc_T_1 = eq(eqSigns, UInt<1>("h0")) @[AddRecFN.scala 102:60]
    node notSigNaN_invalidExc = and(_notSigNaN_invalidExc_T, _notSigNaN_invalidExc_T_1) @[AddRecFN.scala 102:57]
    node notNaN_isInfOut = or(io.a.isInf, io.b.isInf) @[AddRecFN.scala 103:38]
    node addZeros = and(io.a.isZero, io.b.isZero) @[AddRecFN.scala 104:32]
    node notNaN_specialCase = or(notNaN_isInfOut, addZeros) @[AddRecFN.scala 105:46]
    node _notNaN_isZeroOut_T = eq(notNaN_isInfOut, UInt<1>("h0")) @[AddRecFN.scala 106:41]
    node _notNaN_isZeroOut_T_1 = and(_notNaN_isZeroOut_T, closeSubMags) @[AddRecFN.scala 106:58]
    node _notNaN_isZeroOut_T_2 = and(_notNaN_isZeroOut_T_1, close_totalCancellation) @[AddRecFN.scala 106:74]
    node notNaN_isZeroOut = or(addZeros, _notNaN_isZeroOut_T_2) @[AddRecFN.scala 106:37]
    node _notNaN_signOut_T = and(eqSigns, io.a.sign) @[AddRecFN.scala 108:39]
    node _notNaN_signOut_T_1 = and(io.a.isInf, io.a.sign) @[AddRecFN.scala 109:39]
    node _notNaN_signOut_T_2 = or(_notNaN_signOut_T, _notNaN_signOut_T_1) @[AddRecFN.scala 108:63]
    node _notNaN_signOut_T_3 = and(io.b.isInf, effSignB) @[AddRecFN.scala 110:39]
    node _notNaN_signOut_T_4 = or(_notNaN_signOut_T_2, _notNaN_signOut_T_3) @[AddRecFN.scala 109:63]
    node _notNaN_signOut_T_5 = eq(eqSigns, UInt<1>("h0")) @[AddRecFN.scala 111:30]
    node _notNaN_signOut_T_6 = and(notNaN_isZeroOut, _notNaN_signOut_T_5) @[AddRecFN.scala 111:27]
    node _notNaN_signOut_T_7 = and(_notNaN_signOut_T_6, notEqSigns_signZero) @[AddRecFN.scala 111:39]
    node _notNaN_signOut_T_8 = or(_notNaN_signOut_T_4, _notNaN_signOut_T_7) @[AddRecFN.scala 110:63]
    node _notNaN_signOut_T_9 = eq(notNaN_specialCase, UInt<1>("h0")) @[AddRecFN.scala 112:10]
    node _notNaN_signOut_T_10 = and(_notNaN_signOut_T_9, closeSubMags) @[AddRecFN.scala 112:30]
    node _notNaN_signOut_T_11 = eq(close_totalCancellation, UInt<1>("h0")) @[AddRecFN.scala 112:49]
    node _notNaN_signOut_T_12 = and(_notNaN_signOut_T_10, _notNaN_signOut_T_11) @[AddRecFN.scala 112:46]
    node _notNaN_signOut_T_13 = and(_notNaN_signOut_T_12, close_notTotalCancellation_signOut) @[AddRecFN.scala 113:38]
    node _notNaN_signOut_T_14 = or(_notNaN_signOut_T_8, _notNaN_signOut_T_13) @[AddRecFN.scala 111:63]
    node _notNaN_signOut_T_15 = eq(notNaN_specialCase, UInt<1>("h0")) @[AddRecFN.scala 114:10]
    node _notNaN_signOut_T_16 = eq(closeSubMags, UInt<1>("h0")) @[AddRecFN.scala 114:33]
    node _notNaN_signOut_T_17 = and(_notNaN_signOut_T_15, _notNaN_signOut_T_16) @[AddRecFN.scala 114:30]
    node _notNaN_signOut_T_18 = and(_notNaN_signOut_T_17, far_signOut) @[AddRecFN.scala 114:47]
    node notNaN_signOut = or(_notNaN_signOut_T_14, _notNaN_signOut_T_18) @[AddRecFN.scala 113:77]
    node _common_sExpOut_T = lt(sDiffExps, asSInt(UInt<1>("h0"))) @[AddRecFN.scala 116:41]
    node _common_sExpOut_T_1 = or(closeSubMags, _common_sExpOut_T) @[AddRecFN.scala 116:27]
    node _common_sExpOut_T_2 = mux(_common_sExpOut_T_1, io.b.sExp, io.a.sExp) @[AddRecFN.scala 116:13]
    node _common_sExpOut_T_3 = mux(closeSubMags, close_nearNormDist, far_subMags) @[AddRecFN.scala 117:18]
    node _common_sExpOut_T_4 = cvt(_common_sExpOut_T_3) @[AddRecFN.scala 117:66]
    node _common_sExpOut_T_5 = sub(_common_sExpOut_T_2, _common_sExpOut_T_4) @[AddRecFN.scala 117:13]
    node _common_sExpOut_T_6 = tail(_common_sExpOut_T_5, 1) @[AddRecFN.scala 117:13]
    node common_sExpOut = asSInt(_common_sExpOut_T_6) @[AddRecFN.scala 117:13]
    node common_sigOut = mux(closeSubMags, close_sigOut, far_sigOut) @[AddRecFN.scala 118:28]
    node _io_invalidExc_T = bits(io.a.sig, 22, 22) @[common.scala 82:56]
    node _io_invalidExc_T_1 = eq(_io_invalidExc_T, UInt<1>("h0")) @[common.scala 82:49]
    node _io_invalidExc_T_2 = and(io.a.isNaN, _io_invalidExc_T_1) @[common.scala 82:46]
    node _io_invalidExc_T_3 = bits(io.b.sig, 22, 22) @[common.scala 82:56]
    node _io_invalidExc_T_4 = eq(_io_invalidExc_T_3, UInt<1>("h0")) @[common.scala 82:49]
    node _io_invalidExc_T_5 = and(io.b.isNaN, _io_invalidExc_T_4) @[common.scala 82:46]
    node _io_invalidExc_T_6 = or(_io_invalidExc_T_2, _io_invalidExc_T_5) @[AddRecFN.scala 121:45]
    node _io_invalidExc_T_7 = or(_io_invalidExc_T_6, notSigNaN_invalidExc) @[AddRecFN.scala 121:71]
    io.invalidExc <= _io_invalidExc_T_7 @[AddRecFN.scala 121:19]
    io.rawOut.isInf <= notNaN_isInfOut @[AddRecFN.scala 122:21]
    io.rawOut.isZero <= notNaN_isZeroOut @[AddRecFN.scala 123:22]
    io.rawOut.sExp <= common_sExpOut @[AddRecFN.scala 124:20]
    node _io_rawOut_isNaN_T = or(io.a.isNaN, io.b.isNaN) @[AddRecFN.scala 125:35]
    io.rawOut.isNaN <= _io_rawOut_isNaN_T @[AddRecFN.scala 125:21]
    io.rawOut.sign <= notNaN_signOut @[AddRecFN.scala 126:20]
    io.rawOut.sig <= common_sigOut @[AddRecFN.scala 127:19]

  module RoundAnyRawFNToRecFN_ie8_is26_oe8_os24_2 :
    output io : { flip invalidExc : UInt<1>, flip infiniteExc : UInt<1>, flip in : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<27>}, flip roundingMode : UInt<3>, flip detectTininess : UInt<1>, out : UInt<33>, exceptionFlags : UInt<5>}

    node roundingMode_near_even = eq(io.roundingMode, UInt<3>("h0")) @[RoundAnyRawFNToRecFN.scala 90:53]
    node roundingMode_minMag = eq(io.roundingMode, UInt<3>("h1")) @[RoundAnyRawFNToRecFN.scala 91:53]
    node roundingMode_min = eq(io.roundingMode, UInt<3>("h2")) @[RoundAnyRawFNToRecFN.scala 92:53]
    node roundingMode_max = eq(io.roundingMode, UInt<3>("h3")) @[RoundAnyRawFNToRecFN.scala 93:53]
    node roundingMode_near_maxMag = eq(io.roundingMode, UInt<3>("h4")) @[RoundAnyRawFNToRecFN.scala 94:53]
    node roundingMode_odd = eq(io.roundingMode, UInt<3>("h6")) @[RoundAnyRawFNToRecFN.scala 95:53]
    node _roundMagUp_T = and(roundingMode_min, io.in.sign) @[RoundAnyRawFNToRecFN.scala 98:27]
    node _roundMagUp_T_1 = eq(io.in.sign, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 98:66]
    node _roundMagUp_T_2 = and(roundingMode_max, _roundMagUp_T_1) @[RoundAnyRawFNToRecFN.scala 98:63]
    node roundMagUp = or(_roundMagUp_T, _roundMagUp_T_2) @[RoundAnyRawFNToRecFN.scala 98:42]
    node adjustedSig = shl(io.in.sig, 0) @[RoundAnyRawFNToRecFN.scala 114:22]
    node doShiftSigDown1 = bits(adjustedSig, 26, 26) @[RoundAnyRawFNToRecFN.scala 120:57]
    wire common_expOut : UInt<9> @[RoundAnyRawFNToRecFN.scala 122:31]
    wire common_fractOut : UInt<23> @[RoundAnyRawFNToRecFN.scala 123:31]
    wire common_overflow : UInt<1> @[RoundAnyRawFNToRecFN.scala 124:37]
    wire common_totalUnderflow : UInt<1> @[RoundAnyRawFNToRecFN.scala 125:37]
    wire common_underflow : UInt<1> @[RoundAnyRawFNToRecFN.scala 126:37]
    wire common_inexact : UInt<1> @[RoundAnyRawFNToRecFN.scala 127:37]
    node _roundMask_T = bits(io.in.sExp, 8, 0) @[RoundAnyRawFNToRecFN.scala 156:37]
    node _roundMask_T_1 = not(_roundMask_T) @[primitives.scala 52:21]
    node roundMask_msb = bits(_roundMask_T_1, 8, 8) @[primitives.scala 58:25]
    node roundMask_lsbs = bits(_roundMask_T_1, 7, 0) @[primitives.scala 59:26]
    node roundMask_msb_1 = bits(roundMask_lsbs, 7, 7) @[primitives.scala 58:25]
    node roundMask_lsbs_1 = bits(roundMask_lsbs, 6, 0) @[primitives.scala 59:26]
    node roundMask_msb_2 = bits(roundMask_lsbs_1, 6, 6) @[primitives.scala 58:25]
    node roundMask_lsbs_2 = bits(roundMask_lsbs_1, 5, 0) @[primitives.scala 59:26]
    node roundMask_shift = dshr(asSInt(UInt<65>("h10000000000000000")), roundMask_lsbs_2) @[primitives.scala 76:56]
    node _roundMask_T_2 = bits(roundMask_shift, 63, 42) @[primitives.scala 78:22]
    node _roundMask_T_3 = bits(_roundMask_T_2, 15, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_4 = shl(UInt<8>("hff"), 8) @[Bitwise.scala 107:52]
    node _roundMask_T_5 = xor(UInt<16>("hffff"), _roundMask_T_4) @[Bitwise.scala 107:21]
    node _roundMask_T_6 = shr(_roundMask_T_3, 8) @[Bitwise.scala 108:21]
    node _roundMask_T_7 = and(_roundMask_T_6, _roundMask_T_5) @[Bitwise.scala 108:31]
    node _roundMask_T_8 = bits(_roundMask_T_3, 7, 0) @[Bitwise.scala 108:46]
    node _roundMask_T_9 = shl(_roundMask_T_8, 8) @[Bitwise.scala 108:70]
    node _roundMask_T_10 = not(_roundMask_T_5) @[Bitwise.scala 108:82]
    node _roundMask_T_11 = and(_roundMask_T_9, _roundMask_T_10) @[Bitwise.scala 108:80]
    node _roundMask_T_12 = or(_roundMask_T_7, _roundMask_T_11) @[Bitwise.scala 108:39]
    node _roundMask_T_13 = bits(_roundMask_T_5, 11, 0) @[Bitwise.scala 107:28]
    node _roundMask_T_14 = shl(_roundMask_T_13, 4) @[Bitwise.scala 107:52]
    node _roundMask_T_15 = xor(_roundMask_T_5, _roundMask_T_14) @[Bitwise.scala 107:21]
    node _roundMask_T_16 = shr(_roundMask_T_12, 4) @[Bitwise.scala 108:21]
    node _roundMask_T_17 = and(_roundMask_T_16, _roundMask_T_15) @[Bitwise.scala 108:31]
    node _roundMask_T_18 = bits(_roundMask_T_12, 11, 0) @[Bitwise.scala 108:46]
    node _roundMask_T_19 = shl(_roundMask_T_18, 4) @[Bitwise.scala 108:70]
    node _roundMask_T_20 = not(_roundMask_T_15) @[Bitwise.scala 108:82]
    node _roundMask_T_21 = and(_roundMask_T_19, _roundMask_T_20) @[Bitwise.scala 108:80]
    node _roundMask_T_22 = or(_roundMask_T_17, _roundMask_T_21) @[Bitwise.scala 108:39]
    node _roundMask_T_23 = bits(_roundMask_T_15, 13, 0) @[Bitwise.scala 107:28]
    node _roundMask_T_24 = shl(_roundMask_T_23, 2) @[Bitwise.scala 107:52]
    node _roundMask_T_25 = xor(_roundMask_T_15, _roundMask_T_24) @[Bitwise.scala 107:21]
    node _roundMask_T_26 = shr(_roundMask_T_22, 2) @[Bitwise.scala 108:21]
    node _roundMask_T_27 = and(_roundMask_T_26, _roundMask_T_25) @[Bitwise.scala 108:31]
    node _roundMask_T_28 = bits(_roundMask_T_22, 13, 0) @[Bitwise.scala 108:46]
    node _roundMask_T_29 = shl(_roundMask_T_28, 2) @[Bitwise.scala 108:70]
    node _roundMask_T_30 = not(_roundMask_T_25) @[Bitwise.scala 108:82]
    node _roundMask_T_31 = and(_roundMask_T_29, _roundMask_T_30) @[Bitwise.scala 108:80]
    node _roundMask_T_32 = or(_roundMask_T_27, _roundMask_T_31) @[Bitwise.scala 108:39]
    node _roundMask_T_33 = bits(_roundMask_T_25, 14, 0) @[Bitwise.scala 107:28]
    node _roundMask_T_34 = shl(_roundMask_T_33, 1) @[Bitwise.scala 107:52]
    node _roundMask_T_35 = xor(_roundMask_T_25, _roundMask_T_34) @[Bitwise.scala 107:21]
    node _roundMask_T_36 = shr(_roundMask_T_32, 1) @[Bitwise.scala 108:21]
    node _roundMask_T_37 = and(_roundMask_T_36, _roundMask_T_35) @[Bitwise.scala 108:31]
    node _roundMask_T_38 = bits(_roundMask_T_32, 14, 0) @[Bitwise.scala 108:46]
    node _roundMask_T_39 = shl(_roundMask_T_38, 1) @[Bitwise.scala 108:70]
    node _roundMask_T_40 = not(_roundMask_T_35) @[Bitwise.scala 108:82]
    node _roundMask_T_41 = and(_roundMask_T_39, _roundMask_T_40) @[Bitwise.scala 108:80]
    node _roundMask_T_42 = or(_roundMask_T_37, _roundMask_T_41) @[Bitwise.scala 108:39]
    node _roundMask_T_43 = bits(_roundMask_T_2, 21, 16) @[Bitwise.scala 114:47]
    node _roundMask_T_44 = bits(_roundMask_T_43, 3, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_45 = bits(_roundMask_T_44, 1, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_46 = bits(_roundMask_T_45, 0, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_47 = bits(_roundMask_T_45, 1, 1) @[Bitwise.scala 114:47]
    node _roundMask_T_48 = cat(_roundMask_T_46, _roundMask_T_47) @[Cat.scala 33:92]
    node _roundMask_T_49 = bits(_roundMask_T_44, 3, 2) @[Bitwise.scala 114:47]
    node _roundMask_T_50 = bits(_roundMask_T_49, 0, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_51 = bits(_roundMask_T_49, 1, 1) @[Bitwise.scala 114:47]
    node _roundMask_T_52 = cat(_roundMask_T_50, _roundMask_T_51) @[Cat.scala 33:92]
    node _roundMask_T_53 = cat(_roundMask_T_48, _roundMask_T_52) @[Cat.scala 33:92]
    node _roundMask_T_54 = bits(_roundMask_T_43, 5, 4) @[Bitwise.scala 114:47]
    node _roundMask_T_55 = bits(_roundMask_T_54, 0, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_56 = bits(_roundMask_T_54, 1, 1) @[Bitwise.scala 114:47]
    node _roundMask_T_57 = cat(_roundMask_T_55, _roundMask_T_56) @[Cat.scala 33:92]
    node _roundMask_T_58 = cat(_roundMask_T_53, _roundMask_T_57) @[Cat.scala 33:92]
    node _roundMask_T_59 = cat(_roundMask_T_42, _roundMask_T_58) @[Cat.scala 33:92]
    node _roundMask_T_60 = not(_roundMask_T_59) @[primitives.scala 73:32]
    node _roundMask_T_61 = mux(roundMask_msb_2, UInt<1>("h0"), _roundMask_T_60) @[primitives.scala 73:21]
    node _roundMask_T_62 = not(_roundMask_T_61) @[primitives.scala 73:17]
    node _roundMask_T_63 = cat(_roundMask_T_62, UInt<3>("h7")) @[primitives.scala 68:58]
    node roundMask_msb_3 = bits(roundMask_lsbs_1, 6, 6) @[primitives.scala 58:25]
    node roundMask_lsbs_3 = bits(roundMask_lsbs_1, 5, 0) @[primitives.scala 59:26]
    node roundMask_shift_1 = dshr(asSInt(UInt<65>("h10000000000000000")), roundMask_lsbs_3) @[primitives.scala 76:56]
    node _roundMask_T_64 = bits(roundMask_shift_1, 2, 0) @[primitives.scala 78:22]
    node _roundMask_T_65 = bits(_roundMask_T_64, 1, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_66 = bits(_roundMask_T_65, 0, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_67 = bits(_roundMask_T_65, 1, 1) @[Bitwise.scala 114:47]
    node _roundMask_T_68 = cat(_roundMask_T_66, _roundMask_T_67) @[Cat.scala 33:92]
    node _roundMask_T_69 = bits(_roundMask_T_64, 2, 2) @[Bitwise.scala 114:47]
    node _roundMask_T_70 = cat(_roundMask_T_68, _roundMask_T_69) @[Cat.scala 33:92]
    node _roundMask_T_71 = mux(roundMask_msb_3, _roundMask_T_70, UInt<1>("h0")) @[primitives.scala 62:24]
    node _roundMask_T_72 = mux(roundMask_msb_1, _roundMask_T_63, _roundMask_T_71) @[primitives.scala 67:24]
    node _roundMask_T_73 = mux(roundMask_msb, _roundMask_T_72, UInt<1>("h0")) @[primitives.scala 62:24]
    node _roundMask_T_74 = or(_roundMask_T_73, doShiftSigDown1) @[RoundAnyRawFNToRecFN.scala 159:23]
    node roundMask = cat(_roundMask_T_74, UInt<2>("h3")) @[RoundAnyRawFNToRecFN.scala 159:42]
    node _shiftedRoundMask_T = cat(UInt<1>("h0"), roundMask) @[RoundAnyRawFNToRecFN.scala 162:41]
    node shiftedRoundMask = shr(_shiftedRoundMask_T, 1) @[RoundAnyRawFNToRecFN.scala 162:53]
    node _roundPosMask_T = not(shiftedRoundMask) @[RoundAnyRawFNToRecFN.scala 163:28]
    node roundPosMask = and(_roundPosMask_T, roundMask) @[RoundAnyRawFNToRecFN.scala 163:46]
    node _roundPosBit_T = and(adjustedSig, roundPosMask) @[RoundAnyRawFNToRecFN.scala 164:40]
    node roundPosBit = orr(_roundPosBit_T) @[RoundAnyRawFNToRecFN.scala 164:56]
    node _anyRoundExtra_T = and(adjustedSig, shiftedRoundMask) @[RoundAnyRawFNToRecFN.scala 165:42]
    node anyRoundExtra = orr(_anyRoundExtra_T) @[RoundAnyRawFNToRecFN.scala 165:62]
    node anyRound = or(roundPosBit, anyRoundExtra) @[RoundAnyRawFNToRecFN.scala 166:36]
    node _roundIncr_T = or(roundingMode_near_even, roundingMode_near_maxMag) @[RoundAnyRawFNToRecFN.scala 169:38]
    node _roundIncr_T_1 = and(_roundIncr_T, roundPosBit) @[RoundAnyRawFNToRecFN.scala 169:67]
    node _roundIncr_T_2 = and(roundMagUp, anyRound) @[RoundAnyRawFNToRecFN.scala 171:29]
    node roundIncr = or(_roundIncr_T_1, _roundIncr_T_2) @[RoundAnyRawFNToRecFN.scala 170:31]
    node _roundedSig_T = or(adjustedSig, roundMask) @[RoundAnyRawFNToRecFN.scala 174:32]
    node _roundedSig_T_1 = shr(_roundedSig_T, 2) @[RoundAnyRawFNToRecFN.scala 174:44]
    node _roundedSig_T_2 = add(_roundedSig_T_1, UInt<1>("h1")) @[RoundAnyRawFNToRecFN.scala 174:49]
    node _roundedSig_T_3 = and(roundingMode_near_even, roundPosBit) @[RoundAnyRawFNToRecFN.scala 175:49]
    node _roundedSig_T_4 = eq(anyRoundExtra, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 176:30]
    node _roundedSig_T_5 = and(_roundedSig_T_3, _roundedSig_T_4) @[RoundAnyRawFNToRecFN.scala 175:64]
    node _roundedSig_T_6 = shr(roundMask, 1) @[RoundAnyRawFNToRecFN.scala 177:35]
    node _roundedSig_T_7 = mux(_roundedSig_T_5, _roundedSig_T_6, UInt<26>("h0")) @[RoundAnyRawFNToRecFN.scala 175:25]
    node _roundedSig_T_8 = not(_roundedSig_T_7) @[RoundAnyRawFNToRecFN.scala 175:21]
    node _roundedSig_T_9 = and(_roundedSig_T_2, _roundedSig_T_8) @[RoundAnyRawFNToRecFN.scala 174:57]
    node _roundedSig_T_10 = not(roundMask) @[RoundAnyRawFNToRecFN.scala 180:32]
    node _roundedSig_T_11 = and(adjustedSig, _roundedSig_T_10) @[RoundAnyRawFNToRecFN.scala 180:30]
    node _roundedSig_T_12 = shr(_roundedSig_T_11, 2) @[RoundAnyRawFNToRecFN.scala 180:43]
    node _roundedSig_T_13 = and(roundingMode_odd, anyRound) @[RoundAnyRawFNToRecFN.scala 181:42]
    node _roundedSig_T_14 = shr(roundPosMask, 1) @[RoundAnyRawFNToRecFN.scala 181:67]
    node _roundedSig_T_15 = mux(_roundedSig_T_13, _roundedSig_T_14, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 181:24]
    node _roundedSig_T_16 = or(_roundedSig_T_12, _roundedSig_T_15) @[RoundAnyRawFNToRecFN.scala 180:47]
    node roundedSig = mux(roundIncr, _roundedSig_T_9, _roundedSig_T_16) @[RoundAnyRawFNToRecFN.scala 173:16]
    node _sRoundedExp_T = shr(roundedSig, 24) @[RoundAnyRawFNToRecFN.scala 185:54]
    node _sRoundedExp_T_1 = cvt(_sRoundedExp_T) @[RoundAnyRawFNToRecFN.scala 185:76]
    node sRoundedExp = add(io.in.sExp, _sRoundedExp_T_1) @[RoundAnyRawFNToRecFN.scala 185:40]
    node _common_expOut_T = bits(sRoundedExp, 8, 0) @[RoundAnyRawFNToRecFN.scala 187:37]
    common_expOut <= _common_expOut_T @[RoundAnyRawFNToRecFN.scala 187:23]
    node _common_fractOut_T = bits(roundedSig, 23, 1) @[RoundAnyRawFNToRecFN.scala 190:27]
    node _common_fractOut_T_1 = bits(roundedSig, 22, 0) @[RoundAnyRawFNToRecFN.scala 191:27]
    node _common_fractOut_T_2 = mux(doShiftSigDown1, _common_fractOut_T, _common_fractOut_T_1) @[RoundAnyRawFNToRecFN.scala 189:16]
    common_fractOut <= _common_fractOut_T_2 @[RoundAnyRawFNToRecFN.scala 188:25]
    node _common_overflow_T = shr(sRoundedExp, 7) @[RoundAnyRawFNToRecFN.scala 196:30]
    node _common_overflow_T_1 = geq(_common_overflow_T, asSInt(UInt<3>("h3"))) @[RoundAnyRawFNToRecFN.scala 196:50]
    common_overflow <= _common_overflow_T_1 @[RoundAnyRawFNToRecFN.scala 193:25]
    node _common_totalUnderflow_T = lt(sRoundedExp, asSInt(UInt<8>("h6b"))) @[RoundAnyRawFNToRecFN.scala 200:31]
    common_totalUnderflow <= _common_totalUnderflow_T @[RoundAnyRawFNToRecFN.scala 197:31]
    node _unboundedRange_roundPosBit_T = bits(adjustedSig, 2, 2) @[RoundAnyRawFNToRecFN.scala 203:45]
    node _unboundedRange_roundPosBit_T_1 = bits(adjustedSig, 1, 1) @[RoundAnyRawFNToRecFN.scala 203:61]
    node unboundedRange_roundPosBit = mux(doShiftSigDown1, _unboundedRange_roundPosBit_T, _unboundedRange_roundPosBit_T_1) @[RoundAnyRawFNToRecFN.scala 203:16]
    node _unboundedRange_anyRound_T = bits(adjustedSig, 2, 2) @[RoundAnyRawFNToRecFN.scala 205:44]
    node _unboundedRange_anyRound_T_1 = and(doShiftSigDown1, _unboundedRange_anyRound_T) @[RoundAnyRawFNToRecFN.scala 205:30]
    node _unboundedRange_anyRound_T_2 = bits(adjustedSig, 1, 0) @[RoundAnyRawFNToRecFN.scala 205:63]
    node _unboundedRange_anyRound_T_3 = orr(_unboundedRange_anyRound_T_2) @[RoundAnyRawFNToRecFN.scala 205:70]
    node unboundedRange_anyRound = or(_unboundedRange_anyRound_T_1, _unboundedRange_anyRound_T_3) @[RoundAnyRawFNToRecFN.scala 205:49]
    node _unboundedRange_roundIncr_T = or(roundingMode_near_even, roundingMode_near_maxMag) @[RoundAnyRawFNToRecFN.scala 207:38]
    node _unboundedRange_roundIncr_T_1 = and(_unboundedRange_roundIncr_T, unboundedRange_roundPosBit) @[RoundAnyRawFNToRecFN.scala 207:67]
    node _unboundedRange_roundIncr_T_2 = and(roundMagUp, unboundedRange_anyRound) @[RoundAnyRawFNToRecFN.scala 209:29]
    node unboundedRange_roundIncr = or(_unboundedRange_roundIncr_T_1, _unboundedRange_roundIncr_T_2) @[RoundAnyRawFNToRecFN.scala 208:46]
    node _roundCarry_T = bits(roundedSig, 25, 25) @[RoundAnyRawFNToRecFN.scala 212:27]
    node _roundCarry_T_1 = bits(roundedSig, 24, 24) @[RoundAnyRawFNToRecFN.scala 213:27]
    node roundCarry = mux(doShiftSigDown1, _roundCarry_T, _roundCarry_T_1) @[RoundAnyRawFNToRecFN.scala 211:16]
    node _common_underflow_T = shr(io.in.sExp, 8) @[RoundAnyRawFNToRecFN.scala 220:49]
    node _common_underflow_T_1 = leq(_common_underflow_T, asSInt(UInt<1>("h0"))) @[RoundAnyRawFNToRecFN.scala 220:64]
    node _common_underflow_T_2 = and(anyRound, _common_underflow_T_1) @[RoundAnyRawFNToRecFN.scala 220:32]
    node _common_underflow_T_3 = bits(roundMask, 3, 3) @[RoundAnyRawFNToRecFN.scala 221:57]
    node _common_underflow_T_4 = bits(roundMask, 2, 2) @[RoundAnyRawFNToRecFN.scala 221:71]
    node _common_underflow_T_5 = mux(doShiftSigDown1, _common_underflow_T_3, _common_underflow_T_4) @[RoundAnyRawFNToRecFN.scala 221:30]
    node _common_underflow_T_6 = and(_common_underflow_T_2, _common_underflow_T_5) @[RoundAnyRawFNToRecFN.scala 220:72]
    node _common_underflow_T_7 = eq(io.detectTininess, UInt<1>("h1")) @[RoundAnyRawFNToRecFN.scala 222:49]
    node _common_underflow_T_8 = bits(roundMask, 4, 4) @[RoundAnyRawFNToRecFN.scala 224:49]
    node _common_underflow_T_9 = bits(roundMask, 3, 3) @[RoundAnyRawFNToRecFN.scala 225:49]
    node _common_underflow_T_10 = mux(doShiftSigDown1, _common_underflow_T_8, _common_underflow_T_9) @[RoundAnyRawFNToRecFN.scala 223:39]
    node _common_underflow_T_11 = eq(_common_underflow_T_10, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 223:34]
    node _common_underflow_T_12 = and(_common_underflow_T_7, _common_underflow_T_11) @[RoundAnyRawFNToRecFN.scala 222:77]
    node _common_underflow_T_13 = and(_common_underflow_T_12, roundCarry) @[RoundAnyRawFNToRecFN.scala 226:38]
    node _common_underflow_T_14 = and(_common_underflow_T_13, roundPosBit) @[RoundAnyRawFNToRecFN.scala 227:45]
    node _common_underflow_T_15 = and(_common_underflow_T_14, unboundedRange_roundIncr) @[RoundAnyRawFNToRecFN.scala 227:60]
    node _common_underflow_T_16 = eq(_common_underflow_T_15, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 222:27]
    node _common_underflow_T_17 = and(_common_underflow_T_6, _common_underflow_T_16) @[RoundAnyRawFNToRecFN.scala 221:76]
    node _common_underflow_T_18 = or(common_totalUnderflow, _common_underflow_T_17) @[RoundAnyRawFNToRecFN.scala 217:40]
    common_underflow <= _common_underflow_T_18 @[RoundAnyRawFNToRecFN.scala 215:26]
    node _common_inexact_T = or(common_totalUnderflow, anyRound) @[RoundAnyRawFNToRecFN.scala 230:49]
    common_inexact <= _common_inexact_T @[RoundAnyRawFNToRecFN.scala 230:24]
    node isNaNOut = or(io.invalidExc, io.in.isNaN) @[RoundAnyRawFNToRecFN.scala 235:34]
    node notNaN_isSpecialInfOut = or(io.infiniteExc, io.in.isInf) @[RoundAnyRawFNToRecFN.scala 236:49]
    node _commonCase_T = eq(isNaNOut, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 237:22]
    node _commonCase_T_1 = eq(notNaN_isSpecialInfOut, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 237:36]
    node _commonCase_T_2 = and(_commonCase_T, _commonCase_T_1) @[RoundAnyRawFNToRecFN.scala 237:33]
    node _commonCase_T_3 = eq(io.in.isZero, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 237:64]
    node commonCase = and(_commonCase_T_2, _commonCase_T_3) @[RoundAnyRawFNToRecFN.scala 237:61]
    node overflow = and(commonCase, common_overflow) @[RoundAnyRawFNToRecFN.scala 238:32]
    node underflow = and(commonCase, common_underflow) @[RoundAnyRawFNToRecFN.scala 239:32]
    node _inexact_T = and(commonCase, common_inexact) @[RoundAnyRawFNToRecFN.scala 240:43]
    node inexact = or(overflow, _inexact_T) @[RoundAnyRawFNToRecFN.scala 240:28]
    node _overflow_roundMagUp_T = or(roundingMode_near_even, roundingMode_near_maxMag) @[RoundAnyRawFNToRecFN.scala 243:32]
    node overflow_roundMagUp = or(_overflow_roundMagUp_T, roundMagUp) @[RoundAnyRawFNToRecFN.scala 243:60]
    node _pegMinNonzeroMagOut_T = and(commonCase, common_totalUnderflow) @[RoundAnyRawFNToRecFN.scala 245:20]
    node _pegMinNonzeroMagOut_T_1 = or(roundMagUp, roundingMode_odd) @[RoundAnyRawFNToRecFN.scala 245:60]
    node pegMinNonzeroMagOut = and(_pegMinNonzeroMagOut_T, _pegMinNonzeroMagOut_T_1) @[RoundAnyRawFNToRecFN.scala 245:45]
    node _pegMaxFiniteMagOut_T = eq(overflow_roundMagUp, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 246:42]
    node pegMaxFiniteMagOut = and(overflow, _pegMaxFiniteMagOut_T) @[RoundAnyRawFNToRecFN.scala 246:39]
    node _notNaN_isInfOut_T = and(overflow, overflow_roundMagUp) @[RoundAnyRawFNToRecFN.scala 248:45]
    node notNaN_isInfOut = or(notNaN_isSpecialInfOut, _notNaN_isInfOut_T) @[RoundAnyRawFNToRecFN.scala 248:32]
    node signOut = mux(isNaNOut, UInt<1>("h0"), io.in.sign) @[RoundAnyRawFNToRecFN.scala 250:22]
    node _expOut_T = or(io.in.isZero, common_totalUnderflow) @[RoundAnyRawFNToRecFN.scala 253:32]
    node _expOut_T_1 = mux(_expOut_T, UInt<9>("h1c0"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 253:18]
    node _expOut_T_2 = not(_expOut_T_1) @[RoundAnyRawFNToRecFN.scala 253:14]
    node _expOut_T_3 = and(common_expOut, _expOut_T_2) @[RoundAnyRawFNToRecFN.scala 252:24]
    node _expOut_T_4 = not(UInt<9>("h6b")) @[RoundAnyRawFNToRecFN.scala 258:19]
    node _expOut_T_5 = mux(pegMinNonzeroMagOut, _expOut_T_4, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 257:18]
    node _expOut_T_6 = not(_expOut_T_5) @[RoundAnyRawFNToRecFN.scala 257:14]
    node _expOut_T_7 = and(_expOut_T_3, _expOut_T_6) @[RoundAnyRawFNToRecFN.scala 256:17]
    node _expOut_T_8 = mux(pegMaxFiniteMagOut, UInt<9>("h80"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 261:18]
    node _expOut_T_9 = not(_expOut_T_8) @[RoundAnyRawFNToRecFN.scala 261:14]
    node _expOut_T_10 = and(_expOut_T_7, _expOut_T_9) @[RoundAnyRawFNToRecFN.scala 260:17]
    node _expOut_T_11 = mux(notNaN_isInfOut, UInt<9>("h40"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 265:18]
    node _expOut_T_12 = not(_expOut_T_11) @[RoundAnyRawFNToRecFN.scala 265:14]
    node _expOut_T_13 = and(_expOut_T_10, _expOut_T_12) @[RoundAnyRawFNToRecFN.scala 264:17]
    node _expOut_T_14 = mux(pegMinNonzeroMagOut, UInt<9>("h6b"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 269:16]
    node _expOut_T_15 = or(_expOut_T_13, _expOut_T_14) @[RoundAnyRawFNToRecFN.scala 268:18]
    node _expOut_T_16 = mux(pegMaxFiniteMagOut, UInt<9>("h17f"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 273:16]
    node _expOut_T_17 = or(_expOut_T_15, _expOut_T_16) @[RoundAnyRawFNToRecFN.scala 272:15]
    node _expOut_T_18 = mux(notNaN_isInfOut, UInt<9>("h180"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 277:16]
    node _expOut_T_19 = or(_expOut_T_17, _expOut_T_18) @[RoundAnyRawFNToRecFN.scala 276:15]
    node _expOut_T_20 = mux(isNaNOut, UInt<9>("h1c0"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 278:16]
    node expOut = or(_expOut_T_19, _expOut_T_20) @[RoundAnyRawFNToRecFN.scala 277:73]
    node _fractOut_T = or(isNaNOut, io.in.isZero) @[RoundAnyRawFNToRecFN.scala 280:22]
    node _fractOut_T_1 = or(_fractOut_T, common_totalUnderflow) @[RoundAnyRawFNToRecFN.scala 280:38]
    node _fractOut_T_2 = mux(isNaNOut, UInt<23>("h400000"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 281:16]
    node _fractOut_T_3 = mux(_fractOut_T_1, _fractOut_T_2, common_fractOut) @[RoundAnyRawFNToRecFN.scala 280:12]
    node _fractOut_T_4 = bits(pegMaxFiniteMagOut, 0, 0) @[Bitwise.scala 77:15]
    node _fractOut_T_5 = mux(_fractOut_T_4, UInt<23>("h7fffff"), UInt<23>("h0")) @[Bitwise.scala 77:12]
    node fractOut = or(_fractOut_T_3, _fractOut_T_5) @[RoundAnyRawFNToRecFN.scala 283:11]
    node _io_out_T = cat(signOut, expOut) @[RoundAnyRawFNToRecFN.scala 286:23]
    node _io_out_T_1 = cat(_io_out_T, fractOut) @[RoundAnyRawFNToRecFN.scala 286:33]
    io.out <= _io_out_T_1 @[RoundAnyRawFNToRecFN.scala 286:12]
    node _io_exceptionFlags_T = cat(io.invalidExc, io.infiniteExc) @[RoundAnyRawFNToRecFN.scala 288:23]
    node _io_exceptionFlags_T_1 = cat(_io_exceptionFlags_T, overflow) @[RoundAnyRawFNToRecFN.scala 288:41]
    node _io_exceptionFlags_T_2 = cat(_io_exceptionFlags_T_1, underflow) @[RoundAnyRawFNToRecFN.scala 288:53]
    node _io_exceptionFlags_T_3 = cat(_io_exceptionFlags_T_2, inexact) @[RoundAnyRawFNToRecFN.scala 288:66]
    io.exceptionFlags <= _io_exceptionFlags_T_3 @[RoundAnyRawFNToRecFN.scala 287:23]

  module RoundRawFNToRecFN_e8_s24_2 :
    output io : { flip invalidExc : UInt<1>, flip infiniteExc : UInt<1>, flip in : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<27>}, flip roundingMode : UInt<3>, flip detectTininess : UInt<1>, out : UInt<33>, exceptionFlags : UInt<5>}

    inst roundAnyRawFNToRecFN of RoundAnyRawFNToRecFN_ie8_is26_oe8_os24_2 @[RoundAnyRawFNToRecFN.scala 310:15]
    roundAnyRawFNToRecFN.io.invalidExc <= io.invalidExc @[RoundAnyRawFNToRecFN.scala 313:44]
    roundAnyRawFNToRecFN.io.infiniteExc <= io.infiniteExc @[RoundAnyRawFNToRecFN.scala 314:44]
    roundAnyRawFNToRecFN.io.in.sig <= io.in.sig @[RoundAnyRawFNToRecFN.scala 315:44]
    roundAnyRawFNToRecFN.io.in.sExp <= io.in.sExp @[RoundAnyRawFNToRecFN.scala 315:44]
    roundAnyRawFNToRecFN.io.in.sign <= io.in.sign @[RoundAnyRawFNToRecFN.scala 315:44]
    roundAnyRawFNToRecFN.io.in.isZero <= io.in.isZero @[RoundAnyRawFNToRecFN.scala 315:44]
    roundAnyRawFNToRecFN.io.in.isInf <= io.in.isInf @[RoundAnyRawFNToRecFN.scala 315:44]
    roundAnyRawFNToRecFN.io.in.isNaN <= io.in.isNaN @[RoundAnyRawFNToRecFN.scala 315:44]
    roundAnyRawFNToRecFN.io.roundingMode <= io.roundingMode @[RoundAnyRawFNToRecFN.scala 316:44]
    roundAnyRawFNToRecFN.io.detectTininess <= io.detectTininess @[RoundAnyRawFNToRecFN.scala 317:44]
    io.out <= roundAnyRawFNToRecFN.io.out @[RoundAnyRawFNToRecFN.scala 318:23]
    io.exceptionFlags <= roundAnyRawFNToRecFN.io.exceptionFlags @[RoundAnyRawFNToRecFN.scala 319:23]

  module AddRecFN :
    output io : { flip subOp : UInt<1>, flip a : UInt<33>, flip b : UInt<33>, flip roundingMode : UInt<3>, flip detectTininess : UInt<1>, out : UInt<33>, exceptionFlags : UInt<5>}

    inst addRawFN of AddRawFN @[AddRecFN.scala 147:26]
    addRawFN.io.subOp <= io.subOp @[AddRecFN.scala 149:30]
    node addRawFN_io_a_exp = bits(io.a, 31, 23) @[rawFloatFromRecFN.scala 51:21]
    node _addRawFN_io_a_isZero_T = bits(addRawFN_io_a_exp, 8, 6) @[rawFloatFromRecFN.scala 52:28]
    node addRawFN_io_a_isZero = eq(_addRawFN_io_a_isZero_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 52:53]
    node _addRawFN_io_a_isSpecial_T = bits(addRawFN_io_a_exp, 8, 7) @[rawFloatFromRecFN.scala 53:28]
    node addRawFN_io_a_isSpecial = eq(_addRawFN_io_a_isSpecial_T, UInt<2>("h3")) @[rawFloatFromRecFN.scala 53:53]
    wire addRawFN_io_a_out : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>} @[rawFloatFromRecFN.scala 55:23]
    node _addRawFN_io_a_out_isNaN_T = bits(addRawFN_io_a_exp, 6, 6) @[rawFloatFromRecFN.scala 56:41]
    node _addRawFN_io_a_out_isNaN_T_1 = and(addRawFN_io_a_isSpecial, _addRawFN_io_a_out_isNaN_T) @[rawFloatFromRecFN.scala 56:33]
    addRawFN_io_a_out.isNaN <= _addRawFN_io_a_out_isNaN_T_1 @[rawFloatFromRecFN.scala 56:20]
    node _addRawFN_io_a_out_isInf_T = bits(addRawFN_io_a_exp, 6, 6) @[rawFloatFromRecFN.scala 57:41]
    node _addRawFN_io_a_out_isInf_T_1 = eq(_addRawFN_io_a_out_isInf_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 57:36]
    node _addRawFN_io_a_out_isInf_T_2 = and(addRawFN_io_a_isSpecial, _addRawFN_io_a_out_isInf_T_1) @[rawFloatFromRecFN.scala 57:33]
    addRawFN_io_a_out.isInf <= _addRawFN_io_a_out_isInf_T_2 @[rawFloatFromRecFN.scala 57:20]
    addRawFN_io_a_out.isZero <= addRawFN_io_a_isZero @[rawFloatFromRecFN.scala 58:20]
    node _addRawFN_io_a_out_sign_T = bits(io.a, 32, 32) @[rawFloatFromRecFN.scala 59:25]
    addRawFN_io_a_out.sign <= _addRawFN_io_a_out_sign_T @[rawFloatFromRecFN.scala 59:20]
    node _addRawFN_io_a_out_sExp_T = cvt(addRawFN_io_a_exp) @[rawFloatFromRecFN.scala 60:27]
    addRawFN_io_a_out.sExp <= _addRawFN_io_a_out_sExp_T @[rawFloatFromRecFN.scala 60:20]
    node _addRawFN_io_a_out_sig_T = eq(addRawFN_io_a_isZero, UInt<1>("h0")) @[rawFloatFromRecFN.scala 61:35]
    node _addRawFN_io_a_out_sig_T_1 = cat(UInt<1>("h0"), _addRawFN_io_a_out_sig_T) @[rawFloatFromRecFN.scala 61:32]
    node _addRawFN_io_a_out_sig_T_2 = bits(io.a, 22, 0) @[rawFloatFromRecFN.scala 61:49]
    node _addRawFN_io_a_out_sig_T_3 = cat(_addRawFN_io_a_out_sig_T_1, _addRawFN_io_a_out_sig_T_2) @[rawFloatFromRecFN.scala 61:44]
    addRawFN_io_a_out.sig <= _addRawFN_io_a_out_sig_T_3 @[rawFloatFromRecFN.scala 61:20]
    addRawFN.io.a.sig <= addRawFN_io_a_out.sig @[AddRecFN.scala 150:30]
    addRawFN.io.a.sExp <= addRawFN_io_a_out.sExp @[AddRecFN.scala 150:30]
    addRawFN.io.a.sign <= addRawFN_io_a_out.sign @[AddRecFN.scala 150:30]
    addRawFN.io.a.isZero <= addRawFN_io_a_out.isZero @[AddRecFN.scala 150:30]
    addRawFN.io.a.isInf <= addRawFN_io_a_out.isInf @[AddRecFN.scala 150:30]
    addRawFN.io.a.isNaN <= addRawFN_io_a_out.isNaN @[AddRecFN.scala 150:30]
    node addRawFN_io_b_exp = bits(io.b, 31, 23) @[rawFloatFromRecFN.scala 51:21]
    node _addRawFN_io_b_isZero_T = bits(addRawFN_io_b_exp, 8, 6) @[rawFloatFromRecFN.scala 52:28]
    node addRawFN_io_b_isZero = eq(_addRawFN_io_b_isZero_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 52:53]
    node _addRawFN_io_b_isSpecial_T = bits(addRawFN_io_b_exp, 8, 7) @[rawFloatFromRecFN.scala 53:28]
    node addRawFN_io_b_isSpecial = eq(_addRawFN_io_b_isSpecial_T, UInt<2>("h3")) @[rawFloatFromRecFN.scala 53:53]
    wire addRawFN_io_b_out : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>} @[rawFloatFromRecFN.scala 55:23]
    node _addRawFN_io_b_out_isNaN_T = bits(addRawFN_io_b_exp, 6, 6) @[rawFloatFromRecFN.scala 56:41]
    node _addRawFN_io_b_out_isNaN_T_1 = and(addRawFN_io_b_isSpecial, _addRawFN_io_b_out_isNaN_T) @[rawFloatFromRecFN.scala 56:33]
    addRawFN_io_b_out.isNaN <= _addRawFN_io_b_out_isNaN_T_1 @[rawFloatFromRecFN.scala 56:20]
    node _addRawFN_io_b_out_isInf_T = bits(addRawFN_io_b_exp, 6, 6) @[rawFloatFromRecFN.scala 57:41]
    node _addRawFN_io_b_out_isInf_T_1 = eq(_addRawFN_io_b_out_isInf_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 57:36]
    node _addRawFN_io_b_out_isInf_T_2 = and(addRawFN_io_b_isSpecial, _addRawFN_io_b_out_isInf_T_1) @[rawFloatFromRecFN.scala 57:33]
    addRawFN_io_b_out.isInf <= _addRawFN_io_b_out_isInf_T_2 @[rawFloatFromRecFN.scala 57:20]
    addRawFN_io_b_out.isZero <= addRawFN_io_b_isZero @[rawFloatFromRecFN.scala 58:20]
    node _addRawFN_io_b_out_sign_T = bits(io.b, 32, 32) @[rawFloatFromRecFN.scala 59:25]
    addRawFN_io_b_out.sign <= _addRawFN_io_b_out_sign_T @[rawFloatFromRecFN.scala 59:20]
    node _addRawFN_io_b_out_sExp_T = cvt(addRawFN_io_b_exp) @[rawFloatFromRecFN.scala 60:27]
    addRawFN_io_b_out.sExp <= _addRawFN_io_b_out_sExp_T @[rawFloatFromRecFN.scala 60:20]
    node _addRawFN_io_b_out_sig_T = eq(addRawFN_io_b_isZero, UInt<1>("h0")) @[rawFloatFromRecFN.scala 61:35]
    node _addRawFN_io_b_out_sig_T_1 = cat(UInt<1>("h0"), _addRawFN_io_b_out_sig_T) @[rawFloatFromRecFN.scala 61:32]
    node _addRawFN_io_b_out_sig_T_2 = bits(io.b, 22, 0) @[rawFloatFromRecFN.scala 61:49]
    node _addRawFN_io_b_out_sig_T_3 = cat(_addRawFN_io_b_out_sig_T_1, _addRawFN_io_b_out_sig_T_2) @[rawFloatFromRecFN.scala 61:44]
    addRawFN_io_b_out.sig <= _addRawFN_io_b_out_sig_T_3 @[rawFloatFromRecFN.scala 61:20]
    addRawFN.io.b.sig <= addRawFN_io_b_out.sig @[AddRecFN.scala 151:30]
    addRawFN.io.b.sExp <= addRawFN_io_b_out.sExp @[AddRecFN.scala 151:30]
    addRawFN.io.b.sign <= addRawFN_io_b_out.sign @[AddRecFN.scala 151:30]
    addRawFN.io.b.isZero <= addRawFN_io_b_out.isZero @[AddRecFN.scala 151:30]
    addRawFN.io.b.isInf <= addRawFN_io_b_out.isInf @[AddRecFN.scala 151:30]
    addRawFN.io.b.isNaN <= addRawFN_io_b_out.isNaN @[AddRecFN.scala 151:30]
    addRawFN.io.roundingMode <= io.roundingMode @[AddRecFN.scala 152:30]
    inst roundRawFNToRecFN of RoundRawFNToRecFN_e8_s24_2 @[AddRecFN.scala 157:15]
    roundRawFNToRecFN.io.invalidExc <= addRawFN.io.invalidExc @[AddRecFN.scala 158:39]
    roundRawFNToRecFN.io.infiniteExc <= UInt<1>("h0") @[AddRecFN.scala 159:39]
    roundRawFNToRecFN.io.in.sig <= addRawFN.io.rawOut.sig @[AddRecFN.scala 160:39]
    roundRawFNToRecFN.io.in.sExp <= addRawFN.io.rawOut.sExp @[AddRecFN.scala 160:39]
    roundRawFNToRecFN.io.in.sign <= addRawFN.io.rawOut.sign @[AddRecFN.scala 160:39]
    roundRawFNToRecFN.io.in.isZero <= addRawFN.io.rawOut.isZero @[AddRecFN.scala 160:39]
    roundRawFNToRecFN.io.in.isInf <= addRawFN.io.rawOut.isInf @[AddRecFN.scala 160:39]
    roundRawFNToRecFN.io.in.isNaN <= addRawFN.io.rawOut.isNaN @[AddRecFN.scala 160:39]
    roundRawFNToRecFN.io.roundingMode <= io.roundingMode @[AddRecFN.scala 161:39]
    roundRawFNToRecFN.io.detectTininess <= io.detectTininess @[AddRecFN.scala 162:41]
    io.out <= roundRawFNToRecFN.io.out @[AddRecFN.scala 163:23]
    io.exceptionFlags <= roundRawFNToRecFN.io.exceptionFlags @[AddRecFN.scala 164:23]

  module FP32Sub :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<32>, flip b : UInt<32>, result : UInt<32>}

    inst adder of AddRecFN @[FPU.scala 45:23]
    node a_recoded_rawIn_sign = bits(io.a, 31, 31) @[rawFloatFromFN.scala 44:18]
    node a_recoded_rawIn_expIn = bits(io.a, 30, 23) @[rawFloatFromFN.scala 45:19]
    node a_recoded_rawIn_fractIn = bits(io.a, 22, 0) @[rawFloatFromFN.scala 46:21]
    node a_recoded_rawIn_isZeroExpIn = eq(a_recoded_rawIn_expIn, UInt<1>("h0")) @[rawFloatFromFN.scala 48:30]
    node a_recoded_rawIn_isZeroFractIn = eq(a_recoded_rawIn_fractIn, UInt<1>("h0")) @[rawFloatFromFN.scala 49:34]
    node _a_recoded_rawIn_normDist_T = bits(a_recoded_rawIn_fractIn, 0, 0) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_1 = bits(a_recoded_rawIn_fractIn, 1, 1) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_2 = bits(a_recoded_rawIn_fractIn, 2, 2) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_3 = bits(a_recoded_rawIn_fractIn, 3, 3) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_4 = bits(a_recoded_rawIn_fractIn, 4, 4) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_5 = bits(a_recoded_rawIn_fractIn, 5, 5) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_6 = bits(a_recoded_rawIn_fractIn, 6, 6) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_7 = bits(a_recoded_rawIn_fractIn, 7, 7) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_8 = bits(a_recoded_rawIn_fractIn, 8, 8) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_9 = bits(a_recoded_rawIn_fractIn, 9, 9) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_10 = bits(a_recoded_rawIn_fractIn, 10, 10) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_11 = bits(a_recoded_rawIn_fractIn, 11, 11) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_12 = bits(a_recoded_rawIn_fractIn, 12, 12) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_13 = bits(a_recoded_rawIn_fractIn, 13, 13) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_14 = bits(a_recoded_rawIn_fractIn, 14, 14) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_15 = bits(a_recoded_rawIn_fractIn, 15, 15) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_16 = bits(a_recoded_rawIn_fractIn, 16, 16) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_17 = bits(a_recoded_rawIn_fractIn, 17, 17) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_18 = bits(a_recoded_rawIn_fractIn, 18, 18) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_19 = bits(a_recoded_rawIn_fractIn, 19, 19) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_20 = bits(a_recoded_rawIn_fractIn, 20, 20) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_21 = bits(a_recoded_rawIn_fractIn, 21, 21) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_22 = bits(a_recoded_rawIn_fractIn, 22, 22) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_23 = mux(_a_recoded_rawIn_normDist_T_1, UInt<5>("h15"), UInt<5>("h16")) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_24 = mux(_a_recoded_rawIn_normDist_T_2, UInt<5>("h14"), _a_recoded_rawIn_normDist_T_23) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_25 = mux(_a_recoded_rawIn_normDist_T_3, UInt<5>("h13"), _a_recoded_rawIn_normDist_T_24) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_26 = mux(_a_recoded_rawIn_normDist_T_4, UInt<5>("h12"), _a_recoded_rawIn_normDist_T_25) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_27 = mux(_a_recoded_rawIn_normDist_T_5, UInt<5>("h11"), _a_recoded_rawIn_normDist_T_26) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_28 = mux(_a_recoded_rawIn_normDist_T_6, UInt<5>("h10"), _a_recoded_rawIn_normDist_T_27) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_29 = mux(_a_recoded_rawIn_normDist_T_7, UInt<4>("hf"), _a_recoded_rawIn_normDist_T_28) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_30 = mux(_a_recoded_rawIn_normDist_T_8, UInt<4>("he"), _a_recoded_rawIn_normDist_T_29) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_31 = mux(_a_recoded_rawIn_normDist_T_9, UInt<4>("hd"), _a_recoded_rawIn_normDist_T_30) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_32 = mux(_a_recoded_rawIn_normDist_T_10, UInt<4>("hc"), _a_recoded_rawIn_normDist_T_31) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_33 = mux(_a_recoded_rawIn_normDist_T_11, UInt<4>("hb"), _a_recoded_rawIn_normDist_T_32) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_34 = mux(_a_recoded_rawIn_normDist_T_12, UInt<4>("ha"), _a_recoded_rawIn_normDist_T_33) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_35 = mux(_a_recoded_rawIn_normDist_T_13, UInt<4>("h9"), _a_recoded_rawIn_normDist_T_34) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_36 = mux(_a_recoded_rawIn_normDist_T_14, UInt<4>("h8"), _a_recoded_rawIn_normDist_T_35) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_37 = mux(_a_recoded_rawIn_normDist_T_15, UInt<3>("h7"), _a_recoded_rawIn_normDist_T_36) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_38 = mux(_a_recoded_rawIn_normDist_T_16, UInt<3>("h6"), _a_recoded_rawIn_normDist_T_37) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_39 = mux(_a_recoded_rawIn_normDist_T_17, UInt<3>("h5"), _a_recoded_rawIn_normDist_T_38) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_40 = mux(_a_recoded_rawIn_normDist_T_18, UInt<3>("h4"), _a_recoded_rawIn_normDist_T_39) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_41 = mux(_a_recoded_rawIn_normDist_T_19, UInt<2>("h3"), _a_recoded_rawIn_normDist_T_40) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_42 = mux(_a_recoded_rawIn_normDist_T_20, UInt<2>("h2"), _a_recoded_rawIn_normDist_T_41) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_43 = mux(_a_recoded_rawIn_normDist_T_21, UInt<1>("h1"), _a_recoded_rawIn_normDist_T_42) @[Mux.scala 47:70]
    node a_recoded_rawIn_normDist = mux(_a_recoded_rawIn_normDist_T_22, UInt<1>("h0"), _a_recoded_rawIn_normDist_T_43) @[Mux.scala 47:70]
    node _a_recoded_rawIn_subnormFract_T = dshl(a_recoded_rawIn_fractIn, a_recoded_rawIn_normDist) @[rawFloatFromFN.scala 52:33]
    node _a_recoded_rawIn_subnormFract_T_1 = bits(_a_recoded_rawIn_subnormFract_T, 21, 0) @[rawFloatFromFN.scala 52:46]
    node a_recoded_rawIn_subnormFract = shl(_a_recoded_rawIn_subnormFract_T_1, 1) @[rawFloatFromFN.scala 52:64]
    node _a_recoded_rawIn_adjustedExp_T = xor(a_recoded_rawIn_normDist, UInt<9>("h1ff")) @[rawFloatFromFN.scala 55:18]
    node _a_recoded_rawIn_adjustedExp_T_1 = mux(a_recoded_rawIn_isZeroExpIn, _a_recoded_rawIn_adjustedExp_T, a_recoded_rawIn_expIn) @[rawFloatFromFN.scala 54:10]
    node _a_recoded_rawIn_adjustedExp_T_2 = mux(a_recoded_rawIn_isZeroExpIn, UInt<2>("h2"), UInt<1>("h1")) @[rawFloatFromFN.scala 58:14]
    node _a_recoded_rawIn_adjustedExp_T_3 = or(UInt<8>("h80"), _a_recoded_rawIn_adjustedExp_T_2) @[rawFloatFromFN.scala 58:9]
    node _a_recoded_rawIn_adjustedExp_T_4 = add(_a_recoded_rawIn_adjustedExp_T_1, _a_recoded_rawIn_adjustedExp_T_3) @[rawFloatFromFN.scala 57:9]
    node a_recoded_rawIn_adjustedExp = tail(_a_recoded_rawIn_adjustedExp_T_4, 1) @[rawFloatFromFN.scala 57:9]
    node a_recoded_rawIn_isZero = and(a_recoded_rawIn_isZeroExpIn, a_recoded_rawIn_isZeroFractIn) @[rawFloatFromFN.scala 60:30]
    node _a_recoded_rawIn_isSpecial_T = bits(a_recoded_rawIn_adjustedExp, 8, 7) @[rawFloatFromFN.scala 61:32]
    node a_recoded_rawIn_isSpecial = eq(_a_recoded_rawIn_isSpecial_T, UInt<2>("h3")) @[rawFloatFromFN.scala 61:57]
    wire a_recoded_rawIn : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>} @[rawFloatFromFN.scala 63:19]
    node _a_recoded_rawIn_out_isNaN_T = eq(a_recoded_rawIn_isZeroFractIn, UInt<1>("h0")) @[rawFloatFromFN.scala 64:31]
    node _a_recoded_rawIn_out_isNaN_T_1 = and(a_recoded_rawIn_isSpecial, _a_recoded_rawIn_out_isNaN_T) @[rawFloatFromFN.scala 64:28]
    a_recoded_rawIn.isNaN <= _a_recoded_rawIn_out_isNaN_T_1 @[rawFloatFromFN.scala 64:15]
    node _a_recoded_rawIn_out_isInf_T = and(a_recoded_rawIn_isSpecial, a_recoded_rawIn_isZeroFractIn) @[rawFloatFromFN.scala 65:28]
    a_recoded_rawIn.isInf <= _a_recoded_rawIn_out_isInf_T @[rawFloatFromFN.scala 65:15]
    a_recoded_rawIn.isZero <= a_recoded_rawIn_isZero @[rawFloatFromFN.scala 66:16]
    a_recoded_rawIn.sign <= a_recoded_rawIn_sign @[rawFloatFromFN.scala 67:14]
    node _a_recoded_rawIn_out_sExp_T = bits(a_recoded_rawIn_adjustedExp, 8, 0) @[rawFloatFromFN.scala 68:28]
    node _a_recoded_rawIn_out_sExp_T_1 = cvt(_a_recoded_rawIn_out_sExp_T) @[rawFloatFromFN.scala 68:42]
    a_recoded_rawIn.sExp <= _a_recoded_rawIn_out_sExp_T_1 @[rawFloatFromFN.scala 68:14]
    node _a_recoded_rawIn_out_sig_T = eq(a_recoded_rawIn_isZero, UInt<1>("h0")) @[rawFloatFromFN.scala 70:19]
    node _a_recoded_rawIn_out_sig_T_1 = cat(UInt<1>("h0"), _a_recoded_rawIn_out_sig_T) @[rawFloatFromFN.scala 70:16]
    node _a_recoded_rawIn_out_sig_T_2 = mux(a_recoded_rawIn_isZeroExpIn, a_recoded_rawIn_subnormFract, a_recoded_rawIn_fractIn) @[rawFloatFromFN.scala 70:33]
    node _a_recoded_rawIn_out_sig_T_3 = cat(_a_recoded_rawIn_out_sig_T_1, _a_recoded_rawIn_out_sig_T_2) @[rawFloatFromFN.scala 70:27]
    a_recoded_rawIn.sig <= _a_recoded_rawIn_out_sig_T_3 @[rawFloatFromFN.scala 69:13]
    node _a_recoded_T = bits(a_recoded_rawIn.sExp, 8, 6) @[recFNFromFN.scala 48:50]
    node _a_recoded_T_1 = mux(a_recoded_rawIn.isZero, UInt<3>("h0"), _a_recoded_T) @[recFNFromFN.scala 48:15]
    node _a_recoded_T_2 = mux(a_recoded_rawIn.isNaN, UInt<1>("h1"), UInt<1>("h0")) @[recFNFromFN.scala 49:20]
    node _a_recoded_T_3 = or(_a_recoded_T_1, _a_recoded_T_2) @[recFNFromFN.scala 48:76]
    node _a_recoded_T_4 = cat(a_recoded_rawIn.sign, _a_recoded_T_3) @[recFNFromFN.scala 47:20]
    node _a_recoded_T_5 = bits(a_recoded_rawIn.sExp, 5, 0) @[recFNFromFN.scala 50:23]
    node _a_recoded_T_6 = cat(_a_recoded_T_4, _a_recoded_T_5) @[recFNFromFN.scala 49:45]
    node _a_recoded_T_7 = bits(a_recoded_rawIn.sig, 22, 0) @[recFNFromFN.scala 51:22]
    node a_recoded = cat(_a_recoded_T_6, _a_recoded_T_7) @[recFNFromFN.scala 50:41]
    node b_recoded_rawIn_sign = bits(io.b, 31, 31) @[rawFloatFromFN.scala 44:18]
    node b_recoded_rawIn_expIn = bits(io.b, 30, 23) @[rawFloatFromFN.scala 45:19]
    node b_recoded_rawIn_fractIn = bits(io.b, 22, 0) @[rawFloatFromFN.scala 46:21]
    node b_recoded_rawIn_isZeroExpIn = eq(b_recoded_rawIn_expIn, UInt<1>("h0")) @[rawFloatFromFN.scala 48:30]
    node b_recoded_rawIn_isZeroFractIn = eq(b_recoded_rawIn_fractIn, UInt<1>("h0")) @[rawFloatFromFN.scala 49:34]
    node _b_recoded_rawIn_normDist_T = bits(b_recoded_rawIn_fractIn, 0, 0) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_1 = bits(b_recoded_rawIn_fractIn, 1, 1) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_2 = bits(b_recoded_rawIn_fractIn, 2, 2) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_3 = bits(b_recoded_rawIn_fractIn, 3, 3) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_4 = bits(b_recoded_rawIn_fractIn, 4, 4) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_5 = bits(b_recoded_rawIn_fractIn, 5, 5) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_6 = bits(b_recoded_rawIn_fractIn, 6, 6) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_7 = bits(b_recoded_rawIn_fractIn, 7, 7) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_8 = bits(b_recoded_rawIn_fractIn, 8, 8) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_9 = bits(b_recoded_rawIn_fractIn, 9, 9) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_10 = bits(b_recoded_rawIn_fractIn, 10, 10) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_11 = bits(b_recoded_rawIn_fractIn, 11, 11) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_12 = bits(b_recoded_rawIn_fractIn, 12, 12) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_13 = bits(b_recoded_rawIn_fractIn, 13, 13) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_14 = bits(b_recoded_rawIn_fractIn, 14, 14) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_15 = bits(b_recoded_rawIn_fractIn, 15, 15) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_16 = bits(b_recoded_rawIn_fractIn, 16, 16) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_17 = bits(b_recoded_rawIn_fractIn, 17, 17) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_18 = bits(b_recoded_rawIn_fractIn, 18, 18) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_19 = bits(b_recoded_rawIn_fractIn, 19, 19) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_20 = bits(b_recoded_rawIn_fractIn, 20, 20) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_21 = bits(b_recoded_rawIn_fractIn, 21, 21) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_22 = bits(b_recoded_rawIn_fractIn, 22, 22) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_23 = mux(_b_recoded_rawIn_normDist_T_1, UInt<5>("h15"), UInt<5>("h16")) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_24 = mux(_b_recoded_rawIn_normDist_T_2, UInt<5>("h14"), _b_recoded_rawIn_normDist_T_23) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_25 = mux(_b_recoded_rawIn_normDist_T_3, UInt<5>("h13"), _b_recoded_rawIn_normDist_T_24) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_26 = mux(_b_recoded_rawIn_normDist_T_4, UInt<5>("h12"), _b_recoded_rawIn_normDist_T_25) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_27 = mux(_b_recoded_rawIn_normDist_T_5, UInt<5>("h11"), _b_recoded_rawIn_normDist_T_26) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_28 = mux(_b_recoded_rawIn_normDist_T_6, UInt<5>("h10"), _b_recoded_rawIn_normDist_T_27) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_29 = mux(_b_recoded_rawIn_normDist_T_7, UInt<4>("hf"), _b_recoded_rawIn_normDist_T_28) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_30 = mux(_b_recoded_rawIn_normDist_T_8, UInt<4>("he"), _b_recoded_rawIn_normDist_T_29) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_31 = mux(_b_recoded_rawIn_normDist_T_9, UInt<4>("hd"), _b_recoded_rawIn_normDist_T_30) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_32 = mux(_b_recoded_rawIn_normDist_T_10, UInt<4>("hc"), _b_recoded_rawIn_normDist_T_31) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_33 = mux(_b_recoded_rawIn_normDist_T_11, UInt<4>("hb"), _b_recoded_rawIn_normDist_T_32) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_34 = mux(_b_recoded_rawIn_normDist_T_12, UInt<4>("ha"), _b_recoded_rawIn_normDist_T_33) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_35 = mux(_b_recoded_rawIn_normDist_T_13, UInt<4>("h9"), _b_recoded_rawIn_normDist_T_34) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_36 = mux(_b_recoded_rawIn_normDist_T_14, UInt<4>("h8"), _b_recoded_rawIn_normDist_T_35) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_37 = mux(_b_recoded_rawIn_normDist_T_15, UInt<3>("h7"), _b_recoded_rawIn_normDist_T_36) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_38 = mux(_b_recoded_rawIn_normDist_T_16, UInt<3>("h6"), _b_recoded_rawIn_normDist_T_37) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_39 = mux(_b_recoded_rawIn_normDist_T_17, UInt<3>("h5"), _b_recoded_rawIn_normDist_T_38) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_40 = mux(_b_recoded_rawIn_normDist_T_18, UInt<3>("h4"), _b_recoded_rawIn_normDist_T_39) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_41 = mux(_b_recoded_rawIn_normDist_T_19, UInt<2>("h3"), _b_recoded_rawIn_normDist_T_40) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_42 = mux(_b_recoded_rawIn_normDist_T_20, UInt<2>("h2"), _b_recoded_rawIn_normDist_T_41) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_43 = mux(_b_recoded_rawIn_normDist_T_21, UInt<1>("h1"), _b_recoded_rawIn_normDist_T_42) @[Mux.scala 47:70]
    node b_recoded_rawIn_normDist = mux(_b_recoded_rawIn_normDist_T_22, UInt<1>("h0"), _b_recoded_rawIn_normDist_T_43) @[Mux.scala 47:70]
    node _b_recoded_rawIn_subnormFract_T = dshl(b_recoded_rawIn_fractIn, b_recoded_rawIn_normDist) @[rawFloatFromFN.scala 52:33]
    node _b_recoded_rawIn_subnormFract_T_1 = bits(_b_recoded_rawIn_subnormFract_T, 21, 0) @[rawFloatFromFN.scala 52:46]
    node b_recoded_rawIn_subnormFract = shl(_b_recoded_rawIn_subnormFract_T_1, 1) @[rawFloatFromFN.scala 52:64]
    node _b_recoded_rawIn_adjustedExp_T = xor(b_recoded_rawIn_normDist, UInt<9>("h1ff")) @[rawFloatFromFN.scala 55:18]
    node _b_recoded_rawIn_adjustedExp_T_1 = mux(b_recoded_rawIn_isZeroExpIn, _b_recoded_rawIn_adjustedExp_T, b_recoded_rawIn_expIn) @[rawFloatFromFN.scala 54:10]
    node _b_recoded_rawIn_adjustedExp_T_2 = mux(b_recoded_rawIn_isZeroExpIn, UInt<2>("h2"), UInt<1>("h1")) @[rawFloatFromFN.scala 58:14]
    node _b_recoded_rawIn_adjustedExp_T_3 = or(UInt<8>("h80"), _b_recoded_rawIn_adjustedExp_T_2) @[rawFloatFromFN.scala 58:9]
    node _b_recoded_rawIn_adjustedExp_T_4 = add(_b_recoded_rawIn_adjustedExp_T_1, _b_recoded_rawIn_adjustedExp_T_3) @[rawFloatFromFN.scala 57:9]
    node b_recoded_rawIn_adjustedExp = tail(_b_recoded_rawIn_adjustedExp_T_4, 1) @[rawFloatFromFN.scala 57:9]
    node b_recoded_rawIn_isZero = and(b_recoded_rawIn_isZeroExpIn, b_recoded_rawIn_isZeroFractIn) @[rawFloatFromFN.scala 60:30]
    node _b_recoded_rawIn_isSpecial_T = bits(b_recoded_rawIn_adjustedExp, 8, 7) @[rawFloatFromFN.scala 61:32]
    node b_recoded_rawIn_isSpecial = eq(_b_recoded_rawIn_isSpecial_T, UInt<2>("h3")) @[rawFloatFromFN.scala 61:57]
    wire b_recoded_rawIn : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>} @[rawFloatFromFN.scala 63:19]
    node _b_recoded_rawIn_out_isNaN_T = eq(b_recoded_rawIn_isZeroFractIn, UInt<1>("h0")) @[rawFloatFromFN.scala 64:31]
    node _b_recoded_rawIn_out_isNaN_T_1 = and(b_recoded_rawIn_isSpecial, _b_recoded_rawIn_out_isNaN_T) @[rawFloatFromFN.scala 64:28]
    b_recoded_rawIn.isNaN <= _b_recoded_rawIn_out_isNaN_T_1 @[rawFloatFromFN.scala 64:15]
    node _b_recoded_rawIn_out_isInf_T = and(b_recoded_rawIn_isSpecial, b_recoded_rawIn_isZeroFractIn) @[rawFloatFromFN.scala 65:28]
    b_recoded_rawIn.isInf <= _b_recoded_rawIn_out_isInf_T @[rawFloatFromFN.scala 65:15]
    b_recoded_rawIn.isZero <= b_recoded_rawIn_isZero @[rawFloatFromFN.scala 66:16]
    b_recoded_rawIn.sign <= b_recoded_rawIn_sign @[rawFloatFromFN.scala 67:14]
    node _b_recoded_rawIn_out_sExp_T = bits(b_recoded_rawIn_adjustedExp, 8, 0) @[rawFloatFromFN.scala 68:28]
    node _b_recoded_rawIn_out_sExp_T_1 = cvt(_b_recoded_rawIn_out_sExp_T) @[rawFloatFromFN.scala 68:42]
    b_recoded_rawIn.sExp <= _b_recoded_rawIn_out_sExp_T_1 @[rawFloatFromFN.scala 68:14]
    node _b_recoded_rawIn_out_sig_T = eq(b_recoded_rawIn_isZero, UInt<1>("h0")) @[rawFloatFromFN.scala 70:19]
    node _b_recoded_rawIn_out_sig_T_1 = cat(UInt<1>("h0"), _b_recoded_rawIn_out_sig_T) @[rawFloatFromFN.scala 70:16]
    node _b_recoded_rawIn_out_sig_T_2 = mux(b_recoded_rawIn_isZeroExpIn, b_recoded_rawIn_subnormFract, b_recoded_rawIn_fractIn) @[rawFloatFromFN.scala 70:33]
    node _b_recoded_rawIn_out_sig_T_3 = cat(_b_recoded_rawIn_out_sig_T_1, _b_recoded_rawIn_out_sig_T_2) @[rawFloatFromFN.scala 70:27]
    b_recoded_rawIn.sig <= _b_recoded_rawIn_out_sig_T_3 @[rawFloatFromFN.scala 69:13]
    node _b_recoded_T = bits(b_recoded_rawIn.sExp, 8, 6) @[recFNFromFN.scala 48:50]
    node _b_recoded_T_1 = mux(b_recoded_rawIn.isZero, UInt<3>("h0"), _b_recoded_T) @[recFNFromFN.scala 48:15]
    node _b_recoded_T_2 = mux(b_recoded_rawIn.isNaN, UInt<1>("h1"), UInt<1>("h0")) @[recFNFromFN.scala 49:20]
    node _b_recoded_T_3 = or(_b_recoded_T_1, _b_recoded_T_2) @[recFNFromFN.scala 48:76]
    node _b_recoded_T_4 = cat(b_recoded_rawIn.sign, _b_recoded_T_3) @[recFNFromFN.scala 47:20]
    node _b_recoded_T_5 = bits(b_recoded_rawIn.sExp, 5, 0) @[recFNFromFN.scala 50:23]
    node _b_recoded_T_6 = cat(_b_recoded_T_4, _b_recoded_T_5) @[recFNFromFN.scala 49:45]
    node _b_recoded_T_7 = bits(b_recoded_rawIn.sig, 22, 0) @[recFNFromFN.scala 51:22]
    node b_recoded = cat(_b_recoded_T_6, _b_recoded_T_7) @[recFNFromFN.scala 50:41]
    adder.io.subOp <= UInt<1>("h1") @[FPU.scala 52:20]
    adder.io.a <= a_recoded @[FPU.scala 53:16]
    adder.io.b <= b_recoded @[FPU.scala 54:16]
    adder.io.roundingMode <= UInt<3>("h0") @[FPU.scala 55:27]
    adder.io.detectTininess <= UInt<1>("h1") @[FPU.scala 56:29]
    node io_result_rawIn_exp = bits(adder.io.out, 31, 23) @[rawFloatFromRecFN.scala 51:21]
    node _io_result_rawIn_isZero_T = bits(io_result_rawIn_exp, 8, 6) @[rawFloatFromRecFN.scala 52:28]
    node io_result_rawIn_isZero = eq(_io_result_rawIn_isZero_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 52:53]
    node _io_result_rawIn_isSpecial_T = bits(io_result_rawIn_exp, 8, 7) @[rawFloatFromRecFN.scala 53:28]
    node io_result_rawIn_isSpecial = eq(_io_result_rawIn_isSpecial_T, UInt<2>("h3")) @[rawFloatFromRecFN.scala 53:53]
    wire io_result_rawIn : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>} @[rawFloatFromRecFN.scala 55:23]
    node _io_result_rawIn_out_isNaN_T = bits(io_result_rawIn_exp, 6, 6) @[rawFloatFromRecFN.scala 56:41]
    node _io_result_rawIn_out_isNaN_T_1 = and(io_result_rawIn_isSpecial, _io_result_rawIn_out_isNaN_T) @[rawFloatFromRecFN.scala 56:33]
    io_result_rawIn.isNaN <= _io_result_rawIn_out_isNaN_T_1 @[rawFloatFromRecFN.scala 56:20]
    node _io_result_rawIn_out_isInf_T = bits(io_result_rawIn_exp, 6, 6) @[rawFloatFromRecFN.scala 57:41]
    node _io_result_rawIn_out_isInf_T_1 = eq(_io_result_rawIn_out_isInf_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 57:36]
    node _io_result_rawIn_out_isInf_T_2 = and(io_result_rawIn_isSpecial, _io_result_rawIn_out_isInf_T_1) @[rawFloatFromRecFN.scala 57:33]
    io_result_rawIn.isInf <= _io_result_rawIn_out_isInf_T_2 @[rawFloatFromRecFN.scala 57:20]
    io_result_rawIn.isZero <= io_result_rawIn_isZero @[rawFloatFromRecFN.scala 58:20]
    node _io_result_rawIn_out_sign_T = bits(adder.io.out, 32, 32) @[rawFloatFromRecFN.scala 59:25]
    io_result_rawIn.sign <= _io_result_rawIn_out_sign_T @[rawFloatFromRecFN.scala 59:20]
    node _io_result_rawIn_out_sExp_T = cvt(io_result_rawIn_exp) @[rawFloatFromRecFN.scala 60:27]
    io_result_rawIn.sExp <= _io_result_rawIn_out_sExp_T @[rawFloatFromRecFN.scala 60:20]
    node _io_result_rawIn_out_sig_T = eq(io_result_rawIn_isZero, UInt<1>("h0")) @[rawFloatFromRecFN.scala 61:35]
    node _io_result_rawIn_out_sig_T_1 = cat(UInt<1>("h0"), _io_result_rawIn_out_sig_T) @[rawFloatFromRecFN.scala 61:32]
    node _io_result_rawIn_out_sig_T_2 = bits(adder.io.out, 22, 0) @[rawFloatFromRecFN.scala 61:49]
    node _io_result_rawIn_out_sig_T_3 = cat(_io_result_rawIn_out_sig_T_1, _io_result_rawIn_out_sig_T_2) @[rawFloatFromRecFN.scala 61:44]
    io_result_rawIn.sig <= _io_result_rawIn_out_sig_T_3 @[rawFloatFromRecFN.scala 61:20]
    node io_result_isSubnormal = lt(io_result_rawIn.sExp, asSInt(UInt<9>("h82"))) @[fNFromRecFN.scala 51:38]
    node _io_result_denormShiftDist_T = bits(io_result_rawIn.sExp, 4, 0) @[fNFromRecFN.scala 52:47]
    node _io_result_denormShiftDist_T_1 = sub(UInt<1>("h1"), _io_result_denormShiftDist_T) @[fNFromRecFN.scala 52:35]
    node io_result_denormShiftDist = tail(_io_result_denormShiftDist_T_1, 1) @[fNFromRecFN.scala 52:35]
    node _io_result_denormFract_T = shr(io_result_rawIn.sig, 1) @[fNFromRecFN.scala 53:38]
    node _io_result_denormFract_T_1 = dshr(_io_result_denormFract_T, io_result_denormShiftDist) @[fNFromRecFN.scala 53:42]
    node io_result_denormFract = bits(_io_result_denormFract_T_1, 22, 0) @[fNFromRecFN.scala 53:60]
    node _io_result_expOut_T = bits(io_result_rawIn.sExp, 7, 0) @[fNFromRecFN.scala 58:27]
    node _io_result_expOut_T_1 = sub(_io_result_expOut_T, UInt<8>("h81")) @[fNFromRecFN.scala 58:45]
    node _io_result_expOut_T_2 = tail(_io_result_expOut_T_1, 1) @[fNFromRecFN.scala 58:45]
    node _io_result_expOut_T_3 = mux(io_result_isSubnormal, UInt<1>("h0"), _io_result_expOut_T_2) @[fNFromRecFN.scala 56:16]
    node _io_result_expOut_T_4 = or(io_result_rawIn.isNaN, io_result_rawIn.isInf) @[fNFromRecFN.scala 60:44]
    node _io_result_expOut_T_5 = bits(_io_result_expOut_T_4, 0, 0) @[Bitwise.scala 77:15]
    node _io_result_expOut_T_6 = mux(_io_result_expOut_T_5, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 77:12]
    node io_result_expOut = or(_io_result_expOut_T_3, _io_result_expOut_T_6) @[fNFromRecFN.scala 60:15]
    node _io_result_fractOut_T = bits(io_result_rawIn.sig, 22, 0) @[fNFromRecFN.scala 64:48]
    node _io_result_fractOut_T_1 = mux(io_result_rawIn.isInf, UInt<1>("h0"), _io_result_fractOut_T) @[fNFromRecFN.scala 64:20]
    node io_result_fractOut = mux(io_result_isSubnormal, io_result_denormFract, _io_result_fractOut_T_1) @[fNFromRecFN.scala 62:16]
    node io_result_hi = cat(io_result_rawIn.sign, io_result_expOut) @[Cat.scala 33:92]
    node _io_result_T = cat(io_result_hi, io_result_fractOut) @[Cat.scala 33:92]
    io.result <= _io_result_T @[FPU.scala 59:15]

  module FP32radianCaclulator :
    input clock : Clock
    input reset : Reset
    output io : { flip x : UInt<32>[2], flip EN : UInt<1>, flip m : UInt<32>, flip baseIndex : UInt<32>, flip TwoDivD : UInt<32>, out : UInt<32>, ENout : UInt<1>, xFWD : UInt<32>[2]}

    node _stage1Reg_T = add(io.baseIndex, UInt<1>("h0")) @[RoPEModuleFP32.scala 17:89]
    node _stage1Reg_T_1 = tail(_stage1Reg_T, 1) @[RoPEModuleFP32.scala 17:89]
    node _stage1Reg_T_2 = mul(io.m, _stage1Reg_T_1) @[RoPEModuleFP32.scala 17:73]
    wire _stage1Reg_WIRE : UInt<64>[4] @[RoPEModuleFP32.scala 17:36]
    _stage1Reg_WIRE[0] <= io.x[0] @[RoPEModuleFP32.scala 17:36]
    _stage1Reg_WIRE[1] <= io.x[1] @[RoPEModuleFP32.scala 17:36]
    _stage1Reg_WIRE[2] <= io.TwoDivD @[RoPEModuleFP32.scala 17:36]
    _stage1Reg_WIRE[3] <= _stage1Reg_T_2 @[RoPEModuleFP32.scala 17:36]
    reg stage1Reg : UInt<64>[4], clock with :
      reset => (UInt<1>("h0"), stage1Reg) @[RoPEModuleFP32.scala 17:28]
    stage1Reg <= _stage1Reg_WIRE @[RoPEModuleFP32.scala 17:28]
    wire _stage2Reg_WIRE : UInt<32>[4] @[RoPEModuleFP32.scala 19:36]
    _stage2Reg_WIRE[0] <= UInt<32>("h0") @[RoPEModuleFP32.scala 19:36]
    _stage2Reg_WIRE[1] <= UInt<32>("h0") @[RoPEModuleFP32.scala 19:36]
    _stage2Reg_WIRE[2] <= UInt<32>("h0") @[RoPEModuleFP32.scala 19:36]
    _stage2Reg_WIRE[3] <= UInt<32>("h0") @[RoPEModuleFP32.scala 19:36]
    reg stage2Reg : UInt<32>[4], clock with :
      reset => (reset, _stage2Reg_WIRE) @[RoPEModuleFP32.scala 19:28]
    wire _stage3Reg_WIRE : UInt<32>[3] @[RoPEModuleFP32.scala 20:36]
    _stage3Reg_WIRE[0] <= UInt<32>("h0") @[RoPEModuleFP32.scala 20:36]
    _stage3Reg_WIRE[1] <= UInt<32>("h0") @[RoPEModuleFP32.scala 20:36]
    _stage3Reg_WIRE[2] <= UInt<32>("h0") @[RoPEModuleFP32.scala 20:36]
    reg stage3Reg : UInt<32>[3], clock with :
      reset => (reset, _stage3Reg_WIRE) @[RoPEModuleFP32.scala 20:28]
    wire _stage4Reg_WIRE : UInt<32>[3] @[RoPEModuleFP32.scala 21:36]
    _stage4Reg_WIRE[0] <= UInt<32>("h0") @[RoPEModuleFP32.scala 21:36]
    _stage4Reg_WIRE[1] <= UInt<32>("h0") @[RoPEModuleFP32.scala 21:36]
    _stage4Reg_WIRE[2] <= UInt<32>("h0") @[RoPEModuleFP32.scala 21:36]
    reg stage4Reg : UInt<32>[3], clock with :
      reset => (reset, _stage4Reg_WIRE) @[RoPEModuleFP32.scala 21:28]
    wire _stage5Reg_WIRE : UInt<32>[4] @[RoPEModuleFP32.scala 22:36]
    _stage5Reg_WIRE[0] <= UInt<32>("h0") @[RoPEModuleFP32.scala 22:36]
    _stage5Reg_WIRE[1] <= UInt<32>("h0") @[RoPEModuleFP32.scala 22:36]
    _stage5Reg_WIRE[2] <= UInt<32>("h0") @[RoPEModuleFP32.scala 22:36]
    _stage5Reg_WIRE[3] <= UInt<32>("h0") @[RoPEModuleFP32.scala 22:36]
    reg stage5Reg : UInt<32>[4], clock with :
      reset => (reset, _stage5Reg_WIRE) @[RoPEModuleFP32.scala 22:28]
    wire _stage6Reg_WIRE : UInt<32>[3] @[RoPEModuleFP32.scala 23:36]
    _stage6Reg_WIRE[0] <= UInt<32>("h0") @[RoPEModuleFP32.scala 23:36]
    _stage6Reg_WIRE[1] <= UInt<32>("h0") @[RoPEModuleFP32.scala 23:36]
    _stage6Reg_WIRE[2] <= UInt<32>("h0") @[RoPEModuleFP32.scala 23:36]
    reg stage6Reg : UInt<32>[3], clock with :
      reset => (reset, _stage6Reg_WIRE) @[RoPEModuleFP32.scala 23:28]
    wire _enReg_WIRE : UInt<1>[6] @[RoPEModuleFP32.scala 24:32]
    _enReg_WIRE[0] <= UInt<1>("h0") @[RoPEModuleFP32.scala 24:32]
    _enReg_WIRE[1] <= UInt<1>("h0") @[RoPEModuleFP32.scala 24:32]
    _enReg_WIRE[2] <= UInt<1>("h0") @[RoPEModuleFP32.scala 24:32]
    _enReg_WIRE[3] <= UInt<1>("h0") @[RoPEModuleFP32.scala 24:32]
    _enReg_WIRE[4] <= UInt<1>("h0") @[RoPEModuleFP32.scala 24:32]
    _enReg_WIRE[5] <= UInt<1>("h0") @[RoPEModuleFP32.scala 24:32]
    reg enReg : UInt<1>[6], clock with :
      reset => (reset, _enReg_WIRE) @[RoPEModuleFP32.scala 24:24]
    enReg[0] <= io.EN @[RoPEModuleFP32.scala 27:14]
    enReg[1] <= enReg[0] @[RoPEModuleFP32.scala 29:18]
    enReg[2] <= enReg[1] @[RoPEModuleFP32.scala 29:18]
    enReg[3] <= enReg[2] @[RoPEModuleFP32.scala 29:18]
    enReg[4] <= enReg[3] @[RoPEModuleFP32.scala 29:18]
    enReg[5] <= enReg[4] @[RoPEModuleFP32.scala 29:18]
    inst Int64ToFP32 of Int64ToFP32 @[RoPEModuleFP32.scala 36:29]
    Int64ToFP32.clock <= clock
    Int64ToFP32.reset <= reset
    node _Int64ToFP32_io_inInt_T = asSInt(stage1Reg[3]) @[RoPEModuleFP32.scala 37:42]
    Int64ToFP32.io.inInt <= _Int64ToFP32_io_inInt_T @[RoPEModuleFP32.scala 37:26]
    wire _WIRE : UInt<64>[4] @[RoPEModuleFP32.scala 38:25]
    _WIRE[0] <= stage1Reg[0] @[RoPEModuleFP32.scala 38:25]
    _WIRE[1] <= stage1Reg[1] @[RoPEModuleFP32.scala 38:25]
    _WIRE[2] <= stage1Reg[2] @[RoPEModuleFP32.scala 38:25]
    _WIRE[3] <= Int64ToFP32.io.outIEEE @[RoPEModuleFP32.scala 38:25]
    stage2Reg <= _WIRE @[RoPEModuleFP32.scala 38:15]
    inst FP32Mult0 of FP32Multiplier @[RoPEModuleFP32.scala 41:27]
    FP32Mult0.clock <= clock
    FP32Mult0.reset <= reset
    FP32Mult0.io.a <= stage2Reg[3] @[RoPEModuleFP32.scala 42:20]
    FP32Mult0.io.b <= stage2Reg[2] @[RoPEModuleFP32.scala 43:20]
    wire _WIRE_1 : UInt<32>[3] @[RoPEModuleFP32.scala 44:25]
    _WIRE_1[0] <= stage2Reg[0] @[RoPEModuleFP32.scala 44:25]
    _WIRE_1[1] <= stage2Reg[1] @[RoPEModuleFP32.scala 44:25]
    _WIRE_1[2] <= FP32Mult0.io.result @[RoPEModuleFP32.scala 44:25]
    stage3Reg <= _WIRE_1 @[RoPEModuleFP32.scala 44:15]
    inst FP32DivPOW2 of FP32DivPOW2INT @[RoPEModuleFP32.scala 47:29]
    FP32DivPOW2.clock <= clock
    FP32DivPOW2.reset <= reset
    FP32DivPOW2.io.a <= stage3Reg[2] @[RoPEModuleFP32.scala 48:22]
    FP32DivPOW2.io.x <= UInt<1>("h1") @[RoPEModuleFP32.scala 50:22]
    wire _WIRE_2 : UInt<32>[3] @[RoPEModuleFP32.scala 51:25]
    _WIRE_2[0] <= stage3Reg[0] @[RoPEModuleFP32.scala 51:25]
    _WIRE_2[1] <= stage3Reg[1] @[RoPEModuleFP32.scala 51:25]
    _WIRE_2[2] <= FP32DivPOW2.io.result @[RoPEModuleFP32.scala 51:25]
    stage4Reg <= _WIRE_2 @[RoPEModuleFP32.scala 51:15]
    inst FP32Mult1 of FP32Multiplier_1 @[RoPEModuleFP32.scala 54:27]
    FP32Mult1.clock <= clock
    FP32Mult1.reset <= reset
    FP32Mult1.io.a <= stage4Reg[2] @[RoPEModuleFP32.scala 55:20]
    FP32Mult1.io.b <= UInt<31>("h40000000") @[RoPEModuleFP32.scala 56:20]
    wire _WIRE_3 : UInt<32>[4] @[RoPEModuleFP32.scala 57:25]
    _WIRE_3[0] <= stage4Reg[0] @[RoPEModuleFP32.scala 57:25]
    _WIRE_3[1] <= stage4Reg[1] @[RoPEModuleFP32.scala 57:25]
    _WIRE_3[2] <= stage3Reg[2] @[RoPEModuleFP32.scala 57:25]
    _WIRE_3[3] <= FP32Mult1.io.result @[RoPEModuleFP32.scala 57:25]
    stage5Reg <= _WIRE_3 @[RoPEModuleFP32.scala 57:15]
    reg delayedMThetaI : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[RoPEModuleFP32.scala 60:33]
    delayedMThetaI <= stage5Reg[2] @[RoPEModuleFP32.scala 61:20]
    inst FP32Sub of FP32Sub @[RoPEModuleFP32.scala 64:25]
    FP32Sub.clock <= clock
    FP32Sub.reset <= reset
    FP32Sub.io.a <= delayedMThetaI @[RoPEModuleFP32.scala 66:18]
    FP32Sub.io.b <= stage5Reg[3] @[RoPEModuleFP32.scala 67:18]
    wire _WIRE_4 : UInt<32>[3] @[RoPEModuleFP32.scala 68:25]
    _WIRE_4[0] <= stage5Reg[0] @[RoPEModuleFP32.scala 68:25]
    _WIRE_4[1] <= stage5Reg[1] @[RoPEModuleFP32.scala 68:25]
    _WIRE_4[2] <= FP32Sub.io.result @[RoPEModuleFP32.scala 68:25]
    stage6Reg <= _WIRE_4 @[RoPEModuleFP32.scala 68:15]
    node _io_out_T = mux(enReg[5], stage6Reg[2], UInt<1>("h0")) @[RoPEModuleFP32.scala 71:22]
    io.out <= _io_out_T @[RoPEModuleFP32.scala 71:16]
    node _io_xFWD_0_T = mux(enReg[5], stage6Reg[0], UInt<1>("h0")) @[RoPEModuleFP32.scala 72:22]
    io.xFWD[0] <= _io_xFWD_0_T @[RoPEModuleFP32.scala 72:16]
    node _io_xFWD_1_T = mux(enReg[5], stage6Reg[1], UInt<1>("h0")) @[RoPEModuleFP32.scala 73:22]
    io.xFWD[1] <= _io_xFWD_1_T @[RoPEModuleFP32.scala 73:16]
    io.ENout <= enReg[5] @[RoPEModuleFP32.scala 74:16]

  module MulFullRawFN_2 :
    output io : { flip a : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>}, flip b : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>}, invalidExc : UInt<1>, rawOut : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<48>}}

    node _notSigNaN_invalidExc_T = and(io.a.isInf, io.b.isZero) @[MulRecFN.scala 58:44]
    node _notSigNaN_invalidExc_T_1 = and(io.a.isZero, io.b.isInf) @[MulRecFN.scala 58:76]
    node notSigNaN_invalidExc = or(_notSigNaN_invalidExc_T, _notSigNaN_invalidExc_T_1) @[MulRecFN.scala 58:60]
    node notNaN_isInfOut = or(io.a.isInf, io.b.isInf) @[MulRecFN.scala 59:38]
    node notNaN_isZeroOut = or(io.a.isZero, io.b.isZero) @[MulRecFN.scala 60:40]
    node notNaN_signOut = xor(io.a.sign, io.b.sign) @[MulRecFN.scala 61:36]
    node _common_sExpOut_T = add(io.a.sExp, io.b.sExp) @[MulRecFN.scala 62:36]
    node _common_sExpOut_T_1 = tail(_common_sExpOut_T, 1) @[MulRecFN.scala 62:36]
    node _common_sExpOut_T_2 = asSInt(_common_sExpOut_T_1) @[MulRecFN.scala 62:36]
    node _common_sExpOut_T_3 = sub(_common_sExpOut_T_2, asSInt(UInt<10>("h100"))) @[MulRecFN.scala 62:48]
    node _common_sExpOut_T_4 = tail(_common_sExpOut_T_3, 1) @[MulRecFN.scala 62:48]
    node common_sExpOut = asSInt(_common_sExpOut_T_4) @[MulRecFN.scala 62:48]
    node _common_sigOut_T = mul(io.a.sig, io.b.sig) @[MulRecFN.scala 63:35]
    node common_sigOut = bits(_common_sigOut_T, 47, 0) @[MulRecFN.scala 63:46]
    node _io_invalidExc_T = bits(io.a.sig, 22, 22) @[common.scala 82:56]
    node _io_invalidExc_T_1 = eq(_io_invalidExc_T, UInt<1>("h0")) @[common.scala 82:49]
    node _io_invalidExc_T_2 = and(io.a.isNaN, _io_invalidExc_T_1) @[common.scala 82:46]
    node _io_invalidExc_T_3 = bits(io.b.sig, 22, 22) @[common.scala 82:56]
    node _io_invalidExc_T_4 = eq(_io_invalidExc_T_3, UInt<1>("h0")) @[common.scala 82:49]
    node _io_invalidExc_T_5 = and(io.b.isNaN, _io_invalidExc_T_4) @[common.scala 82:46]
    node _io_invalidExc_T_6 = or(_io_invalidExc_T_2, _io_invalidExc_T_5) @[MulRecFN.scala 66:45]
    node _io_invalidExc_T_7 = or(_io_invalidExc_T_6, notSigNaN_invalidExc) @[MulRecFN.scala 66:71]
    io.invalidExc <= _io_invalidExc_T_7 @[MulRecFN.scala 66:19]
    io.rawOut.isInf <= notNaN_isInfOut @[MulRecFN.scala 67:21]
    io.rawOut.isZero <= notNaN_isZeroOut @[MulRecFN.scala 68:22]
    io.rawOut.sExp <= common_sExpOut @[MulRecFN.scala 69:20]
    node _io_rawOut_isNaN_T = or(io.a.isNaN, io.b.isNaN) @[MulRecFN.scala 70:35]
    io.rawOut.isNaN <= _io_rawOut_isNaN_T @[MulRecFN.scala 70:21]
    io.rawOut.sign <= notNaN_signOut @[MulRecFN.scala 71:20]
    io.rawOut.sig <= common_sigOut @[MulRecFN.scala 72:19]

  module MulRawFN_2 :
    output io : { flip a : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>}, flip b : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>}, invalidExc : UInt<1>, rawOut : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<27>}}

    inst mulFullRaw of MulFullRawFN_2 @[MulRecFN.scala 84:28]
    mulFullRaw.io.a.sig <= io.a.sig @[MulRecFN.scala 86:21]
    mulFullRaw.io.a.sExp <= io.a.sExp @[MulRecFN.scala 86:21]
    mulFullRaw.io.a.sign <= io.a.sign @[MulRecFN.scala 86:21]
    mulFullRaw.io.a.isZero <= io.a.isZero @[MulRecFN.scala 86:21]
    mulFullRaw.io.a.isInf <= io.a.isInf @[MulRecFN.scala 86:21]
    mulFullRaw.io.a.isNaN <= io.a.isNaN @[MulRecFN.scala 86:21]
    mulFullRaw.io.b.sig <= io.b.sig @[MulRecFN.scala 87:21]
    mulFullRaw.io.b.sExp <= io.b.sExp @[MulRecFN.scala 87:21]
    mulFullRaw.io.b.sign <= io.b.sign @[MulRecFN.scala 87:21]
    mulFullRaw.io.b.isZero <= io.b.isZero @[MulRecFN.scala 87:21]
    mulFullRaw.io.b.isInf <= io.b.isInf @[MulRecFN.scala 87:21]
    mulFullRaw.io.b.isNaN <= io.b.isNaN @[MulRecFN.scala 87:21]
    io.invalidExc <= mulFullRaw.io.invalidExc @[MulRecFN.scala 89:19]
    io.rawOut <= mulFullRaw.io.rawOut @[MulRecFN.scala 90:15]
    node _io_rawOut_sig_T = shr(mulFullRaw.io.rawOut.sig, 22) @[MulRecFN.scala 93:15]
    node _io_rawOut_sig_T_1 = bits(mulFullRaw.io.rawOut.sig, 21, 0) @[MulRecFN.scala 93:37]
    node _io_rawOut_sig_T_2 = orr(_io_rawOut_sig_T_1) @[MulRecFN.scala 93:55]
    node _io_rawOut_sig_T_3 = cat(_io_rawOut_sig_T, _io_rawOut_sig_T_2) @[Cat.scala 33:92]
    io.rawOut.sig <= _io_rawOut_sig_T_3 @[MulRecFN.scala 91:19]

  module RoundAnyRawFNToRecFN_ie8_is26_oe8_os24_3 :
    output io : { flip invalidExc : UInt<1>, flip infiniteExc : UInt<1>, flip in : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<27>}, flip roundingMode : UInt<3>, flip detectTininess : UInt<1>, out : UInt<33>, exceptionFlags : UInt<5>}

    node roundingMode_near_even = eq(io.roundingMode, UInt<3>("h0")) @[RoundAnyRawFNToRecFN.scala 90:53]
    node roundingMode_minMag = eq(io.roundingMode, UInt<3>("h1")) @[RoundAnyRawFNToRecFN.scala 91:53]
    node roundingMode_min = eq(io.roundingMode, UInt<3>("h2")) @[RoundAnyRawFNToRecFN.scala 92:53]
    node roundingMode_max = eq(io.roundingMode, UInt<3>("h3")) @[RoundAnyRawFNToRecFN.scala 93:53]
    node roundingMode_near_maxMag = eq(io.roundingMode, UInt<3>("h4")) @[RoundAnyRawFNToRecFN.scala 94:53]
    node roundingMode_odd = eq(io.roundingMode, UInt<3>("h6")) @[RoundAnyRawFNToRecFN.scala 95:53]
    node _roundMagUp_T = and(roundingMode_min, io.in.sign) @[RoundAnyRawFNToRecFN.scala 98:27]
    node _roundMagUp_T_1 = eq(io.in.sign, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 98:66]
    node _roundMagUp_T_2 = and(roundingMode_max, _roundMagUp_T_1) @[RoundAnyRawFNToRecFN.scala 98:63]
    node roundMagUp = or(_roundMagUp_T, _roundMagUp_T_2) @[RoundAnyRawFNToRecFN.scala 98:42]
    node adjustedSig = shl(io.in.sig, 0) @[RoundAnyRawFNToRecFN.scala 114:22]
    node doShiftSigDown1 = bits(adjustedSig, 26, 26) @[RoundAnyRawFNToRecFN.scala 120:57]
    wire common_expOut : UInt<9> @[RoundAnyRawFNToRecFN.scala 122:31]
    wire common_fractOut : UInt<23> @[RoundAnyRawFNToRecFN.scala 123:31]
    wire common_overflow : UInt<1> @[RoundAnyRawFNToRecFN.scala 124:37]
    wire common_totalUnderflow : UInt<1> @[RoundAnyRawFNToRecFN.scala 125:37]
    wire common_underflow : UInt<1> @[RoundAnyRawFNToRecFN.scala 126:37]
    wire common_inexact : UInt<1> @[RoundAnyRawFNToRecFN.scala 127:37]
    node _roundMask_T = bits(io.in.sExp, 8, 0) @[RoundAnyRawFNToRecFN.scala 156:37]
    node _roundMask_T_1 = not(_roundMask_T) @[primitives.scala 52:21]
    node roundMask_msb = bits(_roundMask_T_1, 8, 8) @[primitives.scala 58:25]
    node roundMask_lsbs = bits(_roundMask_T_1, 7, 0) @[primitives.scala 59:26]
    node roundMask_msb_1 = bits(roundMask_lsbs, 7, 7) @[primitives.scala 58:25]
    node roundMask_lsbs_1 = bits(roundMask_lsbs, 6, 0) @[primitives.scala 59:26]
    node roundMask_msb_2 = bits(roundMask_lsbs_1, 6, 6) @[primitives.scala 58:25]
    node roundMask_lsbs_2 = bits(roundMask_lsbs_1, 5, 0) @[primitives.scala 59:26]
    node roundMask_shift = dshr(asSInt(UInt<65>("h10000000000000000")), roundMask_lsbs_2) @[primitives.scala 76:56]
    node _roundMask_T_2 = bits(roundMask_shift, 63, 42) @[primitives.scala 78:22]
    node _roundMask_T_3 = bits(_roundMask_T_2, 15, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_4 = shl(UInt<8>("hff"), 8) @[Bitwise.scala 107:52]
    node _roundMask_T_5 = xor(UInt<16>("hffff"), _roundMask_T_4) @[Bitwise.scala 107:21]
    node _roundMask_T_6 = shr(_roundMask_T_3, 8) @[Bitwise.scala 108:21]
    node _roundMask_T_7 = and(_roundMask_T_6, _roundMask_T_5) @[Bitwise.scala 108:31]
    node _roundMask_T_8 = bits(_roundMask_T_3, 7, 0) @[Bitwise.scala 108:46]
    node _roundMask_T_9 = shl(_roundMask_T_8, 8) @[Bitwise.scala 108:70]
    node _roundMask_T_10 = not(_roundMask_T_5) @[Bitwise.scala 108:82]
    node _roundMask_T_11 = and(_roundMask_T_9, _roundMask_T_10) @[Bitwise.scala 108:80]
    node _roundMask_T_12 = or(_roundMask_T_7, _roundMask_T_11) @[Bitwise.scala 108:39]
    node _roundMask_T_13 = bits(_roundMask_T_5, 11, 0) @[Bitwise.scala 107:28]
    node _roundMask_T_14 = shl(_roundMask_T_13, 4) @[Bitwise.scala 107:52]
    node _roundMask_T_15 = xor(_roundMask_T_5, _roundMask_T_14) @[Bitwise.scala 107:21]
    node _roundMask_T_16 = shr(_roundMask_T_12, 4) @[Bitwise.scala 108:21]
    node _roundMask_T_17 = and(_roundMask_T_16, _roundMask_T_15) @[Bitwise.scala 108:31]
    node _roundMask_T_18 = bits(_roundMask_T_12, 11, 0) @[Bitwise.scala 108:46]
    node _roundMask_T_19 = shl(_roundMask_T_18, 4) @[Bitwise.scala 108:70]
    node _roundMask_T_20 = not(_roundMask_T_15) @[Bitwise.scala 108:82]
    node _roundMask_T_21 = and(_roundMask_T_19, _roundMask_T_20) @[Bitwise.scala 108:80]
    node _roundMask_T_22 = or(_roundMask_T_17, _roundMask_T_21) @[Bitwise.scala 108:39]
    node _roundMask_T_23 = bits(_roundMask_T_15, 13, 0) @[Bitwise.scala 107:28]
    node _roundMask_T_24 = shl(_roundMask_T_23, 2) @[Bitwise.scala 107:52]
    node _roundMask_T_25 = xor(_roundMask_T_15, _roundMask_T_24) @[Bitwise.scala 107:21]
    node _roundMask_T_26 = shr(_roundMask_T_22, 2) @[Bitwise.scala 108:21]
    node _roundMask_T_27 = and(_roundMask_T_26, _roundMask_T_25) @[Bitwise.scala 108:31]
    node _roundMask_T_28 = bits(_roundMask_T_22, 13, 0) @[Bitwise.scala 108:46]
    node _roundMask_T_29 = shl(_roundMask_T_28, 2) @[Bitwise.scala 108:70]
    node _roundMask_T_30 = not(_roundMask_T_25) @[Bitwise.scala 108:82]
    node _roundMask_T_31 = and(_roundMask_T_29, _roundMask_T_30) @[Bitwise.scala 108:80]
    node _roundMask_T_32 = or(_roundMask_T_27, _roundMask_T_31) @[Bitwise.scala 108:39]
    node _roundMask_T_33 = bits(_roundMask_T_25, 14, 0) @[Bitwise.scala 107:28]
    node _roundMask_T_34 = shl(_roundMask_T_33, 1) @[Bitwise.scala 107:52]
    node _roundMask_T_35 = xor(_roundMask_T_25, _roundMask_T_34) @[Bitwise.scala 107:21]
    node _roundMask_T_36 = shr(_roundMask_T_32, 1) @[Bitwise.scala 108:21]
    node _roundMask_T_37 = and(_roundMask_T_36, _roundMask_T_35) @[Bitwise.scala 108:31]
    node _roundMask_T_38 = bits(_roundMask_T_32, 14, 0) @[Bitwise.scala 108:46]
    node _roundMask_T_39 = shl(_roundMask_T_38, 1) @[Bitwise.scala 108:70]
    node _roundMask_T_40 = not(_roundMask_T_35) @[Bitwise.scala 108:82]
    node _roundMask_T_41 = and(_roundMask_T_39, _roundMask_T_40) @[Bitwise.scala 108:80]
    node _roundMask_T_42 = or(_roundMask_T_37, _roundMask_T_41) @[Bitwise.scala 108:39]
    node _roundMask_T_43 = bits(_roundMask_T_2, 21, 16) @[Bitwise.scala 114:47]
    node _roundMask_T_44 = bits(_roundMask_T_43, 3, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_45 = bits(_roundMask_T_44, 1, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_46 = bits(_roundMask_T_45, 0, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_47 = bits(_roundMask_T_45, 1, 1) @[Bitwise.scala 114:47]
    node _roundMask_T_48 = cat(_roundMask_T_46, _roundMask_T_47) @[Cat.scala 33:92]
    node _roundMask_T_49 = bits(_roundMask_T_44, 3, 2) @[Bitwise.scala 114:47]
    node _roundMask_T_50 = bits(_roundMask_T_49, 0, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_51 = bits(_roundMask_T_49, 1, 1) @[Bitwise.scala 114:47]
    node _roundMask_T_52 = cat(_roundMask_T_50, _roundMask_T_51) @[Cat.scala 33:92]
    node _roundMask_T_53 = cat(_roundMask_T_48, _roundMask_T_52) @[Cat.scala 33:92]
    node _roundMask_T_54 = bits(_roundMask_T_43, 5, 4) @[Bitwise.scala 114:47]
    node _roundMask_T_55 = bits(_roundMask_T_54, 0, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_56 = bits(_roundMask_T_54, 1, 1) @[Bitwise.scala 114:47]
    node _roundMask_T_57 = cat(_roundMask_T_55, _roundMask_T_56) @[Cat.scala 33:92]
    node _roundMask_T_58 = cat(_roundMask_T_53, _roundMask_T_57) @[Cat.scala 33:92]
    node _roundMask_T_59 = cat(_roundMask_T_42, _roundMask_T_58) @[Cat.scala 33:92]
    node _roundMask_T_60 = not(_roundMask_T_59) @[primitives.scala 73:32]
    node _roundMask_T_61 = mux(roundMask_msb_2, UInt<1>("h0"), _roundMask_T_60) @[primitives.scala 73:21]
    node _roundMask_T_62 = not(_roundMask_T_61) @[primitives.scala 73:17]
    node _roundMask_T_63 = cat(_roundMask_T_62, UInt<3>("h7")) @[primitives.scala 68:58]
    node roundMask_msb_3 = bits(roundMask_lsbs_1, 6, 6) @[primitives.scala 58:25]
    node roundMask_lsbs_3 = bits(roundMask_lsbs_1, 5, 0) @[primitives.scala 59:26]
    node roundMask_shift_1 = dshr(asSInt(UInt<65>("h10000000000000000")), roundMask_lsbs_3) @[primitives.scala 76:56]
    node _roundMask_T_64 = bits(roundMask_shift_1, 2, 0) @[primitives.scala 78:22]
    node _roundMask_T_65 = bits(_roundMask_T_64, 1, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_66 = bits(_roundMask_T_65, 0, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_67 = bits(_roundMask_T_65, 1, 1) @[Bitwise.scala 114:47]
    node _roundMask_T_68 = cat(_roundMask_T_66, _roundMask_T_67) @[Cat.scala 33:92]
    node _roundMask_T_69 = bits(_roundMask_T_64, 2, 2) @[Bitwise.scala 114:47]
    node _roundMask_T_70 = cat(_roundMask_T_68, _roundMask_T_69) @[Cat.scala 33:92]
    node _roundMask_T_71 = mux(roundMask_msb_3, _roundMask_T_70, UInt<1>("h0")) @[primitives.scala 62:24]
    node _roundMask_T_72 = mux(roundMask_msb_1, _roundMask_T_63, _roundMask_T_71) @[primitives.scala 67:24]
    node _roundMask_T_73 = mux(roundMask_msb, _roundMask_T_72, UInt<1>("h0")) @[primitives.scala 62:24]
    node _roundMask_T_74 = or(_roundMask_T_73, doShiftSigDown1) @[RoundAnyRawFNToRecFN.scala 159:23]
    node roundMask = cat(_roundMask_T_74, UInt<2>("h3")) @[RoundAnyRawFNToRecFN.scala 159:42]
    node _shiftedRoundMask_T = cat(UInt<1>("h0"), roundMask) @[RoundAnyRawFNToRecFN.scala 162:41]
    node shiftedRoundMask = shr(_shiftedRoundMask_T, 1) @[RoundAnyRawFNToRecFN.scala 162:53]
    node _roundPosMask_T = not(shiftedRoundMask) @[RoundAnyRawFNToRecFN.scala 163:28]
    node roundPosMask = and(_roundPosMask_T, roundMask) @[RoundAnyRawFNToRecFN.scala 163:46]
    node _roundPosBit_T = and(adjustedSig, roundPosMask) @[RoundAnyRawFNToRecFN.scala 164:40]
    node roundPosBit = orr(_roundPosBit_T) @[RoundAnyRawFNToRecFN.scala 164:56]
    node _anyRoundExtra_T = and(adjustedSig, shiftedRoundMask) @[RoundAnyRawFNToRecFN.scala 165:42]
    node anyRoundExtra = orr(_anyRoundExtra_T) @[RoundAnyRawFNToRecFN.scala 165:62]
    node anyRound = or(roundPosBit, anyRoundExtra) @[RoundAnyRawFNToRecFN.scala 166:36]
    node _roundIncr_T = or(roundingMode_near_even, roundingMode_near_maxMag) @[RoundAnyRawFNToRecFN.scala 169:38]
    node _roundIncr_T_1 = and(_roundIncr_T, roundPosBit) @[RoundAnyRawFNToRecFN.scala 169:67]
    node _roundIncr_T_2 = and(roundMagUp, anyRound) @[RoundAnyRawFNToRecFN.scala 171:29]
    node roundIncr = or(_roundIncr_T_1, _roundIncr_T_2) @[RoundAnyRawFNToRecFN.scala 170:31]
    node _roundedSig_T = or(adjustedSig, roundMask) @[RoundAnyRawFNToRecFN.scala 174:32]
    node _roundedSig_T_1 = shr(_roundedSig_T, 2) @[RoundAnyRawFNToRecFN.scala 174:44]
    node _roundedSig_T_2 = add(_roundedSig_T_1, UInt<1>("h1")) @[RoundAnyRawFNToRecFN.scala 174:49]
    node _roundedSig_T_3 = and(roundingMode_near_even, roundPosBit) @[RoundAnyRawFNToRecFN.scala 175:49]
    node _roundedSig_T_4 = eq(anyRoundExtra, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 176:30]
    node _roundedSig_T_5 = and(_roundedSig_T_3, _roundedSig_T_4) @[RoundAnyRawFNToRecFN.scala 175:64]
    node _roundedSig_T_6 = shr(roundMask, 1) @[RoundAnyRawFNToRecFN.scala 177:35]
    node _roundedSig_T_7 = mux(_roundedSig_T_5, _roundedSig_T_6, UInt<26>("h0")) @[RoundAnyRawFNToRecFN.scala 175:25]
    node _roundedSig_T_8 = not(_roundedSig_T_7) @[RoundAnyRawFNToRecFN.scala 175:21]
    node _roundedSig_T_9 = and(_roundedSig_T_2, _roundedSig_T_8) @[RoundAnyRawFNToRecFN.scala 174:57]
    node _roundedSig_T_10 = not(roundMask) @[RoundAnyRawFNToRecFN.scala 180:32]
    node _roundedSig_T_11 = and(adjustedSig, _roundedSig_T_10) @[RoundAnyRawFNToRecFN.scala 180:30]
    node _roundedSig_T_12 = shr(_roundedSig_T_11, 2) @[RoundAnyRawFNToRecFN.scala 180:43]
    node _roundedSig_T_13 = and(roundingMode_odd, anyRound) @[RoundAnyRawFNToRecFN.scala 181:42]
    node _roundedSig_T_14 = shr(roundPosMask, 1) @[RoundAnyRawFNToRecFN.scala 181:67]
    node _roundedSig_T_15 = mux(_roundedSig_T_13, _roundedSig_T_14, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 181:24]
    node _roundedSig_T_16 = or(_roundedSig_T_12, _roundedSig_T_15) @[RoundAnyRawFNToRecFN.scala 180:47]
    node roundedSig = mux(roundIncr, _roundedSig_T_9, _roundedSig_T_16) @[RoundAnyRawFNToRecFN.scala 173:16]
    node _sRoundedExp_T = shr(roundedSig, 24) @[RoundAnyRawFNToRecFN.scala 185:54]
    node _sRoundedExp_T_1 = cvt(_sRoundedExp_T) @[RoundAnyRawFNToRecFN.scala 185:76]
    node sRoundedExp = add(io.in.sExp, _sRoundedExp_T_1) @[RoundAnyRawFNToRecFN.scala 185:40]
    node _common_expOut_T = bits(sRoundedExp, 8, 0) @[RoundAnyRawFNToRecFN.scala 187:37]
    common_expOut <= _common_expOut_T @[RoundAnyRawFNToRecFN.scala 187:23]
    node _common_fractOut_T = bits(roundedSig, 23, 1) @[RoundAnyRawFNToRecFN.scala 190:27]
    node _common_fractOut_T_1 = bits(roundedSig, 22, 0) @[RoundAnyRawFNToRecFN.scala 191:27]
    node _common_fractOut_T_2 = mux(doShiftSigDown1, _common_fractOut_T, _common_fractOut_T_1) @[RoundAnyRawFNToRecFN.scala 189:16]
    common_fractOut <= _common_fractOut_T_2 @[RoundAnyRawFNToRecFN.scala 188:25]
    node _common_overflow_T = shr(sRoundedExp, 7) @[RoundAnyRawFNToRecFN.scala 196:30]
    node _common_overflow_T_1 = geq(_common_overflow_T, asSInt(UInt<3>("h3"))) @[RoundAnyRawFNToRecFN.scala 196:50]
    common_overflow <= _common_overflow_T_1 @[RoundAnyRawFNToRecFN.scala 193:25]
    node _common_totalUnderflow_T = lt(sRoundedExp, asSInt(UInt<8>("h6b"))) @[RoundAnyRawFNToRecFN.scala 200:31]
    common_totalUnderflow <= _common_totalUnderflow_T @[RoundAnyRawFNToRecFN.scala 197:31]
    node _unboundedRange_roundPosBit_T = bits(adjustedSig, 2, 2) @[RoundAnyRawFNToRecFN.scala 203:45]
    node _unboundedRange_roundPosBit_T_1 = bits(adjustedSig, 1, 1) @[RoundAnyRawFNToRecFN.scala 203:61]
    node unboundedRange_roundPosBit = mux(doShiftSigDown1, _unboundedRange_roundPosBit_T, _unboundedRange_roundPosBit_T_1) @[RoundAnyRawFNToRecFN.scala 203:16]
    node _unboundedRange_anyRound_T = bits(adjustedSig, 2, 2) @[RoundAnyRawFNToRecFN.scala 205:44]
    node _unboundedRange_anyRound_T_1 = and(doShiftSigDown1, _unboundedRange_anyRound_T) @[RoundAnyRawFNToRecFN.scala 205:30]
    node _unboundedRange_anyRound_T_2 = bits(adjustedSig, 1, 0) @[RoundAnyRawFNToRecFN.scala 205:63]
    node _unboundedRange_anyRound_T_3 = orr(_unboundedRange_anyRound_T_2) @[RoundAnyRawFNToRecFN.scala 205:70]
    node unboundedRange_anyRound = or(_unboundedRange_anyRound_T_1, _unboundedRange_anyRound_T_3) @[RoundAnyRawFNToRecFN.scala 205:49]
    node _unboundedRange_roundIncr_T = or(roundingMode_near_even, roundingMode_near_maxMag) @[RoundAnyRawFNToRecFN.scala 207:38]
    node _unboundedRange_roundIncr_T_1 = and(_unboundedRange_roundIncr_T, unboundedRange_roundPosBit) @[RoundAnyRawFNToRecFN.scala 207:67]
    node _unboundedRange_roundIncr_T_2 = and(roundMagUp, unboundedRange_anyRound) @[RoundAnyRawFNToRecFN.scala 209:29]
    node unboundedRange_roundIncr = or(_unboundedRange_roundIncr_T_1, _unboundedRange_roundIncr_T_2) @[RoundAnyRawFNToRecFN.scala 208:46]
    node _roundCarry_T = bits(roundedSig, 25, 25) @[RoundAnyRawFNToRecFN.scala 212:27]
    node _roundCarry_T_1 = bits(roundedSig, 24, 24) @[RoundAnyRawFNToRecFN.scala 213:27]
    node roundCarry = mux(doShiftSigDown1, _roundCarry_T, _roundCarry_T_1) @[RoundAnyRawFNToRecFN.scala 211:16]
    node _common_underflow_T = shr(io.in.sExp, 8) @[RoundAnyRawFNToRecFN.scala 220:49]
    node _common_underflow_T_1 = leq(_common_underflow_T, asSInt(UInt<1>("h0"))) @[RoundAnyRawFNToRecFN.scala 220:64]
    node _common_underflow_T_2 = and(anyRound, _common_underflow_T_1) @[RoundAnyRawFNToRecFN.scala 220:32]
    node _common_underflow_T_3 = bits(roundMask, 3, 3) @[RoundAnyRawFNToRecFN.scala 221:57]
    node _common_underflow_T_4 = bits(roundMask, 2, 2) @[RoundAnyRawFNToRecFN.scala 221:71]
    node _common_underflow_T_5 = mux(doShiftSigDown1, _common_underflow_T_3, _common_underflow_T_4) @[RoundAnyRawFNToRecFN.scala 221:30]
    node _common_underflow_T_6 = and(_common_underflow_T_2, _common_underflow_T_5) @[RoundAnyRawFNToRecFN.scala 220:72]
    node _common_underflow_T_7 = eq(io.detectTininess, UInt<1>("h1")) @[RoundAnyRawFNToRecFN.scala 222:49]
    node _common_underflow_T_8 = bits(roundMask, 4, 4) @[RoundAnyRawFNToRecFN.scala 224:49]
    node _common_underflow_T_9 = bits(roundMask, 3, 3) @[RoundAnyRawFNToRecFN.scala 225:49]
    node _common_underflow_T_10 = mux(doShiftSigDown1, _common_underflow_T_8, _common_underflow_T_9) @[RoundAnyRawFNToRecFN.scala 223:39]
    node _common_underflow_T_11 = eq(_common_underflow_T_10, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 223:34]
    node _common_underflow_T_12 = and(_common_underflow_T_7, _common_underflow_T_11) @[RoundAnyRawFNToRecFN.scala 222:77]
    node _common_underflow_T_13 = and(_common_underflow_T_12, roundCarry) @[RoundAnyRawFNToRecFN.scala 226:38]
    node _common_underflow_T_14 = and(_common_underflow_T_13, roundPosBit) @[RoundAnyRawFNToRecFN.scala 227:45]
    node _common_underflow_T_15 = and(_common_underflow_T_14, unboundedRange_roundIncr) @[RoundAnyRawFNToRecFN.scala 227:60]
    node _common_underflow_T_16 = eq(_common_underflow_T_15, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 222:27]
    node _common_underflow_T_17 = and(_common_underflow_T_6, _common_underflow_T_16) @[RoundAnyRawFNToRecFN.scala 221:76]
    node _common_underflow_T_18 = or(common_totalUnderflow, _common_underflow_T_17) @[RoundAnyRawFNToRecFN.scala 217:40]
    common_underflow <= _common_underflow_T_18 @[RoundAnyRawFNToRecFN.scala 215:26]
    node _common_inexact_T = or(common_totalUnderflow, anyRound) @[RoundAnyRawFNToRecFN.scala 230:49]
    common_inexact <= _common_inexact_T @[RoundAnyRawFNToRecFN.scala 230:24]
    node isNaNOut = or(io.invalidExc, io.in.isNaN) @[RoundAnyRawFNToRecFN.scala 235:34]
    node notNaN_isSpecialInfOut = or(io.infiniteExc, io.in.isInf) @[RoundAnyRawFNToRecFN.scala 236:49]
    node _commonCase_T = eq(isNaNOut, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 237:22]
    node _commonCase_T_1 = eq(notNaN_isSpecialInfOut, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 237:36]
    node _commonCase_T_2 = and(_commonCase_T, _commonCase_T_1) @[RoundAnyRawFNToRecFN.scala 237:33]
    node _commonCase_T_3 = eq(io.in.isZero, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 237:64]
    node commonCase = and(_commonCase_T_2, _commonCase_T_3) @[RoundAnyRawFNToRecFN.scala 237:61]
    node overflow = and(commonCase, common_overflow) @[RoundAnyRawFNToRecFN.scala 238:32]
    node underflow = and(commonCase, common_underflow) @[RoundAnyRawFNToRecFN.scala 239:32]
    node _inexact_T = and(commonCase, common_inexact) @[RoundAnyRawFNToRecFN.scala 240:43]
    node inexact = or(overflow, _inexact_T) @[RoundAnyRawFNToRecFN.scala 240:28]
    node _overflow_roundMagUp_T = or(roundingMode_near_even, roundingMode_near_maxMag) @[RoundAnyRawFNToRecFN.scala 243:32]
    node overflow_roundMagUp = or(_overflow_roundMagUp_T, roundMagUp) @[RoundAnyRawFNToRecFN.scala 243:60]
    node _pegMinNonzeroMagOut_T = and(commonCase, common_totalUnderflow) @[RoundAnyRawFNToRecFN.scala 245:20]
    node _pegMinNonzeroMagOut_T_1 = or(roundMagUp, roundingMode_odd) @[RoundAnyRawFNToRecFN.scala 245:60]
    node pegMinNonzeroMagOut = and(_pegMinNonzeroMagOut_T, _pegMinNonzeroMagOut_T_1) @[RoundAnyRawFNToRecFN.scala 245:45]
    node _pegMaxFiniteMagOut_T = eq(overflow_roundMagUp, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 246:42]
    node pegMaxFiniteMagOut = and(overflow, _pegMaxFiniteMagOut_T) @[RoundAnyRawFNToRecFN.scala 246:39]
    node _notNaN_isInfOut_T = and(overflow, overflow_roundMagUp) @[RoundAnyRawFNToRecFN.scala 248:45]
    node notNaN_isInfOut = or(notNaN_isSpecialInfOut, _notNaN_isInfOut_T) @[RoundAnyRawFNToRecFN.scala 248:32]
    node signOut = mux(isNaNOut, UInt<1>("h0"), io.in.sign) @[RoundAnyRawFNToRecFN.scala 250:22]
    node _expOut_T = or(io.in.isZero, common_totalUnderflow) @[RoundAnyRawFNToRecFN.scala 253:32]
    node _expOut_T_1 = mux(_expOut_T, UInt<9>("h1c0"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 253:18]
    node _expOut_T_2 = not(_expOut_T_1) @[RoundAnyRawFNToRecFN.scala 253:14]
    node _expOut_T_3 = and(common_expOut, _expOut_T_2) @[RoundAnyRawFNToRecFN.scala 252:24]
    node _expOut_T_4 = not(UInt<9>("h6b")) @[RoundAnyRawFNToRecFN.scala 258:19]
    node _expOut_T_5 = mux(pegMinNonzeroMagOut, _expOut_T_4, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 257:18]
    node _expOut_T_6 = not(_expOut_T_5) @[RoundAnyRawFNToRecFN.scala 257:14]
    node _expOut_T_7 = and(_expOut_T_3, _expOut_T_6) @[RoundAnyRawFNToRecFN.scala 256:17]
    node _expOut_T_8 = mux(pegMaxFiniteMagOut, UInt<9>("h80"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 261:18]
    node _expOut_T_9 = not(_expOut_T_8) @[RoundAnyRawFNToRecFN.scala 261:14]
    node _expOut_T_10 = and(_expOut_T_7, _expOut_T_9) @[RoundAnyRawFNToRecFN.scala 260:17]
    node _expOut_T_11 = mux(notNaN_isInfOut, UInt<9>("h40"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 265:18]
    node _expOut_T_12 = not(_expOut_T_11) @[RoundAnyRawFNToRecFN.scala 265:14]
    node _expOut_T_13 = and(_expOut_T_10, _expOut_T_12) @[RoundAnyRawFNToRecFN.scala 264:17]
    node _expOut_T_14 = mux(pegMinNonzeroMagOut, UInt<9>("h6b"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 269:16]
    node _expOut_T_15 = or(_expOut_T_13, _expOut_T_14) @[RoundAnyRawFNToRecFN.scala 268:18]
    node _expOut_T_16 = mux(pegMaxFiniteMagOut, UInt<9>("h17f"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 273:16]
    node _expOut_T_17 = or(_expOut_T_15, _expOut_T_16) @[RoundAnyRawFNToRecFN.scala 272:15]
    node _expOut_T_18 = mux(notNaN_isInfOut, UInt<9>("h180"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 277:16]
    node _expOut_T_19 = or(_expOut_T_17, _expOut_T_18) @[RoundAnyRawFNToRecFN.scala 276:15]
    node _expOut_T_20 = mux(isNaNOut, UInt<9>("h1c0"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 278:16]
    node expOut = or(_expOut_T_19, _expOut_T_20) @[RoundAnyRawFNToRecFN.scala 277:73]
    node _fractOut_T = or(isNaNOut, io.in.isZero) @[RoundAnyRawFNToRecFN.scala 280:22]
    node _fractOut_T_1 = or(_fractOut_T, common_totalUnderflow) @[RoundAnyRawFNToRecFN.scala 280:38]
    node _fractOut_T_2 = mux(isNaNOut, UInt<23>("h400000"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 281:16]
    node _fractOut_T_3 = mux(_fractOut_T_1, _fractOut_T_2, common_fractOut) @[RoundAnyRawFNToRecFN.scala 280:12]
    node _fractOut_T_4 = bits(pegMaxFiniteMagOut, 0, 0) @[Bitwise.scala 77:15]
    node _fractOut_T_5 = mux(_fractOut_T_4, UInt<23>("h7fffff"), UInt<23>("h0")) @[Bitwise.scala 77:12]
    node fractOut = or(_fractOut_T_3, _fractOut_T_5) @[RoundAnyRawFNToRecFN.scala 283:11]
    node _io_out_T = cat(signOut, expOut) @[RoundAnyRawFNToRecFN.scala 286:23]
    node _io_out_T_1 = cat(_io_out_T, fractOut) @[RoundAnyRawFNToRecFN.scala 286:33]
    io.out <= _io_out_T_1 @[RoundAnyRawFNToRecFN.scala 286:12]
    node _io_exceptionFlags_T = cat(io.invalidExc, io.infiniteExc) @[RoundAnyRawFNToRecFN.scala 288:23]
    node _io_exceptionFlags_T_1 = cat(_io_exceptionFlags_T, overflow) @[RoundAnyRawFNToRecFN.scala 288:41]
    node _io_exceptionFlags_T_2 = cat(_io_exceptionFlags_T_1, underflow) @[RoundAnyRawFNToRecFN.scala 288:53]
    node _io_exceptionFlags_T_3 = cat(_io_exceptionFlags_T_2, inexact) @[RoundAnyRawFNToRecFN.scala 288:66]
    io.exceptionFlags <= _io_exceptionFlags_T_3 @[RoundAnyRawFNToRecFN.scala 287:23]

  module RoundRawFNToRecFN_e8_s24_3 :
    output io : { flip invalidExc : UInt<1>, flip infiniteExc : UInt<1>, flip in : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<27>}, flip roundingMode : UInt<3>, flip detectTininess : UInt<1>, out : UInt<33>, exceptionFlags : UInt<5>}

    inst roundAnyRawFNToRecFN of RoundAnyRawFNToRecFN_ie8_is26_oe8_os24_3 @[RoundAnyRawFNToRecFN.scala 310:15]
    roundAnyRawFNToRecFN.io.invalidExc <= io.invalidExc @[RoundAnyRawFNToRecFN.scala 313:44]
    roundAnyRawFNToRecFN.io.infiniteExc <= io.infiniteExc @[RoundAnyRawFNToRecFN.scala 314:44]
    roundAnyRawFNToRecFN.io.in.sig <= io.in.sig @[RoundAnyRawFNToRecFN.scala 315:44]
    roundAnyRawFNToRecFN.io.in.sExp <= io.in.sExp @[RoundAnyRawFNToRecFN.scala 315:44]
    roundAnyRawFNToRecFN.io.in.sign <= io.in.sign @[RoundAnyRawFNToRecFN.scala 315:44]
    roundAnyRawFNToRecFN.io.in.isZero <= io.in.isZero @[RoundAnyRawFNToRecFN.scala 315:44]
    roundAnyRawFNToRecFN.io.in.isInf <= io.in.isInf @[RoundAnyRawFNToRecFN.scala 315:44]
    roundAnyRawFNToRecFN.io.in.isNaN <= io.in.isNaN @[RoundAnyRawFNToRecFN.scala 315:44]
    roundAnyRawFNToRecFN.io.roundingMode <= io.roundingMode @[RoundAnyRawFNToRecFN.scala 316:44]
    roundAnyRawFNToRecFN.io.detectTininess <= io.detectTininess @[RoundAnyRawFNToRecFN.scala 317:44]
    io.out <= roundAnyRawFNToRecFN.io.out @[RoundAnyRawFNToRecFN.scala 318:23]
    io.exceptionFlags <= roundAnyRawFNToRecFN.io.exceptionFlags @[RoundAnyRawFNToRecFN.scala 319:23]

  module MulRecFN_2 :
    output io : { flip a : UInt<33>, flip b : UInt<33>, flip roundingMode : UInt<3>, flip detectTininess : UInt<1>, out : UInt<33>, exceptionFlags : UInt<5>}

    inst mulRawFN of MulRawFN_2 @[MulRecFN.scala 113:26]
    node mulRawFN_io_a_exp = bits(io.a, 31, 23) @[rawFloatFromRecFN.scala 51:21]
    node _mulRawFN_io_a_isZero_T = bits(mulRawFN_io_a_exp, 8, 6) @[rawFloatFromRecFN.scala 52:28]
    node mulRawFN_io_a_isZero = eq(_mulRawFN_io_a_isZero_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 52:53]
    node _mulRawFN_io_a_isSpecial_T = bits(mulRawFN_io_a_exp, 8, 7) @[rawFloatFromRecFN.scala 53:28]
    node mulRawFN_io_a_isSpecial = eq(_mulRawFN_io_a_isSpecial_T, UInt<2>("h3")) @[rawFloatFromRecFN.scala 53:53]
    wire mulRawFN_io_a_out : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>} @[rawFloatFromRecFN.scala 55:23]
    node _mulRawFN_io_a_out_isNaN_T = bits(mulRawFN_io_a_exp, 6, 6) @[rawFloatFromRecFN.scala 56:41]
    node _mulRawFN_io_a_out_isNaN_T_1 = and(mulRawFN_io_a_isSpecial, _mulRawFN_io_a_out_isNaN_T) @[rawFloatFromRecFN.scala 56:33]
    mulRawFN_io_a_out.isNaN <= _mulRawFN_io_a_out_isNaN_T_1 @[rawFloatFromRecFN.scala 56:20]
    node _mulRawFN_io_a_out_isInf_T = bits(mulRawFN_io_a_exp, 6, 6) @[rawFloatFromRecFN.scala 57:41]
    node _mulRawFN_io_a_out_isInf_T_1 = eq(_mulRawFN_io_a_out_isInf_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 57:36]
    node _mulRawFN_io_a_out_isInf_T_2 = and(mulRawFN_io_a_isSpecial, _mulRawFN_io_a_out_isInf_T_1) @[rawFloatFromRecFN.scala 57:33]
    mulRawFN_io_a_out.isInf <= _mulRawFN_io_a_out_isInf_T_2 @[rawFloatFromRecFN.scala 57:20]
    mulRawFN_io_a_out.isZero <= mulRawFN_io_a_isZero @[rawFloatFromRecFN.scala 58:20]
    node _mulRawFN_io_a_out_sign_T = bits(io.a, 32, 32) @[rawFloatFromRecFN.scala 59:25]
    mulRawFN_io_a_out.sign <= _mulRawFN_io_a_out_sign_T @[rawFloatFromRecFN.scala 59:20]
    node _mulRawFN_io_a_out_sExp_T = cvt(mulRawFN_io_a_exp) @[rawFloatFromRecFN.scala 60:27]
    mulRawFN_io_a_out.sExp <= _mulRawFN_io_a_out_sExp_T @[rawFloatFromRecFN.scala 60:20]
    node _mulRawFN_io_a_out_sig_T = eq(mulRawFN_io_a_isZero, UInt<1>("h0")) @[rawFloatFromRecFN.scala 61:35]
    node _mulRawFN_io_a_out_sig_T_1 = cat(UInt<1>("h0"), _mulRawFN_io_a_out_sig_T) @[rawFloatFromRecFN.scala 61:32]
    node _mulRawFN_io_a_out_sig_T_2 = bits(io.a, 22, 0) @[rawFloatFromRecFN.scala 61:49]
    node _mulRawFN_io_a_out_sig_T_3 = cat(_mulRawFN_io_a_out_sig_T_1, _mulRawFN_io_a_out_sig_T_2) @[rawFloatFromRecFN.scala 61:44]
    mulRawFN_io_a_out.sig <= _mulRawFN_io_a_out_sig_T_3 @[rawFloatFromRecFN.scala 61:20]
    mulRawFN.io.a.sig <= mulRawFN_io_a_out.sig @[MulRecFN.scala 115:19]
    mulRawFN.io.a.sExp <= mulRawFN_io_a_out.sExp @[MulRecFN.scala 115:19]
    mulRawFN.io.a.sign <= mulRawFN_io_a_out.sign @[MulRecFN.scala 115:19]
    mulRawFN.io.a.isZero <= mulRawFN_io_a_out.isZero @[MulRecFN.scala 115:19]
    mulRawFN.io.a.isInf <= mulRawFN_io_a_out.isInf @[MulRecFN.scala 115:19]
    mulRawFN.io.a.isNaN <= mulRawFN_io_a_out.isNaN @[MulRecFN.scala 115:19]
    node mulRawFN_io_b_exp = bits(io.b, 31, 23) @[rawFloatFromRecFN.scala 51:21]
    node _mulRawFN_io_b_isZero_T = bits(mulRawFN_io_b_exp, 8, 6) @[rawFloatFromRecFN.scala 52:28]
    node mulRawFN_io_b_isZero = eq(_mulRawFN_io_b_isZero_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 52:53]
    node _mulRawFN_io_b_isSpecial_T = bits(mulRawFN_io_b_exp, 8, 7) @[rawFloatFromRecFN.scala 53:28]
    node mulRawFN_io_b_isSpecial = eq(_mulRawFN_io_b_isSpecial_T, UInt<2>("h3")) @[rawFloatFromRecFN.scala 53:53]
    wire mulRawFN_io_b_out : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>} @[rawFloatFromRecFN.scala 55:23]
    node _mulRawFN_io_b_out_isNaN_T = bits(mulRawFN_io_b_exp, 6, 6) @[rawFloatFromRecFN.scala 56:41]
    node _mulRawFN_io_b_out_isNaN_T_1 = and(mulRawFN_io_b_isSpecial, _mulRawFN_io_b_out_isNaN_T) @[rawFloatFromRecFN.scala 56:33]
    mulRawFN_io_b_out.isNaN <= _mulRawFN_io_b_out_isNaN_T_1 @[rawFloatFromRecFN.scala 56:20]
    node _mulRawFN_io_b_out_isInf_T = bits(mulRawFN_io_b_exp, 6, 6) @[rawFloatFromRecFN.scala 57:41]
    node _mulRawFN_io_b_out_isInf_T_1 = eq(_mulRawFN_io_b_out_isInf_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 57:36]
    node _mulRawFN_io_b_out_isInf_T_2 = and(mulRawFN_io_b_isSpecial, _mulRawFN_io_b_out_isInf_T_1) @[rawFloatFromRecFN.scala 57:33]
    mulRawFN_io_b_out.isInf <= _mulRawFN_io_b_out_isInf_T_2 @[rawFloatFromRecFN.scala 57:20]
    mulRawFN_io_b_out.isZero <= mulRawFN_io_b_isZero @[rawFloatFromRecFN.scala 58:20]
    node _mulRawFN_io_b_out_sign_T = bits(io.b, 32, 32) @[rawFloatFromRecFN.scala 59:25]
    mulRawFN_io_b_out.sign <= _mulRawFN_io_b_out_sign_T @[rawFloatFromRecFN.scala 59:20]
    node _mulRawFN_io_b_out_sExp_T = cvt(mulRawFN_io_b_exp) @[rawFloatFromRecFN.scala 60:27]
    mulRawFN_io_b_out.sExp <= _mulRawFN_io_b_out_sExp_T @[rawFloatFromRecFN.scala 60:20]
    node _mulRawFN_io_b_out_sig_T = eq(mulRawFN_io_b_isZero, UInt<1>("h0")) @[rawFloatFromRecFN.scala 61:35]
    node _mulRawFN_io_b_out_sig_T_1 = cat(UInt<1>("h0"), _mulRawFN_io_b_out_sig_T) @[rawFloatFromRecFN.scala 61:32]
    node _mulRawFN_io_b_out_sig_T_2 = bits(io.b, 22, 0) @[rawFloatFromRecFN.scala 61:49]
    node _mulRawFN_io_b_out_sig_T_3 = cat(_mulRawFN_io_b_out_sig_T_1, _mulRawFN_io_b_out_sig_T_2) @[rawFloatFromRecFN.scala 61:44]
    mulRawFN_io_b_out.sig <= _mulRawFN_io_b_out_sig_T_3 @[rawFloatFromRecFN.scala 61:20]
    mulRawFN.io.b.sig <= mulRawFN_io_b_out.sig @[MulRecFN.scala 116:19]
    mulRawFN.io.b.sExp <= mulRawFN_io_b_out.sExp @[MulRecFN.scala 116:19]
    mulRawFN.io.b.sign <= mulRawFN_io_b_out.sign @[MulRecFN.scala 116:19]
    mulRawFN.io.b.isZero <= mulRawFN_io_b_out.isZero @[MulRecFN.scala 116:19]
    mulRawFN.io.b.isInf <= mulRawFN_io_b_out.isInf @[MulRecFN.scala 116:19]
    mulRawFN.io.b.isNaN <= mulRawFN_io_b_out.isNaN @[MulRecFN.scala 116:19]
    inst roundRawFNToRecFN of RoundRawFNToRecFN_e8_s24_3 @[MulRecFN.scala 121:15]
    roundRawFNToRecFN.io.invalidExc <= mulRawFN.io.invalidExc @[MulRecFN.scala 122:39]
    roundRawFNToRecFN.io.infiniteExc <= UInt<1>("h0") @[MulRecFN.scala 123:39]
    roundRawFNToRecFN.io.in.sig <= mulRawFN.io.rawOut.sig @[MulRecFN.scala 124:39]
    roundRawFNToRecFN.io.in.sExp <= mulRawFN.io.rawOut.sExp @[MulRecFN.scala 124:39]
    roundRawFNToRecFN.io.in.sign <= mulRawFN.io.rawOut.sign @[MulRecFN.scala 124:39]
    roundRawFNToRecFN.io.in.isZero <= mulRawFN.io.rawOut.isZero @[MulRecFN.scala 124:39]
    roundRawFNToRecFN.io.in.isInf <= mulRawFN.io.rawOut.isInf @[MulRecFN.scala 124:39]
    roundRawFNToRecFN.io.in.isNaN <= mulRawFN.io.rawOut.isNaN @[MulRecFN.scala 124:39]
    roundRawFNToRecFN.io.roundingMode <= io.roundingMode @[MulRecFN.scala 125:39]
    roundRawFNToRecFN.io.detectTininess <= io.detectTininess @[MulRecFN.scala 126:41]
    io.out <= roundRawFNToRecFN.io.out @[MulRecFN.scala 127:23]
    io.exceptionFlags <= roundRawFNToRecFN.io.exceptionFlags @[MulRecFN.scala 128:23]

  module FP32Multiplier_2 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<32>, flip b : UInt<32>, result : UInt<32>}

    inst mulRecFN of MulRecFN_2 @[FPU.scala 88:26]
    node a_recoded_rawIn_sign = bits(io.a, 31, 31) @[rawFloatFromFN.scala 44:18]
    node a_recoded_rawIn_expIn = bits(io.a, 30, 23) @[rawFloatFromFN.scala 45:19]
    node a_recoded_rawIn_fractIn = bits(io.a, 22, 0) @[rawFloatFromFN.scala 46:21]
    node a_recoded_rawIn_isZeroExpIn = eq(a_recoded_rawIn_expIn, UInt<1>("h0")) @[rawFloatFromFN.scala 48:30]
    node a_recoded_rawIn_isZeroFractIn = eq(a_recoded_rawIn_fractIn, UInt<1>("h0")) @[rawFloatFromFN.scala 49:34]
    node _a_recoded_rawIn_normDist_T = bits(a_recoded_rawIn_fractIn, 0, 0) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_1 = bits(a_recoded_rawIn_fractIn, 1, 1) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_2 = bits(a_recoded_rawIn_fractIn, 2, 2) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_3 = bits(a_recoded_rawIn_fractIn, 3, 3) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_4 = bits(a_recoded_rawIn_fractIn, 4, 4) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_5 = bits(a_recoded_rawIn_fractIn, 5, 5) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_6 = bits(a_recoded_rawIn_fractIn, 6, 6) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_7 = bits(a_recoded_rawIn_fractIn, 7, 7) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_8 = bits(a_recoded_rawIn_fractIn, 8, 8) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_9 = bits(a_recoded_rawIn_fractIn, 9, 9) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_10 = bits(a_recoded_rawIn_fractIn, 10, 10) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_11 = bits(a_recoded_rawIn_fractIn, 11, 11) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_12 = bits(a_recoded_rawIn_fractIn, 12, 12) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_13 = bits(a_recoded_rawIn_fractIn, 13, 13) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_14 = bits(a_recoded_rawIn_fractIn, 14, 14) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_15 = bits(a_recoded_rawIn_fractIn, 15, 15) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_16 = bits(a_recoded_rawIn_fractIn, 16, 16) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_17 = bits(a_recoded_rawIn_fractIn, 17, 17) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_18 = bits(a_recoded_rawIn_fractIn, 18, 18) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_19 = bits(a_recoded_rawIn_fractIn, 19, 19) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_20 = bits(a_recoded_rawIn_fractIn, 20, 20) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_21 = bits(a_recoded_rawIn_fractIn, 21, 21) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_22 = bits(a_recoded_rawIn_fractIn, 22, 22) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_23 = mux(_a_recoded_rawIn_normDist_T_1, UInt<5>("h15"), UInt<5>("h16")) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_24 = mux(_a_recoded_rawIn_normDist_T_2, UInt<5>("h14"), _a_recoded_rawIn_normDist_T_23) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_25 = mux(_a_recoded_rawIn_normDist_T_3, UInt<5>("h13"), _a_recoded_rawIn_normDist_T_24) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_26 = mux(_a_recoded_rawIn_normDist_T_4, UInt<5>("h12"), _a_recoded_rawIn_normDist_T_25) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_27 = mux(_a_recoded_rawIn_normDist_T_5, UInt<5>("h11"), _a_recoded_rawIn_normDist_T_26) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_28 = mux(_a_recoded_rawIn_normDist_T_6, UInt<5>("h10"), _a_recoded_rawIn_normDist_T_27) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_29 = mux(_a_recoded_rawIn_normDist_T_7, UInt<4>("hf"), _a_recoded_rawIn_normDist_T_28) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_30 = mux(_a_recoded_rawIn_normDist_T_8, UInt<4>("he"), _a_recoded_rawIn_normDist_T_29) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_31 = mux(_a_recoded_rawIn_normDist_T_9, UInt<4>("hd"), _a_recoded_rawIn_normDist_T_30) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_32 = mux(_a_recoded_rawIn_normDist_T_10, UInt<4>("hc"), _a_recoded_rawIn_normDist_T_31) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_33 = mux(_a_recoded_rawIn_normDist_T_11, UInt<4>("hb"), _a_recoded_rawIn_normDist_T_32) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_34 = mux(_a_recoded_rawIn_normDist_T_12, UInt<4>("ha"), _a_recoded_rawIn_normDist_T_33) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_35 = mux(_a_recoded_rawIn_normDist_T_13, UInt<4>("h9"), _a_recoded_rawIn_normDist_T_34) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_36 = mux(_a_recoded_rawIn_normDist_T_14, UInt<4>("h8"), _a_recoded_rawIn_normDist_T_35) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_37 = mux(_a_recoded_rawIn_normDist_T_15, UInt<3>("h7"), _a_recoded_rawIn_normDist_T_36) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_38 = mux(_a_recoded_rawIn_normDist_T_16, UInt<3>("h6"), _a_recoded_rawIn_normDist_T_37) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_39 = mux(_a_recoded_rawIn_normDist_T_17, UInt<3>("h5"), _a_recoded_rawIn_normDist_T_38) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_40 = mux(_a_recoded_rawIn_normDist_T_18, UInt<3>("h4"), _a_recoded_rawIn_normDist_T_39) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_41 = mux(_a_recoded_rawIn_normDist_T_19, UInt<2>("h3"), _a_recoded_rawIn_normDist_T_40) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_42 = mux(_a_recoded_rawIn_normDist_T_20, UInt<2>("h2"), _a_recoded_rawIn_normDist_T_41) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_43 = mux(_a_recoded_rawIn_normDist_T_21, UInt<1>("h1"), _a_recoded_rawIn_normDist_T_42) @[Mux.scala 47:70]
    node a_recoded_rawIn_normDist = mux(_a_recoded_rawIn_normDist_T_22, UInt<1>("h0"), _a_recoded_rawIn_normDist_T_43) @[Mux.scala 47:70]
    node _a_recoded_rawIn_subnormFract_T = dshl(a_recoded_rawIn_fractIn, a_recoded_rawIn_normDist) @[rawFloatFromFN.scala 52:33]
    node _a_recoded_rawIn_subnormFract_T_1 = bits(_a_recoded_rawIn_subnormFract_T, 21, 0) @[rawFloatFromFN.scala 52:46]
    node a_recoded_rawIn_subnormFract = shl(_a_recoded_rawIn_subnormFract_T_1, 1) @[rawFloatFromFN.scala 52:64]
    node _a_recoded_rawIn_adjustedExp_T = xor(a_recoded_rawIn_normDist, UInt<9>("h1ff")) @[rawFloatFromFN.scala 55:18]
    node _a_recoded_rawIn_adjustedExp_T_1 = mux(a_recoded_rawIn_isZeroExpIn, _a_recoded_rawIn_adjustedExp_T, a_recoded_rawIn_expIn) @[rawFloatFromFN.scala 54:10]
    node _a_recoded_rawIn_adjustedExp_T_2 = mux(a_recoded_rawIn_isZeroExpIn, UInt<2>("h2"), UInt<1>("h1")) @[rawFloatFromFN.scala 58:14]
    node _a_recoded_rawIn_adjustedExp_T_3 = or(UInt<8>("h80"), _a_recoded_rawIn_adjustedExp_T_2) @[rawFloatFromFN.scala 58:9]
    node _a_recoded_rawIn_adjustedExp_T_4 = add(_a_recoded_rawIn_adjustedExp_T_1, _a_recoded_rawIn_adjustedExp_T_3) @[rawFloatFromFN.scala 57:9]
    node a_recoded_rawIn_adjustedExp = tail(_a_recoded_rawIn_adjustedExp_T_4, 1) @[rawFloatFromFN.scala 57:9]
    node a_recoded_rawIn_isZero = and(a_recoded_rawIn_isZeroExpIn, a_recoded_rawIn_isZeroFractIn) @[rawFloatFromFN.scala 60:30]
    node _a_recoded_rawIn_isSpecial_T = bits(a_recoded_rawIn_adjustedExp, 8, 7) @[rawFloatFromFN.scala 61:32]
    node a_recoded_rawIn_isSpecial = eq(_a_recoded_rawIn_isSpecial_T, UInt<2>("h3")) @[rawFloatFromFN.scala 61:57]
    wire a_recoded_rawIn : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>} @[rawFloatFromFN.scala 63:19]
    node _a_recoded_rawIn_out_isNaN_T = eq(a_recoded_rawIn_isZeroFractIn, UInt<1>("h0")) @[rawFloatFromFN.scala 64:31]
    node _a_recoded_rawIn_out_isNaN_T_1 = and(a_recoded_rawIn_isSpecial, _a_recoded_rawIn_out_isNaN_T) @[rawFloatFromFN.scala 64:28]
    a_recoded_rawIn.isNaN <= _a_recoded_rawIn_out_isNaN_T_1 @[rawFloatFromFN.scala 64:15]
    node _a_recoded_rawIn_out_isInf_T = and(a_recoded_rawIn_isSpecial, a_recoded_rawIn_isZeroFractIn) @[rawFloatFromFN.scala 65:28]
    a_recoded_rawIn.isInf <= _a_recoded_rawIn_out_isInf_T @[rawFloatFromFN.scala 65:15]
    a_recoded_rawIn.isZero <= a_recoded_rawIn_isZero @[rawFloatFromFN.scala 66:16]
    a_recoded_rawIn.sign <= a_recoded_rawIn_sign @[rawFloatFromFN.scala 67:14]
    node _a_recoded_rawIn_out_sExp_T = bits(a_recoded_rawIn_adjustedExp, 8, 0) @[rawFloatFromFN.scala 68:28]
    node _a_recoded_rawIn_out_sExp_T_1 = cvt(_a_recoded_rawIn_out_sExp_T) @[rawFloatFromFN.scala 68:42]
    a_recoded_rawIn.sExp <= _a_recoded_rawIn_out_sExp_T_1 @[rawFloatFromFN.scala 68:14]
    node _a_recoded_rawIn_out_sig_T = eq(a_recoded_rawIn_isZero, UInt<1>("h0")) @[rawFloatFromFN.scala 70:19]
    node _a_recoded_rawIn_out_sig_T_1 = cat(UInt<1>("h0"), _a_recoded_rawIn_out_sig_T) @[rawFloatFromFN.scala 70:16]
    node _a_recoded_rawIn_out_sig_T_2 = mux(a_recoded_rawIn_isZeroExpIn, a_recoded_rawIn_subnormFract, a_recoded_rawIn_fractIn) @[rawFloatFromFN.scala 70:33]
    node _a_recoded_rawIn_out_sig_T_3 = cat(_a_recoded_rawIn_out_sig_T_1, _a_recoded_rawIn_out_sig_T_2) @[rawFloatFromFN.scala 70:27]
    a_recoded_rawIn.sig <= _a_recoded_rawIn_out_sig_T_3 @[rawFloatFromFN.scala 69:13]
    node _a_recoded_T = bits(a_recoded_rawIn.sExp, 8, 6) @[recFNFromFN.scala 48:50]
    node _a_recoded_T_1 = mux(a_recoded_rawIn.isZero, UInt<3>("h0"), _a_recoded_T) @[recFNFromFN.scala 48:15]
    node _a_recoded_T_2 = mux(a_recoded_rawIn.isNaN, UInt<1>("h1"), UInt<1>("h0")) @[recFNFromFN.scala 49:20]
    node _a_recoded_T_3 = or(_a_recoded_T_1, _a_recoded_T_2) @[recFNFromFN.scala 48:76]
    node _a_recoded_T_4 = cat(a_recoded_rawIn.sign, _a_recoded_T_3) @[recFNFromFN.scala 47:20]
    node _a_recoded_T_5 = bits(a_recoded_rawIn.sExp, 5, 0) @[recFNFromFN.scala 50:23]
    node _a_recoded_T_6 = cat(_a_recoded_T_4, _a_recoded_T_5) @[recFNFromFN.scala 49:45]
    node _a_recoded_T_7 = bits(a_recoded_rawIn.sig, 22, 0) @[recFNFromFN.scala 51:22]
    node a_recoded = cat(_a_recoded_T_6, _a_recoded_T_7) @[recFNFromFN.scala 50:41]
    node b_recoded_rawIn_sign = bits(io.b, 31, 31) @[rawFloatFromFN.scala 44:18]
    node b_recoded_rawIn_expIn = bits(io.b, 30, 23) @[rawFloatFromFN.scala 45:19]
    node b_recoded_rawIn_fractIn = bits(io.b, 22, 0) @[rawFloatFromFN.scala 46:21]
    node b_recoded_rawIn_isZeroExpIn = eq(b_recoded_rawIn_expIn, UInt<1>("h0")) @[rawFloatFromFN.scala 48:30]
    node b_recoded_rawIn_isZeroFractIn = eq(b_recoded_rawIn_fractIn, UInt<1>("h0")) @[rawFloatFromFN.scala 49:34]
    node _b_recoded_rawIn_normDist_T = bits(b_recoded_rawIn_fractIn, 0, 0) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_1 = bits(b_recoded_rawIn_fractIn, 1, 1) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_2 = bits(b_recoded_rawIn_fractIn, 2, 2) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_3 = bits(b_recoded_rawIn_fractIn, 3, 3) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_4 = bits(b_recoded_rawIn_fractIn, 4, 4) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_5 = bits(b_recoded_rawIn_fractIn, 5, 5) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_6 = bits(b_recoded_rawIn_fractIn, 6, 6) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_7 = bits(b_recoded_rawIn_fractIn, 7, 7) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_8 = bits(b_recoded_rawIn_fractIn, 8, 8) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_9 = bits(b_recoded_rawIn_fractIn, 9, 9) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_10 = bits(b_recoded_rawIn_fractIn, 10, 10) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_11 = bits(b_recoded_rawIn_fractIn, 11, 11) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_12 = bits(b_recoded_rawIn_fractIn, 12, 12) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_13 = bits(b_recoded_rawIn_fractIn, 13, 13) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_14 = bits(b_recoded_rawIn_fractIn, 14, 14) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_15 = bits(b_recoded_rawIn_fractIn, 15, 15) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_16 = bits(b_recoded_rawIn_fractIn, 16, 16) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_17 = bits(b_recoded_rawIn_fractIn, 17, 17) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_18 = bits(b_recoded_rawIn_fractIn, 18, 18) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_19 = bits(b_recoded_rawIn_fractIn, 19, 19) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_20 = bits(b_recoded_rawIn_fractIn, 20, 20) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_21 = bits(b_recoded_rawIn_fractIn, 21, 21) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_22 = bits(b_recoded_rawIn_fractIn, 22, 22) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_23 = mux(_b_recoded_rawIn_normDist_T_1, UInt<5>("h15"), UInt<5>("h16")) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_24 = mux(_b_recoded_rawIn_normDist_T_2, UInt<5>("h14"), _b_recoded_rawIn_normDist_T_23) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_25 = mux(_b_recoded_rawIn_normDist_T_3, UInt<5>("h13"), _b_recoded_rawIn_normDist_T_24) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_26 = mux(_b_recoded_rawIn_normDist_T_4, UInt<5>("h12"), _b_recoded_rawIn_normDist_T_25) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_27 = mux(_b_recoded_rawIn_normDist_T_5, UInt<5>("h11"), _b_recoded_rawIn_normDist_T_26) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_28 = mux(_b_recoded_rawIn_normDist_T_6, UInt<5>("h10"), _b_recoded_rawIn_normDist_T_27) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_29 = mux(_b_recoded_rawIn_normDist_T_7, UInt<4>("hf"), _b_recoded_rawIn_normDist_T_28) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_30 = mux(_b_recoded_rawIn_normDist_T_8, UInt<4>("he"), _b_recoded_rawIn_normDist_T_29) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_31 = mux(_b_recoded_rawIn_normDist_T_9, UInt<4>("hd"), _b_recoded_rawIn_normDist_T_30) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_32 = mux(_b_recoded_rawIn_normDist_T_10, UInt<4>("hc"), _b_recoded_rawIn_normDist_T_31) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_33 = mux(_b_recoded_rawIn_normDist_T_11, UInt<4>("hb"), _b_recoded_rawIn_normDist_T_32) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_34 = mux(_b_recoded_rawIn_normDist_T_12, UInt<4>("ha"), _b_recoded_rawIn_normDist_T_33) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_35 = mux(_b_recoded_rawIn_normDist_T_13, UInt<4>("h9"), _b_recoded_rawIn_normDist_T_34) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_36 = mux(_b_recoded_rawIn_normDist_T_14, UInt<4>("h8"), _b_recoded_rawIn_normDist_T_35) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_37 = mux(_b_recoded_rawIn_normDist_T_15, UInt<3>("h7"), _b_recoded_rawIn_normDist_T_36) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_38 = mux(_b_recoded_rawIn_normDist_T_16, UInt<3>("h6"), _b_recoded_rawIn_normDist_T_37) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_39 = mux(_b_recoded_rawIn_normDist_T_17, UInt<3>("h5"), _b_recoded_rawIn_normDist_T_38) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_40 = mux(_b_recoded_rawIn_normDist_T_18, UInt<3>("h4"), _b_recoded_rawIn_normDist_T_39) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_41 = mux(_b_recoded_rawIn_normDist_T_19, UInt<2>("h3"), _b_recoded_rawIn_normDist_T_40) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_42 = mux(_b_recoded_rawIn_normDist_T_20, UInt<2>("h2"), _b_recoded_rawIn_normDist_T_41) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_43 = mux(_b_recoded_rawIn_normDist_T_21, UInt<1>("h1"), _b_recoded_rawIn_normDist_T_42) @[Mux.scala 47:70]
    node b_recoded_rawIn_normDist = mux(_b_recoded_rawIn_normDist_T_22, UInt<1>("h0"), _b_recoded_rawIn_normDist_T_43) @[Mux.scala 47:70]
    node _b_recoded_rawIn_subnormFract_T = dshl(b_recoded_rawIn_fractIn, b_recoded_rawIn_normDist) @[rawFloatFromFN.scala 52:33]
    node _b_recoded_rawIn_subnormFract_T_1 = bits(_b_recoded_rawIn_subnormFract_T, 21, 0) @[rawFloatFromFN.scala 52:46]
    node b_recoded_rawIn_subnormFract = shl(_b_recoded_rawIn_subnormFract_T_1, 1) @[rawFloatFromFN.scala 52:64]
    node _b_recoded_rawIn_adjustedExp_T = xor(b_recoded_rawIn_normDist, UInt<9>("h1ff")) @[rawFloatFromFN.scala 55:18]
    node _b_recoded_rawIn_adjustedExp_T_1 = mux(b_recoded_rawIn_isZeroExpIn, _b_recoded_rawIn_adjustedExp_T, b_recoded_rawIn_expIn) @[rawFloatFromFN.scala 54:10]
    node _b_recoded_rawIn_adjustedExp_T_2 = mux(b_recoded_rawIn_isZeroExpIn, UInt<2>("h2"), UInt<1>("h1")) @[rawFloatFromFN.scala 58:14]
    node _b_recoded_rawIn_adjustedExp_T_3 = or(UInt<8>("h80"), _b_recoded_rawIn_adjustedExp_T_2) @[rawFloatFromFN.scala 58:9]
    node _b_recoded_rawIn_adjustedExp_T_4 = add(_b_recoded_rawIn_adjustedExp_T_1, _b_recoded_rawIn_adjustedExp_T_3) @[rawFloatFromFN.scala 57:9]
    node b_recoded_rawIn_adjustedExp = tail(_b_recoded_rawIn_adjustedExp_T_4, 1) @[rawFloatFromFN.scala 57:9]
    node b_recoded_rawIn_isZero = and(b_recoded_rawIn_isZeroExpIn, b_recoded_rawIn_isZeroFractIn) @[rawFloatFromFN.scala 60:30]
    node _b_recoded_rawIn_isSpecial_T = bits(b_recoded_rawIn_adjustedExp, 8, 7) @[rawFloatFromFN.scala 61:32]
    node b_recoded_rawIn_isSpecial = eq(_b_recoded_rawIn_isSpecial_T, UInt<2>("h3")) @[rawFloatFromFN.scala 61:57]
    wire b_recoded_rawIn : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>} @[rawFloatFromFN.scala 63:19]
    node _b_recoded_rawIn_out_isNaN_T = eq(b_recoded_rawIn_isZeroFractIn, UInt<1>("h0")) @[rawFloatFromFN.scala 64:31]
    node _b_recoded_rawIn_out_isNaN_T_1 = and(b_recoded_rawIn_isSpecial, _b_recoded_rawIn_out_isNaN_T) @[rawFloatFromFN.scala 64:28]
    b_recoded_rawIn.isNaN <= _b_recoded_rawIn_out_isNaN_T_1 @[rawFloatFromFN.scala 64:15]
    node _b_recoded_rawIn_out_isInf_T = and(b_recoded_rawIn_isSpecial, b_recoded_rawIn_isZeroFractIn) @[rawFloatFromFN.scala 65:28]
    b_recoded_rawIn.isInf <= _b_recoded_rawIn_out_isInf_T @[rawFloatFromFN.scala 65:15]
    b_recoded_rawIn.isZero <= b_recoded_rawIn_isZero @[rawFloatFromFN.scala 66:16]
    b_recoded_rawIn.sign <= b_recoded_rawIn_sign @[rawFloatFromFN.scala 67:14]
    node _b_recoded_rawIn_out_sExp_T = bits(b_recoded_rawIn_adjustedExp, 8, 0) @[rawFloatFromFN.scala 68:28]
    node _b_recoded_rawIn_out_sExp_T_1 = cvt(_b_recoded_rawIn_out_sExp_T) @[rawFloatFromFN.scala 68:42]
    b_recoded_rawIn.sExp <= _b_recoded_rawIn_out_sExp_T_1 @[rawFloatFromFN.scala 68:14]
    node _b_recoded_rawIn_out_sig_T = eq(b_recoded_rawIn_isZero, UInt<1>("h0")) @[rawFloatFromFN.scala 70:19]
    node _b_recoded_rawIn_out_sig_T_1 = cat(UInt<1>("h0"), _b_recoded_rawIn_out_sig_T) @[rawFloatFromFN.scala 70:16]
    node _b_recoded_rawIn_out_sig_T_2 = mux(b_recoded_rawIn_isZeroExpIn, b_recoded_rawIn_subnormFract, b_recoded_rawIn_fractIn) @[rawFloatFromFN.scala 70:33]
    node _b_recoded_rawIn_out_sig_T_3 = cat(_b_recoded_rawIn_out_sig_T_1, _b_recoded_rawIn_out_sig_T_2) @[rawFloatFromFN.scala 70:27]
    b_recoded_rawIn.sig <= _b_recoded_rawIn_out_sig_T_3 @[rawFloatFromFN.scala 69:13]
    node _b_recoded_T = bits(b_recoded_rawIn.sExp, 8, 6) @[recFNFromFN.scala 48:50]
    node _b_recoded_T_1 = mux(b_recoded_rawIn.isZero, UInt<3>("h0"), _b_recoded_T) @[recFNFromFN.scala 48:15]
    node _b_recoded_T_2 = mux(b_recoded_rawIn.isNaN, UInt<1>("h1"), UInt<1>("h0")) @[recFNFromFN.scala 49:20]
    node _b_recoded_T_3 = or(_b_recoded_T_1, _b_recoded_T_2) @[recFNFromFN.scala 48:76]
    node _b_recoded_T_4 = cat(b_recoded_rawIn.sign, _b_recoded_T_3) @[recFNFromFN.scala 47:20]
    node _b_recoded_T_5 = bits(b_recoded_rawIn.sExp, 5, 0) @[recFNFromFN.scala 50:23]
    node _b_recoded_T_6 = cat(_b_recoded_T_4, _b_recoded_T_5) @[recFNFromFN.scala 49:45]
    node _b_recoded_T_7 = bits(b_recoded_rawIn.sig, 22, 0) @[recFNFromFN.scala 51:22]
    node b_recoded = cat(_b_recoded_T_6, _b_recoded_T_7) @[recFNFromFN.scala 50:41]
    mulRecFN.io.a <= a_recoded @[FPU.scala 95:19]
    mulRecFN.io.b <= b_recoded @[FPU.scala 96:19]
    mulRecFN.io.roundingMode <= UInt<3>("h0") @[FPU.scala 97:30]
    mulRecFN.io.detectTininess <= UInt<1>("h1") @[FPU.scala 98:32]
    node io_result_rawIn_exp = bits(mulRecFN.io.out, 31, 23) @[rawFloatFromRecFN.scala 51:21]
    node _io_result_rawIn_isZero_T = bits(io_result_rawIn_exp, 8, 6) @[rawFloatFromRecFN.scala 52:28]
    node io_result_rawIn_isZero = eq(_io_result_rawIn_isZero_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 52:53]
    node _io_result_rawIn_isSpecial_T = bits(io_result_rawIn_exp, 8, 7) @[rawFloatFromRecFN.scala 53:28]
    node io_result_rawIn_isSpecial = eq(_io_result_rawIn_isSpecial_T, UInt<2>("h3")) @[rawFloatFromRecFN.scala 53:53]
    wire io_result_rawIn : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>} @[rawFloatFromRecFN.scala 55:23]
    node _io_result_rawIn_out_isNaN_T = bits(io_result_rawIn_exp, 6, 6) @[rawFloatFromRecFN.scala 56:41]
    node _io_result_rawIn_out_isNaN_T_1 = and(io_result_rawIn_isSpecial, _io_result_rawIn_out_isNaN_T) @[rawFloatFromRecFN.scala 56:33]
    io_result_rawIn.isNaN <= _io_result_rawIn_out_isNaN_T_1 @[rawFloatFromRecFN.scala 56:20]
    node _io_result_rawIn_out_isInf_T = bits(io_result_rawIn_exp, 6, 6) @[rawFloatFromRecFN.scala 57:41]
    node _io_result_rawIn_out_isInf_T_1 = eq(_io_result_rawIn_out_isInf_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 57:36]
    node _io_result_rawIn_out_isInf_T_2 = and(io_result_rawIn_isSpecial, _io_result_rawIn_out_isInf_T_1) @[rawFloatFromRecFN.scala 57:33]
    io_result_rawIn.isInf <= _io_result_rawIn_out_isInf_T_2 @[rawFloatFromRecFN.scala 57:20]
    io_result_rawIn.isZero <= io_result_rawIn_isZero @[rawFloatFromRecFN.scala 58:20]
    node _io_result_rawIn_out_sign_T = bits(mulRecFN.io.out, 32, 32) @[rawFloatFromRecFN.scala 59:25]
    io_result_rawIn.sign <= _io_result_rawIn_out_sign_T @[rawFloatFromRecFN.scala 59:20]
    node _io_result_rawIn_out_sExp_T = cvt(io_result_rawIn_exp) @[rawFloatFromRecFN.scala 60:27]
    io_result_rawIn.sExp <= _io_result_rawIn_out_sExp_T @[rawFloatFromRecFN.scala 60:20]
    node _io_result_rawIn_out_sig_T = eq(io_result_rawIn_isZero, UInt<1>("h0")) @[rawFloatFromRecFN.scala 61:35]
    node _io_result_rawIn_out_sig_T_1 = cat(UInt<1>("h0"), _io_result_rawIn_out_sig_T) @[rawFloatFromRecFN.scala 61:32]
    node _io_result_rawIn_out_sig_T_2 = bits(mulRecFN.io.out, 22, 0) @[rawFloatFromRecFN.scala 61:49]
    node _io_result_rawIn_out_sig_T_3 = cat(_io_result_rawIn_out_sig_T_1, _io_result_rawIn_out_sig_T_2) @[rawFloatFromRecFN.scala 61:44]
    io_result_rawIn.sig <= _io_result_rawIn_out_sig_T_3 @[rawFloatFromRecFN.scala 61:20]
    node io_result_isSubnormal = lt(io_result_rawIn.sExp, asSInt(UInt<9>("h82"))) @[fNFromRecFN.scala 51:38]
    node _io_result_denormShiftDist_T = bits(io_result_rawIn.sExp, 4, 0) @[fNFromRecFN.scala 52:47]
    node _io_result_denormShiftDist_T_1 = sub(UInt<1>("h1"), _io_result_denormShiftDist_T) @[fNFromRecFN.scala 52:35]
    node io_result_denormShiftDist = tail(_io_result_denormShiftDist_T_1, 1) @[fNFromRecFN.scala 52:35]
    node _io_result_denormFract_T = shr(io_result_rawIn.sig, 1) @[fNFromRecFN.scala 53:38]
    node _io_result_denormFract_T_1 = dshr(_io_result_denormFract_T, io_result_denormShiftDist) @[fNFromRecFN.scala 53:42]
    node io_result_denormFract = bits(_io_result_denormFract_T_1, 22, 0) @[fNFromRecFN.scala 53:60]
    node _io_result_expOut_T = bits(io_result_rawIn.sExp, 7, 0) @[fNFromRecFN.scala 58:27]
    node _io_result_expOut_T_1 = sub(_io_result_expOut_T, UInt<8>("h81")) @[fNFromRecFN.scala 58:45]
    node _io_result_expOut_T_2 = tail(_io_result_expOut_T_1, 1) @[fNFromRecFN.scala 58:45]
    node _io_result_expOut_T_3 = mux(io_result_isSubnormal, UInt<1>("h0"), _io_result_expOut_T_2) @[fNFromRecFN.scala 56:16]
    node _io_result_expOut_T_4 = or(io_result_rawIn.isNaN, io_result_rawIn.isInf) @[fNFromRecFN.scala 60:44]
    node _io_result_expOut_T_5 = bits(_io_result_expOut_T_4, 0, 0) @[Bitwise.scala 77:15]
    node _io_result_expOut_T_6 = mux(_io_result_expOut_T_5, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 77:12]
    node io_result_expOut = or(_io_result_expOut_T_3, _io_result_expOut_T_6) @[fNFromRecFN.scala 60:15]
    node _io_result_fractOut_T = bits(io_result_rawIn.sig, 22, 0) @[fNFromRecFN.scala 64:48]
    node _io_result_fractOut_T_1 = mux(io_result_rawIn.isInf, UInt<1>("h0"), _io_result_fractOut_T) @[fNFromRecFN.scala 64:20]
    node io_result_fractOut = mux(io_result_isSubnormal, io_result_denormFract, _io_result_fractOut_T_1) @[fNFromRecFN.scala 62:16]
    node io_result_hi = cat(io_result_rawIn.sign, io_result_expOut) @[Cat.scala 33:92]
    node _io_result_T = cat(io_result_hi, io_result_fractOut) @[Cat.scala 33:92]
    io.result <= _io_result_T @[FPU.scala 101:15]

  module FP32Truncate_1 :
    input clock : Clock
    input reset : Reset
    output io : { flip in : UInt<32>, out : UInt<32>}

    node sign = bits(io.in, 31, 31) @[FPU.scala 195:19]
    node exponent = bits(io.in, 30, 23) @[FPU.scala 196:23]
    node mantissa = bits(io.in, 22, 0) @[FPU.scala 197:23]
    wire result : UInt<32> @[FPU.scala 198:20]
    node _T = lt(exponent, UInt<7>("h7f")) @[FPU.scala 200:17]
    when _T : @[FPU.scala 200:26]
      result <= UInt<1>("h0") @[FPU.scala 202:12]
    else :
      node _T_1 = geq(exponent, UInt<8>("h96")) @[FPU.scala 203:23]
      when _T_1 : @[FPU.scala 203:33]
        result <= io.in @[FPU.scala 205:12]
      else :
        node _shift_T = sub(exponent, UInt<7>("h7f")) @[FPU.scala 208:26]
        node shift = tail(_shift_T, 1) @[FPU.scala 208:26]
        wire mask : UInt<23> @[FPU.scala 209:20]
        node _mask_T = dshl(UInt<23>("h1"), shift) @[FPU.scala 210:25]
        node _mask_T_1 = sub(_mask_T, UInt<1>("h1")) @[FPU.scala 210:35]
        node _mask_T_2 = tail(_mask_T_1, 1) @[FPU.scala 210:35]
        node _mask_T_3 = sub(UInt<5>("h17"), shift) @[FPU.scala 210:51]
        node _mask_T_4 = tail(_mask_T_3, 1) @[FPU.scala 210:51]
        node _mask_T_5 = dshl(_mask_T_2, _mask_T_4) @[FPU.scala 210:42]
        mask <= _mask_T_5 @[FPU.scala 210:10]
        wire truncated_mantissa : UInt<23> @[FPU.scala 211:34]
        node _truncated_mantissa_T = and(mantissa, mask) @[FPU.scala 212:36]
        truncated_mantissa <= _truncated_mantissa_T @[FPU.scala 212:24]
        node result_hi = cat(sign, exponent) @[Cat.scala 33:92]
        node _result_T = cat(result_hi, truncated_mantissa) @[Cat.scala 33:92]
        result <= _result_T @[FPU.scala 213:12]
    io.out <= result @[FPU.scala 216:10]

  module FP32toINT32 :
    input clock : Clock
    input reset : Reset
    output io : { flip ieee754 : UInt<32>, int32 : SInt<32>}

    node sign = bits(io.ieee754, 31, 31) @[FPU.scala 242:24]
    node _exponent_T = bits(io.ieee754, 30, 23) @[FPU.scala 243:28]
    node exponent = asSInt(_exponent_T) @[FPU.scala 243:37]
    node mantissa = bits(io.ieee754, 22, 0) @[FPU.scala 244:28]
    node mantissaWithLeadingOne = cat(UInt<1>("h1"), mantissa) @[Cat.scala 33:92]
    node _trueExponent_T = sub(exponent, asSInt(UInt<8>("h7f"))) @[FPU.scala 250:31]
    node _trueExponent_T_1 = tail(_trueExponent_T, 1) @[FPU.scala 250:31]
    node trueExponent = asSInt(_trueExponent_T_1) @[FPU.scala 250:31]
    node _shiftAmount_T = sub(trueExponent, asSInt(UInt<6>("h17"))) @[FPU.scala 253:34]
    node _shiftAmount_T_1 = tail(_shiftAmount_T, 1) @[FPU.scala 253:34]
    node shiftAmount = asSInt(_shiftAmount_T_1) @[FPU.scala 253:34]
    node _shiftedMantissa_T = geq(shiftAmount, asSInt(UInt<1>("h0"))) @[FPU.scala 256:41]
    node _shiftedMantissa_T_1 = asUInt(shiftAmount) @[FPU.scala 257:43]
    node _shiftedMantissa_T_2 = dshl(mantissaWithLeadingOne, _shiftedMantissa_T_1) @[FPU.scala 257:28]
    node _shiftedMantissa_T_3 = asUInt(shiftAmount) @[FPU.scala 258:44]
    node _shiftedMantissa_T_4 = sub(UInt<1>("h0"), _shiftedMantissa_T_3) @[FPU.scala 258:31]
    node _shiftedMantissa_T_5 = tail(_shiftedMantissa_T_4, 1) @[FPU.scala 258:31]
    node _shiftedMantissa_T_6 = dshr(mantissaWithLeadingOne, _shiftedMantissa_T_5) @[FPU.scala 258:28]
    node shiftedMantissa = mux(_shiftedMantissa_T, _shiftedMantissa_T_2, _shiftedMantissa_T_6) @[FPU.scala 256:28]
    node _result_T = eq(sign, UInt<1>("h0")) @[FPU.scala 261:25]
    node _result_T_1 = asSInt(shiftedMantissa) @[FPU.scala 261:50]
    node _result_T_2 = asSInt(shiftedMantissa) @[FPU.scala 261:75]
    node _result_T_3 = sub(asSInt(UInt<1>("h0")), _result_T_2) @[FPU.scala 261:58]
    node _result_T_4 = tail(_result_T_3, 1) @[FPU.scala 261:58]
    node _result_T_5 = asSInt(_result_T_4) @[FPU.scala 261:58]
    node result = mux(_result_T, _result_T_1, _result_T_5) @[FPU.scala 261:19]
    io.int32 <= result @[FPU.scala 264:12]

  module IndexCalculator :
    input clock : Clock
    input reset : Reset
    output io : { flip EN : UInt<1>, flip angle : UInt<32>, cosIndex : UInt<32>, sinIndex : UInt<32>, cosSign : UInt<1>, sinSign : UInt<1>, ENout : UInt<1>}

    inst FP32Mult of FP32Multiplier_2 @[sincosLUT.scala 18:32]
    FP32Mult.clock <= clock
    FP32Mult.reset <= reset
    inst FP32Truncate of FP32Truncate_1 @[sincosLUT.scala 19:32]
    FP32Truncate.clock <= clock
    FP32Truncate.reset <= reset
    inst FP32toINT32 of FP32toINT32 @[sincosLUT.scala 20:32]
    FP32toINT32.clock <= clock
    FP32toINT32.reset <= reset
    FP32Mult.io.a <= io.angle @[sincosLUT.scala 22:19]
    FP32Mult.io.b <= UInt<31>("h45000000") @[sincosLUT.scala 23:19]
    FP32Truncate.io.in <= FP32Mult.io.result @[sincosLUT.scala 26:24]
    FP32toINT32.io.ieee754 <= FP32Truncate.io.out @[sincosLUT.scala 29:28]
    node index = asUInt(FP32toINT32.io.int32) @[sincosLUT.scala 30:38]
    wire doublePi : UInt<32> @[sincosLUT.scala 33:28]
    wire OneAndHalfPi : UInt<32> @[sincosLUT.scala 34:28]
    wire Pi : UInt<32> @[sincosLUT.scala 35:28]
    wire halfPi : UInt<32> @[sincosLUT.scala 36:28]
    doublePi <= UInt<13>("h1000") @[sincosLUT.scala 38:18]
    OneAndHalfPi <= UInt<12>("hc00") @[sincosLUT.scala 39:18]
    Pi <= UInt<12>("h800") @[sincosLUT.scala 40:18]
    halfPi <= UInt<11>("h400") @[sincosLUT.scala 41:18]
    wire cosIndexWire : UInt<32> @[sincosLUT.scala 43:28]
    wire sinIndexWire : UInt<32> @[sincosLUT.scala 44:28]
    wire cosSignWire : UInt<1> @[sincosLUT.scala 45:28]
    wire sinSignWire : UInt<1> @[sincosLUT.scala 46:28]
    node _T = leq(index, halfPi) @[sincosLUT.scala 49:16]
    when _T : @[sincosLUT.scala 49:27]
      cosIndexWire <= index @[sincosLUT.scala 50:22]
      sinIndexWire <= index @[sincosLUT.scala 51:22]
      cosSignWire <= UInt<1>("h0") @[sincosLUT.scala 52:22]
      sinSignWire <= UInt<1>("h0") @[sincosLUT.scala 53:22]
    else :
      node _T_1 = leq(index, Pi) @[sincosLUT.scala 54:22]
      when _T_1 : @[sincosLUT.scala 54:29]
        node _cosIndexWire_T = sub(Pi, index) @[sincosLUT.scala 55:28]
        node _cosIndexWire_T_1 = tail(_cosIndexWire_T, 1) @[sincosLUT.scala 55:28]
        cosIndexWire <= _cosIndexWire_T_1 @[sincosLUT.scala 55:22]
        node _sinIndexWire_T = sub(Pi, index) @[sincosLUT.scala 56:28]
        node _sinIndexWire_T_1 = tail(_sinIndexWire_T, 1) @[sincosLUT.scala 56:28]
        sinIndexWire <= _sinIndexWire_T_1 @[sincosLUT.scala 56:22]
        cosSignWire <= UInt<1>("h1") @[sincosLUT.scala 57:22]
        sinSignWire <= UInt<1>("h0") @[sincosLUT.scala 58:22]
      else :
        node _T_2 = leq(index, OneAndHalfPi) @[sincosLUT.scala 59:22]
        when _T_2 : @[sincosLUT.scala 59:39]
          node _cosIndexWire_T_2 = sub(index, Pi) @[sincosLUT.scala 60:31]
          node _cosIndexWire_T_3 = tail(_cosIndexWire_T_2, 1) @[sincosLUT.scala 60:31]
          cosIndexWire <= _cosIndexWire_T_3 @[sincosLUT.scala 60:22]
          node _sinIndexWire_T_2 = sub(index, Pi) @[sincosLUT.scala 61:31]
          node _sinIndexWire_T_3 = tail(_sinIndexWire_T_2, 1) @[sincosLUT.scala 61:31]
          sinIndexWire <= _sinIndexWire_T_3 @[sincosLUT.scala 61:22]
          cosSignWire <= UInt<1>("h1") @[sincosLUT.scala 62:22]
          sinSignWire <= UInt<1>("h1") @[sincosLUT.scala 63:22]
        else :
          node _cosIndexWire_T_4 = sub(doublePi, index) @[sincosLUT.scala 65:34]
          node _cosIndexWire_T_5 = tail(_cosIndexWire_T_4, 1) @[sincosLUT.scala 65:34]
          cosIndexWire <= _cosIndexWire_T_5 @[sincosLUT.scala 65:22]
          node _sinIndexWire_T_4 = sub(doublePi, index) @[sincosLUT.scala 66:34]
          node _sinIndexWire_T_5 = tail(_sinIndexWire_T_4, 1) @[sincosLUT.scala 66:34]
          sinIndexWire <= _sinIndexWire_T_5 @[sincosLUT.scala 66:22]
          cosSignWire <= UInt<1>("h0") @[sincosLUT.scala 67:22]
          sinSignWire <= UInt<1>("h1") @[sincosLUT.scala 68:22]
    node _io_cosIndex_T = mux(io.EN, cosIndexWire, UInt<1>("h0")) @[sincosLUT.scala 72:23]
    io.cosIndex <= _io_cosIndex_T @[sincosLUT.scala 72:17]
    node _io_sinIndex_T = mux(io.EN, sinIndexWire, UInt<1>("h0")) @[sincosLUT.scala 73:23]
    io.sinIndex <= _io_sinIndex_T @[sincosLUT.scala 73:17]
    node _io_cosSign_T = mux(io.EN, cosSignWire, UInt<1>("h0")) @[sincosLUT.scala 74:23]
    io.cosSign <= _io_cosSign_T @[sincosLUT.scala 74:17]
    node _io_sinSign_T = mux(io.EN, sinSignWire, UInt<1>("h0")) @[sincosLUT.scala 75:23]
    io.sinSign <= _io_sinSign_T @[sincosLUT.scala 75:17]
    io.ENout <= io.EN @[sincosLUT.scala 76:17]

  module CosLUT :
    input clock : Clock
    input reset : Reset
    output io : { flip EN : UInt<1>, flip cosIndex : UInt<32>, flip sinIndex : UInt<32>, sinOut : UInt<32>, cosOut : UInt<32>, ENout : UInt<1>}

    wire sinLUTBank0 : UInt<30>[256] @[LUTbank.scala 59:26]
    sinLUTBank0[0] <= UInt<1>("h0") @[LUTbank.scala 59:26]
    sinLUTBank0[1] <= UInt<30>("h3ac91c67") @[LUTbank.scala 59:26]
    sinLUTBank0[2] <= UInt<30>("h3b491c58") @[LUTbank.scala 59:26]
    sinLUTBank0[3] <= UInt<30>("h3b96d52e") @[LUTbank.scala 59:26]
    sinLUTBank0[4] <= UInt<30>("h3bc91c1a") @[LUTbank.scala 59:26]
    sinLUTBank0[5] <= UInt<30>("h3bfb62e6") @[LUTbank.scala 59:26]
    sinLUTBank0[6] <= UInt<30>("h3c16d4c6") @[LUTbank.scala 59:26]
    sinLUTBank0[7] <= UInt<30>("h3c2ff801") @[LUTbank.scala 59:26]
    sinLUTBank0[8] <= UInt<30>("h3c491b21") @[LUTbank.scala 59:26]
    sinLUTBank0[9] <= UInt<30>("h3c623e23") @[LUTbank.scala 59:26]
    sinLUTBank0[10] <= UInt<30>("h3c7b6101") @[LUTbank.scala 59:26]
    sinLUTBank0[11] <= UInt<30>("h3c8a41dc") @[LUTbank.scala 59:26]
    sinLUTBank0[12] <= UInt<30>("h3c96d323") @[LUTbank.scala 59:26]
    sinLUTBank0[13] <= UInt<30>("h3ca36452") @[LUTbank.scala 59:26]
    sinLUTBank0[14] <= UInt<30>("h3caff568") @[LUTbank.scala 59:26]
    sinLUTBank0[15] <= UInt<30>("h3cbc8663") @[LUTbank.scala 59:26]
    sinLUTBank0[16] <= UInt<30>("h3cc91741") @[LUTbank.scala 59:26]
    sinLUTBank0[17] <= UInt<30>("h3cd5a7ff") @[LUTbank.scala 59:26]
    sinLUTBank0[18] <= UInt<30>("h3ce2389d") @[LUTbank.scala 59:26]
    sinLUTBank0[19] <= UInt<30>("h3ceec918") @[LUTbank.scala 59:26]
    sinLUTBank0[20] <= UInt<30>("h3cfb596e") @[LUTbank.scala 59:26]
    sinLUTBank0[21] <= UInt<30>("h3d03f4cf") @[LUTbank.scala 59:26]
    sinLUTBank0[22] <= UInt<30>("h3d0a3cd2") @[LUTbank.scala 59:26]
    sinLUTBank0[23] <= UInt<30>("h3d1084c0") @[LUTbank.scala 59:26]
    sinLUTBank0[24] <= UInt<30>("h3d16cc97") @[LUTbank.scala 59:26]
    sinLUTBank0[25] <= UInt<30>("h3d1d1458") @[LUTbank.scala 59:26]
    sinLUTBank0[26] <= UInt<30>("h3d235c00") @[LUTbank.scala 59:26]
    sinLUTBank0[27] <= UInt<30>("h3d29a38f") @[LUTbank.scala 59:26]
    sinLUTBank0[28] <= UInt<30>("h3d2feb04") @[LUTbank.scala 59:26]
    sinLUTBank0[29] <= UInt<30>("h3d36325d") @[LUTbank.scala 59:26]
    sinLUTBank0[30] <= UInt<30>("h3d3c799b") @[LUTbank.scala 59:26]
    sinLUTBank0[31] <= UInt<30>("h3d42c0bb") @[LUTbank.scala 59:26]
    sinLUTBank0[32] <= UInt<30>("h3d4907bd") @[LUTbank.scala 59:26]
    sinLUTBank0[33] <= UInt<30>("h3d4f4ea1") @[LUTbank.scala 59:26]
    sinLUTBank0[34] <= UInt<30>("h3d559564") @[LUTbank.scala 59:26]
    sinLUTBank0[35] <= UInt<30>("h3d5bdc07") @[LUTbank.scala 59:26]
    sinLUTBank0[36] <= UInt<30>("h3d622287") @[LUTbank.scala 59:26]
    sinLUTBank0[37] <= UInt<30>("h3d6868e5") @[LUTbank.scala 59:26]
    sinLUTBank0[38] <= UInt<30>("h3d6eaf1e") @[LUTbank.scala 59:26]
    sinLUTBank0[39] <= UInt<30>("h3d74f533") @[LUTbank.scala 59:26]
    sinLUTBank0[40] <= UInt<30>("h3d7b3b22") @[LUTbank.scala 59:26]
    sinLUTBank0[41] <= UInt<30>("h3d80c075") @[LUTbank.scala 59:26]
    sinLUTBank0[42] <= UInt<30>("h3d83e346") @[LUTbank.scala 59:26]
    sinLUTBank0[43] <= UInt<30>("h3d870602") @[LUTbank.scala 59:26]
    sinLUTBank0[44] <= UInt<30>("h3d8a28a9") @[LUTbank.scala 59:26]
    sinLUTBank0[45] <= UInt<30>("h3d8d4b3b") @[LUTbank.scala 59:26]
    sinLUTBank0[46] <= UInt<30>("h3d906db7") @[LUTbank.scala 59:26]
    sinLUTBank0[47] <= UInt<30>("h3d93901c") @[LUTbank.scala 59:26]
    sinLUTBank0[48] <= UInt<30>("h3d96b26b") @[LUTbank.scala 59:26]
    sinLUTBank0[49] <= UInt<30>("h3d99d4a3") @[LUTbank.scala 59:26]
    sinLUTBank0[50] <= UInt<30>("h3d9cf6c3") @[LUTbank.scala 59:26]
    sinLUTBank0[51] <= UInt<30>("h3da018cb") @[LUTbank.scala 59:26]
    sinLUTBank0[52] <= UInt<30>("h3da33aba") @[LUTbank.scala 59:26]
    sinLUTBank0[53] <= UInt<30>("h3da65c90") @[LUTbank.scala 59:26]
    sinLUTBank0[54] <= UInt<30>("h3da97e4c") @[LUTbank.scala 59:26]
    sinLUTBank0[55] <= UInt<30>("h3dac9fee") @[LUTbank.scala 59:26]
    sinLUTBank0[56] <= UInt<30>("h3dafc176") @[LUTbank.scala 59:26]
    sinLUTBank0[57] <= UInt<30>("h3db2e2e2") @[LUTbank.scala 59:26]
    sinLUTBank0[58] <= UInt<30>("h3db60433") @[LUTbank.scala 59:26]
    sinLUTBank0[59] <= UInt<30>("h3db92567") @[LUTbank.scala 59:26]
    sinLUTBank0[60] <= UInt<30>("h3dbc467f") @[LUTbank.scala 59:26]
    sinLUTBank0[61] <= UInt<30>("h3dbf677a") @[LUTbank.scala 59:26]
    sinLUTBank0[62] <= UInt<30>("h3dc28858") @[LUTbank.scala 59:26]
    sinLUTBank0[63] <= UInt<30>("h3dc5a917") @[LUTbank.scala 59:26]
    sinLUTBank0[64] <= UInt<30>("h3dc8c9b8") @[LUTbank.scala 59:26]
    sinLUTBank0[65] <= UInt<30>("h3dcbea3a") @[LUTbank.scala 59:26]
    sinLUTBank0[66] <= UInt<30>("h3dcf0a9d") @[LUTbank.scala 59:26]
    sinLUTBank0[67] <= UInt<30>("h3dd22adf") @[LUTbank.scala 59:26]
    sinLUTBank0[68] <= UInt<30>("h3dd54b01") @[LUTbank.scala 59:26]
    sinLUTBank0[69] <= UInt<30>("h3dd86b03") @[LUTbank.scala 59:26]
    sinLUTBank0[70] <= UInt<30>("h3ddb8ae3") @[LUTbank.scala 59:26]
    sinLUTBank0[71] <= UInt<30>("h3ddeaaa1") @[LUTbank.scala 59:26]
    sinLUTBank0[72] <= UInt<30>("h3de1ca3c") @[LUTbank.scala 59:26]
    sinLUTBank0[73] <= UInt<30>("h3de4e9b5") @[LUTbank.scala 59:26]
    sinLUTBank0[74] <= UInt<30>("h3de8090a") @[LUTbank.scala 59:26]
    sinLUTBank0[75] <= UInt<30>("h3deb283c") @[LUTbank.scala 59:26]
    sinLUTBank0[76] <= UInt<30>("h3dee474a") @[LUTbank.scala 59:26]
    sinLUTBank0[77] <= UInt<30>("h3df16632") @[LUTbank.scala 59:26]
    sinLUTBank0[78] <= UInt<30>("h3df484f6") @[LUTbank.scala 59:26]
    sinLUTBank0[79] <= UInt<30>("h3df7a393") @[LUTbank.scala 59:26]
    sinLUTBank0[80] <= UInt<30>("h3dfac20b") @[LUTbank.scala 59:26]
    sinLUTBank0[81] <= UInt<30>("h3dfde05b") @[LUTbank.scala 59:26]
    sinLUTBank0[82] <= UInt<30>("h3e007f43") @[LUTbank.scala 59:26]
    sinLUTBank0[83] <= UInt<30>("h3e020e43") @[LUTbank.scala 59:26]
    sinLUTBank0[84] <= UInt<30>("h3e039d30") @[LUTbank.scala 59:26]
    sinLUTBank0[85] <= UInt<30>("h3e052c09") @[LUTbank.scala 59:26]
    sinLUTBank0[86] <= UInt<30>("h3e06bacd") @[LUTbank.scala 59:26]
    sinLUTBank0[87] <= UInt<30>("h3e08497c") @[LUTbank.scala 59:26]
    sinLUTBank0[88] <= UInt<30>("h3e09d817") @[LUTbank.scala 59:26]
    sinLUTBank0[89] <= UInt<30>("h3e0b669c") @[LUTbank.scala 59:26]
    sinLUTBank0[90] <= UInt<30>("h3e0cf50b") @[LUTbank.scala 59:26]
    sinLUTBank0[91] <= UInt<30>("h3e0e8365") @[LUTbank.scala 59:26]
    sinLUTBank0[92] <= UInt<30>("h3e1011a8") @[LUTbank.scala 59:26]
    sinLUTBank0[93] <= UInt<30>("h3e119fd6") @[LUTbank.scala 59:26]
    sinLUTBank0[94] <= UInt<30>("h3e132ded") @[LUTbank.scala 59:26]
    sinLUTBank0[95] <= UInt<30>("h3e14bbed") @[LUTbank.scala 59:26]
    sinLUTBank0[96] <= UInt<30>("h3e1649d7") @[LUTbank.scala 59:26]
    sinLUTBank0[97] <= UInt<30>("h3e17d7a9") @[LUTbank.scala 59:26]
    sinLUTBank0[98] <= UInt<30>("h3e196564") @[LUTbank.scala 59:26]
    sinLUTBank0[99] <= UInt<30>("h3e1af307") @[LUTbank.scala 59:26]
    sinLUTBank0[100] <= UInt<30>("h3e1c8092") @[LUTbank.scala 59:26]
    sinLUTBank0[101] <= UInt<30>("h3e1e0e05") @[LUTbank.scala 59:26]
    sinLUTBank0[102] <= UInt<30>("h3e1f9b60") @[LUTbank.scala 59:26]
    sinLUTBank0[103] <= UInt<30>("h3e2128a2") @[LUTbank.scala 59:26]
    sinLUTBank0[104] <= UInt<30>("h3e22b5cb") @[LUTbank.scala 59:26]
    sinLUTBank0[105] <= UInt<30>("h3e2442db") @[LUTbank.scala 59:26]
    sinLUTBank0[106] <= UInt<30>("h3e25cfd2") @[LUTbank.scala 59:26]
    sinLUTBank0[107] <= UInt<30>("h3e275caf") @[LUTbank.scala 59:26]
    sinLUTBank0[108] <= UInt<30>("h3e28e972") @[LUTbank.scala 59:26]
    sinLUTBank0[109] <= UInt<30>("h3e2a761b") @[LUTbank.scala 59:26]
    sinLUTBank0[110] <= UInt<30>("h3e2c02aa") @[LUTbank.scala 59:26]
    sinLUTBank0[111] <= UInt<30>("h3e2d8f1f") @[LUTbank.scala 59:26]
    sinLUTBank0[112] <= UInt<30>("h3e2f1b78") @[LUTbank.scala 59:26]
    sinLUTBank0[113] <= UInt<30>("h3e30a7b7") @[LUTbank.scala 59:26]
    sinLUTBank0[114] <= UInt<30>("h3e3233da") @[LUTbank.scala 59:26]
    sinLUTBank0[115] <= UInt<30>("h3e33bfe2") @[LUTbank.scala 59:26]
    sinLUTBank0[116] <= UInt<30>("h3e354bce") @[LUTbank.scala 59:26]
    sinLUTBank0[117] <= UInt<30>("h3e36d79e") @[LUTbank.scala 59:26]
    sinLUTBank0[118] <= UInt<30>("h3e386352") @[LUTbank.scala 59:26]
    sinLUTBank0[119] <= UInt<30>("h3e39eeea") @[LUTbank.scala 59:26]
    sinLUTBank0[120] <= UInt<30>("h3e3b7a65") @[LUTbank.scala 59:26]
    sinLUTBank0[121] <= UInt<30>("h3e3d05c3") @[LUTbank.scala 59:26]
    sinLUTBank0[122] <= UInt<30>("h3e3e9103") @[LUTbank.scala 59:26]
    sinLUTBank0[123] <= UInt<30>("h3e401c27") @[LUTbank.scala 59:26]
    sinLUTBank0[124] <= UInt<30>("h3e41a72c") @[LUTbank.scala 59:26]
    sinLUTBank0[125] <= UInt<30>("h3e433214") @[LUTbank.scala 59:26]
    sinLUTBank0[126] <= UInt<30>("h3e44bcde") @[LUTbank.scala 59:26]
    sinLUTBank0[127] <= UInt<30>("h3e464789") @[LUTbank.scala 59:26]
    sinLUTBank0[128] <= UInt<30>("h3e47d216") @[LUTbank.scala 59:26]
    sinLUTBank0[129] <= UInt<30>("h3e495c84") @[LUTbank.scala 59:26]
    sinLUTBank0[130] <= UInt<30>("h3e4ae6d3") @[LUTbank.scala 59:26]
    sinLUTBank0[131] <= UInt<30>("h3e4c7102") @[LUTbank.scala 59:26]
    sinLUTBank0[132] <= UInt<30>("h3e4dfb12") @[LUTbank.scala 59:26]
    sinLUTBank0[133] <= UInt<30>("h3e4f8502") @[LUTbank.scala 59:26]
    sinLUTBank0[134] <= UInt<30>("h3e510ed3") @[LUTbank.scala 59:26]
    sinLUTBank0[135] <= UInt<30>("h3e529882") @[LUTbank.scala 59:26]
    sinLUTBank0[136] <= UInt<30>("h3e542212") @[LUTbank.scala 59:26]
    sinLUTBank0[137] <= UInt<30>("h3e55ab81") @[LUTbank.scala 59:26]
    sinLUTBank0[138] <= UInt<30>("h3e5734ce") @[LUTbank.scala 59:26]
    sinLUTBank0[139] <= UInt<30>("h3e58bdfb") @[LUTbank.scala 59:26]
    sinLUTBank0[140] <= UInt<30>("h3e5a4706") @[LUTbank.scala 59:26]
    sinLUTBank0[141] <= UInt<30>("h3e5bcfef") @[LUTbank.scala 59:26]
    sinLUTBank0[142] <= UInt<30>("h3e5d58b7") @[LUTbank.scala 59:26]
    sinLUTBank0[143] <= UInt<30>("h3e5ee15c") @[LUTbank.scala 59:26]
    sinLUTBank0[144] <= UInt<30>("h3e6069df") @[LUTbank.scala 59:26]
    sinLUTBank0[145] <= UInt<30>("h3e61f240") @[LUTbank.scala 59:26]
    sinLUTBank0[146] <= UInt<30>("h3e637a7d") @[LUTbank.scala 59:26]
    sinLUTBank0[147] <= UInt<30>("h3e650298") @[LUTbank.scala 59:26]
    sinLUTBank0[148] <= UInt<30>("h3e668a8f") @[LUTbank.scala 59:26]
    sinLUTBank0[149] <= UInt<30>("h3e681262") @[LUTbank.scala 59:26]
    sinLUTBank0[150] <= UInt<30>("h3e699a12") @[LUTbank.scala 59:26]
    sinLUTBank0[151] <= UInt<30>("h3e6b219d") @[LUTbank.scala 59:26]
    sinLUTBank0[152] <= UInt<30>("h3e6ca905") @[LUTbank.scala 59:26]
    sinLUTBank0[153] <= UInt<30>("h3e6e3048") @[LUTbank.scala 59:26]
    sinLUTBank0[154] <= UInt<30>("h3e6fb766") @[LUTbank.scala 59:26]
    sinLUTBank0[155] <= UInt<30>("h3e713e5f") @[LUTbank.scala 59:26]
    sinLUTBank0[156] <= UInt<30>("h3e72c533") @[LUTbank.scala 59:26]
    sinLUTBank0[157] <= UInt<30>("h3e744be1") @[LUTbank.scala 59:26]
    sinLUTBank0[158] <= UInt<30>("h3e75d26a") @[LUTbank.scala 59:26]
    sinLUTBank0[159] <= UInt<30>("h3e7758cd") @[LUTbank.scala 59:26]
    sinLUTBank0[160] <= UInt<30>("h3e78df09") @[LUTbank.scala 59:26]
    sinLUTBank0[161] <= UInt<30>("h3e7a6520") @[LUTbank.scala 59:26]
    sinLUTBank0[162] <= UInt<30>("h3e7beb0f") @[LUTbank.scala 59:26]
    sinLUTBank0[163] <= UInt<30>("h3e7d70d8") @[LUTbank.scala 59:26]
    sinLUTBank0[164] <= UInt<30>("h3e7ef67a") @[LUTbank.scala 59:26]
    sinLUTBank0[165] <= UInt<30>("h3e803dfa") @[LUTbank.scala 59:26]
    sinLUTBank0[166] <= UInt<30>("h3e8100a3") @[LUTbank.scala 59:26]
    sinLUTBank0[167] <= UInt<30>("h3e81c339") @[LUTbank.scala 59:26]
    sinLUTBank0[168] <= UInt<30>("h3e8285ba") @[LUTbank.scala 59:26]
    sinLUTBank0[169] <= UInt<30>("h3e834828") @[LUTbank.scala 59:26]
    sinLUTBank0[170] <= UInt<30>("h3e840a81") @[LUTbank.scala 59:26]
    sinLUTBank0[171] <= UInt<30>("h3e84ccc5") @[LUTbank.scala 59:26]
    sinLUTBank0[172] <= UInt<30>("h3e858ef6") @[LUTbank.scala 59:26]
    sinLUTBank0[173] <= UInt<30>("h3e865111") @[LUTbank.scala 59:26]
    sinLUTBank0[174] <= UInt<30>("h3e871318") @[LUTbank.scala 59:26]
    sinLUTBank0[175] <= UInt<30>("h3e87d50a") @[LUTbank.scala 59:26]
    sinLUTBank0[176] <= UInt<30>("h3e8896e7") @[LUTbank.scala 59:26]
    sinLUTBank0[177] <= UInt<30>("h3e8958af") @[LUTbank.scala 59:26]
    sinLUTBank0[178] <= UInt<30>("h3e8a1a62") @[LUTbank.scala 59:26]
    sinLUTBank0[179] <= UInt<30>("h3e8adbff") @[LUTbank.scala 59:26]
    sinLUTBank0[180] <= UInt<30>("h3e8b9d88") @[LUTbank.scala 59:26]
    sinLUTBank0[181] <= UInt<30>("h3e8c5efa") @[LUTbank.scala 59:26]
    sinLUTBank0[182] <= UInt<30>("h3e8d2057") @[LUTbank.scala 59:26]
    sinLUTBank0[183] <= UInt<30>("h3e8de19e") @[LUTbank.scala 59:26]
    sinLUTBank0[184] <= UInt<30>("h3e8ea2cf") @[LUTbank.scala 59:26]
    sinLUTBank0[185] <= UInt<30>("h3e8f63ea") @[LUTbank.scala 59:26]
    sinLUTBank0[186] <= UInt<30>("h3e9024ef") @[LUTbank.scala 59:26]
    sinLUTBank0[187] <= UInt<30>("h3e90e5de") @[LUTbank.scala 59:26]
    sinLUTBank0[188] <= UInt<30>("h3e91a6b7") @[LUTbank.scala 59:26]
    sinLUTBank0[189] <= UInt<30>("h3e926779") @[LUTbank.scala 59:26]
    sinLUTBank0[190] <= UInt<30>("h3e932824") @[LUTbank.scala 59:26]
    sinLUTBank0[191] <= UInt<30>("h3e93e8b9") @[LUTbank.scala 59:26]
    sinLUTBank0[192] <= UInt<30>("h3e94a937") @[LUTbank.scala 59:26]
    sinLUTBank0[193] <= UInt<30>("h3e95699e") @[LUTbank.scala 59:26]
    sinLUTBank0[194] <= UInt<30>("h3e9629ee") @[LUTbank.scala 59:26]
    sinLUTBank0[195] <= UInt<30>("h3e96ea26") @[LUTbank.scala 59:26]
    sinLUTBank0[196] <= UInt<30>("h3e97aa48") @[LUTbank.scala 59:26]
    sinLUTBank0[197] <= UInt<30>("h3e986a52") @[LUTbank.scala 59:26]
    sinLUTBank0[198] <= UInt<30>("h3e992a45") @[LUTbank.scala 59:26]
    sinLUTBank0[199] <= UInt<30>("h3e99ea1f") @[LUTbank.scala 59:26]
    sinLUTBank0[200] <= UInt<30>("h3e9aa9e3") @[LUTbank.scala 59:26]
    sinLUTBank0[201] <= UInt<30>("h3e9b698e") @[LUTbank.scala 59:26]
    sinLUTBank0[202] <= UInt<30>("h3e9c2921") @[LUTbank.scala 59:26]
    sinLUTBank0[203] <= UInt<30>("h3e9ce89c") @[LUTbank.scala 59:26]
    sinLUTBank0[204] <= UInt<30>("h3e9da7ff") @[LUTbank.scala 59:26]
    sinLUTBank0[205] <= UInt<30>("h3e9e674a") @[LUTbank.scala 59:26]
    sinLUTBank0[206] <= UInt<30>("h3e9f267c") @[LUTbank.scala 59:26]
    sinLUTBank0[207] <= UInt<30>("h3e9fe596") @[LUTbank.scala 59:26]
    sinLUTBank0[208] <= UInt<30>("h3ea0a497") @[LUTbank.scala 59:26]
    sinLUTBank0[209] <= UInt<30>("h3ea1637f") @[LUTbank.scala 59:26]
    sinLUTBank0[210] <= UInt<30>("h3ea2224f") @[LUTbank.scala 59:26]
    sinLUTBank0[211] <= UInt<30>("h3ea2e105") @[LUTbank.scala 59:26]
    sinLUTBank0[212] <= UInt<30>("h3ea39fa2") @[LUTbank.scala 59:26]
    sinLUTBank0[213] <= UInt<30>("h3ea45e26") @[LUTbank.scala 59:26]
    sinLUTBank0[214] <= UInt<30>("h3ea51c91") @[LUTbank.scala 59:26]
    sinLUTBank0[215] <= UInt<30>("h3ea5dae2") @[LUTbank.scala 59:26]
    sinLUTBank0[216] <= UInt<30>("h3ea69919") @[LUTbank.scala 59:26]
    sinLUTBank0[217] <= UInt<30>("h3ea75737") @[LUTbank.scala 59:26]
    sinLUTBank0[218] <= UInt<30>("h3ea8153b") @[LUTbank.scala 59:26]
    sinLUTBank0[219] <= UInt<30>("h3ea8d325") @[LUTbank.scala 59:26]
    sinLUTBank0[220] <= UInt<30>("h3ea990f5") @[LUTbank.scala 59:26]
    sinLUTBank0[221] <= UInt<30>("h3eaa4eab") @[LUTbank.scala 59:26]
    sinLUTBank0[222] <= UInt<30>("h3eab0c47") @[LUTbank.scala 59:26]
    sinLUTBank0[223] <= UInt<30>("h3eabc9c8") @[LUTbank.scala 59:26]
    sinLUTBank0[224] <= UInt<30>("h3eac872f") @[LUTbank.scala 59:26]
    sinLUTBank0[225] <= UInt<30>("h3ead447b") @[LUTbank.scala 59:26]
    sinLUTBank0[226] <= UInt<30>("h3eae01ac") @[LUTbank.scala 59:26]
    sinLUTBank0[227] <= UInt<30>("h3eaebec3") @[LUTbank.scala 59:26]
    sinLUTBank0[228] <= UInt<30>("h3eaf7bbe") @[LUTbank.scala 59:26]
    sinLUTBank0[229] <= UInt<30>("h3eb0389e") @[LUTbank.scala 59:26]
    sinLUTBank0[230] <= UInt<30>("h3eb0f564") @[LUTbank.scala 59:26]
    sinLUTBank0[231] <= UInt<30>("h3eb1b20e") @[LUTbank.scala 59:26]
    sinLUTBank0[232] <= UInt<30>("h3eb26e9c") @[LUTbank.scala 59:26]
    sinLUTBank0[233] <= UInt<30>("h3eb32b0f") @[LUTbank.scala 59:26]
    sinLUTBank0[234] <= UInt<30>("h3eb3e767") @[LUTbank.scala 59:26]
    sinLUTBank0[235] <= UInt<30>("h3eb4a3a2") @[LUTbank.scala 59:26]
    sinLUTBank0[236] <= UInt<30>("h3eb55fc2") @[LUTbank.scala 59:26]
    sinLUTBank0[237] <= UInt<30>("h3eb61bc6") @[LUTbank.scala 59:26]
    sinLUTBank0[238] <= UInt<30>("h3eb6d7ad") @[LUTbank.scala 59:26]
    sinLUTBank0[239] <= UInt<30>("h3eb79379") @[LUTbank.scala 59:26]
    sinLUTBank0[240] <= UInt<30>("h3eb84f28") @[LUTbank.scala 59:26]
    sinLUTBank0[241] <= UInt<30>("h3eb90abb") @[LUTbank.scala 59:26]
    sinLUTBank0[242] <= UInt<30>("h3eb9c631") @[LUTbank.scala 59:26]
    sinLUTBank0[243] <= UInt<30>("h3eba818a") @[LUTbank.scala 59:26]
    sinLUTBank0[244] <= UInt<30>("h3ebb3cc7") @[LUTbank.scala 59:26]
    sinLUTBank0[245] <= UInt<30>("h3ebbf7e7") @[LUTbank.scala 59:26]
    sinLUTBank0[246] <= UInt<30>("h3ebcb2ea") @[LUTbank.scala 59:26]
    sinLUTBank0[247] <= UInt<30>("h3ebd6dcf") @[LUTbank.scala 59:26]
    sinLUTBank0[248] <= UInt<30>("h3ebe2898") @[LUTbank.scala 59:26]
    sinLUTBank0[249] <= UInt<30>("h3ebee343") @[LUTbank.scala 59:26]
    sinLUTBank0[250] <= UInt<30>("h3ebf9dd1") @[LUTbank.scala 59:26]
    sinLUTBank0[251] <= UInt<30>("h3ec05841") @[LUTbank.scala 59:26]
    sinLUTBank0[252] <= UInt<30>("h3ec11293") @[LUTbank.scala 59:26]
    sinLUTBank0[253] <= UInt<30>("h3ec1ccc8") @[LUTbank.scala 59:26]
    sinLUTBank0[254] <= UInt<30>("h3ec286df") @[LUTbank.scala 59:26]
    sinLUTBank0[255] <= UInt<30>("h3ec340d7") @[LUTbank.scala 59:26]
    wire sinLUTBank1 : UInt<30>[256] @[LUTbank.scala 88:26]
    sinLUTBank1[0] <= UInt<30>("h3ec3fab2") @[LUTbank.scala 88:26]
    sinLUTBank1[1] <= UInt<30>("h3ec4b46e") @[LUTbank.scala 88:26]
    sinLUTBank1[2] <= UInt<30>("h3ec56e0c") @[LUTbank.scala 88:26]
    sinLUTBank1[3] <= UInt<30>("h3ec6278c") @[LUTbank.scala 88:26]
    sinLUTBank1[4] <= UInt<30>("h3ec6e0ed") @[LUTbank.scala 88:26]
    sinLUTBank1[5] <= UInt<30>("h3ec79a2f") @[LUTbank.scala 88:26]
    sinLUTBank1[6] <= UInt<30>("h3ec85353") @[LUTbank.scala 88:26]
    sinLUTBank1[7] <= UInt<30>("h3ec90c57") @[LUTbank.scala 88:26]
    sinLUTBank1[8] <= UInt<30>("h3ec9c53d") @[LUTbank.scala 88:26]
    sinLUTBank1[9] <= UInt<30>("h3eca7e03") @[LUTbank.scala 88:26]
    sinLUTBank1[10] <= UInt<30>("h3ecb36ab") @[LUTbank.scala 88:26]
    sinLUTBank1[11] <= UInt<30>("h3ecbef33") @[LUTbank.scala 88:26]
    sinLUTBank1[12] <= UInt<30>("h3ecca79b") @[LUTbank.scala 88:26]
    sinLUTBank1[13] <= UInt<30>("h3ecd5fe4") @[LUTbank.scala 88:26]
    sinLUTBank1[14] <= UInt<30>("h3ece180d") @[LUTbank.scala 88:26]
    sinLUTBank1[15] <= UInt<30>("h3eced016") @[LUTbank.scala 88:26]
    sinLUTBank1[16] <= UInt<30>("h3ecf8800") @[LUTbank.scala 88:26]
    sinLUTBank1[17] <= UInt<30>("h3ed03fc9") @[LUTbank.scala 88:26]
    sinLUTBank1[18] <= UInt<30>("h3ed0f772") @[LUTbank.scala 88:26]
    sinLUTBank1[19] <= UInt<30>("h3ed1aefb") @[LUTbank.scala 88:26]
    sinLUTBank1[20] <= UInt<30>("h3ed26664") @[LUTbank.scala 88:26]
    sinLUTBank1[21] <= UInt<30>("h3ed31dac") @[LUTbank.scala 88:26]
    sinLUTBank1[22] <= UInt<30>("h3ed3d4d4") @[LUTbank.scala 88:26]
    sinLUTBank1[23] <= UInt<30>("h3ed48bdb") @[LUTbank.scala 88:26]
    sinLUTBank1[24] <= UInt<30>("h3ed542c1") @[LUTbank.scala 88:26]
    sinLUTBank1[25] <= UInt<30>("h3ed5f986") @[LUTbank.scala 88:26]
    sinLUTBank1[26] <= UInt<30>("h3ed6b02b") @[LUTbank.scala 88:26]
    sinLUTBank1[27] <= UInt<30>("h3ed766ae") @[LUTbank.scala 88:26]
    sinLUTBank1[28] <= UInt<30>("h3ed81d10") @[LUTbank.scala 88:26]
    sinLUTBank1[29] <= UInt<30>("h3ed8d350") @[LUTbank.scala 88:26]
    sinLUTBank1[30] <= UInt<30>("h3ed9896f") @[LUTbank.scala 88:26]
    sinLUTBank1[31] <= UInt<30>("h3eda3f6d") @[LUTbank.scala 88:26]
    sinLUTBank1[32] <= UInt<30>("h3edaf549") @[LUTbank.scala 88:26]
    sinLUTBank1[33] <= UInt<30>("h3edbab03") @[LUTbank.scala 88:26]
    sinLUTBank1[34] <= UInt<30>("h3edc609b") @[LUTbank.scala 88:26]
    sinLUTBank1[35] <= UInt<30>("h3edd1611") @[LUTbank.scala 88:26]
    sinLUTBank1[36] <= UInt<30>("h3eddcb65") @[LUTbank.scala 88:26]
    sinLUTBank1[37] <= UInt<30>("h3ede8097") @[LUTbank.scala 88:26]
    sinLUTBank1[38] <= UInt<30>("h3edf35a7") @[LUTbank.scala 88:26]
    sinLUTBank1[39] <= UInt<30>("h3edfea94") @[LUTbank.scala 88:26]
    sinLUTBank1[40] <= UInt<30>("h3ee09f5e") @[LUTbank.scala 88:26]
    sinLUTBank1[41] <= UInt<30>("h3ee15406") @[LUTbank.scala 88:26]
    sinLUTBank1[42] <= UInt<30>("h3ee2088b") @[LUTbank.scala 88:26]
    sinLUTBank1[43] <= UInt<30>("h3ee2bced") @[LUTbank.scala 88:26]
    sinLUTBank1[44] <= UInt<30>("h3ee3712d") @[LUTbank.scala 88:26]
    sinLUTBank1[45] <= UInt<30>("h3ee42549") @[LUTbank.scala 88:26]
    sinLUTBank1[46] <= UInt<30>("h3ee4d942") @[LUTbank.scala 88:26]
    sinLUTBank1[47] <= UInt<30>("h3ee58d18") @[LUTbank.scala 88:26]
    sinLUTBank1[48] <= UInt<30>("h3ee640ca") @[LUTbank.scala 88:26]
    sinLUTBank1[49] <= UInt<30>("h3ee6f459") @[LUTbank.scala 88:26]
    sinLUTBank1[50] <= UInt<30>("h3ee7a7c4") @[LUTbank.scala 88:26]
    sinLUTBank1[51] <= UInt<30>("h3ee85b0b") @[LUTbank.scala 88:26]
    sinLUTBank1[52] <= UInt<30>("h3ee90e2e") @[LUTbank.scala 88:26]
    sinLUTBank1[53] <= UInt<30>("h3ee9c12e") @[LUTbank.scala 88:26]
    sinLUTBank1[54] <= UInt<30>("h3eea7409") @[LUTbank.scala 88:26]
    sinLUTBank1[55] <= UInt<30>("h3eeb26c1") @[LUTbank.scala 88:26]
    sinLUTBank1[56] <= UInt<30>("h3eebd954") @[LUTbank.scala 88:26]
    sinLUTBank1[57] <= UInt<30>("h3eec8bc2") @[LUTbank.scala 88:26]
    sinLUTBank1[58] <= UInt<30>("h3eed3e0d") @[LUTbank.scala 88:26]
    sinLUTBank1[59] <= UInt<30>("h3eedf032") @[LUTbank.scala 88:26]
    sinLUTBank1[60] <= UInt<30>("h3eeea233") @[LUTbank.scala 88:26]
    sinLUTBank1[61] <= UInt<30>("h3eef540f") @[LUTbank.scala 88:26]
    sinLUTBank1[62] <= UInt<30>("h3ef005c6") @[LUTbank.scala 88:26]
    sinLUTBank1[63] <= UInt<30>("h3ef0b758") @[LUTbank.scala 88:26]
    sinLUTBank1[64] <= UInt<30>("h3ef168c5") @[LUTbank.scala 88:26]
    sinLUTBank1[65] <= UInt<30>("h3ef21a0d") @[LUTbank.scala 88:26]
    sinLUTBank1[66] <= UInt<30>("h3ef2cb2f") @[LUTbank.scala 88:26]
    sinLUTBank1[67] <= UInt<30>("h3ef37c2c") @[LUTbank.scala 88:26]
    sinLUTBank1[68] <= UInt<30>("h3ef42d03") @[LUTbank.scala 88:26]
    sinLUTBank1[69] <= UInt<30>("h3ef4ddb5") @[LUTbank.scala 88:26]
    sinLUTBank1[70] <= UInt<30>("h3ef58e40") @[LUTbank.scala 88:26]
    sinLUTBank1[71] <= UInt<30>("h3ef63ea6") @[LUTbank.scala 88:26]
    sinLUTBank1[72] <= UInt<30>("h3ef6eee6") @[LUTbank.scala 88:26]
    sinLUTBank1[73] <= UInt<30>("h3ef79f00") @[LUTbank.scala 88:26]
    sinLUTBank1[74] <= UInt<30>("h3ef84ef4") @[LUTbank.scala 88:26]
    sinLUTBank1[75] <= UInt<30>("h3ef8fec1") @[LUTbank.scala 88:26]
    sinLUTBank1[76] <= UInt<30>("h3ef9ae68") @[LUTbank.scala 88:26]
    sinLUTBank1[77] <= UInt<30>("h3efa5de8") @[LUTbank.scala 88:26]
    sinLUTBank1[78] <= UInt<30>("h3efb0d42") @[LUTbank.scala 88:26]
    sinLUTBank1[79] <= UInt<30>("h3efbbc75") @[LUTbank.scala 88:26]
    sinLUTBank1[80] <= UInt<30>("h3efc6b81") @[LUTbank.scala 88:26]
    sinLUTBank1[81] <= UInt<30>("h3efd1a67") @[LUTbank.scala 88:26]
    sinLUTBank1[82] <= UInt<30>("h3efdc925") @[LUTbank.scala 88:26]
    sinLUTBank1[83] <= UInt<30>("h3efe77bc") @[LUTbank.scala 88:26]
    sinLUTBank1[84] <= UInt<30>("h3eff262c") @[LUTbank.scala 88:26]
    sinLUTBank1[85] <= UInt<30>("h3effd474") @[LUTbank.scala 88:26]
    sinLUTBank1[86] <= UInt<30>("h3f00414a") @[LUTbank.scala 88:26]
    sinLUTBank1[87] <= UInt<30>("h3f009847") @[LUTbank.scala 88:26]
    sinLUTBank1[88] <= UInt<30>("h3f00ef30") @[LUTbank.scala 88:26]
    sinLUTBank1[89] <= UInt<30>("h3f014605") @[LUTbank.scala 88:26]
    sinLUTBank1[90] <= UInt<30>("h3f019cc6") @[LUTbank.scala 88:26]
    sinLUTBank1[91] <= UInt<30>("h3f01f373") @[LUTbank.scala 88:26]
    sinLUTBank1[92] <= UInt<30>("h3f024a0c") @[LUTbank.scala 88:26]
    sinLUTBank1[93] <= UInt<30>("h3f02a091") @[LUTbank.scala 88:26]
    sinLUTBank1[94] <= UInt<30>("h3f02f701") @[LUTbank.scala 88:26]
    sinLUTBank1[95] <= UInt<30>("h3f034d5e") @[LUTbank.scala 88:26]
    sinLUTBank1[96] <= UInt<30>("h3f03a3a6") @[LUTbank.scala 88:26]
    sinLUTBank1[97] <= UInt<30>("h3f03f9da") @[LUTbank.scala 88:26]
    sinLUTBank1[98] <= UInt<30>("h3f044ffa") @[LUTbank.scala 88:26]
    sinLUTBank1[99] <= UInt<30>("h3f04a605") @[LUTbank.scala 88:26]
    sinLUTBank1[100] <= UInt<30>("h3f04fbfc") @[LUTbank.scala 88:26]
    sinLUTBank1[101] <= UInt<30>("h3f0551de") @[LUTbank.scala 88:26]
    sinLUTBank1[102] <= UInt<30>("h3f05a7ab") @[LUTbank.scala 88:26]
    sinLUTBank1[103] <= UInt<30>("h3f05fd64") @[LUTbank.scala 88:26]
    sinLUTBank1[104] <= UInt<30>("h3f065309") @[LUTbank.scala 88:26]
    sinLUTBank1[105] <= UInt<30>("h3f06a898") @[LUTbank.scala 88:26]
    sinLUTBank1[106] <= UInt<30>("h3f06fe13") @[LUTbank.scala 88:26]
    sinLUTBank1[107] <= UInt<30>("h3f075379") @[LUTbank.scala 88:26]
    sinLUTBank1[108] <= UInt<30>("h3f07a8ca") @[LUTbank.scala 88:26]
    sinLUTBank1[109] <= UInt<30>("h3f07fe06") @[LUTbank.scala 88:26]
    sinLUTBank1[110] <= UInt<30>("h3f08532d") @[LUTbank.scala 88:26]
    sinLUTBank1[111] <= UInt<30>("h3f08a83f") @[LUTbank.scala 88:26]
    sinLUTBank1[112] <= UInt<30>("h3f08fd3d") @[LUTbank.scala 88:26]
    sinLUTBank1[113] <= UInt<30>("h3f095224") @[LUTbank.scala 88:26]
    sinLUTBank1[114] <= UInt<30>("h3f09a6f7") @[LUTbank.scala 88:26]
    sinLUTBank1[115] <= UInt<30>("h3f09fbb5") @[LUTbank.scala 88:26]
    sinLUTBank1[116] <= UInt<30>("h3f0a505d") @[LUTbank.scala 88:26]
    sinLUTBank1[117] <= UInt<30>("h3f0aa4f0") @[LUTbank.scala 88:26]
    sinLUTBank1[118] <= UInt<30>("h3f0af96d") @[LUTbank.scala 88:26]
    sinLUTBank1[119] <= UInt<30>("h3f0b4dd5") @[LUTbank.scala 88:26]
    sinLUTBank1[120] <= UInt<30>("h3f0ba228") @[LUTbank.scala 88:26]
    sinLUTBank1[121] <= UInt<30>("h3f0bf665") @[LUTbank.scala 88:26]
    sinLUTBank1[122] <= UInt<30>("h3f0c4a8c") @[LUTbank.scala 88:26]
    sinLUTBank1[123] <= UInt<30>("h3f0c9e9e") @[LUTbank.scala 88:26]
    sinLUTBank1[124] <= UInt<30>("h3f0cf29a") @[LUTbank.scala 88:26]
    sinLUTBank1[125] <= UInt<30>("h3f0d4680") @[LUTbank.scala 88:26]
    sinLUTBank1[126] <= UInt<30>("h3f0d9a51") @[LUTbank.scala 88:26]
    sinLUTBank1[127] <= UInt<30>("h3f0dee0c") @[LUTbank.scala 88:26]
    sinLUTBank1[128] <= UInt<30>("h3f0e41b0") @[LUTbank.scala 88:26]
    sinLUTBank1[129] <= UInt<30>("h3f0e953f") @[LUTbank.scala 88:26]
    sinLUTBank1[130] <= UInt<30>("h3f0ee8b8") @[LUTbank.scala 88:26]
    sinLUTBank1[131] <= UInt<30>("h3f0f3c1b") @[LUTbank.scala 88:26]
    sinLUTBank1[132] <= UInt<30>("h3f0f8f67") @[LUTbank.scala 88:26]
    sinLUTBank1[133] <= UInt<30>("h3f0fe29e") @[LUTbank.scala 88:26]
    sinLUTBank1[134] <= UInt<30>("h3f1035be") @[LUTbank.scala 88:26]
    sinLUTBank1[135] <= UInt<30>("h3f1088c8") @[LUTbank.scala 88:26]
    sinLUTBank1[136] <= UInt<30>("h3f10dbbc") @[LUTbank.scala 88:26]
    sinLUTBank1[137] <= UInt<30>("h3f112e9a") @[LUTbank.scala 88:26]
    sinLUTBank1[138] <= UInt<30>("h3f118161") @[LUTbank.scala 88:26]
    sinLUTBank1[139] <= UInt<30>("h3f11d411") @[LUTbank.scala 88:26]
    sinLUTBank1[140] <= UInt<30>("h3f1226ab") @[LUTbank.scala 88:26]
    sinLUTBank1[141] <= UInt<30>("h3f12792f") @[LUTbank.scala 88:26]
    sinLUTBank1[142] <= UInt<30>("h3f12cb9c") @[LUTbank.scala 88:26]
    sinLUTBank1[143] <= UInt<30>("h3f131df2") @[LUTbank.scala 88:26]
    sinLUTBank1[144] <= UInt<30>("h3f137032") @[LUTbank.scala 88:26]
    sinLUTBank1[145] <= UInt<30>("h3f13c25a") @[LUTbank.scala 88:26]
    sinLUTBank1[146] <= UInt<30>("h3f14146c") @[LUTbank.scala 88:26]
    sinLUTBank1[147] <= UInt<30>("h3f146668") @[LUTbank.scala 88:26]
    sinLUTBank1[148] <= UInt<30>("h3f14b84c") @[LUTbank.scala 88:26]
    sinLUTBank1[149] <= UInt<30>("h3f150a19") @[LUTbank.scala 88:26]
    sinLUTBank1[150] <= UInt<30>("h3f155bd0") @[LUTbank.scala 88:26]
    sinLUTBank1[151] <= UInt<30>("h3f15ad6f") @[LUTbank.scala 88:26]
    sinLUTBank1[152] <= UInt<30>("h3f15fef7") @[LUTbank.scala 88:26]
    sinLUTBank1[153] <= UInt<30>("h3f165068") @[LUTbank.scala 88:26]
    sinLUTBank1[154] <= UInt<30>("h3f16a1c2") @[LUTbank.scala 88:26]
    sinLUTBank1[155] <= UInt<30>("h3f16f305") @[LUTbank.scala 88:26]
    sinLUTBank1[156] <= UInt<30>("h3f174430") @[LUTbank.scala 88:26]
    sinLUTBank1[157] <= UInt<30>("h3f179544") @[LUTbank.scala 88:26]
    sinLUTBank1[158] <= UInt<30>("h3f17e641") @[LUTbank.scala 88:26]
    sinLUTBank1[159] <= UInt<30>("h3f183726") @[LUTbank.scala 88:26]
    sinLUTBank1[160] <= UInt<30>("h3f1887f4") @[LUTbank.scala 88:26]
    sinLUTBank1[161] <= UInt<30>("h3f18d8aa") @[LUTbank.scala 88:26]
    sinLUTBank1[162] <= UInt<30>("h3f192948") @[LUTbank.scala 88:26]
    sinLUTBank1[163] <= UInt<30>("h3f1979cf") @[LUTbank.scala 88:26]
    sinLUTBank1[164] <= UInt<30>("h3f19ca3f") @[LUTbank.scala 88:26]
    sinLUTBank1[165] <= UInt<30>("h3f1a1a96") @[LUTbank.scala 88:26]
    sinLUTBank1[166] <= UInt<30>("h3f1a6ad6") @[LUTbank.scala 88:26]
    sinLUTBank1[167] <= UInt<30>("h3f1abafe") @[LUTbank.scala 88:26]
    sinLUTBank1[168] <= UInt<30>("h3f1b0b0e") @[LUTbank.scala 88:26]
    sinLUTBank1[169] <= UInt<30>("h3f1b5b06") @[LUTbank.scala 88:26]
    sinLUTBank1[170] <= UInt<30>("h3f1baae6") @[LUTbank.scala 88:26]
    sinLUTBank1[171] <= UInt<30>("h3f1bfaaf") @[LUTbank.scala 88:26]
    sinLUTBank1[172] <= UInt<30>("h3f1c4a5f") @[LUTbank.scala 88:26]
    sinLUTBank1[173] <= UInt<30>("h3f1c99f7") @[LUTbank.scala 88:26]
    sinLUTBank1[174] <= UInt<30>("h3f1ce977") @[LUTbank.scala 88:26]
    sinLUTBank1[175] <= UInt<30>("h3f1d38de") @[LUTbank.scala 88:26]
    sinLUTBank1[176] <= UInt<30>("h3f1d882e") @[LUTbank.scala 88:26]
    sinLUTBank1[177] <= UInt<30>("h3f1dd765") @[LUTbank.scala 88:26]
    sinLUTBank1[178] <= UInt<30>("h3f1e2683") @[LUTbank.scala 88:26]
    sinLUTBank1[179] <= UInt<30>("h3f1e758a") @[LUTbank.scala 88:26]
    sinLUTBank1[180] <= UInt<30>("h3f1ec477") @[LUTbank.scala 88:26]
    sinLUTBank1[181] <= UInt<30>("h3f1f134d") @[LUTbank.scala 88:26]
    sinLUTBank1[182] <= UInt<30>("h3f1f620a") @[LUTbank.scala 88:26]
    sinLUTBank1[183] <= UInt<30>("h3f1fb0ae") @[LUTbank.scala 88:26]
    sinLUTBank1[184] <= UInt<30>("h3f1fff39") @[LUTbank.scala 88:26]
    sinLUTBank1[185] <= UInt<30>("h3f204dac") @[LUTbank.scala 88:26]
    sinLUTBank1[186] <= UInt<30>("h3f209c06") @[LUTbank.scala 88:26]
    sinLUTBank1[187] <= UInt<30>("h3f20ea48") @[LUTbank.scala 88:26]
    sinLUTBank1[188] <= UInt<30>("h3f213870") @[LUTbank.scala 88:26]
    sinLUTBank1[189] <= UInt<30>("h3f218680") @[LUTbank.scala 88:26]
    sinLUTBank1[190] <= UInt<30>("h3f21d477") @[LUTbank.scala 88:26]
    sinLUTBank1[191] <= UInt<30>("h3f222255") @[LUTbank.scala 88:26]
    sinLUTBank1[192] <= UInt<30>("h3f227019") @[LUTbank.scala 88:26]
    sinLUTBank1[193] <= UInt<30>("h3f22bdc5") @[LUTbank.scala 88:26]
    sinLUTBank1[194] <= UInt<30>("h3f230b58") @[LUTbank.scala 88:26]
    sinLUTBank1[195] <= UInt<30>("h3f2358d1") @[LUTbank.scala 88:26]
    sinLUTBank1[196] <= UInt<30>("h3f23a631") @[LUTbank.scala 88:26]
    sinLUTBank1[197] <= UInt<30>("h3f23f378") @[LUTbank.scala 88:26]
    sinLUTBank1[198] <= UInt<30>("h3f2440a6") @[LUTbank.scala 88:26]
    sinLUTBank1[199] <= UInt<30>("h3f248dbb") @[LUTbank.scala 88:26]
    sinLUTBank1[200] <= UInt<30>("h3f24dab6") @[LUTbank.scala 88:26]
    sinLUTBank1[201] <= UInt<30>("h3f252797") @[LUTbank.scala 88:26]
    sinLUTBank1[202] <= UInt<30>("h3f25745f") @[LUTbank.scala 88:26]
    sinLUTBank1[203] <= UInt<30>("h3f25c10e") @[LUTbank.scala 88:26]
    sinLUTBank1[204] <= UInt<30>("h3f260da3") @[LUTbank.scala 88:26]
    sinLUTBank1[205] <= UInt<30>("h3f265a1e") @[LUTbank.scala 88:26]
    sinLUTBank1[206] <= UInt<30>("h3f26a680") @[LUTbank.scala 88:26]
    sinLUTBank1[207] <= UInt<30>("h3f26f2c8") @[LUTbank.scala 88:26]
    sinLUTBank1[208] <= UInt<30>("h3f273ef6") @[LUTbank.scala 88:26]
    sinLUTBank1[209] <= UInt<30>("h3f278b0a") @[LUTbank.scala 88:26]
    sinLUTBank1[210] <= UInt<30>("h3f27d705") @[LUTbank.scala 88:26]
    sinLUTBank1[211] <= UInt<30>("h3f2822e5") @[LUTbank.scala 88:26]
    sinLUTBank1[212] <= UInt<30>("h3f286eac") @[LUTbank.scala 88:26]
    sinLUTBank1[213] <= UInt<30>("h3f28ba59") @[LUTbank.scala 88:26]
    sinLUTBank1[214] <= UInt<30>("h3f2905ec") @[LUTbank.scala 88:26]
    sinLUTBank1[215] <= UInt<30>("h3f295164") @[LUTbank.scala 88:26]
    sinLUTBank1[216] <= UInt<30>("h3f299cc3") @[LUTbank.scala 88:26]
    sinLUTBank1[217] <= UInt<30>("h3f29e807") @[LUTbank.scala 88:26]
    sinLUTBank1[218] <= UInt<30>("h3f2a3331") @[LUTbank.scala 88:26]
    sinLUTBank1[219] <= UInt<30>("h3f2a7e41") @[LUTbank.scala 88:26]
    sinLUTBank1[220] <= UInt<30>("h3f2ac936") @[LUTbank.scala 88:26]
    sinLUTBank1[221] <= UInt<30>("h3f2b1412") @[LUTbank.scala 88:26]
    sinLUTBank1[222] <= UInt<30>("h3f2b5ed2") @[LUTbank.scala 88:26]
    sinLUTBank1[223] <= UInt<30>("h3f2ba979") @[LUTbank.scala 88:26]
    sinLUTBank1[224] <= UInt<30>("h3f2bf405") @[LUTbank.scala 88:26]
    sinLUTBank1[225] <= UInt<30>("h3f2c3e76") @[LUTbank.scala 88:26]
    sinLUTBank1[226] <= UInt<30>("h3f2c88cd") @[LUTbank.scala 88:26]
    sinLUTBank1[227] <= UInt<30>("h3f2cd309") @[LUTbank.scala 88:26]
    sinLUTBank1[228] <= UInt<30>("h3f2d1d2a") @[LUTbank.scala 88:26]
    sinLUTBank1[229] <= UInt<30>("h3f2d6731") @[LUTbank.scala 88:26]
    sinLUTBank1[230] <= UInt<30>("h3f2db11d") @[LUTbank.scala 88:26]
    sinLUTBank1[231] <= UInt<30>("h3f2dfaee") @[LUTbank.scala 88:26]
    sinLUTBank1[232] <= UInt<30>("h3f2e44a5") @[LUTbank.scala 88:26]
    sinLUTBank1[233] <= UInt<30>("h3f2e8e40") @[LUTbank.scala 88:26]
    sinLUTBank1[234] <= UInt<30>("h3f2ed7c1") @[LUTbank.scala 88:26]
    sinLUTBank1[235] <= UInt<30>("h3f2f2126") @[LUTbank.scala 88:26]
    sinLUTBank1[236] <= UInt<30>("h3f2f6a71") @[LUTbank.scala 88:26]
    sinLUTBank1[237] <= UInt<30>("h3f2fb3a0") @[LUTbank.scala 88:26]
    sinLUTBank1[238] <= UInt<30>("h3f2ffcb5") @[LUTbank.scala 88:26]
    sinLUTBank1[239] <= UInt<30>("h3f3045ae") @[LUTbank.scala 88:26]
    sinLUTBank1[240] <= UInt<30>("h3f308e8c") @[LUTbank.scala 88:26]
    sinLUTBank1[241] <= UInt<30>("h3f30d74f") @[LUTbank.scala 88:26]
    sinLUTBank1[242] <= UInt<30>("h3f311ff6") @[LUTbank.scala 88:26]
    sinLUTBank1[243] <= UInt<30>("h3f316883") @[LUTbank.scala 88:26]
    sinLUTBank1[244] <= UInt<30>("h3f31b0f3") @[LUTbank.scala 88:26]
    sinLUTBank1[245] <= UInt<30>("h3f31f949") @[LUTbank.scala 88:26]
    sinLUTBank1[246] <= UInt<30>("h3f324183") @[LUTbank.scala 88:26]
    sinLUTBank1[247] <= UInt<30>("h3f3289a1") @[LUTbank.scala 88:26]
    sinLUTBank1[248] <= UInt<30>("h3f32d1a4") @[LUTbank.scala 88:26]
    sinLUTBank1[249] <= UInt<30>("h3f33198b") @[LUTbank.scala 88:26]
    sinLUTBank1[250] <= UInt<30>("h3f336157") @[LUTbank.scala 88:26]
    sinLUTBank1[251] <= UInt<30>("h3f33a907") @[LUTbank.scala 88:26]
    sinLUTBank1[252] <= UInt<30>("h3f33f09b") @[LUTbank.scala 88:26]
    sinLUTBank1[253] <= UInt<30>("h3f343814") @[LUTbank.scala 88:26]
    sinLUTBank1[254] <= UInt<30>("h3f347f70") @[LUTbank.scala 88:26]
    sinLUTBank1[255] <= UInt<30>("h3f34c6b1") @[LUTbank.scala 88:26]
    wire sinLUTBank2 : UInt<30>[256] @[LUTbank.scala 117:26]
    sinLUTBank2[0] <= UInt<30>("h3f350dd6") @[LUTbank.scala 117:26]
    sinLUTBank2[1] <= UInt<30>("h3f3554df") @[LUTbank.scala 117:26]
    sinLUTBank2[2] <= UInt<30>("h3f359bcc") @[LUTbank.scala 117:26]
    sinLUTBank2[3] <= UInt<30>("h3f35e29d") @[LUTbank.scala 117:26]
    sinLUTBank2[4] <= UInt<30>("h3f362952") @[LUTbank.scala 117:26]
    sinLUTBank2[5] <= UInt<30>("h3f366feb") @[LUTbank.scala 117:26]
    sinLUTBank2[6] <= UInt<30>("h3f36b668") @[LUTbank.scala 117:26]
    sinLUTBank2[7] <= UInt<30>("h3f36fcc8") @[LUTbank.scala 117:26]
    sinLUTBank2[8] <= UInt<30>("h3f37430d") @[LUTbank.scala 117:26]
    sinLUTBank2[9] <= UInt<30>("h3f378935") @[LUTbank.scala 117:26]
    sinLUTBank2[10] <= UInt<30>("h3f37cf40") @[LUTbank.scala 117:26]
    sinLUTBank2[11] <= UInt<30>("h3f381530") @[LUTbank.scala 117:26]
    sinLUTBank2[12] <= UInt<30>("h3f385b03") @[LUTbank.scala 117:26]
    sinLUTBank2[13] <= UInt<30>("h3f38a0b9") @[LUTbank.scala 117:26]
    sinLUTBank2[14] <= UInt<30>("h3f38e653") @[LUTbank.scala 117:26]
    sinLUTBank2[15] <= UInt<30>("h3f392bd1") @[LUTbank.scala 117:26]
    sinLUTBank2[16] <= UInt<30>("h3f397132") @[LUTbank.scala 117:26]
    sinLUTBank2[17] <= UInt<30>("h3f39b676") @[LUTbank.scala 117:26]
    sinLUTBank2[18] <= UInt<30>("h3f39fb9e") @[LUTbank.scala 117:26]
    sinLUTBank2[19] <= UInt<30>("h3f3a40a9") @[LUTbank.scala 117:26]
    sinLUTBank2[20] <= UInt<30>("h3f3a8597") @[LUTbank.scala 117:26]
    sinLUTBank2[21] <= UInt<30>("h3f3aca68") @[LUTbank.scala 117:26]
    sinLUTBank2[22] <= UInt<30>("h3f3b0f1d") @[LUTbank.scala 117:26]
    sinLUTBank2[23] <= UInt<30>("h3f3b53b5") @[LUTbank.scala 117:26]
    sinLUTBank2[24] <= UInt<30>("h3f3b982f") @[LUTbank.scala 117:26]
    sinLUTBank2[25] <= UInt<30>("h3f3bdc8d") @[LUTbank.scala 117:26]
    sinLUTBank2[26] <= UInt<30>("h3f3c20ce") @[LUTbank.scala 117:26]
    sinLUTBank2[27] <= UInt<30>("h3f3c64f2") @[LUTbank.scala 117:26]
    sinLUTBank2[28] <= UInt<30>("h3f3ca8f9") @[LUTbank.scala 117:26]
    sinLUTBank2[29] <= UInt<30>("h3f3cece3") @[LUTbank.scala 117:26]
    sinLUTBank2[30] <= UInt<30>("h3f3d30af") @[LUTbank.scala 117:26]
    sinLUTBank2[31] <= UInt<30>("h3f3d745f") @[LUTbank.scala 117:26]
    sinLUTBank2[32] <= UInt<30>("h3f3db7f1") @[LUTbank.scala 117:26]
    sinLUTBank2[33] <= UInt<30>("h3f3dfb66") @[LUTbank.scala 117:26]
    sinLUTBank2[34] <= UInt<30>("h3f3e3ebd") @[LUTbank.scala 117:26]
    sinLUTBank2[35] <= UInt<30>("h3f3e81f7") @[LUTbank.scala 117:26]
    sinLUTBank2[36] <= UInt<30>("h3f3ec514") @[LUTbank.scala 117:26]
    sinLUTBank2[37] <= UInt<30>("h3f3f0814") @[LUTbank.scala 117:26]
    sinLUTBank2[38] <= UInt<30>("h3f3f4af6") @[LUTbank.scala 117:26]
    sinLUTBank2[39] <= UInt<30>("h3f3f8dba") @[LUTbank.scala 117:26]
    sinLUTBank2[40] <= UInt<30>("h3f3fd061") @[LUTbank.scala 117:26]
    sinLUTBank2[41] <= UInt<30>("h3f4012ea") @[LUTbank.scala 117:26]
    sinLUTBank2[42] <= UInt<30>("h3f405556") @[LUTbank.scala 117:26]
    sinLUTBank2[43] <= UInt<30>("h3f4097a4") @[LUTbank.scala 117:26]
    sinLUTBank2[44] <= UInt<30>("h3f40d9d4") @[LUTbank.scala 117:26]
    sinLUTBank2[45] <= UInt<30>("h3f411be6") @[LUTbank.scala 117:26]
    sinLUTBank2[46] <= UInt<30>("h3f415ddb") @[LUTbank.scala 117:26]
    sinLUTBank2[47] <= UInt<30>("h3f419fb2") @[LUTbank.scala 117:26]
    sinLUTBank2[48] <= UInt<30>("h3f41e16b") @[LUTbank.scala 117:26]
    sinLUTBank2[49] <= UInt<30>("h3f422306") @[LUTbank.scala 117:26]
    sinLUTBank2[50] <= UInt<30>("h3f426483") @[LUTbank.scala 117:26]
    sinLUTBank2[51] <= UInt<30>("h3f42a5e2") @[LUTbank.scala 117:26]
    sinLUTBank2[52] <= UInt<30>("h3f42e723") @[LUTbank.scala 117:26]
    sinLUTBank2[53] <= UInt<30>("h3f432846") @[LUTbank.scala 117:26]
    sinLUTBank2[54] <= UInt<30>("h3f43694b") @[LUTbank.scala 117:26]
    sinLUTBank2[55] <= UInt<30>("h3f43aa32") @[LUTbank.scala 117:26]
    sinLUTBank2[56] <= UInt<30>("h3f43eafa") @[LUTbank.scala 117:26]
    sinLUTBank2[57] <= UInt<30>("h3f442ba5") @[LUTbank.scala 117:26]
    sinLUTBank2[58] <= UInt<30>("h3f446c31") @[LUTbank.scala 117:26]
    sinLUTBank2[59] <= UInt<30>("h3f44ac9f") @[LUTbank.scala 117:26]
    sinLUTBank2[60] <= UInt<30>("h3f44ecee") @[LUTbank.scala 117:26]
    sinLUTBank2[61] <= UInt<30>("h3f452d1f") @[LUTbank.scala 117:26]
    sinLUTBank2[62] <= UInt<30>("h3f456d32") @[LUTbank.scala 117:26]
    sinLUTBank2[63] <= UInt<30>("h3f45ad26") @[LUTbank.scala 117:26]
    sinLUTBank2[64] <= UInt<30>("h3f45ecfc") @[LUTbank.scala 117:26]
    sinLUTBank2[65] <= UInt<30>("h3f462cb3") @[LUTbank.scala 117:26]
    sinLUTBank2[66] <= UInt<30>("h3f466c4b") @[LUTbank.scala 117:26]
    sinLUTBank2[67] <= UInt<30>("h3f46abc5") @[LUTbank.scala 117:26]
    sinLUTBank2[68] <= UInt<30>("h3f46eb20") @[LUTbank.scala 117:26]
    sinLUTBank2[69] <= UInt<30>("h3f472a5d") @[LUTbank.scala 117:26]
    sinLUTBank2[70] <= UInt<30>("h3f47697b") @[LUTbank.scala 117:26]
    sinLUTBank2[71] <= UInt<30>("h3f47a87a") @[LUTbank.scala 117:26]
    sinLUTBank2[72] <= UInt<30>("h3f47e75a") @[LUTbank.scala 117:26]
    sinLUTBank2[73] <= UInt<30>("h3f48261c") @[LUTbank.scala 117:26]
    sinLUTBank2[74] <= UInt<30>("h3f4864be") @[LUTbank.scala 117:26]
    sinLUTBank2[75] <= UInt<30>("h3f48a342") @[LUTbank.scala 117:26]
    sinLUTBank2[76] <= UInt<30>("h3f48e1a7") @[LUTbank.scala 117:26]
    sinLUTBank2[77] <= UInt<30>("h3f491fec") @[LUTbank.scala 117:26]
    sinLUTBank2[78] <= UInt<30>("h3f495e13") @[LUTbank.scala 117:26]
    sinLUTBank2[79] <= UInt<30>("h3f499c1a") @[LUTbank.scala 117:26]
    sinLUTBank2[80] <= UInt<30>("h3f49da03") @[LUTbank.scala 117:26]
    sinLUTBank2[81] <= UInt<30>("h3f4a17cc") @[LUTbank.scala 117:26]
    sinLUTBank2[82] <= UInt<30>("h3f4a5576") @[LUTbank.scala 117:26]
    sinLUTBank2[83] <= UInt<30>("h3f4a9301") @[LUTbank.scala 117:26]
    sinLUTBank2[84] <= UInt<30>("h3f4ad06d") @[LUTbank.scala 117:26]
    sinLUTBank2[85] <= UInt<30>("h3f4b0dba") @[LUTbank.scala 117:26]
    sinLUTBank2[86] <= UInt<30>("h3f4b4ae7") @[LUTbank.scala 117:26]
    sinLUTBank2[87] <= UInt<30>("h3f4b87f4") @[LUTbank.scala 117:26]
    sinLUTBank2[88] <= UInt<30>("h3f4bc4e3") @[LUTbank.scala 117:26]
    sinLUTBank2[89] <= UInt<30>("h3f4c01b1") @[LUTbank.scala 117:26]
    sinLUTBank2[90] <= UInt<30>("h3f4c3e61") @[LUTbank.scala 117:26]
    sinLUTBank2[91] <= UInt<30>("h3f4c7af1") @[LUTbank.scala 117:26]
    sinLUTBank2[92] <= UInt<30>("h3f4cb761") @[LUTbank.scala 117:26]
    sinLUTBank2[93] <= UInt<30>("h3f4cf3b2") @[LUTbank.scala 117:26]
    sinLUTBank2[94] <= UInt<30>("h3f4d2fe3") @[LUTbank.scala 117:26]
    sinLUTBank2[95] <= UInt<30>("h3f4d6bf4") @[LUTbank.scala 117:26]
    sinLUTBank2[96] <= UInt<30>("h3f4da7e6") @[LUTbank.scala 117:26]
    sinLUTBank2[97] <= UInt<30>("h3f4de3b8") @[LUTbank.scala 117:26]
    sinLUTBank2[98] <= UInt<30>("h3f4e1f6a") @[LUTbank.scala 117:26]
    sinLUTBank2[99] <= UInt<30>("h3f4e5afd") @[LUTbank.scala 117:26]
    sinLUTBank2[100] <= UInt<30>("h3f4e9670") @[LUTbank.scala 117:26]
    sinLUTBank2[101] <= UInt<30>("h3f4ed1c2") @[LUTbank.scala 117:26]
    sinLUTBank2[102] <= UInt<30>("h3f4f0cf5") @[LUTbank.scala 117:26]
    sinLUTBank2[103] <= UInt<30>("h3f4f4808") @[LUTbank.scala 117:26]
    sinLUTBank2[104] <= UInt<30>("h3f4f82fb") @[LUTbank.scala 117:26]
    sinLUTBank2[105] <= UInt<30>("h3f4fbdce") @[LUTbank.scala 117:26]
    sinLUTBank2[106] <= UInt<30>("h3f4ff881") @[LUTbank.scala 117:26]
    sinLUTBank2[107] <= UInt<30>("h3f503313") @[LUTbank.scala 117:26]
    sinLUTBank2[108] <= UInt<30>("h3f506d86") @[LUTbank.scala 117:26]
    sinLUTBank2[109] <= UInt<30>("h3f50a7d9") @[LUTbank.scala 117:26]
    sinLUTBank2[110] <= UInt<30>("h3f50e20b") @[LUTbank.scala 117:26]
    sinLUTBank2[111] <= UInt<30>("h3f511c1d") @[LUTbank.scala 117:26]
    sinLUTBank2[112] <= UInt<30>("h3f51560f") @[LUTbank.scala 117:26]
    sinLUTBank2[113] <= UInt<30>("h3f518fe0") @[LUTbank.scala 117:26]
    sinLUTBank2[114] <= UInt<30>("h3f51c991") @[LUTbank.scala 117:26]
    sinLUTBank2[115] <= UInt<30>("h3f520322") @[LUTbank.scala 117:26]
    sinLUTBank2[116] <= UInt<30>("h3f523c93") @[LUTbank.scala 117:26]
    sinLUTBank2[117] <= UInt<30>("h3f5275e3") @[LUTbank.scala 117:26]
    sinLUTBank2[118] <= UInt<30>("h3f52af12") @[LUTbank.scala 117:26]
    sinLUTBank2[119] <= UInt<30>("h3f52e821") @[LUTbank.scala 117:26]
    sinLUTBank2[120] <= UInt<30>("h3f532110") @[LUTbank.scala 117:26]
    sinLUTBank2[121] <= UInt<30>("h3f5359dd") @[LUTbank.scala 117:26]
    sinLUTBank2[122] <= UInt<30>("h3f53928b") @[LUTbank.scala 117:26]
    sinLUTBank2[123] <= UInt<30>("h3f53cb17") @[LUTbank.scala 117:26]
    sinLUTBank2[124] <= UInt<30>("h3f540383") @[LUTbank.scala 117:26]
    sinLUTBank2[125] <= UInt<30>("h3f543bce") @[LUTbank.scala 117:26]
    sinLUTBank2[126] <= UInt<30>("h3f5473f9") @[LUTbank.scala 117:26]
    sinLUTBank2[127] <= UInt<30>("h3f54ac03") @[LUTbank.scala 117:26]
    sinLUTBank2[128] <= UInt<30>("h3f54e3ec") @[LUTbank.scala 117:26]
    sinLUTBank2[129] <= UInt<30>("h3f551bb4") @[LUTbank.scala 117:26]
    sinLUTBank2[130] <= UInt<30>("h3f55535b") @[LUTbank.scala 117:26]
    sinLUTBank2[131] <= UInt<30>("h3f558ae1") @[LUTbank.scala 117:26]
    sinLUTBank2[132] <= UInt<30>("h3f55c246") @[LUTbank.scala 117:26]
    sinLUTBank2[133] <= UInt<30>("h3f55f98b") @[LUTbank.scala 117:26]
    sinLUTBank2[134] <= UInt<30>("h3f5630ae") @[LUTbank.scala 117:26]
    sinLUTBank2[135] <= UInt<30>("h3f5667b0") @[LUTbank.scala 117:26]
    sinLUTBank2[136] <= UInt<30>("h3f569e91") @[LUTbank.scala 117:26]
    sinLUTBank2[137] <= UInt<30>("h3f56d551") @[LUTbank.scala 117:26]
    sinLUTBank2[138] <= UInt<30>("h3f570bf0") @[LUTbank.scala 117:26]
    sinLUTBank2[139] <= UInt<30>("h3f57426e") @[LUTbank.scala 117:26]
    sinLUTBank2[140] <= UInt<30>("h3f5778cb") @[LUTbank.scala 117:26]
    sinLUTBank2[141] <= UInt<30>("h3f57af06") @[LUTbank.scala 117:26]
    sinLUTBank2[142] <= UInt<30>("h3f57e520") @[LUTbank.scala 117:26]
    sinLUTBank2[143] <= UInt<30>("h3f581b19") @[LUTbank.scala 117:26]
    sinLUTBank2[144] <= UInt<30>("h3f5850f0") @[LUTbank.scala 117:26]
    sinLUTBank2[145] <= UInt<30>("h3f5886a6") @[LUTbank.scala 117:26]
    sinLUTBank2[146] <= UInt<30>("h3f58bc3b") @[LUTbank.scala 117:26]
    sinLUTBank2[147] <= UInt<30>("h3f58f1ae") @[LUTbank.scala 117:26]
    sinLUTBank2[148] <= UInt<30>("h3f5926ff") @[LUTbank.scala 117:26]
    sinLUTBank2[149] <= UInt<30>("h3f595c30") @[LUTbank.scala 117:26]
    sinLUTBank2[150] <= UInt<30>("h3f59913e") @[LUTbank.scala 117:26]
    sinLUTBank2[151] <= UInt<30>("h3f59c62b") @[LUTbank.scala 117:26]
    sinLUTBank2[152] <= UInt<30>("h3f59faf7") @[LUTbank.scala 117:26]
    sinLUTBank2[153] <= UInt<30>("h3f5a2fa0") @[LUTbank.scala 117:26]
    sinLUTBank2[154] <= UInt<30>("h3f5a6429") @[LUTbank.scala 117:26]
    sinLUTBank2[155] <= UInt<30>("h3f5a988f") @[LUTbank.scala 117:26]
    sinLUTBank2[156] <= UInt<30>("h3f5accd4") @[LUTbank.scala 117:26]
    sinLUTBank2[157] <= UInt<30>("h3f5b00f7") @[LUTbank.scala 117:26]
    sinLUTBank2[158] <= UInt<30>("h3f5b34f8") @[LUTbank.scala 117:26]
    sinLUTBank2[159] <= UInt<30>("h3f5b68d7") @[LUTbank.scala 117:26]
    sinLUTBank2[160] <= UInt<30>("h3f5b9c95") @[LUTbank.scala 117:26]
    sinLUTBank2[161] <= UInt<30>("h3f5bd031") @[LUTbank.scala 117:26]
    sinLUTBank2[162] <= UInt<30>("h3f5c03aa") @[LUTbank.scala 117:26]
    sinLUTBank2[163] <= UInt<30>("h3f5c3702") @[LUTbank.scala 117:26]
    sinLUTBank2[164] <= UInt<30>("h3f5c6a38") @[LUTbank.scala 117:26]
    sinLUTBank2[165] <= UInt<30>("h3f5c9d4c") @[LUTbank.scala 117:26]
    sinLUTBank2[166] <= UInt<30>("h3f5cd03d") @[LUTbank.scala 117:26]
    sinLUTBank2[167] <= UInt<30>("h3f5d030d") @[LUTbank.scala 117:26]
    sinLUTBank2[168] <= UInt<30>("h3f5d35bb") @[LUTbank.scala 117:26]
    sinLUTBank2[169] <= UInt<30>("h3f5d6846") @[LUTbank.scala 117:26]
    sinLUTBank2[170] <= UInt<30>("h3f5d9aaf") @[LUTbank.scala 117:26]
    sinLUTBank2[171] <= UInt<30>("h3f5dccf7") @[LUTbank.scala 117:26]
    sinLUTBank2[172] <= UInt<30>("h3f5dff1b") @[LUTbank.scala 117:26]
    sinLUTBank2[173] <= UInt<30>("h3f5e311e") @[LUTbank.scala 117:26]
    sinLUTBank2[174] <= UInt<30>("h3f5e62fe") @[LUTbank.scala 117:26]
    sinLUTBank2[175] <= UInt<30>("h3f5e94bc") @[LUTbank.scala 117:26]
    sinLUTBank2[176] <= UInt<30>("h3f5ec658") @[LUTbank.scala 117:26]
    sinLUTBank2[177] <= UInt<30>("h3f5ef7d1") @[LUTbank.scala 117:26]
    sinLUTBank2[178] <= UInt<30>("h3f5f2928") @[LUTbank.scala 117:26]
    sinLUTBank2[179] <= UInt<30>("h3f5f5a5d") @[LUTbank.scala 117:26]
    sinLUTBank2[180] <= UInt<30>("h3f5f8b6f") @[LUTbank.scala 117:26]
    sinLUTBank2[181] <= UInt<30>("h3f5fbc5e") @[LUTbank.scala 117:26]
    sinLUTBank2[182] <= UInt<30>("h3f5fed2b") @[LUTbank.scala 117:26]
    sinLUTBank2[183] <= UInt<30>("h3f601dd6") @[LUTbank.scala 117:26]
    sinLUTBank2[184] <= UInt<30>("h3f604e5e") @[LUTbank.scala 117:26]
    sinLUTBank2[185] <= UInt<30>("h3f607ec3") @[LUTbank.scala 117:26]
    sinLUTBank2[186] <= UInt<30>("h3f60af06") @[LUTbank.scala 117:26]
    sinLUTBank2[187] <= UInt<30>("h3f60df26") @[LUTbank.scala 117:26]
    sinLUTBank2[188] <= UInt<30>("h3f610f23") @[LUTbank.scala 117:26]
    sinLUTBank2[189] <= UInt<30>("h3f613efe") @[LUTbank.scala 117:26]
    sinLUTBank2[190] <= UInt<30>("h3f616eb5") @[LUTbank.scala 117:26]
    sinLUTBank2[191] <= UInt<30>("h3f619e4a") @[LUTbank.scala 117:26]
    sinLUTBank2[192] <= UInt<30>("h3f61cdbd") @[LUTbank.scala 117:26]
    sinLUTBank2[193] <= UInt<30>("h3f61fd0c") @[LUTbank.scala 117:26]
    sinLUTBank2[194] <= UInt<30>("h3f622c39") @[LUTbank.scala 117:26]
    sinLUTBank2[195] <= UInt<30>("h3f625b42") @[LUTbank.scala 117:26]
    sinLUTBank2[196] <= UInt<30>("h3f628a29") @[LUTbank.scala 117:26]
    sinLUTBank2[197] <= UInt<30>("h3f62b8ed") @[LUTbank.scala 117:26]
    sinLUTBank2[198] <= UInt<30>("h3f62e78d") @[LUTbank.scala 117:26]
    sinLUTBank2[199] <= UInt<30>("h3f63160b") @[LUTbank.scala 117:26]
    sinLUTBank2[200] <= UInt<30>("h3f634466") @[LUTbank.scala 117:26]
    sinLUTBank2[201] <= UInt<30>("h3f63729e") @[LUTbank.scala 117:26]
    sinLUTBank2[202] <= UInt<30>("h3f63a0b2") @[LUTbank.scala 117:26]
    sinLUTBank2[203] <= UInt<30>("h3f63cea4") @[LUTbank.scala 117:26]
    sinLUTBank2[204] <= UInt<30>("h3f63fc72") @[LUTbank.scala 117:26]
    sinLUTBank2[205] <= UInt<30>("h3f642a1d") @[LUTbank.scala 117:26]
    sinLUTBank2[206] <= UInt<30>("h3f6457a5") @[LUTbank.scala 117:26]
    sinLUTBank2[207] <= UInt<30>("h3f64850a") @[LUTbank.scala 117:26]
    sinLUTBank2[208] <= UInt<30>("h3f64b24b") @[LUTbank.scala 117:26]
    sinLUTBank2[209] <= UInt<30>("h3f64df69") @[LUTbank.scala 117:26]
    sinLUTBank2[210] <= UInt<30>("h3f650c64") @[LUTbank.scala 117:26]
    sinLUTBank2[211] <= UInt<30>("h3f65393b") @[LUTbank.scala 117:26]
    sinLUTBank2[212] <= UInt<30>("h3f6565f0") @[LUTbank.scala 117:26]
    sinLUTBank2[213] <= UInt<30>("h3f659280") @[LUTbank.scala 117:26]
    sinLUTBank2[214] <= UInt<30>("h3f65beee") @[LUTbank.scala 117:26]
    sinLUTBank2[215] <= UInt<30>("h3f65eb37") @[LUTbank.scala 117:26]
    sinLUTBank2[216] <= UInt<30>("h3f66175e") @[LUTbank.scala 117:26]
    sinLUTBank2[217] <= UInt<30>("h3f664361") @[LUTbank.scala 117:26]
    sinLUTBank2[218] <= UInt<30>("h3f666f40") @[LUTbank.scala 117:26]
    sinLUTBank2[219] <= UInt<30>("h3f669afc") @[LUTbank.scala 117:26]
    sinLUTBank2[220] <= UInt<30>("h3f66c694") @[LUTbank.scala 117:26]
    sinLUTBank2[221] <= UInt<30>("h3f66f209") @[LUTbank.scala 117:26]
    sinLUTBank2[222] <= UInt<30>("h3f671d5a") @[LUTbank.scala 117:26]
    sinLUTBank2[223] <= UInt<30>("h3f674887") @[LUTbank.scala 117:26]
    sinLUTBank2[224] <= UInt<30>("h3f677391") @[LUTbank.scala 117:26]
    sinLUTBank2[225] <= UInt<30>("h3f679e77") @[LUTbank.scala 117:26]
    sinLUTBank2[226] <= UInt<30>("h3f67c939") @[LUTbank.scala 117:26]
    sinLUTBank2[227] <= UInt<30>("h3f67f3d7") @[LUTbank.scala 117:26]
    sinLUTBank2[228] <= UInt<30>("h3f681e52") @[LUTbank.scala 117:26]
    sinLUTBank2[229] <= UInt<30>("h3f6848a9") @[LUTbank.scala 117:26]
    sinLUTBank2[230] <= UInt<30>("h3f6872dc") @[LUTbank.scala 117:26]
    sinLUTBank2[231] <= UInt<30>("h3f689ceb") @[LUTbank.scala 117:26]
    sinLUTBank2[232] <= UInt<30>("h3f68c6d6") @[LUTbank.scala 117:26]
    sinLUTBank2[233] <= UInt<30>("h3f68f09e") @[LUTbank.scala 117:26]
    sinLUTBank2[234] <= UInt<30>("h3f691a41") @[LUTbank.scala 117:26]
    sinLUTBank2[235] <= UInt<30>("h3f6943c0") @[LUTbank.scala 117:26]
    sinLUTBank2[236] <= UInt<30>("h3f696d1c") @[LUTbank.scala 117:26]
    sinLUTBank2[237] <= UInt<30>("h3f699653") @[LUTbank.scala 117:26]
    sinLUTBank2[238] <= UInt<30>("h3f69bf67") @[LUTbank.scala 117:26]
    sinLUTBank2[239] <= UInt<30>("h3f69e856") @[LUTbank.scala 117:26]
    sinLUTBank2[240] <= UInt<30>("h3f6a1121") @[LUTbank.scala 117:26]
    sinLUTBank2[241] <= UInt<30>("h3f6a39c8") @[LUTbank.scala 117:26]
    sinLUTBank2[242] <= UInt<30>("h3f6a624b") @[LUTbank.scala 117:26]
    sinLUTBank2[243] <= UInt<30>("h3f6a8aaa") @[LUTbank.scala 117:26]
    sinLUTBank2[244] <= UInt<30>("h3f6ab2e5") @[LUTbank.scala 117:26]
    sinLUTBank2[245] <= UInt<30>("h3f6adafb") @[LUTbank.scala 117:26]
    sinLUTBank2[246] <= UInt<30>("h3f6b02ed") @[LUTbank.scala 117:26]
    sinLUTBank2[247] <= UInt<30>("h3f6b2abb") @[LUTbank.scala 117:26]
    sinLUTBank2[248] <= UInt<30>("h3f6b5265") @[LUTbank.scala 117:26]
    sinLUTBank2[249] <= UInt<30>("h3f6b79ea") @[LUTbank.scala 117:26]
    sinLUTBank2[250] <= UInt<30>("h3f6ba14b") @[LUTbank.scala 117:26]
    sinLUTBank2[251] <= UInt<30>("h3f6bc888") @[LUTbank.scala 117:26]
    sinLUTBank2[252] <= UInt<30>("h3f6befa0") @[LUTbank.scala 117:26]
    sinLUTBank2[253] <= UInt<30>("h3f6c1694") @[LUTbank.scala 117:26]
    sinLUTBank2[254] <= UInt<30>("h3f6c3d63") @[LUTbank.scala 117:26]
    sinLUTBank2[255] <= UInt<30>("h3f6c640e") @[LUTbank.scala 117:26]
    wire sinLUTBank3 : UInt<30>[257] @[LUTbank.scala 146:26]
    sinLUTBank3[0] <= UInt<30>("h3f6c8a95") @[LUTbank.scala 146:26]
    sinLUTBank3[1] <= UInt<30>("h3f6cb0f7") @[LUTbank.scala 146:26]
    sinLUTBank3[2] <= UInt<30>("h3f6cd734") @[LUTbank.scala 146:26]
    sinLUTBank3[3] <= UInt<30>("h3f6cfd4d") @[LUTbank.scala 146:26]
    sinLUTBank3[4] <= UInt<30>("h3f6d2342") @[LUTbank.scala 146:26]
    sinLUTBank3[5] <= UInt<30>("h3f6d4912") @[LUTbank.scala 146:26]
    sinLUTBank3[6] <= UInt<30>("h3f6d6ebd") @[LUTbank.scala 146:26]
    sinLUTBank3[7] <= UInt<30>("h3f6d9443") @[LUTbank.scala 146:26]
    sinLUTBank3[8] <= UInt<30>("h3f6db9a5") @[LUTbank.scala 146:26]
    sinLUTBank3[9] <= UInt<30>("h3f6ddee3") @[LUTbank.scala 146:26]
    sinLUTBank3[10] <= UInt<30>("h3f6e03fb") @[LUTbank.scala 146:26]
    sinLUTBank3[11] <= UInt<30>("h3f6e28ef") @[LUTbank.scala 146:26]
    sinLUTBank3[12] <= UInt<30>("h3f6e4dbe") @[LUTbank.scala 146:26]
    sinLUTBank3[13] <= UInt<30>("h3f6e7268") @[LUTbank.scala 146:26]
    sinLUTBank3[14] <= UInt<30>("h3f6e96ee") @[LUTbank.scala 146:26]
    sinLUTBank3[15] <= UInt<30>("h3f6ebb4e") @[LUTbank.scala 146:26]
    sinLUTBank3[16] <= UInt<30>("h3f6edf8a") @[LUTbank.scala 146:26]
    sinLUTBank3[17] <= UInt<30>("h3f6f03a1") @[LUTbank.scala 146:26]
    sinLUTBank3[18] <= UInt<30>("h3f6f2793") @[LUTbank.scala 146:26]
    sinLUTBank3[19] <= UInt<30>("h3f6f4b61") @[LUTbank.scala 146:26]
    sinLUTBank3[20] <= UInt<30>("h3f6f6f09") @[LUTbank.scala 146:26]
    sinLUTBank3[21] <= UInt<30>("h3f6f928c") @[LUTbank.scala 146:26]
    sinLUTBank3[22] <= UInt<30>("h3f6fb5eb") @[LUTbank.scala 146:26]
    sinLUTBank3[23] <= UInt<30>("h3f6fd924") @[LUTbank.scala 146:26]
    sinLUTBank3[24] <= UInt<30>("h3f6ffc39") @[LUTbank.scala 146:26]
    sinLUTBank3[25] <= UInt<30>("h3f701f28") @[LUTbank.scala 146:26]
    sinLUTBank3[26] <= UInt<30>("h3f7041f2") @[LUTbank.scala 146:26]
    sinLUTBank3[27] <= UInt<30>("h3f706498") @[LUTbank.scala 146:26]
    sinLUTBank3[28] <= UInt<30>("h3f708718") @[LUTbank.scala 146:26]
    sinLUTBank3[29] <= UInt<30>("h3f70a973") @[LUTbank.scala 146:26]
    sinLUTBank3[30] <= UInt<30>("h3f70cba9") @[LUTbank.scala 146:26]
    sinLUTBank3[31] <= UInt<30>("h3f70edba") @[LUTbank.scala 146:26]
    sinLUTBank3[32] <= UInt<30>("h3f710fa5") @[LUTbank.scala 146:26]
    sinLUTBank3[33] <= UInt<30>("h3f71316c") @[LUTbank.scala 146:26]
    sinLUTBank3[34] <= UInt<30>("h3f71530d") @[LUTbank.scala 146:26]
    sinLUTBank3[35] <= UInt<30>("h3f717489") @[LUTbank.scala 146:26]
    sinLUTBank3[36] <= UInt<30>("h3f7195e0") @[LUTbank.scala 146:26]
    sinLUTBank3[37] <= UInt<30>("h3f71b711") @[LUTbank.scala 146:26]
    sinLUTBank3[38] <= UInt<30>("h3f71d81d") @[LUTbank.scala 146:26]
    sinLUTBank3[39] <= UInt<30>("h3f71f904") @[LUTbank.scala 146:26]
    sinLUTBank3[40] <= UInt<30>("h3f7219c6") @[LUTbank.scala 146:26]
    sinLUTBank3[41] <= UInt<30>("h3f723a62") @[LUTbank.scala 146:26]
    sinLUTBank3[42] <= UInt<30>("h3f725ad9") @[LUTbank.scala 146:26]
    sinLUTBank3[43] <= UInt<30>("h3f727b2a") @[LUTbank.scala 146:26]
    sinLUTBank3[44] <= UInt<30>("h3f729b56") @[LUTbank.scala 146:26]
    sinLUTBank3[45] <= UInt<30>("h3f72bb5c") @[LUTbank.scala 146:26]
    sinLUTBank3[46] <= UInt<30>("h3f72db3e") @[LUTbank.scala 146:26]
    sinLUTBank3[47] <= UInt<30>("h3f72faf9") @[LUTbank.scala 146:26]
    sinLUTBank3[48] <= UInt<30>("h3f731a8f") @[LUTbank.scala 146:26]
    sinLUTBank3[49] <= UInt<30>("h3f733a00") @[LUTbank.scala 146:26]
    sinLUTBank3[50] <= UInt<30>("h3f73594b") @[LUTbank.scala 146:26]
    sinLUTBank3[51] <= UInt<30>("h3f737871") @[LUTbank.scala 146:26]
    sinLUTBank3[52] <= UInt<30>("h3f739771") @[LUTbank.scala 146:26]
    sinLUTBank3[53] <= UInt<30>("h3f73b64b") @[LUTbank.scala 146:26]
    sinLUTBank3[54] <= UInt<30>("h3f73d500") @[LUTbank.scala 146:26]
    sinLUTBank3[55] <= UInt<30>("h3f73f38f") @[LUTbank.scala 146:26]
    sinLUTBank3[56] <= UInt<30>("h3f7411f9") @[LUTbank.scala 146:26]
    sinLUTBank3[57] <= UInt<30>("h3f74303c") @[LUTbank.scala 146:26]
    sinLUTBank3[58] <= UInt<30>("h3f744e5b") @[LUTbank.scala 146:26]
    sinLUTBank3[59] <= UInt<30>("h3f746c53") @[LUTbank.scala 146:26]
    sinLUTBank3[60] <= UInt<30>("h3f748a26") @[LUTbank.scala 146:26]
    sinLUTBank3[61] <= UInt<30>("h3f74a7d3") @[LUTbank.scala 146:26]
    sinLUTBank3[62] <= UInt<30>("h3f74c55a") @[LUTbank.scala 146:26]
    sinLUTBank3[63] <= UInt<30>("h3f74e2bc") @[LUTbank.scala 146:26]
    sinLUTBank3[64] <= UInt<30>("h3f74fff8") @[LUTbank.scala 146:26]
    sinLUTBank3[65] <= UInt<30>("h3f751d0e") @[LUTbank.scala 146:26]
    sinLUTBank3[66] <= UInt<30>("h3f7539fe") @[LUTbank.scala 146:26]
    sinLUTBank3[67] <= UInt<30>("h3f7556c8") @[LUTbank.scala 146:26]
    sinLUTBank3[68] <= UInt<30>("h3f75736d") @[LUTbank.scala 146:26]
    sinLUTBank3[69] <= UInt<30>("h3f758feb") @[LUTbank.scala 146:26]
    sinLUTBank3[70] <= UInt<30>("h3f75ac44") @[LUTbank.scala 146:26]
    sinLUTBank3[71] <= UInt<30>("h3f75c877") @[LUTbank.scala 146:26]
    sinLUTBank3[72] <= UInt<30>("h3f75e484") @[LUTbank.scala 146:26]
    sinLUTBank3[73] <= UInt<30>("h3f76006b") @[LUTbank.scala 146:26]
    sinLUTBank3[74] <= UInt<30>("h3f761c2c") @[LUTbank.scala 146:26]
    sinLUTBank3[75] <= UInt<30>("h3f7637c7") @[LUTbank.scala 146:26]
    sinLUTBank3[76] <= UInt<30>("h3f76533c") @[LUTbank.scala 146:26]
    sinLUTBank3[77] <= UInt<30>("h3f766e8b") @[LUTbank.scala 146:26]
    sinLUTBank3[78] <= UInt<30>("h3f7689b4") @[LUTbank.scala 146:26]
    sinLUTBank3[79] <= UInt<30>("h3f76a4b7") @[LUTbank.scala 146:26]
    sinLUTBank3[80] <= UInt<30>("h3f76bf94") @[LUTbank.scala 146:26]
    sinLUTBank3[81] <= UInt<30>("h3f76da4b") @[LUTbank.scala 146:26]
    sinLUTBank3[82] <= UInt<30>("h3f76f4db") @[LUTbank.scala 146:26]
    sinLUTBank3[83] <= UInt<30>("h3f770f46") @[LUTbank.scala 146:26]
    sinLUTBank3[84] <= UInt<30>("h3f77298b") @[LUTbank.scala 146:26]
    sinLUTBank3[85] <= UInt<30>("h3f7743a9") @[LUTbank.scala 146:26]
    sinLUTBank3[86] <= UInt<30>("h3f775da1") @[LUTbank.scala 146:26]
    sinLUTBank3[87] <= UInt<30>("h3f777773") @[LUTbank.scala 146:26]
    sinLUTBank3[88] <= UInt<30>("h3f77911f") @[LUTbank.scala 146:26]
    sinLUTBank3[89] <= UInt<30>("h3f77aaa5") @[LUTbank.scala 146:26]
    sinLUTBank3[90] <= UInt<30>("h3f77c405") @[LUTbank.scala 146:26]
    sinLUTBank3[91] <= UInt<30>("h3f77dd3e") @[LUTbank.scala 146:26]
    sinLUTBank3[92] <= UInt<30>("h3f77f651") @[LUTbank.scala 146:26]
    sinLUTBank3[93] <= UInt<30>("h3f780f3e") @[LUTbank.scala 146:26]
    sinLUTBank3[94] <= UInt<30>("h3f782804") @[LUTbank.scala 146:26]
    sinLUTBank3[95] <= UInt<30>("h3f7840a4") @[LUTbank.scala 146:26]
    sinLUTBank3[96] <= UInt<30>("h3f78591e") @[LUTbank.scala 146:26]
    sinLUTBank3[97] <= UInt<30>("h3f787172") @[LUTbank.scala 146:26]
    sinLUTBank3[98] <= UInt<30>("h3f78899f") @[LUTbank.scala 146:26]
    sinLUTBank3[99] <= UInt<30>("h3f78a1a6") @[LUTbank.scala 146:26]
    sinLUTBank3[100] <= UInt<30>("h3f78b987") @[LUTbank.scala 146:26]
    sinLUTBank3[101] <= UInt<30>("h3f78d141") @[LUTbank.scala 146:26]
    sinLUTBank3[102] <= UInt<30>("h3f78e8d5") @[LUTbank.scala 146:26]
    sinLUTBank3[103] <= UInt<30>("h3f790042") @[LUTbank.scala 146:26]
    sinLUTBank3[104] <= UInt<30>("h3f791789") @[LUTbank.scala 146:26]
    sinLUTBank3[105] <= UInt<30>("h3f792eaa") @[LUTbank.scala 146:26]
    sinLUTBank3[106] <= UInt<30>("h3f7945a4") @[LUTbank.scala 146:26]
    sinLUTBank3[107] <= UInt<30>("h3f795c77") @[LUTbank.scala 146:26]
    sinLUTBank3[108] <= UInt<30>("h3f797325") @[LUTbank.scala 146:26]
    sinLUTBank3[109] <= UInt<30>("h3f7989ab") @[LUTbank.scala 146:26]
    sinLUTBank3[110] <= UInt<30>("h3f79a00b") @[LUTbank.scala 146:26]
    sinLUTBank3[111] <= UInt<30>("h3f79b645") @[LUTbank.scala 146:26]
    sinLUTBank3[112] <= UInt<30>("h3f79cc58") @[LUTbank.scala 146:26]
    sinLUTBank3[113] <= UInt<30>("h3f79e245") @[LUTbank.scala 146:26]
    sinLUTBank3[114] <= UInt<30>("h3f79f80b") @[LUTbank.scala 146:26]
    sinLUTBank3[115] <= UInt<30>("h3f7a0daa") @[LUTbank.scala 146:26]
    sinLUTBank3[116] <= UInt<30>("h3f7a2323") @[LUTbank.scala 146:26]
    sinLUTBank3[117] <= UInt<30>("h3f7a3876") @[LUTbank.scala 146:26]
    sinLUTBank3[118] <= UInt<30>("h3f7a4da1") @[LUTbank.scala 146:26]
    sinLUTBank3[119] <= UInt<30>("h3f7a62a6") @[LUTbank.scala 146:26]
    sinLUTBank3[120] <= UInt<30>("h3f7a7785") @[LUTbank.scala 146:26]
    sinLUTBank3[121] <= UInt<30>("h3f7a8c3d") @[LUTbank.scala 146:26]
    sinLUTBank3[122] <= UInt<30>("h3f7aa0ce") @[LUTbank.scala 146:26]
    sinLUTBank3[123] <= UInt<30>("h3f7ab538") @[LUTbank.scala 146:26]
    sinLUTBank3[124] <= UInt<30>("h3f7ac97c") @[LUTbank.scala 146:26]
    sinLUTBank3[125] <= UInt<30>("h3f7add99") @[LUTbank.scala 146:26]
    sinLUTBank3[126] <= UInt<30>("h3f7af190") @[LUTbank.scala 146:26]
    sinLUTBank3[127] <= UInt<30>("h3f7b055f") @[LUTbank.scala 146:26]
    sinLUTBank3[128] <= UInt<30>("h3f7b1908") @[LUTbank.scala 146:26]
    sinLUTBank3[129] <= UInt<30>("h3f7b2c8a") @[LUTbank.scala 146:26]
    sinLUTBank3[130] <= UInt<30>("h3f7b3fe6") @[LUTbank.scala 146:26]
    sinLUTBank3[131] <= UInt<30>("h3f7b531b") @[LUTbank.scala 146:26]
    sinLUTBank3[132] <= UInt<30>("h3f7b6628") @[LUTbank.scala 146:26]
    sinLUTBank3[133] <= UInt<30>("h3f7b7910") @[LUTbank.scala 146:26]
    sinLUTBank3[134] <= UInt<30>("h3f7b8bd0") @[LUTbank.scala 146:26]
    sinLUTBank3[135] <= UInt<30>("h3f7b9e69") @[LUTbank.scala 146:26]
    sinLUTBank3[136] <= UInt<30>("h3f7bb0dc") @[LUTbank.scala 146:26]
    sinLUTBank3[137] <= UInt<30>("h3f7bc328") @[LUTbank.scala 146:26]
    sinLUTBank3[138] <= UInt<30>("h3f7bd54d") @[LUTbank.scala 146:26]
    sinLUTBank3[139] <= UInt<30>("h3f7be74b") @[LUTbank.scala 146:26]
    sinLUTBank3[140] <= UInt<30>("h3f7bf922") @[LUTbank.scala 146:26]
    sinLUTBank3[141] <= UInt<30>("h3f7c0ad3") @[LUTbank.scala 146:26]
    sinLUTBank3[142] <= UInt<30>("h3f7c1c5c") @[LUTbank.scala 146:26]
    sinLUTBank3[143] <= UInt<30>("h3f7c2dbf") @[LUTbank.scala 146:26]
    sinLUTBank3[144] <= UInt<30>("h3f7c3efb") @[LUTbank.scala 146:26]
    sinLUTBank3[145] <= UInt<30>("h3f7c5010") @[LUTbank.scala 146:26]
    sinLUTBank3[146] <= UInt<30>("h3f7c60fd") @[LUTbank.scala 146:26]
    sinLUTBank3[147] <= UInt<30>("h3f7c71c4") @[LUTbank.scala 146:26]
    sinLUTBank3[148] <= UInt<30>("h3f7c8264") @[LUTbank.scala 146:26]
    sinLUTBank3[149] <= UInt<30>("h3f7c92dd") @[LUTbank.scala 146:26]
    sinLUTBank3[150] <= UInt<30>("h3f7ca32f") @[LUTbank.scala 146:26]
    sinLUTBank3[151] <= UInt<30>("h3f7cb35b") @[LUTbank.scala 146:26]
    sinLUTBank3[152] <= UInt<30>("h3f7cc35f") @[LUTbank.scala 146:26]
    sinLUTBank3[153] <= UInt<30>("h3f7cd33c") @[LUTbank.scala 146:26]
    sinLUTBank3[154] <= UInt<30>("h3f7ce2f2") @[LUTbank.scala 146:26]
    sinLUTBank3[155] <= UInt<30>("h3f7cf281") @[LUTbank.scala 146:26]
    sinLUTBank3[156] <= UInt<30>("h3f7d01e9") @[LUTbank.scala 146:26]
    sinLUTBank3[157] <= UInt<30>("h3f7d112a") @[LUTbank.scala 146:26]
    sinLUTBank3[158] <= UInt<30>("h3f7d2044") @[LUTbank.scala 146:26]
    sinLUTBank3[159] <= UInt<30>("h3f7d2f37") @[LUTbank.scala 146:26]
    sinLUTBank3[160] <= UInt<30>("h3f7d3e03") @[LUTbank.scala 146:26]
    sinLUTBank3[161] <= UInt<30>("h3f7d4ca8") @[LUTbank.scala 146:26]
    sinLUTBank3[162] <= UInt<30>("h3f7d5b25") @[LUTbank.scala 146:26]
    sinLUTBank3[163] <= UInt<30>("h3f7d697c") @[LUTbank.scala 146:26]
    sinLUTBank3[164] <= UInt<30>("h3f7d77ab") @[LUTbank.scala 146:26]
    sinLUTBank3[165] <= UInt<30>("h3f7d85b4") @[LUTbank.scala 146:26]
    sinLUTBank3[166] <= UInt<30>("h3f7d9395") @[LUTbank.scala 146:26]
    sinLUTBank3[167] <= UInt<30>("h3f7da14f") @[LUTbank.scala 146:26]
    sinLUTBank3[168] <= UInt<30>("h3f7daee2") @[LUTbank.scala 146:26]
    sinLUTBank3[169] <= UInt<30>("h3f7dbc4e") @[LUTbank.scala 146:26]
    sinLUTBank3[170] <= UInt<30>("h3f7dc993") @[LUTbank.scala 146:26]
    sinLUTBank3[171] <= UInt<30>("h3f7dd6b0") @[LUTbank.scala 146:26]
    sinLUTBank3[172] <= UInt<30>("h3f7de3a7") @[LUTbank.scala 146:26]
    sinLUTBank3[173] <= UInt<30>("h3f7df076") @[LUTbank.scala 146:26]
    sinLUTBank3[174] <= UInt<30>("h3f7dfd1e") @[LUTbank.scala 146:26]
    sinLUTBank3[175] <= UInt<30>("h3f7e099f") @[LUTbank.scala 146:26]
    sinLUTBank3[176] <= UInt<30>("h3f7e15f9") @[LUTbank.scala 146:26]
    sinLUTBank3[177] <= UInt<30>("h3f7e222b") @[LUTbank.scala 146:26]
    sinLUTBank3[178] <= UInt<30>("h3f7e2e36") @[LUTbank.scala 146:26]
    sinLUTBank3[179] <= UInt<30>("h3f7e3a1b") @[LUTbank.scala 146:26]
    sinLUTBank3[180] <= UInt<30>("h3f7e45d7") @[LUTbank.scala 146:26]
    sinLUTBank3[181] <= UInt<30>("h3f7e516d") @[LUTbank.scala 146:26]
    sinLUTBank3[182] <= UInt<30>("h3f7e5cdb") @[LUTbank.scala 146:26]
    sinLUTBank3[183] <= UInt<30>("h3f7e6822") @[LUTbank.scala 146:26]
    sinLUTBank3[184] <= UInt<30>("h3f7e7342") @[LUTbank.scala 146:26]
    sinLUTBank3[185] <= UInt<30>("h3f7e7e3b") @[LUTbank.scala 146:26]
    sinLUTBank3[186] <= UInt<30>("h3f7e890c") @[LUTbank.scala 146:26]
    sinLUTBank3[187] <= UInt<30>("h3f7e93b6") @[LUTbank.scala 146:26]
    sinLUTBank3[188] <= UInt<30>("h3f7e9e39") @[LUTbank.scala 146:26]
    sinLUTBank3[189] <= UInt<30>("h3f7ea895") @[LUTbank.scala 146:26]
    sinLUTBank3[190] <= UInt<30>("h3f7eb2c9") @[LUTbank.scala 146:26]
    sinLUTBank3[191] <= UInt<30>("h3f7ebcd6") @[LUTbank.scala 146:26]
    sinLUTBank3[192] <= UInt<30>("h3f7ec6bb") @[LUTbank.scala 146:26]
    sinLUTBank3[193] <= UInt<30>("h3f7ed07a") @[LUTbank.scala 146:26]
    sinLUTBank3[194] <= UInt<30>("h3f7eda11") @[LUTbank.scala 146:26]
    sinLUTBank3[195] <= UInt<30>("h3f7ee380") @[LUTbank.scala 146:26]
    sinLUTBank3[196] <= UInt<30>("h3f7eecc9") @[LUTbank.scala 146:26]
    sinLUTBank3[197] <= UInt<30>("h3f7ef5ea") @[LUTbank.scala 146:26]
    sinLUTBank3[198] <= UInt<30>("h3f7efee3") @[LUTbank.scala 146:26]
    sinLUTBank3[199] <= UInt<30>("h3f7f07b6") @[LUTbank.scala 146:26]
    sinLUTBank3[200] <= UInt<30>("h3f7f1061") @[LUTbank.scala 146:26]
    sinLUTBank3[201] <= UInt<30>("h3f7f18e4") @[LUTbank.scala 146:26]
    sinLUTBank3[202] <= UInt<30>("h3f7f2141") @[LUTbank.scala 146:26]
    sinLUTBank3[203] <= UInt<30>("h3f7f2976") @[LUTbank.scala 146:26]
    sinLUTBank3[204] <= UInt<30>("h3f7f3183") @[LUTbank.scala 146:26]
    sinLUTBank3[205] <= UInt<30>("h3f7f3969") @[LUTbank.scala 146:26]
    sinLUTBank3[206] <= UInt<30>("h3f7f4128") @[LUTbank.scala 146:26]
    sinLUTBank3[207] <= UInt<30>("h3f7f48c0") @[LUTbank.scala 146:26]
    sinLUTBank3[208] <= UInt<30>("h3f7f5030") @[LUTbank.scala 146:26]
    sinLUTBank3[209] <= UInt<30>("h3f7f5778") @[LUTbank.scala 146:26]
    sinLUTBank3[210] <= UInt<30>("h3f7f5e99") @[LUTbank.scala 146:26]
    sinLUTBank3[211] <= UInt<30>("h3f7f6593") @[LUTbank.scala 146:26]
    sinLUTBank3[212] <= UInt<30>("h3f7f6c66") @[LUTbank.scala 146:26]
    sinLUTBank3[213] <= UInt<30>("h3f7f7311") @[LUTbank.scala 146:26]
    sinLUTBank3[214] <= UInt<30>("h3f7f7994") @[LUTbank.scala 146:26]
    sinLUTBank3[215] <= UInt<30>("h3f7f7ff0") @[LUTbank.scala 146:26]
    sinLUTBank3[216] <= UInt<30>("h3f7f8625") @[LUTbank.scala 146:26]
    sinLUTBank3[217] <= UInt<30>("h3f7f8c33") @[LUTbank.scala 146:26]
    sinLUTBank3[218] <= UInt<30>("h3f7f9219") @[LUTbank.scala 146:26]
    sinLUTBank3[219] <= UInt<30>("h3f7f97d7") @[LUTbank.scala 146:26]
    sinLUTBank3[220] <= UInt<30>("h3f7f9d6e") @[LUTbank.scala 146:26]
    sinLUTBank3[221] <= UInt<30>("h3f7fa2de") @[LUTbank.scala 146:26]
    sinLUTBank3[222] <= UInt<30>("h3f7fa826") @[LUTbank.scala 146:26]
    sinLUTBank3[223] <= UInt<30>("h3f7fad47") @[LUTbank.scala 146:26]
    sinLUTBank3[224] <= UInt<30>("h3f7fb240") @[LUTbank.scala 146:26]
    sinLUTBank3[225] <= UInt<30>("h3f7fb712") @[LUTbank.scala 146:26]
    sinLUTBank3[226] <= UInt<30>("h3f7fbbbc") @[LUTbank.scala 146:26]
    sinLUTBank3[227] <= UInt<30>("h3f7fc03f") @[LUTbank.scala 146:26]
    sinLUTBank3[228] <= UInt<30>("h3f7fc49a") @[LUTbank.scala 146:26]
    sinLUTBank3[229] <= UInt<30>("h3f7fc8ce") @[LUTbank.scala 146:26]
    sinLUTBank3[230] <= UInt<30>("h3f7fccdb") @[LUTbank.scala 146:26]
    sinLUTBank3[231] <= UInt<30>("h3f7fd0c0") @[LUTbank.scala 146:26]
    sinLUTBank3[232] <= UInt<30>("h3f7fd47e") @[LUTbank.scala 146:26]
    sinLUTBank3[233] <= UInt<30>("h3f7fd814") @[LUTbank.scala 146:26]
    sinLUTBank3[234] <= UInt<30>("h3f7fdb82") @[LUTbank.scala 146:26]
    sinLUTBank3[235] <= UInt<30>("h3f7fdeca") @[LUTbank.scala 146:26]
    sinLUTBank3[236] <= UInt<30>("h3f7fe1e9") @[LUTbank.scala 146:26]
    sinLUTBank3[237] <= UInt<30>("h3f7fe4e2") @[LUTbank.scala 146:26]
    sinLUTBank3[238] <= UInt<30>("h3f7fe7b2") @[LUTbank.scala 146:26]
    sinLUTBank3[239] <= UInt<30>("h3f7fea5c") @[LUTbank.scala 146:26]
    sinLUTBank3[240] <= UInt<30>("h3f7fecdd") @[LUTbank.scala 146:26]
    sinLUTBank3[241] <= UInt<30>("h3f7fef38") @[LUTbank.scala 146:26]
    sinLUTBank3[242] <= UInt<30>("h3f7ff16a") @[LUTbank.scala 146:26]
    sinLUTBank3[243] <= UInt<30>("h3f7ff376") @[LUTbank.scala 146:26]
    sinLUTBank3[244] <= UInt<30>("h3f7ff559") @[LUTbank.scala 146:26]
    sinLUTBank3[245] <= UInt<30>("h3f7ff716") @[LUTbank.scala 146:26]
    sinLUTBank3[246] <= UInt<30>("h3f7ff8ab") @[LUTbank.scala 146:26]
    sinLUTBank3[247] <= UInt<30>("h3f7ffa18") @[LUTbank.scala 146:26]
    sinLUTBank3[248] <= UInt<30>("h3f7ffb5e") @[LUTbank.scala 146:26]
    sinLUTBank3[249] <= UInt<30>("h3f7ffc7c") @[LUTbank.scala 146:26]
    sinLUTBank3[250] <= UInt<30>("h3f7ffd73") @[LUTbank.scala 146:26]
    sinLUTBank3[251] <= UInt<30>("h3f7ffe42") @[LUTbank.scala 146:26]
    sinLUTBank3[252] <= UInt<30>("h3f7ffeea") @[LUTbank.scala 146:26]
    sinLUTBank3[253] <= UInt<30>("h3f7fff6b") @[LUTbank.scala 146:26]
    sinLUTBank3[254] <= UInt<30>("h3f7fffc4") @[LUTbank.scala 146:26]
    sinLUTBank3[255] <= UInt<30>("h3f7ffff5") @[LUTbank.scala 146:26]
    sinLUTBank3[256] <= UInt<30>("h3f800000") @[LUTbank.scala 146:26]
    wire cosLUTBank0 : UInt<30>[256] @[LUTbank.scala 175:26]
    cosLUTBank0[0] <= UInt<30>("h3f800000") @[LUTbank.scala 175:26]
    cosLUTBank0[1] <= UInt<30>("h3f7fffec") @[LUTbank.scala 175:26]
    cosLUTBank0[2] <= UInt<30>("h3f7fffb1") @[LUTbank.scala 175:26]
    cosLUTBank0[3] <= UInt<30>("h3f7fff4e") @[LUTbank.scala 175:26]
    cosLUTBank0[4] <= UInt<30>("h3f7ffec4") @[LUTbank.scala 175:26]
    cosLUTBank0[5] <= UInt<30>("h3f7ffe12") @[LUTbank.scala 175:26]
    cosLUTBank0[6] <= UInt<30>("h3f7ffd39") @[LUTbank.scala 175:26]
    cosLUTBank0[7] <= UInt<30>("h3f7ffc38") @[LUTbank.scala 175:26]
    cosLUTBank0[8] <= UInt<30>("h3f7ffb10") @[LUTbank.scala 175:26]
    cosLUTBank0[9] <= UInt<30>("h3f7ff9c0") @[LUTbank.scala 175:26]
    cosLUTBank0[10] <= UInt<30>("h3f7ff849") @[LUTbank.scala 175:26]
    cosLUTBank0[11] <= UInt<30>("h3f7ff6aa") @[LUTbank.scala 175:26]
    cosLUTBank0[12] <= UInt<30>("h3f7ff4e4") @[LUTbank.scala 175:26]
    cosLUTBank0[13] <= UInt<30>("h3f7ff2f7") @[LUTbank.scala 175:26]
    cosLUTBank0[14] <= UInt<30>("h3f7ff0e1") @[LUTbank.scala 175:26]
    cosLUTBank0[15] <= UInt<30>("h3f7feea5") @[LUTbank.scala 175:26]
    cosLUTBank0[16] <= UInt<30>("h3f7fec41") @[LUTbank.scala 175:26]
    cosLUTBank0[17] <= UInt<30>("h3f7fe9b5") @[LUTbank.scala 175:26]
    cosLUTBank0[18] <= UInt<30>("h3f7fe702") @[LUTbank.scala 175:26]
    cosLUTBank0[19] <= UInt<30>("h3f7fe427") @[LUTbank.scala 175:26]
    cosLUTBank0[20] <= UInt<30>("h3f7fe125") @[LUTbank.scala 175:26]
    cosLUTBank0[21] <= UInt<30>("h3f7fddfc") @[LUTbank.scala 175:26]
    cosLUTBank0[22] <= UInt<30>("h3f7fdaaa") @[LUTbank.scala 175:26]
    cosLUTBank0[23] <= UInt<30>("h3f7fd732") @[LUTbank.scala 175:26]
    cosLUTBank0[24] <= UInt<30>("h3f7fd392") @[LUTbank.scala 175:26]
    cosLUTBank0[25] <= UInt<30>("h3f7fcfca") @[LUTbank.scala 175:26]
    cosLUTBank0[26] <= UInt<30>("h3f7fcbdc") @[LUTbank.scala 175:26]
    cosLUTBank0[27] <= UInt<30>("h3f7fc7c5") @[LUTbank.scala 175:26]
    cosLUTBank0[28] <= UInt<30>("h3f7fc387") @[LUTbank.scala 175:26]
    cosLUTBank0[29] <= UInt<30>("h3f7fbf22") @[LUTbank.scala 175:26]
    cosLUTBank0[30] <= UInt<30>("h3f7fba95") @[LUTbank.scala 175:26]
    cosLUTBank0[31] <= UInt<30>("h3f7fb5e1") @[LUTbank.scala 175:26]
    cosLUTBank0[32] <= UInt<30>("h3f7fb105") @[LUTbank.scala 175:26]
    cosLUTBank0[33] <= UInt<30>("h3f7fac02") @[LUTbank.scala 175:26]
    cosLUTBank0[34] <= UInt<30>("h3f7fa6d8") @[LUTbank.scala 175:26]
    cosLUTBank0[35] <= UInt<30>("h3f7fa185") @[LUTbank.scala 175:26]
    cosLUTBank0[36] <= UInt<30>("h3f7f9c0c") @[LUTbank.scala 175:26]
    cosLUTBank0[37] <= UInt<30>("h3f7f966b") @[LUTbank.scala 175:26]
    cosLUTBank0[38] <= UInt<30>("h3f7f90a3") @[LUTbank.scala 175:26]
    cosLUTBank0[39] <= UInt<30>("h3f7f8ab3") @[LUTbank.scala 175:26]
    cosLUTBank0[40] <= UInt<30>("h3f7f849c") @[LUTbank.scala 175:26]
    cosLUTBank0[41] <= UInt<30>("h3f7f7e5d") @[LUTbank.scala 175:26]
    cosLUTBank0[42] <= UInt<30>("h3f7f77f7") @[LUTbank.scala 175:26]
    cosLUTBank0[43] <= UInt<30>("h3f7f716a") @[LUTbank.scala 175:26]
    cosLUTBank0[44] <= UInt<30>("h3f7f6ab5") @[LUTbank.scala 175:26]
    cosLUTBank0[45] <= UInt<30>("h3f7f63d8") @[LUTbank.scala 175:26]
    cosLUTBank0[46] <= UInt<30>("h3f7f5cd5") @[LUTbank.scala 175:26]
    cosLUTBank0[47] <= UInt<30>("h3f7f55aa") @[LUTbank.scala 175:26]
    cosLUTBank0[48] <= UInt<30>("h3f7f4e57") @[LUTbank.scala 175:26]
    cosLUTBank0[49] <= UInt<30>("h3f7f46dd") @[LUTbank.scala 175:26]
    cosLUTBank0[50] <= UInt<30>("h3f7f3f3c") @[LUTbank.scala 175:26]
    cosLUTBank0[51] <= UInt<30>("h3f7f3773") @[LUTbank.scala 175:26]
    cosLUTBank0[52] <= UInt<30>("h3f7f2f83") @[LUTbank.scala 175:26]
    cosLUTBank0[53] <= UInt<30>("h3f7f276c") @[LUTbank.scala 175:26]
    cosLUTBank0[54] <= UInt<30>("h3f7f1f2d") @[LUTbank.scala 175:26]
    cosLUTBank0[55] <= UInt<30>("h3f7f16c7") @[LUTbank.scala 175:26]
    cosLUTBank0[56] <= UInt<30>("h3f7f0e3a") @[LUTbank.scala 175:26]
    cosLUTBank0[57] <= UInt<30>("h3f7f0585") @[LUTbank.scala 175:26]
    cosLUTBank0[58] <= UInt<30>("h3f7efca9") @[LUTbank.scala 175:26]
    cosLUTBank0[59] <= UInt<30>("h3f7ef3a5") @[LUTbank.scala 175:26]
    cosLUTBank0[60] <= UInt<30>("h3f7eea7a") @[LUTbank.scala 175:26]
    cosLUTBank0[61] <= UInt<30>("h3f7ee128") @[LUTbank.scala 175:26]
    cosLUTBank0[62] <= UInt<30>("h3f7ed7af") @[LUTbank.scala 175:26]
    cosLUTBank0[63] <= UInt<30>("h3f7ece0e") @[LUTbank.scala 175:26]
    cosLUTBank0[64] <= UInt<30>("h3f7ec446") @[LUTbank.scala 175:26]
    cosLUTBank0[65] <= UInt<30>("h3f7eba56") @[LUTbank.scala 175:26]
    cosLUTBank0[66] <= UInt<30>("h3f7eb03f") @[LUTbank.scala 175:26]
    cosLUTBank0[67] <= UInt<30>("h3f7ea601") @[LUTbank.scala 175:26]
    cosLUTBank0[68] <= UInt<30>("h3f7e9b9c") @[LUTbank.scala 175:26]
    cosLUTBank0[69] <= UInt<30>("h3f7e9110") @[LUTbank.scala 175:26]
    cosLUTBank0[70] <= UInt<30>("h3f7e865c") @[LUTbank.scala 175:26]
    cosLUTBank0[71] <= UInt<30>("h3f7e7b80") @[LUTbank.scala 175:26]
    cosLUTBank0[72] <= UInt<30>("h3f7e707e") @[LUTbank.scala 175:26]
    cosLUTBank0[73] <= UInt<30>("h3f7e6554") @[LUTbank.scala 175:26]
    cosLUTBank0[74] <= UInt<30>("h3f7e5a03") @[LUTbank.scala 175:26]
    cosLUTBank0[75] <= UInt<30>("h3f7e4e8b") @[LUTbank.scala 175:26]
    cosLUTBank0[76] <= UInt<30>("h3f7e42ec") @[LUTbank.scala 175:26]
    cosLUTBank0[77] <= UInt<30>("h3f7e3725") @[LUTbank.scala 175:26]
    cosLUTBank0[78] <= UInt<30>("h3f7e2b37") @[LUTbank.scala 175:26]
    cosLUTBank0[79] <= UInt<30>("h3f7e1f22") @[LUTbank.scala 175:26]
    cosLUTBank0[80] <= UInt<30>("h3f7e12e6") @[LUTbank.scala 175:26]
    cosLUTBank0[81] <= UInt<30>("h3f7e0682") @[LUTbank.scala 175:26]
    cosLUTBank0[82] <= UInt<30>("h3f7df9f8") @[LUTbank.scala 175:26]
    cosLUTBank0[83] <= UInt<30>("h3f7ded46") @[LUTbank.scala 175:26]
    cosLUTBank0[84] <= UInt<30>("h3f7de06d") @[LUTbank.scala 175:26]
    cosLUTBank0[85] <= UInt<30>("h3f7dd36d") @[LUTbank.scala 175:26]
    cosLUTBank0[86] <= UInt<30>("h3f7dc645") @[LUTbank.scala 175:26]
    cosLUTBank0[87] <= UInt<30>("h3f7db8f7") @[LUTbank.scala 175:26]
    cosLUTBank0[88] <= UInt<30>("h3f7dab81") @[LUTbank.scala 175:26]
    cosLUTBank0[89] <= UInt<30>("h3f7d9de4") @[LUTbank.scala 175:26]
    cosLUTBank0[90] <= UInt<30>("h3f7d9020") @[LUTbank.scala 175:26]
    cosLUTBank0[91] <= UInt<30>("h3f7d8235") @[LUTbank.scala 175:26]
    cosLUTBank0[92] <= UInt<30>("h3f7d7423") @[LUTbank.scala 175:26]
    cosLUTBank0[93] <= UInt<30>("h3f7d65ea") @[LUTbank.scala 175:26]
    cosLUTBank0[94] <= UInt<30>("h3f7d5789") @[LUTbank.scala 175:26]
    cosLUTBank0[95] <= UInt<30>("h3f7d4902") @[LUTbank.scala 175:26]
    cosLUTBank0[96] <= UInt<30>("h3f7d3a53") @[LUTbank.scala 175:26]
    cosLUTBank0[97] <= UInt<30>("h3f7d2b7e") @[LUTbank.scala 175:26]
    cosLUTBank0[98] <= UInt<30>("h3f7d1c81") @[LUTbank.scala 175:26]
    cosLUTBank0[99] <= UInt<30>("h3f7d0d5d") @[LUTbank.scala 175:26]
    cosLUTBank0[100] <= UInt<30>("h3f7cfe13") @[LUTbank.scala 175:26]
    cosLUTBank0[101] <= UInt<30>("h3f7ceea1") @[LUTbank.scala 175:26]
    cosLUTBank0[102] <= UInt<30>("h3f7cdf08") @[LUTbank.scala 175:26]
    cosLUTBank0[103] <= UInt<30>("h3f7ccf48") @[LUTbank.scala 175:26]
    cosLUTBank0[104] <= UInt<30>("h3f7cbf61") @[LUTbank.scala 175:26]
    cosLUTBank0[105] <= UInt<30>("h3f7caf53") @[LUTbank.scala 175:26]
    cosLUTBank0[106] <= UInt<30>("h3f7c9f1f") @[LUTbank.scala 175:26]
    cosLUTBank0[107] <= UInt<30>("h3f7c8ec3") @[LUTbank.scala 175:26]
    cosLUTBank0[108] <= UInt<30>("h3f7c7e40") @[LUTbank.scala 175:26]
    cosLUTBank0[109] <= UInt<30>("h3f7c6d96") @[LUTbank.scala 175:26]
    cosLUTBank0[110] <= UInt<30>("h3f7c5cc6") @[LUTbank.scala 175:26]
    cosLUTBank0[111] <= UInt<30>("h3f7c4bce") @[LUTbank.scala 175:26]
    cosLUTBank0[112] <= UInt<30>("h3f7c3aaf") @[LUTbank.scala 175:26]
    cosLUTBank0[113] <= UInt<30>("h3f7c296a") @[LUTbank.scala 175:26]
    cosLUTBank0[114] <= UInt<30>("h3f7c17fe") @[LUTbank.scala 175:26]
    cosLUTBank0[115] <= UInt<30>("h3f7c066a") @[LUTbank.scala 175:26]
    cosLUTBank0[116] <= UInt<30>("h3f7bf4b0") @[LUTbank.scala 175:26]
    cosLUTBank0[117] <= UInt<30>("h3f7be2cf") @[LUTbank.scala 175:26]
    cosLUTBank0[118] <= UInt<30>("h3f7bd0c7") @[LUTbank.scala 175:26]
    cosLUTBank0[119] <= UInt<30>("h3f7bbe99") @[LUTbank.scala 175:26]
    cosLUTBank0[120] <= UInt<30>("h3f7bac43") @[LUTbank.scala 175:26]
    cosLUTBank0[121] <= UInt<30>("h3f7b99c7") @[LUTbank.scala 175:26]
    cosLUTBank0[122] <= UInt<30>("h3f7b8723") @[LUTbank.scala 175:26]
    cosLUTBank0[123] <= UInt<30>("h3f7b7459") @[LUTbank.scala 175:26]
    cosLUTBank0[124] <= UInt<30>("h3f7b6169") @[LUTbank.scala 175:26]
    cosLUTBank0[125] <= UInt<30>("h3f7b4e51") @[LUTbank.scala 175:26]
    cosLUTBank0[126] <= UInt<30>("h3f7b3b13") @[LUTbank.scala 175:26]
    cosLUTBank0[127] <= UInt<30>("h3f7b27ad") @[LUTbank.scala 175:26]
    cosLUTBank0[128] <= UInt<30>("h3f7b1422") @[LUTbank.scala 175:26]
    cosLUTBank0[129] <= UInt<30>("h3f7b006f") @[LUTbank.scala 175:26]
    cosLUTBank0[130] <= UInt<30>("h3f7aec96") @[LUTbank.scala 175:26]
    cosLUTBank0[131] <= UInt<30>("h3f7ad895") @[LUTbank.scala 175:26]
    cosLUTBank0[132] <= UInt<30>("h3f7ac46f") @[LUTbank.scala 175:26]
    cosLUTBank0[133] <= UInt<30>("h3f7ab021") @[LUTbank.scala 175:26]
    cosLUTBank0[134] <= UInt<30>("h3f7a9bad") @[LUTbank.scala 175:26]
    cosLUTBank0[135] <= UInt<30>("h3f7a8712") @[LUTbank.scala 175:26]
    cosLUTBank0[136] <= UInt<30>("h3f7a7251") @[LUTbank.scala 175:26]
    cosLUTBank0[137] <= UInt<30>("h3f7a5d69") @[LUTbank.scala 175:26]
    cosLUTBank0[138] <= UInt<30>("h3f7a485a") @[LUTbank.scala 175:26]
    cosLUTBank0[139] <= UInt<30>("h3f7a3325") @[LUTbank.scala 175:26]
    cosLUTBank0[140] <= UInt<30>("h3f7a1dc9") @[LUTbank.scala 175:26]
    cosLUTBank0[141] <= UInt<30>("h3f7a0846") @[LUTbank.scala 175:26]
    cosLUTBank0[142] <= UInt<30>("h3f79f29d") @[LUTbank.scala 175:26]
    cosLUTBank0[143] <= UInt<30>("h3f79dccd") @[LUTbank.scala 175:26]
    cosLUTBank0[144] <= UInt<30>("h3f79c6d7") @[LUTbank.scala 175:26]
    cosLUTBank0[145] <= UInt<30>("h3f79b0ba") @[LUTbank.scala 175:26]
    cosLUTBank0[146] <= UInt<30>("h3f799a77") @[LUTbank.scala 175:26]
    cosLUTBank0[147] <= UInt<30>("h3f79840d") @[LUTbank.scala 175:26]
    cosLUTBank0[148] <= UInt<30>("h3f796d7d") @[LUTbank.scala 175:26]
    cosLUTBank0[149] <= UInt<30>("h3f7956c6") @[LUTbank.scala 175:26]
    cosLUTBank0[150] <= UInt<30>("h3f793fe9") @[LUTbank.scala 175:26]
    cosLUTBank0[151] <= UInt<30>("h3f7928e5") @[LUTbank.scala 175:26]
    cosLUTBank0[152] <= UInt<30>("h3f7911bb") @[LUTbank.scala 175:26]
    cosLUTBank0[153] <= UInt<30>("h3f78fa6a") @[LUTbank.scala 175:26]
    cosLUTBank0[154] <= UInt<30>("h3f78e2f3") @[LUTbank.scala 175:26]
    cosLUTBank0[155] <= UInt<30>("h3f78cb56") @[LUTbank.scala 175:26]
    cosLUTBank0[156] <= UInt<30>("h3f78b392") @[LUTbank.scala 175:26]
    cosLUTBank0[157] <= UInt<30>("h3f789ba8") @[LUTbank.scala 175:26]
    cosLUTBank0[158] <= UInt<30>("h3f788398") @[LUTbank.scala 175:26]
    cosLUTBank0[159] <= UInt<30>("h3f786b61") @[LUTbank.scala 175:26]
    cosLUTBank0[160] <= UInt<30>("h3f785304") @[LUTbank.scala 175:26]
    cosLUTBank0[161] <= UInt<30>("h3f783a80") @[LUTbank.scala 175:26]
    cosLUTBank0[162] <= UInt<30>("h3f7821d6") @[LUTbank.scala 175:26]
    cosLUTBank0[163] <= UInt<30>("h3f780906") @[LUTbank.scala 175:26]
    cosLUTBank0[164] <= UInt<30>("h3f77f010") @[LUTbank.scala 175:26]
    cosLUTBank0[165] <= UInt<30>("h3f77d6f3") @[LUTbank.scala 175:26]
    cosLUTBank0[166] <= UInt<30>("h3f77bdb0") @[LUTbank.scala 175:26]
    cosLUTBank0[167] <= UInt<30>("h3f77a447") @[LUTbank.scala 175:26]
    cosLUTBank0[168] <= UInt<30>("h3f778ab8") @[LUTbank.scala 175:26]
    cosLUTBank0[169] <= UInt<30>("h3f777103") @[LUTbank.scala 175:26]
    cosLUTBank0[170] <= UInt<30>("h3f775727") @[LUTbank.scala 175:26]
    cosLUTBank0[171] <= UInt<30>("h3f773d25") @[LUTbank.scala 175:26]
    cosLUTBank0[172] <= UInt<30>("h3f7722fd") @[LUTbank.scala 175:26]
    cosLUTBank0[173] <= UInt<30>("h3f7708af") @[LUTbank.scala 175:26]
    cosLUTBank0[174] <= UInt<30>("h3f76ee3b") @[LUTbank.scala 175:26]
    cosLUTBank0[175] <= UInt<30>("h3f76d3a1") @[LUTbank.scala 175:26]
    cosLUTBank0[176] <= UInt<30>("h3f76b8e0") @[LUTbank.scala 175:26]
    cosLUTBank0[177] <= UInt<30>("h3f769dfa") @[LUTbank.scala 175:26]
    cosLUTBank0[178] <= UInt<30>("h3f7682ed") @[LUTbank.scala 175:26]
    cosLUTBank0[179] <= UInt<30>("h3f7667bb") @[LUTbank.scala 175:26]
    cosLUTBank0[180] <= UInt<30>("h3f764c62") @[LUTbank.scala 175:26]
    cosLUTBank0[181] <= UInt<30>("h3f7630e4") @[LUTbank.scala 175:26]
    cosLUTBank0[182] <= UInt<30>("h3f76153f") @[LUTbank.scala 175:26]
    cosLUTBank0[183] <= UInt<30>("h3f75f975") @[LUTbank.scala 175:26]
    cosLUTBank0[184] <= UInt<30>("h3f75dd84") @[LUTbank.scala 175:26]
    cosLUTBank0[185] <= UInt<30>("h3f75c16e") @[LUTbank.scala 175:26]
    cosLUTBank0[186] <= UInt<30>("h3f75a531") @[LUTbank.scala 175:26]
    cosLUTBank0[187] <= UInt<30>("h3f7588cf") @[LUTbank.scala 175:26]
    cosLUTBank0[188] <= UInt<30>("h3f756c47") @[LUTbank.scala 175:26]
    cosLUTBank0[189] <= UInt<30>("h3f754f99") @[LUTbank.scala 175:26]
    cosLUTBank0[190] <= UInt<30>("h3f7532c5") @[LUTbank.scala 175:26]
    cosLUTBank0[191] <= UInt<30>("h3f7515cc") @[LUTbank.scala 175:26]
    cosLUTBank0[192] <= UInt<30>("h3f74f8ac") @[LUTbank.scala 175:26]
    cosLUTBank0[193] <= UInt<30>("h3f74db67") @[LUTbank.scala 175:26]
    cosLUTBank0[194] <= UInt<30>("h3f74bdfc") @[LUTbank.scala 175:26]
    cosLUTBank0[195] <= UInt<30>("h3f74a06b") @[LUTbank.scala 175:26]
    cosLUTBank0[196] <= UInt<30>("h3f7482b5") @[LUTbank.scala 175:26]
    cosLUTBank0[197] <= UInt<30>("h3f7464d9") @[LUTbank.scala 175:26]
    cosLUTBank0[198] <= UInt<30>("h3f7446d7") @[LUTbank.scala 175:26]
    cosLUTBank0[199] <= UInt<30>("h3f7428af") @[LUTbank.scala 175:26]
    cosLUTBank0[200] <= UInt<30>("h3f740a62") @[LUTbank.scala 175:26]
    cosLUTBank0[201] <= UInt<30>("h3f73ebef") @[LUTbank.scala 175:26]
    cosLUTBank0[202] <= UInt<30>("h3f73cd56") @[LUTbank.scala 175:26]
    cosLUTBank0[203] <= UInt<30>("h3f73ae98") @[LUTbank.scala 175:26]
    cosLUTBank0[204] <= UInt<30>("h3f738fb4") @[LUTbank.scala 175:26]
    cosLUTBank0[205] <= UInt<30>("h3f7370ab") @[LUTbank.scala 175:26]
    cosLUTBank0[206] <= UInt<30>("h3f73517c") @[LUTbank.scala 175:26]
    cosLUTBank0[207] <= UInt<30>("h3f733227") @[LUTbank.scala 175:26]
    cosLUTBank0[208] <= UInt<30>("h3f7312ad") @[LUTbank.scala 175:26]
    cosLUTBank0[209] <= UInt<30>("h3f72f30e") @[LUTbank.scala 175:26]
    cosLUTBank0[210] <= UInt<30>("h3f72d349") @[LUTbank.scala 175:26]
    cosLUTBank0[211] <= UInt<30>("h3f72b35e") @[LUTbank.scala 175:26]
    cosLUTBank0[212] <= UInt<30>("h3f72934e") @[LUTbank.scala 175:26]
    cosLUTBank0[213] <= UInt<30>("h3f727319") @[LUTbank.scala 175:26]
    cosLUTBank0[214] <= UInt<30>("h3f7252be") @[LUTbank.scala 175:26]
    cosLUTBank0[215] <= UInt<30>("h3f72323e") @[LUTbank.scala 175:26]
    cosLUTBank0[216] <= UInt<30>("h3f721199") @[LUTbank.scala 175:26]
    cosLUTBank0[217] <= UInt<30>("h3f71f0ce") @[LUTbank.scala 175:26]
    cosLUTBank0[218] <= UInt<30>("h3f71cfde") @[LUTbank.scala 175:26]
    cosLUTBank0[219] <= UInt<30>("h3f71aec8") @[LUTbank.scala 175:26]
    cosLUTBank0[220] <= UInt<30>("h3f718d8d") @[LUTbank.scala 175:26]
    cosLUTBank0[221] <= UInt<30>("h3f716c2d") @[LUTbank.scala 175:26]
    cosLUTBank0[222] <= UInt<30>("h3f714aa8") @[LUTbank.scala 175:26]
    cosLUTBank0[223] <= UInt<30>("h3f7128fe") @[LUTbank.scala 175:26]
    cosLUTBank0[224] <= UInt<30>("h3f71072e") @[LUTbank.scala 175:26]
    cosLUTBank0[225] <= UInt<30>("h3f70e539") @[LUTbank.scala 175:26]
    cosLUTBank0[226] <= UInt<30>("h3f70c31f") @[LUTbank.scala 175:26]
    cosLUTBank0[227] <= UInt<30>("h3f70a0e0") @[LUTbank.scala 175:26]
    cosLUTBank0[228] <= UInt<30>("h3f707e7b") @[LUTbank.scala 175:26]
    cosLUTBank0[229] <= UInt<30>("h3f705bf2") @[LUTbank.scala 175:26]
    cosLUTBank0[230] <= UInt<30>("h3f703943") @[LUTbank.scala 175:26]
    cosLUTBank0[231] <= UInt<30>("h3f701670") @[LUTbank.scala 175:26]
    cosLUTBank0[232] <= UInt<30>("h3f6ff377") @[LUTbank.scala 175:26]
    cosLUTBank0[233] <= UInt<30>("h3f6fd059") @[LUTbank.scala 175:26]
    cosLUTBank0[234] <= UInt<30>("h3f6fad17") @[LUTbank.scala 175:26]
    cosLUTBank0[235] <= UInt<30>("h3f6f89af") @[LUTbank.scala 175:26]
    cosLUTBank0[236] <= UInt<30>("h3f6f6622") @[LUTbank.scala 175:26]
    cosLUTBank0[237] <= UInt<30>("h3f6f4271") @[LUTbank.scala 175:26]
    cosLUTBank0[238] <= UInt<30>("h3f6f1e9a") @[LUTbank.scala 175:26]
    cosLUTBank0[239] <= UInt<30>("h3f6efa9f") @[LUTbank.scala 175:26]
    cosLUTBank0[240] <= UInt<30>("h3f6ed67f") @[LUTbank.scala 175:26]
    cosLUTBank0[241] <= UInt<30>("h3f6eb23a") @[LUTbank.scala 175:26]
    cosLUTBank0[242] <= UInt<30>("h3f6e8dd0") @[LUTbank.scala 175:26]
    cosLUTBank0[243] <= UInt<30>("h3f6e6941") @[LUTbank.scala 175:26]
    cosLUTBank0[244] <= UInt<30>("h3f6e448e") @[LUTbank.scala 175:26]
    cosLUTBank0[245] <= UInt<30>("h3f6e1fb5") @[LUTbank.scala 175:26]
    cosLUTBank0[246] <= UInt<30>("h3f6dfab8") @[LUTbank.scala 175:26]
    cosLUTBank0[247] <= UInt<30>("h3f6dd597") @[LUTbank.scala 175:26]
    cosLUTBank0[248] <= UInt<30>("h3f6db050") @[LUTbank.scala 175:26]
    cosLUTBank0[249] <= UInt<30>("h3f6d8ae5") @[LUTbank.scala 175:26]
    cosLUTBank0[250] <= UInt<30>("h3f6d6555") @[LUTbank.scala 175:26]
    cosLUTBank0[251] <= UInt<30>("h3f6d3fa1") @[LUTbank.scala 175:26]
    cosLUTBank0[252] <= UInt<30>("h3f6d19c8") @[LUTbank.scala 175:26]
    cosLUTBank0[253] <= UInt<30>("h3f6cf3cb") @[LUTbank.scala 175:26]
    cosLUTBank0[254] <= UInt<30>("h3f6ccda8") @[LUTbank.scala 175:26]
    cosLUTBank0[255] <= UInt<30>("h3f6ca762") @[LUTbank.scala 175:26]
    wire cosLUTBank1 : UInt<30>[256] @[LUTbank.scala 204:26]
    cosLUTBank1[0] <= UInt<30>("h3f6c80f7") @[LUTbank.scala 204:26]
    cosLUTBank1[1] <= UInt<30>("h3f6c5a67") @[LUTbank.scala 204:26]
    cosLUTBank1[2] <= UInt<30>("h3f6c33b3") @[LUTbank.scala 204:26]
    cosLUTBank1[3] <= UInt<30>("h3f6c0cda") @[LUTbank.scala 204:26]
    cosLUTBank1[4] <= UInt<30>("h3f6be5dd") @[LUTbank.scala 204:26]
    cosLUTBank1[5] <= UInt<30>("h3f6bbebc") @[LUTbank.scala 204:26]
    cosLUTBank1[6] <= UInt<30>("h3f6b9776") @[LUTbank.scala 204:26]
    cosLUTBank1[7] <= UInt<30>("h3f6b700c") @[LUTbank.scala 204:26]
    cosLUTBank1[8] <= UInt<30>("h3f6b487e") @[LUTbank.scala 204:26]
    cosLUTBank1[9] <= UInt<30>("h3f6b20cb") @[LUTbank.scala 204:26]
    cosLUTBank1[10] <= UInt<30>("h3f6af8f4") @[LUTbank.scala 204:26]
    cosLUTBank1[11] <= UInt<30>("h3f6ad0f9") @[LUTbank.scala 204:26]
    cosLUTBank1[12] <= UInt<30>("h3f6aa8d9") @[LUTbank.scala 204:26]
    cosLUTBank1[13] <= UInt<30>("h3f6a8096") @[LUTbank.scala 204:26]
    cosLUTBank1[14] <= UInt<30>("h3f6a582e") @[LUTbank.scala 204:26]
    cosLUTBank1[15] <= UInt<30>("h3f6a2fa2") @[LUTbank.scala 204:26]
    cosLUTBank1[16] <= UInt<30>("h3f6a06f2") @[LUTbank.scala 204:26]
    cosLUTBank1[17] <= UInt<30>("h3f69de1d") @[LUTbank.scala 204:26]
    cosLUTBank1[18] <= UInt<30>("h3f69b525") @[LUTbank.scala 204:26]
    cosLUTBank1[19] <= UInt<30>("h3f698c09") @[LUTbank.scala 204:26]
    cosLUTBank1[20] <= UInt<30>("h3f6962c8") @[LUTbank.scala 204:26]
    cosLUTBank1[21] <= UInt<30>("h3f693964") @[LUTbank.scala 204:26]
    cosLUTBank1[22] <= UInt<30>("h3f690fdb") @[LUTbank.scala 204:26]
    cosLUTBank1[23] <= UInt<30>("h3f68e62f") @[LUTbank.scala 204:26]
    cosLUTBank1[24] <= UInt<30>("h3f68bc5f") @[LUTbank.scala 204:26]
    cosLUTBank1[25] <= UInt<30>("h3f68926b") @[LUTbank.scala 204:26]
    cosLUTBank1[26] <= UInt<30>("h3f686852") @[LUTbank.scala 204:26]
    cosLUTBank1[27] <= UInt<30>("h3f683e16") @[LUTbank.scala 204:26]
    cosLUTBank1[28] <= UInt<30>("h3f6813b7") @[LUTbank.scala 204:26]
    cosLUTBank1[29] <= UInt<30>("h3f67e933") @[LUTbank.scala 204:26]
    cosLUTBank1[30] <= UInt<30>("h3f67be8c") @[LUTbank.scala 204:26]
    cosLUTBank1[31] <= UInt<30>("h3f6793c1") @[LUTbank.scala 204:26]
    cosLUTBank1[32] <= UInt<30>("h3f6768d2") @[LUTbank.scala 204:26]
    cosLUTBank1[33] <= UInt<30>("h3f673dbf") @[LUTbank.scala 204:26]
    cosLUTBank1[34] <= UInt<30>("h3f671289") @[LUTbank.scala 204:26]
    cosLUTBank1[35] <= UInt<30>("h3f66e72f") @[LUTbank.scala 204:26]
    cosLUTBank1[36] <= UInt<30>("h3f66bbb1") @[LUTbank.scala 204:26]
    cosLUTBank1[37] <= UInt<30>("h3f669010") @[LUTbank.scala 204:26]
    cosLUTBank1[38] <= UInt<30>("h3f66644c") @[LUTbank.scala 204:26]
    cosLUTBank1[39] <= UInt<30>("h3f663863") @[LUTbank.scala 204:26]
    cosLUTBank1[40] <= UInt<30>("h3f660c58") @[LUTbank.scala 204:26]
    cosLUTBank1[41] <= UInt<30>("h3f65e028") @[LUTbank.scala 204:26]
    cosLUTBank1[42] <= UInt<30>("h3f65b3d6") @[LUTbank.scala 204:26]
    cosLUTBank1[43] <= UInt<30>("h3f65875f") @[LUTbank.scala 204:26]
    cosLUTBank1[44] <= UInt<30>("h3f655ac6") @[LUTbank.scala 204:26]
    cosLUTBank1[45] <= UInt<30>("h3f652e09") @[LUTbank.scala 204:26]
    cosLUTBank1[46] <= UInt<30>("h3f650129") @[LUTbank.scala 204:26]
    cosLUTBank1[47] <= UInt<30>("h3f64d425") @[LUTbank.scala 204:26]
    cosLUTBank1[48] <= UInt<30>("h3f64a6fe") @[LUTbank.scala 204:26]
    cosLUTBank1[49] <= UInt<30>("h3f6479b4") @[LUTbank.scala 204:26]
    cosLUTBank1[50] <= UInt<30>("h3f644c46") @[LUTbank.scala 204:26]
    cosLUTBank1[51] <= UInt<30>("h3f641eb5") @[LUTbank.scala 204:26]
    cosLUTBank1[52] <= UInt<30>("h3f63f102") @[LUTbank.scala 204:26]
    cosLUTBank1[53] <= UInt<30>("h3f63c32a") @[LUTbank.scala 204:26]
    cosLUTBank1[54] <= UInt<30>("h3f639530") @[LUTbank.scala 204:26]
    cosLUTBank1[55] <= UInt<30>("h3f636713") @[LUTbank.scala 204:26]
    cosLUTBank1[56] <= UInt<30>("h3f6338d3") @[LUTbank.scala 204:26]
    cosLUTBank1[57] <= UInt<30>("h3f630a6f") @[LUTbank.scala 204:26]
    cosLUTBank1[58] <= UInt<30>("h3f62dbe9") @[LUTbank.scala 204:26]
    cosLUTBank1[59] <= UInt<30>("h3f62ad3f") @[LUTbank.scala 204:26]
    cosLUTBank1[60] <= UInt<30>("h3f627e73") @[LUTbank.scala 204:26]
    cosLUTBank1[61] <= UInt<30>("h3f624f83") @[LUTbank.scala 204:26]
    cosLUTBank1[62] <= UInt<30>("h3f622071") @[LUTbank.scala 204:26]
    cosLUTBank1[63] <= UInt<30>("h3f61f13c") @[LUTbank.scala 204:26]
    cosLUTBank1[64] <= UInt<30>("h3f61c1e3") @[LUTbank.scala 204:26]
    cosLUTBank1[65] <= UInt<30>("h3f619268") @[LUTbank.scala 204:26]
    cosLUTBank1[66] <= UInt<30>("h3f6162cb") @[LUTbank.scala 204:26]
    cosLUTBank1[67] <= UInt<30>("h3f61330a") @[LUTbank.scala 204:26]
    cosLUTBank1[68] <= UInt<30>("h3f610327") @[LUTbank.scala 204:26]
    cosLUTBank1[69] <= UInt<30>("h3f60d321") @[LUTbank.scala 204:26]
    cosLUTBank1[70] <= UInt<30>("h3f60a2f8") @[LUTbank.scala 204:26]
    cosLUTBank1[71] <= UInt<30>("h3f6072ad") @[LUTbank.scala 204:26]
    cosLUTBank1[72] <= UInt<30>("h3f60423f") @[LUTbank.scala 204:26]
    cosLUTBank1[73] <= UInt<30>("h3f6011af") @[LUTbank.scala 204:26]
    cosLUTBank1[74] <= UInt<30>("h3f5fe0fb") @[LUTbank.scala 204:26]
    cosLUTBank1[75] <= UInt<30>("h3f5fb026") @[LUTbank.scala 204:26]
    cosLUTBank1[76] <= UInt<30>("h3f5f7f2e") @[LUTbank.scala 204:26]
    cosLUTBank1[77] <= UInt<30>("h3f5f4e13") @[LUTbank.scala 204:26]
    cosLUTBank1[78] <= UInt<30>("h3f5f1cd6") @[LUTbank.scala 204:26]
    cosLUTBank1[79] <= UInt<30>("h3f5eeb76") @[LUTbank.scala 204:26]
    cosLUTBank1[80] <= UInt<30>("h3f5eb9f4") @[LUTbank.scala 204:26]
    cosLUTBank1[81] <= UInt<30>("h3f5e8850") @[LUTbank.scala 204:26]
    cosLUTBank1[82] <= UInt<30>("h3f5e568a") @[LUTbank.scala 204:26]
    cosLUTBank1[83] <= UInt<30>("h3f5e24a1") @[LUTbank.scala 204:26]
    cosLUTBank1[84] <= UInt<30>("h3f5df295") @[LUTbank.scala 204:26]
    cosLUTBank1[85] <= UInt<30>("h3f5dc068") @[LUTbank.scala 204:26]
    cosLUTBank1[86] <= UInt<30>("h3f5d8e18") @[LUTbank.scala 204:26]
    cosLUTBank1[87] <= UInt<30>("h3f5d5ba6") @[LUTbank.scala 204:26]
    cosLUTBank1[88] <= UInt<30>("h3f5d2912") @[LUTbank.scala 204:26]
    cosLUTBank1[89] <= UInt<30>("h3f5cf65c") @[LUTbank.scala 204:26]
    cosLUTBank1[90] <= UInt<30>("h3f5cc384") @[LUTbank.scala 204:26]
    cosLUTBank1[91] <= UInt<30>("h3f5c908a") @[LUTbank.scala 204:26]
    cosLUTBank1[92] <= UInt<30>("h3f5c5d6e") @[LUTbank.scala 204:26]
    cosLUTBank1[93] <= UInt<30>("h3f5c2a2f") @[LUTbank.scala 204:26]
    cosLUTBank1[94] <= UInt<30>("h3f5bf6cf") @[LUTbank.scala 204:26]
    cosLUTBank1[95] <= UInt<30>("h3f5bc34d") @[LUTbank.scala 204:26]
    cosLUTBank1[96] <= UInt<30>("h3f5b8fa9") @[LUTbank.scala 204:26]
    cosLUTBank1[97] <= UInt<30>("h3f5b5be3") @[LUTbank.scala 204:26]
    cosLUTBank1[98] <= UInt<30>("h3f5b27fb") @[LUTbank.scala 204:26]
    cosLUTBank1[99] <= UInt<30>("h3f5af3f1") @[LUTbank.scala 204:26]
    cosLUTBank1[100] <= UInt<30>("h3f5abfc6") @[LUTbank.scala 204:26]
    cosLUTBank1[101] <= UInt<30>("h3f5a8b79") @[LUTbank.scala 204:26]
    cosLUTBank1[102] <= UInt<30>("h3f5a570a") @[LUTbank.scala 204:26]
    cosLUTBank1[103] <= UInt<30>("h3f5a2279") @[LUTbank.scala 204:26]
    cosLUTBank1[104] <= UInt<30>("h3f59edc7") @[LUTbank.scala 204:26]
    cosLUTBank1[105] <= UInt<30>("h3f59b8f3") @[LUTbank.scala 204:26]
    cosLUTBank1[106] <= UInt<30>("h3f5983fe") @[LUTbank.scala 204:26]
    cosLUTBank1[107] <= UInt<30>("h3f594ee7") @[LUTbank.scala 204:26]
    cosLUTBank1[108] <= UInt<30>("h3f5919ae") @[LUTbank.scala 204:26]
    cosLUTBank1[109] <= UInt<30>("h3f58e454") @[LUTbank.scala 204:26]
    cosLUTBank1[110] <= UInt<30>("h3f58aed9") @[LUTbank.scala 204:26]
    cosLUTBank1[111] <= UInt<30>("h3f58793c") @[LUTbank.scala 204:26]
    cosLUTBank1[112] <= UInt<30>("h3f58437d") @[LUTbank.scala 204:26]
    cosLUTBank1[113] <= UInt<30>("h3f580d9e") @[LUTbank.scala 204:26]
    cosLUTBank1[114] <= UInt<30>("h3f57d79d") @[LUTbank.scala 204:26]
    cosLUTBank1[115] <= UInt<30>("h3f57a17a") @[LUTbank.scala 204:26]
    cosLUTBank1[116] <= UInt<30>("h3f576b37") @[LUTbank.scala 204:26]
    cosLUTBank1[117] <= UInt<30>("h3f5734d2") @[LUTbank.scala 204:26]
    cosLUTBank1[118] <= UInt<30>("h3f56fe4c") @[LUTbank.scala 204:26]
    cosLUTBank1[119] <= UInt<30>("h3f56c7a5") @[LUTbank.scala 204:26]
    cosLUTBank1[120] <= UInt<30>("h3f5690dc") @[LUTbank.scala 204:26]
    cosLUTBank1[121] <= UInt<30>("h3f5659f3") @[LUTbank.scala 204:26]
    cosLUTBank1[122] <= UInt<30>("h3f5622e8") @[LUTbank.scala 204:26]
    cosLUTBank1[123] <= UInt<30>("h3f55ebbd") @[LUTbank.scala 204:26]
    cosLUTBank1[124] <= UInt<30>("h3f55b470") @[LUTbank.scala 204:26]
    cosLUTBank1[125] <= UInt<30>("h3f557d02") @[LUTbank.scala 204:26]
    cosLUTBank1[126] <= UInt<30>("h3f554574") @[LUTbank.scala 204:26]
    cosLUTBank1[127] <= UInt<30>("h3f550dc5") @[LUTbank.scala 204:26]
    cosLUTBank1[128] <= UInt<30>("h3f54d5f4") @[LUTbank.scala 204:26]
    cosLUTBank1[129] <= UInt<30>("h3f549e03") @[LUTbank.scala 204:26]
    cosLUTBank1[130] <= UInt<30>("h3f5465f1") @[LUTbank.scala 204:26]
    cosLUTBank1[131] <= UInt<30>("h3f542dbf") @[LUTbank.scala 204:26]
    cosLUTBank1[132] <= UInt<30>("h3f53f56b") @[LUTbank.scala 204:26]
    cosLUTBank1[133] <= UInt<30>("h3f53bcf7") @[LUTbank.scala 204:26]
    cosLUTBank1[134] <= UInt<30>("h3f538462") @[LUTbank.scala 204:26]
    cosLUTBank1[135] <= UInt<30>("h3f534bad") @[LUTbank.scala 204:26]
    cosLUTBank1[136] <= UInt<30>("h3f5312d7") @[LUTbank.scala 204:26]
    cosLUTBank1[137] <= UInt<30>("h3f52d9e0") @[LUTbank.scala 204:26]
    cosLUTBank1[138] <= UInt<30>("h3f52a0c9") @[LUTbank.scala 204:26]
    cosLUTBank1[139] <= UInt<30>("h3f526792") @[LUTbank.scala 204:26]
    cosLUTBank1[140] <= UInt<30>("h3f522e3a") @[LUTbank.scala 204:26]
    cosLUTBank1[141] <= UInt<30>("h3f51f4c1") @[LUTbank.scala 204:26]
    cosLUTBank1[142] <= UInt<30>("h3f51bb28") @[LUTbank.scala 204:26]
    cosLUTBank1[143] <= UInt<30>("h3f51816f") @[LUTbank.scala 204:26]
    cosLUTBank1[144] <= UInt<30>("h3f514795") @[LUTbank.scala 204:26]
    cosLUTBank1[145] <= UInt<30>("h3f510d9b") @[LUTbank.scala 204:26]
    cosLUTBank1[146] <= UInt<30>("h3f50d381") @[LUTbank.scala 204:26]
    cosLUTBank1[147] <= UInt<30>("h3f509947") @[LUTbank.scala 204:26]
    cosLUTBank1[148] <= UInt<30>("h3f505eec") @[LUTbank.scala 204:26]
    cosLUTBank1[149] <= UInt<30>("h3f502472") @[LUTbank.scala 204:26]
    cosLUTBank1[150] <= UInt<30>("h3f4fe9d7") @[LUTbank.scala 204:26]
    cosLUTBank1[151] <= UInt<30>("h3f4faf1c") @[LUTbank.scala 204:26]
    cosLUTBank1[152] <= UInt<30>("h3f4f7441") @[LUTbank.scala 204:26]
    cosLUTBank1[153] <= UInt<30>("h3f4f3946") @[LUTbank.scala 204:26]
    cosLUTBank1[154] <= UInt<30>("h3f4efe2b") @[LUTbank.scala 204:26]
    cosLUTBank1[155] <= UInt<30>("h3f4ec2f1") @[LUTbank.scala 204:26]
    cosLUTBank1[156] <= UInt<30>("h3f4e8796") @[LUTbank.scala 204:26]
    cosLUTBank1[157] <= UInt<30>("h3f4e4c1b") @[LUTbank.scala 204:26]
    cosLUTBank1[158] <= UInt<30>("h3f4e1081") @[LUTbank.scala 204:26]
    cosLUTBank1[159] <= UInt<30>("h3f4dd4c7") @[LUTbank.scala 204:26]
    cosLUTBank1[160] <= UInt<30>("h3f4d98ed") @[LUTbank.scala 204:26]
    cosLUTBank1[161] <= UInt<30>("h3f4d5cf3") @[LUTbank.scala 204:26]
    cosLUTBank1[162] <= UInt<30>("h3f4d20da") @[LUTbank.scala 204:26]
    cosLUTBank1[163] <= UInt<30>("h3f4ce4a1") @[LUTbank.scala 204:26]
    cosLUTBank1[164] <= UInt<30>("h3f4ca848") @[LUTbank.scala 204:26]
    cosLUTBank1[165] <= UInt<30>("h3f4c6bd0") @[LUTbank.scala 204:26]
    cosLUTBank1[166] <= UInt<30>("h3f4c2f38") @[LUTbank.scala 204:26]
    cosLUTBank1[167] <= UInt<30>("h3f4bf281") @[LUTbank.scala 204:26]
    cosLUTBank1[168] <= UInt<30>("h3f4bb5aa") @[LUTbank.scala 204:26]
    cosLUTBank1[169] <= UInt<30>("h3f4b78b4") @[LUTbank.scala 204:26]
    cosLUTBank1[170] <= UInt<30>("h3f4b3b9e") @[LUTbank.scala 204:26]
    cosLUTBank1[171] <= UInt<30>("h3f4afe69") @[LUTbank.scala 204:26]
    cosLUTBank1[172] <= UInt<30>("h3f4ac115") @[LUTbank.scala 204:26]
    cosLUTBank1[173] <= UInt<30>("h3f4a83a2") @[LUTbank.scala 204:26]
    cosLUTBank1[174] <= UInt<30>("h3f4a460f") @[LUTbank.scala 204:26]
    cosLUTBank1[175] <= UInt<30>("h3f4a085d") @[LUTbank.scala 204:26]
    cosLUTBank1[176] <= UInt<30>("h3f49ca8c") @[LUTbank.scala 204:26]
    cosLUTBank1[177] <= UInt<30>("h3f498c9c") @[LUTbank.scala 204:26]
    cosLUTBank1[178] <= UInt<30>("h3f494e8c") @[LUTbank.scala 204:26]
    cosLUTBank1[179] <= UInt<30>("h3f49105e") @[LUTbank.scala 204:26]
    cosLUTBank1[180] <= UInt<30>("h3f48d210") @[LUTbank.scala 204:26]
    cosLUTBank1[181] <= UInt<30>("h3f4893a4") @[LUTbank.scala 204:26]
    cosLUTBank1[182] <= UInt<30>("h3f485518") @[LUTbank.scala 204:26]
    cosLUTBank1[183] <= UInt<30>("h3f48166e") @[LUTbank.scala 204:26]
    cosLUTBank1[184] <= UInt<30>("h3f47d7a5") @[LUTbank.scala 204:26]
    cosLUTBank1[185] <= UInt<30>("h3f4798bd") @[LUTbank.scala 204:26]
    cosLUTBank1[186] <= UInt<30>("h3f4759b6") @[LUTbank.scala 204:26]
    cosLUTBank1[187] <= UInt<30>("h3f471a91") @[LUTbank.scala 204:26]
    cosLUTBank1[188] <= UInt<30>("h3f46db4c") @[LUTbank.scala 204:26]
    cosLUTBank1[189] <= UInt<30>("h3f469bea") @[LUTbank.scala 204:26]
    cosLUTBank1[190] <= UInt<30>("h3f465c68") @[LUTbank.scala 204:26]
    cosLUTBank1[191] <= UInt<30>("h3f461cc8") @[LUTbank.scala 204:26]
    cosLUTBank1[192] <= UInt<30>("h3f45dd09") @[LUTbank.scala 204:26]
    cosLUTBank1[193] <= UInt<30>("h3f459d2c") @[LUTbank.scala 204:26]
    cosLUTBank1[194] <= UInt<30>("h3f455d30") @[LUTbank.scala 204:26]
    cosLUTBank1[195] <= UInt<30>("h3f451d16") @[LUTbank.scala 204:26]
    cosLUTBank1[196] <= UInt<30>("h3f44dcdd") @[LUTbank.scala 204:26]
    cosLUTBank1[197] <= UInt<30>("h3f449c86") @[LUTbank.scala 204:26]
    cosLUTBank1[198] <= UInt<30>("h3f445c11") @[LUTbank.scala 204:26]
    cosLUTBank1[199] <= UInt<30>("h3f441b7d") @[LUTbank.scala 204:26]
    cosLUTBank1[200] <= UInt<30>("h3f43dacb") @[LUTbank.scala 204:26]
    cosLUTBank1[201] <= UInt<30>("h3f4399fb") @[LUTbank.scala 204:26]
    cosLUTBank1[202] <= UInt<30>("h3f43590d") @[LUTbank.scala 204:26]
    cosLUTBank1[203] <= UInt<30>("h3f431800") @[LUTbank.scala 204:26]
    cosLUTBank1[204] <= UInt<30>("h3f42d6d6") @[LUTbank.scala 204:26]
    cosLUTBank1[205] <= UInt<30>("h3f42958d") @[LUTbank.scala 204:26]
    cosLUTBank1[206] <= UInt<30>("h3f425427") @[LUTbank.scala 204:26]
    cosLUTBank1[207] <= UInt<30>("h3f4212a2") @[LUTbank.scala 204:26]
    cosLUTBank1[208] <= UInt<30>("h3f41d0ff") @[LUTbank.scala 204:26]
    cosLUTBank1[209] <= UInt<30>("h3f418f3f") @[LUTbank.scala 204:26]
    cosLUTBank1[210] <= UInt<30>("h3f414d61") @[LUTbank.scala 204:26]
    cosLUTBank1[211] <= UInt<30>("h3f410b65") @[LUTbank.scala 204:26]
    cosLUTBank1[212] <= UInt<30>("h3f40c94b") @[LUTbank.scala 204:26]
    cosLUTBank1[213] <= UInt<30>("h3f408713") @[LUTbank.scala 204:26]
    cosLUTBank1[214] <= UInt<30>("h3f4044be") @[LUTbank.scala 204:26]
    cosLUTBank1[215] <= UInt<30>("h3f40024b") @[LUTbank.scala 204:26]
    cosLUTBank1[216] <= UInt<30>("h3f3fbfba") @[LUTbank.scala 204:26]
    cosLUTBank1[217] <= UInt<30>("h3f3f7d0c") @[LUTbank.scala 204:26]
    cosLUTBank1[218] <= UInt<30>("h3f3f3a40") @[LUTbank.scala 204:26]
    cosLUTBank1[219] <= UInt<30>("h3f3ef757") @[LUTbank.scala 204:26]
    cosLUTBank1[220] <= UInt<30>("h3f3eb450") @[LUTbank.scala 204:26]
    cosLUTBank1[221] <= UInt<30>("h3f3e712c") @[LUTbank.scala 204:26]
    cosLUTBank1[222] <= UInt<30>("h3f3e2dea") @[LUTbank.scala 204:26]
    cosLUTBank1[223] <= UInt<30>("h3f3dea8b") @[LUTbank.scala 204:26]
    cosLUTBank1[224] <= UInt<30>("h3f3da70f") @[LUTbank.scala 204:26]
    cosLUTBank1[225] <= UInt<30>("h3f3d6376") @[LUTbank.scala 204:26]
    cosLUTBank1[226] <= UInt<30>("h3f3d1fbf") @[LUTbank.scala 204:26]
    cosLUTBank1[227] <= UInt<30>("h3f3cdbeb") @[LUTbank.scala 204:26]
    cosLUTBank1[228] <= UInt<30>("h3f3c97fa") @[LUTbank.scala 204:26]
    cosLUTBank1[229] <= UInt<30>("h3f3c53ec") @[LUTbank.scala 204:26]
    cosLUTBank1[230] <= UInt<30>("h3f3c0fc1") @[LUTbank.scala 204:26]
    cosLUTBank1[231] <= UInt<30>("h3f3bcb79") @[LUTbank.scala 204:26]
    cosLUTBank1[232] <= UInt<30>("h3f3b8713") @[LUTbank.scala 204:26]
    cosLUTBank1[233] <= UInt<30>("h3f3b4291") @[LUTbank.scala 204:26]
    cosLUTBank1[234] <= UInt<30>("h3f3afdf2") @[LUTbank.scala 204:26]
    cosLUTBank1[235] <= UInt<30>("h3f3ab937") @[LUTbank.scala 204:26]
    cosLUTBank1[236] <= UInt<30>("h3f3a745e") @[LUTbank.scala 204:26]
    cosLUTBank1[237] <= UInt<30>("h3f3a2f68") @[LUTbank.scala 204:26]
    cosLUTBank1[238] <= UInt<30>("h3f39ea56") @[LUTbank.scala 204:26]
    cosLUTBank1[239] <= UInt<30>("h3f39a528") @[LUTbank.scala 204:26]
    cosLUTBank1[240] <= UInt<30>("h3f395fdc") @[LUTbank.scala 204:26]
    cosLUTBank1[241] <= UInt<30>("h3f391a74") @[LUTbank.scala 204:26]
    cosLUTBank1[242] <= UInt<30>("h3f38d4ef") @[LUTbank.scala 204:26]
    cosLUTBank1[243] <= UInt<30>("h3f388f4e") @[LUTbank.scala 204:26]
    cosLUTBank1[244] <= UInt<30>("h3f384991") @[LUTbank.scala 204:26]
    cosLUTBank1[245] <= UInt<30>("h3f3803b7") @[LUTbank.scala 204:26]
    cosLUTBank1[246] <= UInt<30>("h3f37bdc0") @[LUTbank.scala 204:26]
    cosLUTBank1[247] <= UInt<30>("h3f3777ad") @[LUTbank.scala 204:26]
    cosLUTBank1[248] <= UInt<30>("h3f37317e") @[LUTbank.scala 204:26]
    cosLUTBank1[249] <= UInt<30>("h3f36eb33") @[LUTbank.scala 204:26]
    cosLUTBank1[250] <= UInt<30>("h3f36a4cb") @[LUTbank.scala 204:26]
    cosLUTBank1[251] <= UInt<30>("h3f365e48") @[LUTbank.scala 204:26]
    cosLUTBank1[252] <= UInt<30>("h3f3617a8") @[LUTbank.scala 204:26]
    cosLUTBank1[253] <= UInt<30>("h3f35d0ec") @[LUTbank.scala 204:26]
    cosLUTBank1[254] <= UInt<30>("h3f358a14") @[LUTbank.scala 204:26]
    cosLUTBank1[255] <= UInt<30>("h3f354320") @[LUTbank.scala 204:26]
    wire cosLUTBank2 : UInt<30>[256] @[LUTbank.scala 233:26]
    cosLUTBank2[0] <= UInt<30>("h3f34fc10") @[LUTbank.scala 233:26]
    cosLUTBank2[1] <= UInt<30>("h3f34b4e4") @[LUTbank.scala 233:26]
    cosLUTBank2[2] <= UInt<30>("h3f346d9c") @[LUTbank.scala 233:26]
    cosLUTBank2[3] <= UInt<30>("h3f342638") @[LUTbank.scala 233:26]
    cosLUTBank2[4] <= UInt<30>("h3f33deb9") @[LUTbank.scala 233:26]
    cosLUTBank2[5] <= UInt<30>("h3f33971e") @[LUTbank.scala 233:26]
    cosLUTBank2[6] <= UInt<30>("h3f334f67") @[LUTbank.scala 233:26]
    cosLUTBank2[7] <= UInt<30>("h3f330794") @[LUTbank.scala 233:26]
    cosLUTBank2[8] <= UInt<30>("h3f32bfa6") @[LUTbank.scala 233:26]
    cosLUTBank2[9] <= UInt<30>("h3f32779c") @[LUTbank.scala 233:26]
    cosLUTBank2[10] <= UInt<30>("h3f322f77") @[LUTbank.scala 233:26]
    cosLUTBank2[11] <= UInt<30>("h3f31e736") @[LUTbank.scala 233:26]
    cosLUTBank2[12] <= UInt<30>("h3f319eda") @[LUTbank.scala 233:26]
    cosLUTBank2[13] <= UInt<30>("h3f315662") @[LUTbank.scala 233:26]
    cosLUTBank2[14] <= UInt<30>("h3f310dcf") @[LUTbank.scala 233:26]
    cosLUTBank2[15] <= UInt<30>("h3f30c521") @[LUTbank.scala 233:26]
    cosLUTBank2[16] <= UInt<30>("h3f307c57") @[LUTbank.scala 233:26]
    cosLUTBank2[17] <= UInt<30>("h3f303372") @[LUTbank.scala 233:26]
    cosLUTBank2[18] <= UInt<30>("h3f2fea72") @[LUTbank.scala 233:26]
    cosLUTBank2[19] <= UInt<30>("h3f2fa157") @[LUTbank.scala 233:26]
    cosLUTBank2[20] <= UInt<30>("h3f2f5821") @[LUTbank.scala 233:26]
    cosLUTBank2[21] <= UInt<30>("h3f2f0ed0") @[LUTbank.scala 233:26]
    cosLUTBank2[22] <= UInt<30>("h3f2ec563") @[LUTbank.scala 233:26]
    cosLUTBank2[23] <= UInt<30>("h3f2e7bdc") @[LUTbank.scala 233:26]
    cosLUTBank2[24] <= UInt<30>("h3f2e323a") @[LUTbank.scala 233:26]
    cosLUTBank2[25] <= UInt<30>("h3f2de87d") @[LUTbank.scala 233:26]
    cosLUTBank2[26] <= UInt<30>("h3f2d9ea5") @[LUTbank.scala 233:26]
    cosLUTBank2[27] <= UInt<30>("h3f2d54b2") @[LUTbank.scala 233:26]
    cosLUTBank2[28] <= UInt<30>("h3f2d0aa5") @[LUTbank.scala 233:26]
    cosLUTBank2[29] <= UInt<30>("h3f2cc07c") @[LUTbank.scala 233:26]
    cosLUTBank2[30] <= UInt<30>("h3f2c763a") @[LUTbank.scala 233:26]
    cosLUTBank2[31] <= UInt<30>("h3f2c2bdc") @[LUTbank.scala 233:26]
    cosLUTBank2[32] <= UInt<30>("h3f2be164") @[LUTbank.scala 233:26]
    cosLUTBank2[33] <= UInt<30>("h3f2b96d2") @[LUTbank.scala 233:26]
    cosLUTBank2[34] <= UInt<30>("h3f2b4c25") @[LUTbank.scala 233:26]
    cosLUTBank2[35] <= UInt<30>("h3f2b015d") @[LUTbank.scala 233:26]
    cosLUTBank2[36] <= UInt<30>("h3f2ab67c") @[LUTbank.scala 233:26]
    cosLUTBank2[37] <= UInt<30>("h3f2a6b7f") @[LUTbank.scala 233:26]
    cosLUTBank2[38] <= UInt<30>("h3f2a2069") @[LUTbank.scala 233:26]
    cosLUTBank2[39] <= UInt<30>("h3f29d538") @[LUTbank.scala 233:26]
    cosLUTBank2[40] <= UInt<30>("h3f2989ed") @[LUTbank.scala 233:26]
    cosLUTBank2[41] <= UInt<30>("h3f293e88") @[LUTbank.scala 233:26]
    cosLUTBank2[42] <= UInt<30>("h3f28f309") @[LUTbank.scala 233:26]
    cosLUTBank2[43] <= UInt<30>("h3f28a770") @[LUTbank.scala 233:26]
    cosLUTBank2[44] <= UInt<30>("h3f285bbd") @[LUTbank.scala 233:26]
    cosLUTBank2[45] <= UInt<30>("h3f280ff0") @[LUTbank.scala 233:26]
    cosLUTBank2[46] <= UInt<30>("h3f27c409") @[LUTbank.scala 233:26]
    cosLUTBank2[47] <= UInt<30>("h3f277808") @[LUTbank.scala 233:26]
    cosLUTBank2[48] <= UInt<30>("h3f272bed") @[LUTbank.scala 233:26]
    cosLUTBank2[49] <= UInt<30>("h3f26dfb8") @[LUTbank.scala 233:26]
    cosLUTBank2[50] <= UInt<30>("h3f26936a") @[LUTbank.scala 233:26]
    cosLUTBank2[51] <= UInt<30>("h3f264702") @[LUTbank.scala 233:26]
    cosLUTBank2[52] <= UInt<30>("h3f25fa80") @[LUTbank.scala 233:26]
    cosLUTBank2[53] <= UInt<30>("h3f25ade4") @[LUTbank.scala 233:26]
    cosLUTBank2[54] <= UInt<30>("h3f256130") @[LUTbank.scala 233:26]
    cosLUTBank2[55] <= UInt<30>("h3f251461") @[LUTbank.scala 233:26]
    cosLUTBank2[56] <= UInt<30>("h3f24c779") @[LUTbank.scala 233:26]
    cosLUTBank2[57] <= UInt<30>("h3f247a78") @[LUTbank.scala 233:26]
    cosLUTBank2[58] <= UInt<30>("h3f242d5d") @[LUTbank.scala 233:26]
    cosLUTBank2[59] <= UInt<30>("h3f23e029") @[LUTbank.scala 233:26]
    cosLUTBank2[60] <= UInt<30>("h3f2392dc") @[LUTbank.scala 233:26]
    cosLUTBank2[61] <= UInt<30>("h3f234575") @[LUTbank.scala 233:26]
    cosLUTBank2[62] <= UInt<30>("h3f22f7f5") @[LUTbank.scala 233:26]
    cosLUTBank2[63] <= UInt<30>("h3f22aa5d") @[LUTbank.scala 233:26]
    cosLUTBank2[64] <= UInt<30>("h3f225cab") @[LUTbank.scala 233:26]
    cosLUTBank2[65] <= UInt<30>("h3f220ee0") @[LUTbank.scala 233:26]
    cosLUTBank2[66] <= UInt<30>("h3f21c0fc") @[LUTbank.scala 233:26]
    cosLUTBank2[67] <= UInt<30>("h3f2172ff") @[LUTbank.scala 233:26]
    cosLUTBank2[68] <= UInt<30>("h3f2124e9") @[LUTbank.scala 233:26]
    cosLUTBank2[69] <= UInt<30>("h3f20d6ba") @[LUTbank.scala 233:26]
    cosLUTBank2[70] <= UInt<30>("h3f208872") @[LUTbank.scala 233:26]
    cosLUTBank2[71] <= UInt<30>("h3f203a12") @[LUTbank.scala 233:26]
    cosLUTBank2[72] <= UInt<30>("h3f1feb99") @[LUTbank.scala 233:26]
    cosLUTBank2[73] <= UInt<30>("h3f1f9d07") @[LUTbank.scala 233:26]
    cosLUTBank2[74] <= UInt<30>("h3f1f4e5d") @[LUTbank.scala 233:26]
    cosLUTBank2[75] <= UInt<30>("h3f1eff9a") @[LUTbank.scala 233:26]
    cosLUTBank2[76] <= UInt<30>("h3f1eb0be") @[LUTbank.scala 233:26]
    cosLUTBank2[77] <= UInt<30>("h3f1e61ca") @[LUTbank.scala 233:26]
    cosLUTBank2[78] <= UInt<30>("h3f1e12be") @[LUTbank.scala 233:26]
    cosLUTBank2[79] <= UInt<30>("h3f1dc399") @[LUTbank.scala 233:26]
    cosLUTBank2[80] <= UInt<30>("h3f1d745c") @[LUTbank.scala 233:26]
    cosLUTBank2[81] <= UInt<30>("h3f1d2507") @[LUTbank.scala 233:26]
    cosLUTBank2[82] <= UInt<30>("h3f1cd599") @[LUTbank.scala 233:26]
    cosLUTBank2[83] <= UInt<30>("h3f1c8613") @[LUTbank.scala 233:26]
    cosLUTBank2[84] <= UInt<30>("h3f1c3675") @[LUTbank.scala 233:26]
    cosLUTBank2[85] <= UInt<30>("h3f1be6bf") @[LUTbank.scala 233:26]
    cosLUTBank2[86] <= UInt<30>("h3f1b96f1") @[LUTbank.scala 233:26]
    cosLUTBank2[87] <= UInt<30>("h3f1b470a") @[LUTbank.scala 233:26]
    cosLUTBank2[88] <= UInt<30>("h3f1af70c") @[LUTbank.scala 233:26]
    cosLUTBank2[89] <= UInt<30>("h3f1aa6f6") @[LUTbank.scala 233:26]
    cosLUTBank2[90] <= UInt<30>("h3f1a56c8") @[LUTbank.scala 233:26]
    cosLUTBank2[91] <= UInt<30>("h3f1a0683") @[LUTbank.scala 233:26]
    cosLUTBank2[92] <= UInt<30>("h3f19b625") @[LUTbank.scala 233:26]
    cosLUTBank2[93] <= UInt<30>("h3f1965b0") @[LUTbank.scala 233:26]
    cosLUTBank2[94] <= UInt<30>("h3f191523") @[LUTbank.scala 233:26]
    cosLUTBank2[95] <= UInt<30>("h3f18c47f") @[LUTbank.scala 233:26]
    cosLUTBank2[96] <= UInt<30>("h3f1873c2") @[LUTbank.scala 233:26]
    cosLUTBank2[97] <= UInt<30>("h3f1822ef") @[LUTbank.scala 233:26]
    cosLUTBank2[98] <= UInt<30>("h3f17d204") @[LUTbank.scala 233:26]
    cosLUTBank2[99] <= UInt<30>("h3f178101") @[LUTbank.scala 233:26]
    cosLUTBank2[100] <= UInt<30>("h3f172fe8") @[LUTbank.scala 233:26]
    cosLUTBank2[101] <= UInt<30>("h3f16deb6") @[LUTbank.scala 233:26]
    cosLUTBank2[102] <= UInt<30>("h3f168d6e") @[LUTbank.scala 233:26]
    cosLUTBank2[103] <= UInt<30>("h3f163c0e") @[LUTbank.scala 233:26]
    cosLUTBank2[104] <= UInt<30>("h3f15ea97") @[LUTbank.scala 233:26]
    cosLUTBank2[105] <= UInt<30>("h3f159909") @[LUTbank.scala 233:26]
    cosLUTBank2[106] <= UInt<30>("h3f154764") @[LUTbank.scala 233:26]
    cosLUTBank2[107] <= UInt<30>("h3f14f5a8") @[LUTbank.scala 233:26]
    cosLUTBank2[108] <= UInt<30>("h3f14a3d5") @[LUTbank.scala 233:26]
    cosLUTBank2[109] <= UInt<30>("h3f1451eb") @[LUTbank.scala 233:26]
    cosLUTBank2[110] <= UInt<30>("h3f13ffea") @[LUTbank.scala 233:26]
    cosLUTBank2[111] <= UInt<30>("h3f13add2") @[LUTbank.scala 233:26]
    cosLUTBank2[112] <= UInt<30>("h3f135ba4") @[LUTbank.scala 233:26]
    cosLUTBank2[113] <= UInt<30>("h3f13095f") @[LUTbank.scala 233:26]
    cosLUTBank2[114] <= UInt<30>("h3f12b703") @[LUTbank.scala 233:26]
    cosLUTBank2[115] <= UInt<30>("h3f126490") @[LUTbank.scala 233:26]
    cosLUTBank2[116] <= UInt<30>("h3f121207") @[LUTbank.scala 233:26]
    cosLUTBank2[117] <= UInt<30>("h3f11bf67") @[LUTbank.scala 233:26]
    cosLUTBank2[118] <= UInt<30>("h3f116cb1") @[LUTbank.scala 233:26]
    cosLUTBank2[119] <= UInt<30>("h3f1119e4") @[LUTbank.scala 233:26]
    cosLUTBank2[120] <= UInt<30>("h3f10c701") @[LUTbank.scala 233:26]
    cosLUTBank2[121] <= UInt<30>("h3f107408") @[LUTbank.scala 233:26]
    cosLUTBank2[122] <= UInt<30>("h3f1020f8") @[LUTbank.scala 233:26]
    cosLUTBank2[123] <= UInt<30>("h3f0fcdd2") @[LUTbank.scala 233:26]
    cosLUTBank2[124] <= UInt<30>("h3f0f7a96") @[LUTbank.scala 233:26]
    cosLUTBank2[125] <= UInt<30>("h3f0f2744") @[LUTbank.scala 233:26]
    cosLUTBank2[126] <= UInt<30>("h3f0ed3dc") @[LUTbank.scala 233:26]
    cosLUTBank2[127] <= UInt<30>("h3f0e805d") @[LUTbank.scala 233:26]
    cosLUTBank2[128] <= UInt<30>("h3f0e2cc9") @[LUTbank.scala 233:26]
    cosLUTBank2[129] <= UInt<30>("h3f0dd91f") @[LUTbank.scala 233:26]
    cosLUTBank2[130] <= UInt<30>("h3f0d855f") @[LUTbank.scala 233:26]
    cosLUTBank2[131] <= UInt<30>("h3f0d3189") @[LUTbank.scala 233:26]
    cosLUTBank2[132] <= UInt<30>("h3f0cdd9d") @[LUTbank.scala 233:26]
    cosLUTBank2[133] <= UInt<30>("h3f0c899c") @[LUTbank.scala 233:26]
    cosLUTBank2[134] <= UInt<30>("h3f0c3584") @[LUTbank.scala 233:26]
    cosLUTBank2[135] <= UInt<30>("h3f0be158") @[LUTbank.scala 233:26]
    cosLUTBank2[136] <= UInt<30>("h3f0b8d15") @[LUTbank.scala 233:26]
    cosLUTBank2[137] <= UInt<30>("h3f0b38bd") @[LUTbank.scala 233:26]
    cosLUTBank2[138] <= UInt<30>("h3f0ae450") @[LUTbank.scala 233:26]
    cosLUTBank2[139] <= UInt<30>("h3f0a8fcd") @[LUTbank.scala 233:26]
    cosLUTBank2[140] <= UInt<30>("h3f0a3b35") @[LUTbank.scala 233:26]
    cosLUTBank2[141] <= UInt<30>("h3f09e687") @[LUTbank.scala 233:26]
    cosLUTBank2[142] <= UInt<30>("h3f0991c4") @[LUTbank.scala 233:26]
    cosLUTBank2[143] <= UInt<30>("h3f093cec") @[LUTbank.scala 233:26]
    cosLUTBank2[144] <= UInt<30>("h3f08e7ff") @[LUTbank.scala 233:26]
    cosLUTBank2[145] <= UInt<30>("h3f0892fd") @[LUTbank.scala 233:26]
    cosLUTBank2[146] <= UInt<30>("h3f083de5") @[LUTbank.scala 233:26]
    cosLUTBank2[147] <= UInt<30>("h3f07e8b9") @[LUTbank.scala 233:26]
    cosLUTBank2[148] <= UInt<30>("h3f079378") @[LUTbank.scala 233:26]
    cosLUTBank2[149] <= UInt<30>("h3f073e21") @[LUTbank.scala 233:26]
    cosLUTBank2[150] <= UInt<30>("h3f06e8b6") @[LUTbank.scala 233:26]
    cosLUTBank2[151] <= UInt<30>("h3f069336") @[LUTbank.scala 233:26]
    cosLUTBank2[152] <= UInt<30>("h3f063da1") @[LUTbank.scala 233:26]
    cosLUTBank2[153] <= UInt<30>("h3f05e7f8") @[LUTbank.scala 233:26]
    cosLUTBank2[154] <= UInt<30>("h3f05923a") @[LUTbank.scala 233:26]
    cosLUTBank2[155] <= UInt<30>("h3f053c67") @[LUTbank.scala 233:26]
    cosLUTBank2[156] <= UInt<30>("h3f04e680") @[LUTbank.scala 233:26]
    cosLUTBank2[157] <= UInt<30>("h3f049084") @[LUTbank.scala 233:26]
    cosLUTBank2[158] <= UInt<30>("h3f043a74") @[LUTbank.scala 233:26]
    cosLUTBank2[159] <= UInt<30>("h3f03e44f") @[LUTbank.scala 233:26]
    cosLUTBank2[160] <= UInt<30>("h3f038e16") @[LUTbank.scala 233:26]
    cosLUTBank2[161] <= UInt<30>("h3f0337c9") @[LUTbank.scala 233:26]
    cosLUTBank2[162] <= UInt<30>("h3f02e167") @[LUTbank.scala 233:26]
    cosLUTBank2[163] <= UInt<30>("h3f028af1") @[LUTbank.scala 233:26]
    cosLUTBank2[164] <= UInt<30>("h3f023468") @[LUTbank.scala 233:26]
    cosLUTBank2[165] <= UInt<30>("h3f01ddca") @[LUTbank.scala 233:26]
    cosLUTBank2[166] <= UInt<30>("h3f018718") @[LUTbank.scala 233:26]
    cosLUTBank2[167] <= UInt<30>("h3f013052") @[LUTbank.scala 233:26]
    cosLUTBank2[168] <= UInt<30>("h3f00d978") @[LUTbank.scala 233:26]
    cosLUTBank2[169] <= UInt<30>("h3f00828a") @[LUTbank.scala 233:26]
    cosLUTBank2[170] <= UInt<30>("h3f002b88") @[LUTbank.scala 233:26]
    cosLUTBank2[171] <= UInt<30>("h3effa8e6") @[LUTbank.scala 233:26]
    cosLUTBank2[172] <= UInt<30>("h3efefa93") @[LUTbank.scala 233:26]
    cosLUTBank2[173] <= UInt<30>("h3efe4c1a") @[LUTbank.scala 233:26]
    cosLUTBank2[174] <= UInt<30>("h3efd9d79") @[LUTbank.scala 233:26]
    cosLUTBank2[175] <= UInt<30>("h3efceeb1") @[LUTbank.scala 233:26]
    cosLUTBank2[176] <= UInt<30>("h3efc3fc2") @[LUTbank.scala 233:26]
    cosLUTBank2[177] <= UInt<30>("h3efb90ac") @[LUTbank.scala 233:26]
    cosLUTBank2[178] <= UInt<30>("h3efae16f") @[LUTbank.scala 233:26]
    cosLUTBank2[179] <= UInt<30>("h3efa320c") @[LUTbank.scala 233:26]
    cosLUTBank2[180] <= UInt<30>("h3ef98282") @[LUTbank.scala 233:26]
    cosLUTBank2[181] <= UInt<30>("h3ef8d2d1") @[LUTbank.scala 233:26]
    cosLUTBank2[182] <= UInt<30>("h3ef822fa") @[LUTbank.scala 233:26]
    cosLUTBank2[183] <= UInt<30>("h3ef772fd") @[LUTbank.scala 233:26]
    cosLUTBank2[184] <= UInt<30>("h3ef6c2da") @[LUTbank.scala 233:26]
    cosLUTBank2[185] <= UInt<30>("h3ef61290") @[LUTbank.scala 233:26]
    cosLUTBank2[186] <= UInt<30>("h3ef56221") @[LUTbank.scala 233:26]
    cosLUTBank2[187] <= UInt<30>("h3ef4b18c") @[LUTbank.scala 233:26]
    cosLUTBank2[188] <= UInt<30>("h3ef400d1") @[LUTbank.scala 233:26]
    cosLUTBank2[189] <= UInt<30>("h3ef34ff0") @[LUTbank.scala 233:26]
    cosLUTBank2[190] <= UInt<30>("h3ef29eea") @[LUTbank.scala 233:26]
    cosLUTBank2[191] <= UInt<30>("h3ef1edbe") @[LUTbank.scala 233:26]
    cosLUTBank2[192] <= UInt<30>("h3ef13c6d") @[LUTbank.scala 233:26]
    cosLUTBank2[193] <= UInt<30>("h3ef08af7") @[LUTbank.scala 233:26]
    cosLUTBank2[194] <= UInt<30>("h3eefd95c") @[LUTbank.scala 233:26]
    cosLUTBank2[195] <= UInt<30>("h3eef279b") @[LUTbank.scala 233:26]
    cosLUTBank2[196] <= UInt<30>("h3eee75b6") @[LUTbank.scala 233:26]
    cosLUTBank2[197] <= UInt<30>("h3eedc3ac") @[LUTbank.scala 233:26]
    cosLUTBank2[198] <= UInt<30>("h3eed117d") @[LUTbank.scala 233:26]
    cosLUTBank2[199] <= UInt<30>("h3eec5f2a") @[LUTbank.scala 233:26]
    cosLUTBank2[200] <= UInt<30>("h3eebacb2") @[LUTbank.scala 233:26]
    cosLUTBank2[201] <= UInt<30>("h3eeafa16") @[LUTbank.scala 233:26]
    cosLUTBank2[202] <= UInt<30>("h3eea4756") @[LUTbank.scala 233:26]
    cosLUTBank2[203] <= UInt<30>("h3ee99471") @[LUTbank.scala 233:26]
    cosLUTBank2[204] <= UInt<30>("h3ee8e169") @[LUTbank.scala 233:26]
    cosLUTBank2[205] <= UInt<30>("h3ee82e3c") @[LUTbank.scala 233:26]
    cosLUTBank2[206] <= UInt<30>("h3ee77aec") @[LUTbank.scala 233:26]
    cosLUTBank2[207] <= UInt<30>("h3ee6c778") @[LUTbank.scala 233:26]
    cosLUTBank2[208] <= UInt<30>("h3ee613e1") @[LUTbank.scala 233:26]
    cosLUTBank2[209] <= UInt<30>("h3ee56025") @[LUTbank.scala 233:26]
    cosLUTBank2[210] <= UInt<30>("h3ee4ac47") @[LUTbank.scala 233:26]
    cosLUTBank2[211] <= UInt<30>("h3ee3f845") @[LUTbank.scala 233:26]
    cosLUTBank2[212] <= UInt<30>("h3ee34420") @[LUTbank.scala 233:26]
    cosLUTBank2[213] <= UInt<30>("h3ee28fd8") @[LUTbank.scala 233:26]
    cosLUTBank2[214] <= UInt<30>("h3ee1db6d") @[LUTbank.scala 233:26]
    cosLUTBank2[215] <= UInt<30>("h3ee126df") @[LUTbank.scala 233:26]
    cosLUTBank2[216] <= UInt<30>("h3ee0722f") @[LUTbank.scala 233:26]
    cosLUTBank2[217] <= UInt<30>("h3edfbd5c") @[LUTbank.scala 233:26]
    cosLUTBank2[218] <= UInt<30>("h3edf0866") @[LUTbank.scala 233:26]
    cosLUTBank2[219] <= UInt<30>("h3ede534e") @[LUTbank.scala 233:26]
    cosLUTBank2[220] <= UInt<30>("h3edd9e13") @[LUTbank.scala 233:26]
    cosLUTBank2[221] <= UInt<30>("h3edce8b7") @[LUTbank.scala 233:26]
    cosLUTBank2[222] <= UInt<30>("h3edc3338") @[LUTbank.scala 233:26]
    cosLUTBank2[223] <= UInt<30>("h3edb7d97") @[LUTbank.scala 233:26]
    cosLUTBank2[224] <= UInt<30>("h3edac7d5") @[LUTbank.scala 233:26]
    cosLUTBank2[225] <= UInt<30>("h3eda11f1") @[LUTbank.scala 233:26]
    cosLUTBank2[226] <= UInt<30>("h3ed95beb") @[LUTbank.scala 233:26]
    cosLUTBank2[227] <= UInt<30>("h3ed8a5c3") @[LUTbank.scala 233:26]
    cosLUTBank2[228] <= UInt<30>("h3ed7ef7a") @[LUTbank.scala 233:26]
    cosLUTBank2[229] <= UInt<30>("h3ed73910") @[LUTbank.scala 233:26]
    cosLUTBank2[230] <= UInt<30>("h3ed68285") @[LUTbank.scala 233:26]
    cosLUTBank2[231] <= UInt<30>("h3ed5cbd8") @[LUTbank.scala 233:26]
    cosLUTBank2[232] <= UInt<30>("h3ed5150b") @[LUTbank.scala 233:26]
    cosLUTBank2[233] <= UInt<30>("h3ed45e1c") @[LUTbank.scala 233:26]
    cosLUTBank2[234] <= UInt<30>("h3ed3a70d") @[LUTbank.scala 233:26]
    cosLUTBank2[235] <= UInt<30>("h3ed2efdd") @[LUTbank.scala 233:26]
    cosLUTBank2[236] <= UInt<30>("h3ed2388d") @[LUTbank.scala 233:26]
    cosLUTBank2[237] <= UInt<30>("h3ed1811c") @[LUTbank.scala 233:26]
    cosLUTBank2[238] <= UInt<30>("h3ed0c98b") @[LUTbank.scala 233:26]
    cosLUTBank2[239] <= UInt<30>("h3ed011da") @[LUTbank.scala 233:26]
    cosLUTBank2[240] <= UInt<30>("h3ecf5a08") @[LUTbank.scala 233:26]
    cosLUTBank2[241] <= UInt<30>("h3ecea217") @[LUTbank.scala 233:26]
    cosLUTBank2[242] <= UInt<30>("h3ecdea06") @[LUTbank.scala 233:26]
    cosLUTBank2[243] <= UInt<30>("h3ecd31d4") @[LUTbank.scala 233:26]
    cosLUTBank2[244] <= UInt<30>("h3ecc7984") @[LUTbank.scala 233:26]
    cosLUTBank2[245] <= UInt<30>("h3ecbc113") @[LUTbank.scala 233:26]
    cosLUTBank2[246] <= UInt<30>("h3ecb0884") @[LUTbank.scala 233:26]
    cosLUTBank2[247] <= UInt<30>("h3eca4fd5") @[LUTbank.scala 233:26]
    cosLUTBank2[248] <= UInt<30>("h3ec99706") @[LUTbank.scala 233:26]
    cosLUTBank2[249] <= UInt<30>("h3ec8de19") @[LUTbank.scala 233:26]
    cosLUTBank2[250] <= UInt<30>("h3ec8250d") @[LUTbank.scala 233:26]
    cosLUTBank2[251] <= UInt<30>("h3ec76be2") @[LUTbank.scala 233:26]
    cosLUTBank2[252] <= UInt<30>("h3ec6b298") @[LUTbank.scala 233:26]
    cosLUTBank2[253] <= UInt<30>("h3ec5f92f") @[LUTbank.scala 233:26]
    cosLUTBank2[254] <= UInt<30>("h3ec53fa8") @[LUTbank.scala 233:26]
    cosLUTBank2[255] <= UInt<30>("h3ec48602") @[LUTbank.scala 233:26]
    wire cosLUTBank3 : UInt<30>[257] @[LUTbank.scala 262:26]
    cosLUTBank3[0] <= UInt<30>("h3ec3cc3e") @[LUTbank.scala 262:26]
    cosLUTBank3[1] <= UInt<30>("h3ec3125c") @[LUTbank.scala 262:26]
    cosLUTBank3[2] <= UInt<30>("h3ec2585c") @[LUTbank.scala 262:26]
    cosLUTBank3[3] <= UInt<30>("h3ec19e3e") @[LUTbank.scala 262:26]
    cosLUTBank3[4] <= UInt<30>("h3ec0e401") @[LUTbank.scala 262:26]
    cosLUTBank3[5] <= UInt<30>("h3ec029a8") @[LUTbank.scala 262:26]
    cosLUTBank3[6] <= UInt<30>("h3ebf6f30") @[LUTbank.scala 262:26]
    cosLUTBank3[7] <= UInt<30>("h3ebeb49b") @[LUTbank.scala 262:26]
    cosLUTBank3[8] <= UInt<30>("h3ebdf9e8") @[LUTbank.scala 262:26]
    cosLUTBank3[9] <= UInt<30>("h3ebd3f19") @[LUTbank.scala 262:26]
    cosLUTBank3[10] <= UInt<30>("h3ebc842c") @[LUTbank.scala 262:26]
    cosLUTBank3[11] <= UInt<30>("h3ebbc922") @[LUTbank.scala 262:26]
    cosLUTBank3[12] <= UInt<30>("h3ebb0dfb") @[LUTbank.scala 262:26]
    cosLUTBank3[13] <= UInt<30>("h3eba52b7") @[LUTbank.scala 262:26]
    cosLUTBank3[14] <= UInt<30>("h3eb99756") @[LUTbank.scala 262:26]
    cosLUTBank3[15] <= UInt<30>("h3eb8dbd9") @[LUTbank.scala 262:26]
    cosLUTBank3[16] <= UInt<30>("h3eb8203f") @[LUTbank.scala 262:26]
    cosLUTBank3[17] <= UInt<30>("h3eb76489") @[LUTbank.scala 262:26]
    cosLUTBank3[18] <= UInt<30>("h3eb6a8b6") @[LUTbank.scala 262:26]
    cosLUTBank3[19] <= UInt<30>("h3eb5ecc7") @[LUTbank.scala 262:26]
    cosLUTBank3[20] <= UInt<30>("h3eb530bd") @[LUTbank.scala 262:26]
    cosLUTBank3[21] <= UInt<30>("h3eb47496") @[LUTbank.scala 262:26]
    cosLUTBank3[22] <= UInt<30>("h3eb3b853") @[LUTbank.scala 262:26]
    cosLUTBank3[23] <= UInt<30>("h3eb2fbf5") @[LUTbank.scala 262:26]
    cosLUTBank3[24] <= UInt<30>("h3eb23f7b") @[LUTbank.scala 262:26]
    cosLUTBank3[25] <= UInt<30>("h3eb182e6") @[LUTbank.scala 262:26]
    cosLUTBank3[26] <= UInt<30>("h3eb0c635") @[LUTbank.scala 262:26]
    cosLUTBank3[27] <= UInt<30>("h3eb00969") @[LUTbank.scala 262:26]
    cosLUTBank3[28] <= UInt<30>("h3eaf4c82") @[LUTbank.scala 262:26]
    cosLUTBank3[29] <= UInt<30>("h3eae8f7f") @[LUTbank.scala 262:26]
    cosLUTBank3[30] <= UInt<30>("h3eadd262") @[LUTbank.scala 262:26]
    cosLUTBank3[31] <= UInt<30>("h3ead152a") @[LUTbank.scala 262:26]
    cosLUTBank3[32] <= UInt<30>("h3eac57d7") @[LUTbank.scala 262:26]
    cosLUTBank3[33] <= UInt<30>("h3eab9a6a") @[LUTbank.scala 262:26]
    cosLUTBank3[34] <= UInt<30>("h3eaadce2") @[LUTbank.scala 262:26]
    cosLUTBank3[35] <= UInt<30>("h3eaa1f40") @[LUTbank.scala 262:26]
    cosLUTBank3[36] <= UInt<30>("h3ea96184") @[LUTbank.scala 262:26]
    cosLUTBank3[37] <= UInt<30>("h3ea8a3ad") @[LUTbank.scala 262:26]
    cosLUTBank3[38] <= UInt<30>("h3ea7e5bd") @[LUTbank.scala 262:26]
    cosLUTBank3[39] <= UInt<30>("h3ea727b2") @[LUTbank.scala 262:26]
    cosLUTBank3[40] <= UInt<30>("h3ea6698e") @[LUTbank.scala 262:26]
    cosLUTBank3[41] <= UInt<30>("h3ea5ab50") @[LUTbank.scala 262:26]
    cosLUTBank3[42] <= UInt<30>("h3ea4ecf8") @[LUTbank.scala 262:26]
    cosLUTBank3[43] <= UInt<30>("h3ea42e88") @[LUTbank.scala 262:26]
    cosLUTBank3[44] <= UInt<30>("h3ea36ffd") @[LUTbank.scala 262:26]
    cosLUTBank3[45] <= UInt<30>("h3ea2b15a") @[LUTbank.scala 262:26]
    cosLUTBank3[46] <= UInt<30>("h3ea1f29d") @[LUTbank.scala 262:26]
    cosLUTBank3[47] <= UInt<30>("h3ea133c8") @[LUTbank.scala 262:26]
    cosLUTBank3[48] <= UInt<30>("h3ea074d9") @[LUTbank.scala 262:26]
    cosLUTBank3[49] <= UInt<30>("h3e9fb5d2") @[LUTbank.scala 262:26]
    cosLUTBank3[50] <= UInt<30>("h3e9ef6b2") @[LUTbank.scala 262:26]
    cosLUTBank3[51] <= UInt<30>("h3e9e377a") @[LUTbank.scala 262:26]
    cosLUTBank3[52] <= UInt<30>("h3e9d7829") @[LUTbank.scala 262:26]
    cosLUTBank3[53] <= UInt<30>("h3e9cb8c0") @[LUTbank.scala 262:26]
    cosLUTBank3[54] <= UInt<30>("h3e9bf93f") @[LUTbank.scala 262:26]
    cosLUTBank3[55] <= UInt<30>("h3e9b39a5") @[LUTbank.scala 262:26]
    cosLUTBank3[56] <= UInt<30>("h3e9a79f4") @[LUTbank.scala 262:26]
    cosLUTBank3[57] <= UInt<30>("h3e99ba2b") @[LUTbank.scala 262:26]
    cosLUTBank3[58] <= UInt<30>("h3e98fa4a") @[LUTbank.scala 262:26]
    cosLUTBank3[59] <= UInt<30>("h3e983a52") @[LUTbank.scala 262:26]
    cosLUTBank3[60] <= UInt<30>("h3e977a42") @[LUTbank.scala 262:26]
    cosLUTBank3[61] <= UInt<30>("h3e96ba1a") @[LUTbank.scala 262:26]
    cosLUTBank3[62] <= UInt<30>("h3e95f9dc") @[LUTbank.scala 262:26]
    cosLUTBank3[63] <= UInt<30>("h3e953986") @[LUTbank.scala 262:26]
    cosLUTBank3[64] <= UInt<30>("h3e94791a") @[LUTbank.scala 262:26]
    cosLUTBank3[65] <= UInt<30>("h3e93b896") @[LUTbank.scala 262:26]
    cosLUTBank3[66] <= UInt<30>("h3e92f7fc") @[LUTbank.scala 262:26]
    cosLUTBank3[67] <= UInt<30>("h3e92374a") @[LUTbank.scala 262:26]
    cosLUTBank3[68] <= UInt<30>("h3e917683") @[LUTbank.scala 262:26]
    cosLUTBank3[69] <= UInt<30>("h3e90b5a5") @[LUTbank.scala 262:26]
    cosLUTBank3[70] <= UInt<30>("h3e8ff4b0") @[LUTbank.scala 262:26]
    cosLUTBank3[71] <= UInt<30>("h3e8f33a6") @[LUTbank.scala 262:26]
    cosLUTBank3[72] <= UInt<30>("h3e8e7285") @[LUTbank.scala 262:26]
    cosLUTBank3[73] <= UInt<30>("h3e8db14e") @[LUTbank.scala 262:26]
    cosLUTBank3[74] <= UInt<30>("h3e8cf002") @[LUTbank.scala 262:26]
    cosLUTBank3[75] <= UInt<30>("h3e8c2e9f") @[LUTbank.scala 262:26]
    cosLUTBank3[76] <= UInt<30>("h3e8b6d28") @[LUTbank.scala 262:26]
    cosLUTBank3[77] <= UInt<30>("h3e8aab9a") @[LUTbank.scala 262:26]
    cosLUTBank3[78] <= UInt<30>("h3e89e9f7") @[LUTbank.scala 262:26]
    cosLUTBank3[79] <= UInt<30>("h3e89283f") @[LUTbank.scala 262:26]
    cosLUTBank3[80] <= UInt<30>("h3e886672") @[LUTbank.scala 262:26]
    cosLUTBank3[81] <= UInt<30>("h3e87a490") @[LUTbank.scala 262:26]
    cosLUTBank3[82] <= UInt<30>("h3e86e298") @[LUTbank.scala 262:26]
    cosLUTBank3[83] <= UInt<30>("h3e86208c") @[LUTbank.scala 262:26]
    cosLUTBank3[84] <= UInt<30>("h3e855e6b") @[LUTbank.scala 262:26]
    cosLUTBank3[85] <= UInt<30>("h3e849c36") @[LUTbank.scala 262:26]
    cosLUTBank3[86] <= UInt<30>("h3e83d9ec") @[LUTbank.scala 262:26]
    cosLUTBank3[87] <= UInt<30>("h3e83178e") @[LUTbank.scala 262:26]
    cosLUTBank3[88] <= UInt<30>("h3e82551c") @[LUTbank.scala 262:26]
    cosLUTBank3[89] <= UInt<30>("h3e819295") @[LUTbank.scala 262:26]
    cosLUTBank3[90] <= UInt<30>("h3e80cffb") @[LUTbank.scala 262:26]
    cosLUTBank3[91] <= UInt<30>("h3e800d4d") @[LUTbank.scala 262:26]
    cosLUTBank3[92] <= UInt<30>("h3e7e9515") @[LUTbank.scala 262:26]
    cosLUTBank3[93] <= UInt<30>("h3e7d0f6a") @[LUTbank.scala 262:26]
    cosLUTBank3[94] <= UInt<30>("h3e7b8997") @[LUTbank.scala 262:26]
    cosLUTBank3[95] <= UInt<30>("h3e7a039e") @[LUTbank.scala 262:26]
    cosLUTBank3[96] <= UInt<30>("h3e787d7e") @[LUTbank.scala 262:26]
    cosLUTBank3[97] <= UInt<30>("h3e76f738") @[LUTbank.scala 262:26]
    cosLUTBank3[98] <= UInt<30>("h3e7570cb") @[LUTbank.scala 262:26]
    cosLUTBank3[99] <= UInt<30>("h3e73ea39") @[LUTbank.scala 262:26]
    cosLUTBank3[100] <= UInt<30>("h3e726381") @[LUTbank.scala 262:26]
    cosLUTBank3[101] <= UInt<30>("h3e70dca4") @[LUTbank.scala 262:26]
    cosLUTBank3[102] <= UInt<30>("h3e6f55a2") @[LUTbank.scala 262:26]
    cosLUTBank3[103] <= UInt<30>("h3e6dce7a") @[LUTbank.scala 262:26]
    cosLUTBank3[104] <= UInt<30>("h3e6c472e") @[LUTbank.scala 262:26]
    cosLUTBank3[105] <= UInt<30>("h3e6abfbe") @[LUTbank.scala 262:26]
    cosLUTBank3[106] <= UInt<30>("h3e693829") @[LUTbank.scala 262:26]
    cosLUTBank3[107] <= UInt<30>("h3e67b071") @[LUTbank.scala 262:26]
    cosLUTBank3[108] <= UInt<30>("h3e662894") @[LUTbank.scala 262:26]
    cosLUTBank3[109] <= UInt<30>("h3e64a094") @[LUTbank.scala 262:26]
    cosLUTBank3[110] <= UInt<30>("h3e631871") @[LUTbank.scala 262:26]
    cosLUTBank3[111] <= UInt<30>("h3e61902b") @[LUTbank.scala 262:26]
    cosLUTBank3[112] <= UInt<30>("h3e6007c2") @[LUTbank.scala 262:26]
    cosLUTBank3[113] <= UInt<30>("h3e5e7f36") @[LUTbank.scala 262:26]
    cosLUTBank3[114] <= UInt<30>("h3e5cf688") @[LUTbank.scala 262:26]
    cosLUTBank3[115] <= UInt<30>("h3e5b6db8") @[LUTbank.scala 262:26]
    cosLUTBank3[116] <= UInt<30>("h3e59e4c6") @[LUTbank.scala 262:26]
    cosLUTBank3[117] <= UInt<30>("h3e585bb3") @[LUTbank.scala 262:26]
    cosLUTBank3[118] <= UInt<30>("h3e56d27e") @[LUTbank.scala 262:26]
    cosLUTBank3[119] <= UInt<30>("h3e554928") @[LUTbank.scala 262:26]
    cosLUTBank3[120] <= UInt<30>("h3e53bfb1") @[LUTbank.scala 262:26]
    cosLUTBank3[121] <= UInt<30>("h3e52361a") @[LUTbank.scala 262:26]
    cosLUTBank3[122] <= UInt<30>("h3e50ac61") @[LUTbank.scala 262:26]
    cosLUTBank3[123] <= UInt<30>("h3e4f2289") @[LUTbank.scala 262:26]
    cosLUTBank3[124] <= UInt<30>("h3e4d9891") @[LUTbank.scala 262:26]
    cosLUTBank3[125] <= UInt<30>("h3e4c0e79") @[LUTbank.scala 262:26]
    cosLUTBank3[126] <= UInt<30>("h3e4a8442") @[LUTbank.scala 262:26]
    cosLUTBank3[127] <= UInt<30>("h3e48f9eb") @[LUTbank.scala 262:26]
    cosLUTBank3[128] <= UInt<30>("h3e476f76") @[LUTbank.scala 262:26]
    cosLUTBank3[129] <= UInt<30>("h3e45e4e1") @[LUTbank.scala 262:26]
    cosLUTBank3[130] <= UInt<30>("h3e445a2e") @[LUTbank.scala 262:26]
    cosLUTBank3[131] <= UInt<30>("h3e42cf5d") @[LUTbank.scala 262:26]
    cosLUTBank3[132] <= UInt<30>("h3e41446e") @[LUTbank.scala 262:26]
    cosLUTBank3[133] <= UInt<30>("h3e3fb961") @[LUTbank.scala 262:26]
    cosLUTBank3[134] <= UInt<30>("h3e3e2e36") @[LUTbank.scala 262:26]
    cosLUTBank3[135] <= UInt<30>("h3e3ca2ee") @[LUTbank.scala 262:26]
    cosLUTBank3[136] <= UInt<30>("h3e3b1789") @[LUTbank.scala 262:26]
    cosLUTBank3[137] <= UInt<30>("h3e398c07") @[LUTbank.scala 262:26]
    cosLUTBank3[138] <= UInt<30>("h3e380068") @[LUTbank.scala 262:26]
    cosLUTBank3[139] <= UInt<30>("h3e3674ad") @[LUTbank.scala 262:26]
    cosLUTBank3[140] <= UInt<30>("h3e34e8d6") @[LUTbank.scala 262:26]
    cosLUTBank3[141] <= UInt<30>("h3e335ce3") @[LUTbank.scala 262:26]
    cosLUTBank3[142] <= UInt<30>("h3e31d0d4") @[LUTbank.scala 262:26]
    cosLUTBank3[143] <= UInt<30>("h3e3044aa") @[LUTbank.scala 262:26]
    cosLUTBank3[144] <= UInt<30>("h3e2eb864") @[LUTbank.scala 262:26]
    cosLUTBank3[145] <= UInt<30>("h3e2d2c04") @[LUTbank.scala 262:26]
    cosLUTBank3[146] <= UInt<30>("h3e2b9f89") @[LUTbank.scala 262:26]
    cosLUTBank3[147] <= UInt<30>("h3e2a12f3") @[LUTbank.scala 262:26]
    cosLUTBank3[148] <= UInt<30>("h3e288644") @[LUTbank.scala 262:26]
    cosLUTBank3[149] <= UInt<30>("h3e26f97a") @[LUTbank.scala 262:26]
    cosLUTBank3[150] <= UInt<30>("h3e256c96") @[LUTbank.scala 262:26]
    cosLUTBank3[151] <= UInt<30>("h3e23df99") @[LUTbank.scala 262:26]
    cosLUTBank3[152] <= UInt<30>("h3e225283") @[LUTbank.scala 262:26]
    cosLUTBank3[153] <= UInt<30>("h3e20c553") @[LUTbank.scala 262:26]
    cosLUTBank3[154] <= UInt<30>("h3e1f380b") @[LUTbank.scala 262:26]
    cosLUTBank3[155] <= UInt<30>("h3e1daaaa") @[LUTbank.scala 262:26]
    cosLUTBank3[156] <= UInt<30>("h3e1c1d31") @[LUTbank.scala 262:26]
    cosLUTBank3[157] <= UInt<30>("h3e1a8fa0") @[LUTbank.scala 262:26]
    cosLUTBank3[158] <= UInt<30>("h3e1901f7") @[LUTbank.scala 262:26]
    cosLUTBank3[159] <= UInt<30>("h3e177436") @[LUTbank.scala 262:26]
    cosLUTBank3[160] <= UInt<30>("h3e15e65e") @[LUTbank.scala 262:26]
    cosLUTBank3[161] <= UInt<30>("h3e14586f") @[LUTbank.scala 262:26]
    cosLUTBank3[162] <= UInt<30>("h3e12ca69") @[LUTbank.scala 262:26]
    cosLUTBank3[163] <= UInt<30>("h3e113c4d") @[LUTbank.scala 262:26]
    cosLUTBank3[164] <= UInt<30>("h3e0fae1a") @[LUTbank.scala 262:26]
    cosLUTBank3[165] <= UInt<30>("h3e0e1fd0") @[LUTbank.scala 262:26]
    cosLUTBank3[166] <= UInt<30>("h3e0c9171") @[LUTbank.scala 262:26]
    cosLUTBank3[167] <= UInt<30>("h3e0b02fc") @[LUTbank.scala 262:26]
    cosLUTBank3[168] <= UInt<30>("h3e097472") @[LUTbank.scala 262:26]
    cosLUTBank3[169] <= UInt<30>("h3e07e5d2") @[LUTbank.scala 262:26]
    cosLUTBank3[170] <= UInt<30>("h3e06571e") @[LUTbank.scala 262:26]
    cosLUTBank3[171] <= UInt<30>("h3e04c855") @[LUTbank.scala 262:26]
    cosLUTBank3[172] <= UInt<30>("h3e033977") @[LUTbank.scala 262:26]
    cosLUTBank3[173] <= UInt<30>("h3e01aa85") @[LUTbank.scala 262:26]
    cosLUTBank3[174] <= UInt<30>("h3e001b7f") @[LUTbank.scala 262:26]
    cosLUTBank3[175] <= UInt<30>("h3dfd18cb") @[LUTbank.scala 262:26]
    cosLUTBank3[176] <= UInt<30>("h3df9fa70") @[LUTbank.scala 262:26]
    cosLUTBank3[177] <= UInt<30>("h3df6dbef") @[LUTbank.scala 262:26]
    cosLUTBank3[178] <= UInt<30>("h3df3bd48") @[LUTbank.scala 262:26]
    cosLUTBank3[179] <= UInt<30>("h3df09e7b") @[LUTbank.scala 262:26]
    cosLUTBank3[180] <= UInt<30>("h3ded7f8a") @[LUTbank.scala 262:26]
    cosLUTBank3[181] <= UInt<30>("h3dea6073") @[LUTbank.scala 262:26]
    cosLUTBank3[182] <= UInt<30>("h3de74138") @[LUTbank.scala 262:26]
    cosLUTBank3[183] <= UInt<30>("h3de421da") @[LUTbank.scala 262:26]
    cosLUTBank3[184] <= UInt<30>("h3de10259") @[LUTbank.scala 262:26]
    cosLUTBank3[185] <= UInt<30>("h3ddde2b4") @[LUTbank.scala 262:26]
    cosLUTBank3[186] <= UInt<30>("h3ddac2ee") @[LUTbank.scala 262:26]
    cosLUTBank3[187] <= UInt<30>("h3dd7a305") @[LUTbank.scala 262:26]
    cosLUTBank3[188] <= UInt<30>("h3dd482fc") @[LUTbank.scala 262:26]
    cosLUTBank3[189] <= UInt<30>("h3dd162d2") @[LUTbank.scala 262:26]
    cosLUTBank3[190] <= UInt<30>("h3dce4287") @[LUTbank.scala 262:26]
    cosLUTBank3[191] <= UInt<30>("h3dcb221d") @[LUTbank.scala 262:26]
    cosLUTBank3[192] <= UInt<30>("h3dc80193") @[LUTbank.scala 262:26]
    cosLUTBank3[193] <= UInt<30>("h3dc4e0ea") @[LUTbank.scala 262:26]
    cosLUTBank3[194] <= UInt<30>("h3dc1c023") @[LUTbank.scala 262:26]
    cosLUTBank3[195] <= UInt<30>("h3dbe9f3e") @[LUTbank.scala 262:26]
    cosLUTBank3[196] <= UInt<30>("h3dbb7e3c") @[LUTbank.scala 262:26]
    cosLUTBank3[197] <= UInt<30>("h3db85d1d") @[LUTbank.scala 262:26]
    cosLUTBank3[198] <= UInt<30>("h3db53be1") @[LUTbank.scala 262:26]
    cosLUTBank3[199] <= UInt<30>("h3db21a89") @[LUTbank.scala 262:26]
    cosLUTBank3[200] <= UInt<30>("h3daef916") @[LUTbank.scala 262:26]
    cosLUTBank3[201] <= UInt<30>("h3dabd788") @[LUTbank.scala 262:26]
    cosLUTBank3[202] <= UInt<30>("h3da8b5df") @[LUTbank.scala 262:26]
    cosLUTBank3[203] <= UInt<30>("h3da5941d") @[LUTbank.scala 262:26]
    cosLUTBank3[204] <= UInt<30>("h3da27240") @[LUTbank.scala 262:26]
    cosLUTBank3[205] <= UInt<30>("h3d9f504b") @[LUTbank.scala 262:26]
    cosLUTBank3[206] <= UInt<30>("h3d9c2e3d") @[LUTbank.scala 262:26]
    cosLUTBank3[207] <= UInt<30>("h3d990c17") @[LUTbank.scala 262:26]
    cosLUTBank3[208] <= UInt<30>("h3d95e9da") @[LUTbank.scala 262:26]
    cosLUTBank3[209] <= UInt<30>("h3d92c785") @[LUTbank.scala 262:26]
    cosLUTBank3[210] <= UInt<30>("h3d8fa51a") @[LUTbank.scala 262:26]
    cosLUTBank3[211] <= UInt<30>("h3d8c8298") @[LUTbank.scala 262:26]
    cosLUTBank3[212] <= UInt<30>("h3d896001") @[LUTbank.scala 262:26]
    cosLUTBank3[213] <= UInt<30>("h3d863d55") @[LUTbank.scala 262:26]
    cosLUTBank3[214] <= UInt<30>("h3d831a94") @[LUTbank.scala 262:26]
    cosLUTBank3[215] <= UInt<30>("h3d7fef7c") @[LUTbank.scala 262:26]
    cosLUTBank3[216] <= UInt<30>("h3d79a9aa") @[LUTbank.scala 262:26]
    cosLUTBank3[217] <= UInt<30>("h3d7363b2") @[LUTbank.scala 262:26]
    cosLUTBank3[218] <= UInt<30>("h3d6d1d93") @[LUTbank.scala 262:26]
    cosLUTBank3[219] <= UInt<30>("h3d66d751") @[LUTbank.scala 262:26]
    cosLUTBank3[220] <= UInt<30>("h3d6090ea") @[LUTbank.scala 262:26]
    cosLUTBank3[221] <= UInt<30>("h3d5a4a61") @[LUTbank.scala 262:26]
    cosLUTBank3[222] <= UInt<30>("h3d5403b6") @[LUTbank.scala 262:26]
    cosLUTBank3[223] <= UInt<30>("h3d4dbceb") @[LUTbank.scala 262:26]
    cosLUTBank3[224] <= UInt<30>("h3d477600") @[LUTbank.scala 262:26]
    cosLUTBank3[225] <= UInt<30>("h3d412ef6") @[LUTbank.scala 262:26]
    cosLUTBank3[226] <= UInt<30>("h3d3ae7ce") @[LUTbank.scala 262:26]
    cosLUTBank3[227] <= UInt<30>("h3d34a089") @[LUTbank.scala 262:26]
    cosLUTBank3[228] <= UInt<30>("h3d2e5929") @[LUTbank.scala 262:26]
    cosLUTBank3[229] <= UInt<30>("h3d2811ad") @[LUTbank.scala 262:26]
    cosLUTBank3[230] <= UInt<30>("h3d21ca18") @[LUTbank.scala 262:26]
    cosLUTBank3[231] <= UInt<30>("h3d1b826a") @[LUTbank.scala 262:26]
    cosLUTBank3[232] <= UInt<30>("h3d153aa4") @[LUTbank.scala 262:26]
    cosLUTBank3[233] <= UInt<30>("h3d0ef2c6") @[LUTbank.scala 262:26]
    cosLUTBank3[234] <= UInt<30>("h3d08aad3") @[LUTbank.scala 262:26]
    cosLUTBank3[235] <= UInt<30>("h3d0262cb") @[LUTbank.scala 262:26]
    cosLUTBank3[236] <= UInt<30>("h3cf8355c") @[LUTbank.scala 262:26]
    cosLUTBank3[237] <= UInt<30>("h3ceba4fd") @[LUTbank.scala 262:26]
    cosLUTBank3[238] <= UInt<30>("h3cdf1479") @[LUTbank.scala 262:26]
    cosLUTBank3[239] <= UInt<30>("h3cd283d3") @[LUTbank.scala 262:26]
    cosLUTBank3[240] <= UInt<30>("h3cc5f30c") @[LUTbank.scala 262:26]
    cosLUTBank3[241] <= UInt<30>("h3cb96227") @[LUTbank.scala 262:26]
    cosLUTBank3[242] <= UInt<30>("h3cacd125") @[LUTbank.scala 262:26]
    cosLUTBank3[243] <= UInt<30>("h3ca04008") @[LUTbank.scala 262:26]
    cosLUTBank3[244] <= UInt<30>("h3c93aed3") @[LUTbank.scala 262:26]
    cosLUTBank3[245] <= UInt<30>("h3c871d87") @[LUTbank.scala 262:26]
    cosLUTBank3[246] <= UInt<30>("h3c75184d") @[LUTbank.scala 262:26]
    cosLUTBank3[247] <= UInt<30>("h3c5bf566") @[LUTbank.scala 262:26]
    cosLUTBank3[248] <= UInt<30>("h3c42d25c") @[LUTbank.scala 262:26]
    cosLUTBank3[249] <= UInt<30>("h3c29af35") @[LUTbank.scala 262:26]
    cosLUTBank3[250] <= UInt<30>("h3c108bf3") @[LUTbank.scala 262:26]
    cosLUTBank3[251] <= UInt<30>("h3beed136") @[LUTbank.scala 262:26]
    cosLUTBank3[252] <= UInt<30>("h3bbc8a61") @[LUTbank.scala 262:26]
    cosLUTBank3[253] <= UInt<30>("h3b8a4370") @[LUTbank.scala 262:26]
    cosLUTBank3[254] <= UInt<30>("h3b2ff8d1") @[LUTbank.scala 262:26]
    cosLUTBank3[255] <= UInt<30>("h3a96d54f") @[LUTbank.scala 262:26]
    cosLUTBank3[256] <= UInt<1>("h0") @[LUTbank.scala 262:26]
    wire cosLUT : UInt<30>[1025] @[LUTbank.scala 290:25]
    cosLUT[0] <= cosLUTBank0[0] @[LUTbank.scala 290:25]
    cosLUT[1] <= cosLUTBank0[1] @[LUTbank.scala 290:25]
    cosLUT[2] <= cosLUTBank0[2] @[LUTbank.scala 290:25]
    cosLUT[3] <= cosLUTBank0[3] @[LUTbank.scala 290:25]
    cosLUT[4] <= cosLUTBank0[4] @[LUTbank.scala 290:25]
    cosLUT[5] <= cosLUTBank0[5] @[LUTbank.scala 290:25]
    cosLUT[6] <= cosLUTBank0[6] @[LUTbank.scala 290:25]
    cosLUT[7] <= cosLUTBank0[7] @[LUTbank.scala 290:25]
    cosLUT[8] <= cosLUTBank0[8] @[LUTbank.scala 290:25]
    cosLUT[9] <= cosLUTBank0[9] @[LUTbank.scala 290:25]
    cosLUT[10] <= cosLUTBank0[10] @[LUTbank.scala 290:25]
    cosLUT[11] <= cosLUTBank0[11] @[LUTbank.scala 290:25]
    cosLUT[12] <= cosLUTBank0[12] @[LUTbank.scala 290:25]
    cosLUT[13] <= cosLUTBank0[13] @[LUTbank.scala 290:25]
    cosLUT[14] <= cosLUTBank0[14] @[LUTbank.scala 290:25]
    cosLUT[15] <= cosLUTBank0[15] @[LUTbank.scala 290:25]
    cosLUT[16] <= cosLUTBank0[16] @[LUTbank.scala 290:25]
    cosLUT[17] <= cosLUTBank0[17] @[LUTbank.scala 290:25]
    cosLUT[18] <= cosLUTBank0[18] @[LUTbank.scala 290:25]
    cosLUT[19] <= cosLUTBank0[19] @[LUTbank.scala 290:25]
    cosLUT[20] <= cosLUTBank0[20] @[LUTbank.scala 290:25]
    cosLUT[21] <= cosLUTBank0[21] @[LUTbank.scala 290:25]
    cosLUT[22] <= cosLUTBank0[22] @[LUTbank.scala 290:25]
    cosLUT[23] <= cosLUTBank0[23] @[LUTbank.scala 290:25]
    cosLUT[24] <= cosLUTBank0[24] @[LUTbank.scala 290:25]
    cosLUT[25] <= cosLUTBank0[25] @[LUTbank.scala 290:25]
    cosLUT[26] <= cosLUTBank0[26] @[LUTbank.scala 290:25]
    cosLUT[27] <= cosLUTBank0[27] @[LUTbank.scala 290:25]
    cosLUT[28] <= cosLUTBank0[28] @[LUTbank.scala 290:25]
    cosLUT[29] <= cosLUTBank0[29] @[LUTbank.scala 290:25]
    cosLUT[30] <= cosLUTBank0[30] @[LUTbank.scala 290:25]
    cosLUT[31] <= cosLUTBank0[31] @[LUTbank.scala 290:25]
    cosLUT[32] <= cosLUTBank0[32] @[LUTbank.scala 290:25]
    cosLUT[33] <= cosLUTBank0[33] @[LUTbank.scala 290:25]
    cosLUT[34] <= cosLUTBank0[34] @[LUTbank.scala 290:25]
    cosLUT[35] <= cosLUTBank0[35] @[LUTbank.scala 290:25]
    cosLUT[36] <= cosLUTBank0[36] @[LUTbank.scala 290:25]
    cosLUT[37] <= cosLUTBank0[37] @[LUTbank.scala 290:25]
    cosLUT[38] <= cosLUTBank0[38] @[LUTbank.scala 290:25]
    cosLUT[39] <= cosLUTBank0[39] @[LUTbank.scala 290:25]
    cosLUT[40] <= cosLUTBank0[40] @[LUTbank.scala 290:25]
    cosLUT[41] <= cosLUTBank0[41] @[LUTbank.scala 290:25]
    cosLUT[42] <= cosLUTBank0[42] @[LUTbank.scala 290:25]
    cosLUT[43] <= cosLUTBank0[43] @[LUTbank.scala 290:25]
    cosLUT[44] <= cosLUTBank0[44] @[LUTbank.scala 290:25]
    cosLUT[45] <= cosLUTBank0[45] @[LUTbank.scala 290:25]
    cosLUT[46] <= cosLUTBank0[46] @[LUTbank.scala 290:25]
    cosLUT[47] <= cosLUTBank0[47] @[LUTbank.scala 290:25]
    cosLUT[48] <= cosLUTBank0[48] @[LUTbank.scala 290:25]
    cosLUT[49] <= cosLUTBank0[49] @[LUTbank.scala 290:25]
    cosLUT[50] <= cosLUTBank0[50] @[LUTbank.scala 290:25]
    cosLUT[51] <= cosLUTBank0[51] @[LUTbank.scala 290:25]
    cosLUT[52] <= cosLUTBank0[52] @[LUTbank.scala 290:25]
    cosLUT[53] <= cosLUTBank0[53] @[LUTbank.scala 290:25]
    cosLUT[54] <= cosLUTBank0[54] @[LUTbank.scala 290:25]
    cosLUT[55] <= cosLUTBank0[55] @[LUTbank.scala 290:25]
    cosLUT[56] <= cosLUTBank0[56] @[LUTbank.scala 290:25]
    cosLUT[57] <= cosLUTBank0[57] @[LUTbank.scala 290:25]
    cosLUT[58] <= cosLUTBank0[58] @[LUTbank.scala 290:25]
    cosLUT[59] <= cosLUTBank0[59] @[LUTbank.scala 290:25]
    cosLUT[60] <= cosLUTBank0[60] @[LUTbank.scala 290:25]
    cosLUT[61] <= cosLUTBank0[61] @[LUTbank.scala 290:25]
    cosLUT[62] <= cosLUTBank0[62] @[LUTbank.scala 290:25]
    cosLUT[63] <= cosLUTBank0[63] @[LUTbank.scala 290:25]
    cosLUT[64] <= cosLUTBank0[64] @[LUTbank.scala 290:25]
    cosLUT[65] <= cosLUTBank0[65] @[LUTbank.scala 290:25]
    cosLUT[66] <= cosLUTBank0[66] @[LUTbank.scala 290:25]
    cosLUT[67] <= cosLUTBank0[67] @[LUTbank.scala 290:25]
    cosLUT[68] <= cosLUTBank0[68] @[LUTbank.scala 290:25]
    cosLUT[69] <= cosLUTBank0[69] @[LUTbank.scala 290:25]
    cosLUT[70] <= cosLUTBank0[70] @[LUTbank.scala 290:25]
    cosLUT[71] <= cosLUTBank0[71] @[LUTbank.scala 290:25]
    cosLUT[72] <= cosLUTBank0[72] @[LUTbank.scala 290:25]
    cosLUT[73] <= cosLUTBank0[73] @[LUTbank.scala 290:25]
    cosLUT[74] <= cosLUTBank0[74] @[LUTbank.scala 290:25]
    cosLUT[75] <= cosLUTBank0[75] @[LUTbank.scala 290:25]
    cosLUT[76] <= cosLUTBank0[76] @[LUTbank.scala 290:25]
    cosLUT[77] <= cosLUTBank0[77] @[LUTbank.scala 290:25]
    cosLUT[78] <= cosLUTBank0[78] @[LUTbank.scala 290:25]
    cosLUT[79] <= cosLUTBank0[79] @[LUTbank.scala 290:25]
    cosLUT[80] <= cosLUTBank0[80] @[LUTbank.scala 290:25]
    cosLUT[81] <= cosLUTBank0[81] @[LUTbank.scala 290:25]
    cosLUT[82] <= cosLUTBank0[82] @[LUTbank.scala 290:25]
    cosLUT[83] <= cosLUTBank0[83] @[LUTbank.scala 290:25]
    cosLUT[84] <= cosLUTBank0[84] @[LUTbank.scala 290:25]
    cosLUT[85] <= cosLUTBank0[85] @[LUTbank.scala 290:25]
    cosLUT[86] <= cosLUTBank0[86] @[LUTbank.scala 290:25]
    cosLUT[87] <= cosLUTBank0[87] @[LUTbank.scala 290:25]
    cosLUT[88] <= cosLUTBank0[88] @[LUTbank.scala 290:25]
    cosLUT[89] <= cosLUTBank0[89] @[LUTbank.scala 290:25]
    cosLUT[90] <= cosLUTBank0[90] @[LUTbank.scala 290:25]
    cosLUT[91] <= cosLUTBank0[91] @[LUTbank.scala 290:25]
    cosLUT[92] <= cosLUTBank0[92] @[LUTbank.scala 290:25]
    cosLUT[93] <= cosLUTBank0[93] @[LUTbank.scala 290:25]
    cosLUT[94] <= cosLUTBank0[94] @[LUTbank.scala 290:25]
    cosLUT[95] <= cosLUTBank0[95] @[LUTbank.scala 290:25]
    cosLUT[96] <= cosLUTBank0[96] @[LUTbank.scala 290:25]
    cosLUT[97] <= cosLUTBank0[97] @[LUTbank.scala 290:25]
    cosLUT[98] <= cosLUTBank0[98] @[LUTbank.scala 290:25]
    cosLUT[99] <= cosLUTBank0[99] @[LUTbank.scala 290:25]
    cosLUT[100] <= cosLUTBank0[100] @[LUTbank.scala 290:25]
    cosLUT[101] <= cosLUTBank0[101] @[LUTbank.scala 290:25]
    cosLUT[102] <= cosLUTBank0[102] @[LUTbank.scala 290:25]
    cosLUT[103] <= cosLUTBank0[103] @[LUTbank.scala 290:25]
    cosLUT[104] <= cosLUTBank0[104] @[LUTbank.scala 290:25]
    cosLUT[105] <= cosLUTBank0[105] @[LUTbank.scala 290:25]
    cosLUT[106] <= cosLUTBank0[106] @[LUTbank.scala 290:25]
    cosLUT[107] <= cosLUTBank0[107] @[LUTbank.scala 290:25]
    cosLUT[108] <= cosLUTBank0[108] @[LUTbank.scala 290:25]
    cosLUT[109] <= cosLUTBank0[109] @[LUTbank.scala 290:25]
    cosLUT[110] <= cosLUTBank0[110] @[LUTbank.scala 290:25]
    cosLUT[111] <= cosLUTBank0[111] @[LUTbank.scala 290:25]
    cosLUT[112] <= cosLUTBank0[112] @[LUTbank.scala 290:25]
    cosLUT[113] <= cosLUTBank0[113] @[LUTbank.scala 290:25]
    cosLUT[114] <= cosLUTBank0[114] @[LUTbank.scala 290:25]
    cosLUT[115] <= cosLUTBank0[115] @[LUTbank.scala 290:25]
    cosLUT[116] <= cosLUTBank0[116] @[LUTbank.scala 290:25]
    cosLUT[117] <= cosLUTBank0[117] @[LUTbank.scala 290:25]
    cosLUT[118] <= cosLUTBank0[118] @[LUTbank.scala 290:25]
    cosLUT[119] <= cosLUTBank0[119] @[LUTbank.scala 290:25]
    cosLUT[120] <= cosLUTBank0[120] @[LUTbank.scala 290:25]
    cosLUT[121] <= cosLUTBank0[121] @[LUTbank.scala 290:25]
    cosLUT[122] <= cosLUTBank0[122] @[LUTbank.scala 290:25]
    cosLUT[123] <= cosLUTBank0[123] @[LUTbank.scala 290:25]
    cosLUT[124] <= cosLUTBank0[124] @[LUTbank.scala 290:25]
    cosLUT[125] <= cosLUTBank0[125] @[LUTbank.scala 290:25]
    cosLUT[126] <= cosLUTBank0[126] @[LUTbank.scala 290:25]
    cosLUT[127] <= cosLUTBank0[127] @[LUTbank.scala 290:25]
    cosLUT[128] <= cosLUTBank0[128] @[LUTbank.scala 290:25]
    cosLUT[129] <= cosLUTBank0[129] @[LUTbank.scala 290:25]
    cosLUT[130] <= cosLUTBank0[130] @[LUTbank.scala 290:25]
    cosLUT[131] <= cosLUTBank0[131] @[LUTbank.scala 290:25]
    cosLUT[132] <= cosLUTBank0[132] @[LUTbank.scala 290:25]
    cosLUT[133] <= cosLUTBank0[133] @[LUTbank.scala 290:25]
    cosLUT[134] <= cosLUTBank0[134] @[LUTbank.scala 290:25]
    cosLUT[135] <= cosLUTBank0[135] @[LUTbank.scala 290:25]
    cosLUT[136] <= cosLUTBank0[136] @[LUTbank.scala 290:25]
    cosLUT[137] <= cosLUTBank0[137] @[LUTbank.scala 290:25]
    cosLUT[138] <= cosLUTBank0[138] @[LUTbank.scala 290:25]
    cosLUT[139] <= cosLUTBank0[139] @[LUTbank.scala 290:25]
    cosLUT[140] <= cosLUTBank0[140] @[LUTbank.scala 290:25]
    cosLUT[141] <= cosLUTBank0[141] @[LUTbank.scala 290:25]
    cosLUT[142] <= cosLUTBank0[142] @[LUTbank.scala 290:25]
    cosLUT[143] <= cosLUTBank0[143] @[LUTbank.scala 290:25]
    cosLUT[144] <= cosLUTBank0[144] @[LUTbank.scala 290:25]
    cosLUT[145] <= cosLUTBank0[145] @[LUTbank.scala 290:25]
    cosLUT[146] <= cosLUTBank0[146] @[LUTbank.scala 290:25]
    cosLUT[147] <= cosLUTBank0[147] @[LUTbank.scala 290:25]
    cosLUT[148] <= cosLUTBank0[148] @[LUTbank.scala 290:25]
    cosLUT[149] <= cosLUTBank0[149] @[LUTbank.scala 290:25]
    cosLUT[150] <= cosLUTBank0[150] @[LUTbank.scala 290:25]
    cosLUT[151] <= cosLUTBank0[151] @[LUTbank.scala 290:25]
    cosLUT[152] <= cosLUTBank0[152] @[LUTbank.scala 290:25]
    cosLUT[153] <= cosLUTBank0[153] @[LUTbank.scala 290:25]
    cosLUT[154] <= cosLUTBank0[154] @[LUTbank.scala 290:25]
    cosLUT[155] <= cosLUTBank0[155] @[LUTbank.scala 290:25]
    cosLUT[156] <= cosLUTBank0[156] @[LUTbank.scala 290:25]
    cosLUT[157] <= cosLUTBank0[157] @[LUTbank.scala 290:25]
    cosLUT[158] <= cosLUTBank0[158] @[LUTbank.scala 290:25]
    cosLUT[159] <= cosLUTBank0[159] @[LUTbank.scala 290:25]
    cosLUT[160] <= cosLUTBank0[160] @[LUTbank.scala 290:25]
    cosLUT[161] <= cosLUTBank0[161] @[LUTbank.scala 290:25]
    cosLUT[162] <= cosLUTBank0[162] @[LUTbank.scala 290:25]
    cosLUT[163] <= cosLUTBank0[163] @[LUTbank.scala 290:25]
    cosLUT[164] <= cosLUTBank0[164] @[LUTbank.scala 290:25]
    cosLUT[165] <= cosLUTBank0[165] @[LUTbank.scala 290:25]
    cosLUT[166] <= cosLUTBank0[166] @[LUTbank.scala 290:25]
    cosLUT[167] <= cosLUTBank0[167] @[LUTbank.scala 290:25]
    cosLUT[168] <= cosLUTBank0[168] @[LUTbank.scala 290:25]
    cosLUT[169] <= cosLUTBank0[169] @[LUTbank.scala 290:25]
    cosLUT[170] <= cosLUTBank0[170] @[LUTbank.scala 290:25]
    cosLUT[171] <= cosLUTBank0[171] @[LUTbank.scala 290:25]
    cosLUT[172] <= cosLUTBank0[172] @[LUTbank.scala 290:25]
    cosLUT[173] <= cosLUTBank0[173] @[LUTbank.scala 290:25]
    cosLUT[174] <= cosLUTBank0[174] @[LUTbank.scala 290:25]
    cosLUT[175] <= cosLUTBank0[175] @[LUTbank.scala 290:25]
    cosLUT[176] <= cosLUTBank0[176] @[LUTbank.scala 290:25]
    cosLUT[177] <= cosLUTBank0[177] @[LUTbank.scala 290:25]
    cosLUT[178] <= cosLUTBank0[178] @[LUTbank.scala 290:25]
    cosLUT[179] <= cosLUTBank0[179] @[LUTbank.scala 290:25]
    cosLUT[180] <= cosLUTBank0[180] @[LUTbank.scala 290:25]
    cosLUT[181] <= cosLUTBank0[181] @[LUTbank.scala 290:25]
    cosLUT[182] <= cosLUTBank0[182] @[LUTbank.scala 290:25]
    cosLUT[183] <= cosLUTBank0[183] @[LUTbank.scala 290:25]
    cosLUT[184] <= cosLUTBank0[184] @[LUTbank.scala 290:25]
    cosLUT[185] <= cosLUTBank0[185] @[LUTbank.scala 290:25]
    cosLUT[186] <= cosLUTBank0[186] @[LUTbank.scala 290:25]
    cosLUT[187] <= cosLUTBank0[187] @[LUTbank.scala 290:25]
    cosLUT[188] <= cosLUTBank0[188] @[LUTbank.scala 290:25]
    cosLUT[189] <= cosLUTBank0[189] @[LUTbank.scala 290:25]
    cosLUT[190] <= cosLUTBank0[190] @[LUTbank.scala 290:25]
    cosLUT[191] <= cosLUTBank0[191] @[LUTbank.scala 290:25]
    cosLUT[192] <= cosLUTBank0[192] @[LUTbank.scala 290:25]
    cosLUT[193] <= cosLUTBank0[193] @[LUTbank.scala 290:25]
    cosLUT[194] <= cosLUTBank0[194] @[LUTbank.scala 290:25]
    cosLUT[195] <= cosLUTBank0[195] @[LUTbank.scala 290:25]
    cosLUT[196] <= cosLUTBank0[196] @[LUTbank.scala 290:25]
    cosLUT[197] <= cosLUTBank0[197] @[LUTbank.scala 290:25]
    cosLUT[198] <= cosLUTBank0[198] @[LUTbank.scala 290:25]
    cosLUT[199] <= cosLUTBank0[199] @[LUTbank.scala 290:25]
    cosLUT[200] <= cosLUTBank0[200] @[LUTbank.scala 290:25]
    cosLUT[201] <= cosLUTBank0[201] @[LUTbank.scala 290:25]
    cosLUT[202] <= cosLUTBank0[202] @[LUTbank.scala 290:25]
    cosLUT[203] <= cosLUTBank0[203] @[LUTbank.scala 290:25]
    cosLUT[204] <= cosLUTBank0[204] @[LUTbank.scala 290:25]
    cosLUT[205] <= cosLUTBank0[205] @[LUTbank.scala 290:25]
    cosLUT[206] <= cosLUTBank0[206] @[LUTbank.scala 290:25]
    cosLUT[207] <= cosLUTBank0[207] @[LUTbank.scala 290:25]
    cosLUT[208] <= cosLUTBank0[208] @[LUTbank.scala 290:25]
    cosLUT[209] <= cosLUTBank0[209] @[LUTbank.scala 290:25]
    cosLUT[210] <= cosLUTBank0[210] @[LUTbank.scala 290:25]
    cosLUT[211] <= cosLUTBank0[211] @[LUTbank.scala 290:25]
    cosLUT[212] <= cosLUTBank0[212] @[LUTbank.scala 290:25]
    cosLUT[213] <= cosLUTBank0[213] @[LUTbank.scala 290:25]
    cosLUT[214] <= cosLUTBank0[214] @[LUTbank.scala 290:25]
    cosLUT[215] <= cosLUTBank0[215] @[LUTbank.scala 290:25]
    cosLUT[216] <= cosLUTBank0[216] @[LUTbank.scala 290:25]
    cosLUT[217] <= cosLUTBank0[217] @[LUTbank.scala 290:25]
    cosLUT[218] <= cosLUTBank0[218] @[LUTbank.scala 290:25]
    cosLUT[219] <= cosLUTBank0[219] @[LUTbank.scala 290:25]
    cosLUT[220] <= cosLUTBank0[220] @[LUTbank.scala 290:25]
    cosLUT[221] <= cosLUTBank0[221] @[LUTbank.scala 290:25]
    cosLUT[222] <= cosLUTBank0[222] @[LUTbank.scala 290:25]
    cosLUT[223] <= cosLUTBank0[223] @[LUTbank.scala 290:25]
    cosLUT[224] <= cosLUTBank0[224] @[LUTbank.scala 290:25]
    cosLUT[225] <= cosLUTBank0[225] @[LUTbank.scala 290:25]
    cosLUT[226] <= cosLUTBank0[226] @[LUTbank.scala 290:25]
    cosLUT[227] <= cosLUTBank0[227] @[LUTbank.scala 290:25]
    cosLUT[228] <= cosLUTBank0[228] @[LUTbank.scala 290:25]
    cosLUT[229] <= cosLUTBank0[229] @[LUTbank.scala 290:25]
    cosLUT[230] <= cosLUTBank0[230] @[LUTbank.scala 290:25]
    cosLUT[231] <= cosLUTBank0[231] @[LUTbank.scala 290:25]
    cosLUT[232] <= cosLUTBank0[232] @[LUTbank.scala 290:25]
    cosLUT[233] <= cosLUTBank0[233] @[LUTbank.scala 290:25]
    cosLUT[234] <= cosLUTBank0[234] @[LUTbank.scala 290:25]
    cosLUT[235] <= cosLUTBank0[235] @[LUTbank.scala 290:25]
    cosLUT[236] <= cosLUTBank0[236] @[LUTbank.scala 290:25]
    cosLUT[237] <= cosLUTBank0[237] @[LUTbank.scala 290:25]
    cosLUT[238] <= cosLUTBank0[238] @[LUTbank.scala 290:25]
    cosLUT[239] <= cosLUTBank0[239] @[LUTbank.scala 290:25]
    cosLUT[240] <= cosLUTBank0[240] @[LUTbank.scala 290:25]
    cosLUT[241] <= cosLUTBank0[241] @[LUTbank.scala 290:25]
    cosLUT[242] <= cosLUTBank0[242] @[LUTbank.scala 290:25]
    cosLUT[243] <= cosLUTBank0[243] @[LUTbank.scala 290:25]
    cosLUT[244] <= cosLUTBank0[244] @[LUTbank.scala 290:25]
    cosLUT[245] <= cosLUTBank0[245] @[LUTbank.scala 290:25]
    cosLUT[246] <= cosLUTBank0[246] @[LUTbank.scala 290:25]
    cosLUT[247] <= cosLUTBank0[247] @[LUTbank.scala 290:25]
    cosLUT[248] <= cosLUTBank0[248] @[LUTbank.scala 290:25]
    cosLUT[249] <= cosLUTBank0[249] @[LUTbank.scala 290:25]
    cosLUT[250] <= cosLUTBank0[250] @[LUTbank.scala 290:25]
    cosLUT[251] <= cosLUTBank0[251] @[LUTbank.scala 290:25]
    cosLUT[252] <= cosLUTBank0[252] @[LUTbank.scala 290:25]
    cosLUT[253] <= cosLUTBank0[253] @[LUTbank.scala 290:25]
    cosLUT[254] <= cosLUTBank0[254] @[LUTbank.scala 290:25]
    cosLUT[255] <= cosLUTBank0[255] @[LUTbank.scala 290:25]
    cosLUT[256] <= cosLUTBank1[0] @[LUTbank.scala 290:25]
    cosLUT[257] <= cosLUTBank1[1] @[LUTbank.scala 290:25]
    cosLUT[258] <= cosLUTBank1[2] @[LUTbank.scala 290:25]
    cosLUT[259] <= cosLUTBank1[3] @[LUTbank.scala 290:25]
    cosLUT[260] <= cosLUTBank1[4] @[LUTbank.scala 290:25]
    cosLUT[261] <= cosLUTBank1[5] @[LUTbank.scala 290:25]
    cosLUT[262] <= cosLUTBank1[6] @[LUTbank.scala 290:25]
    cosLUT[263] <= cosLUTBank1[7] @[LUTbank.scala 290:25]
    cosLUT[264] <= cosLUTBank1[8] @[LUTbank.scala 290:25]
    cosLUT[265] <= cosLUTBank1[9] @[LUTbank.scala 290:25]
    cosLUT[266] <= cosLUTBank1[10] @[LUTbank.scala 290:25]
    cosLUT[267] <= cosLUTBank1[11] @[LUTbank.scala 290:25]
    cosLUT[268] <= cosLUTBank1[12] @[LUTbank.scala 290:25]
    cosLUT[269] <= cosLUTBank1[13] @[LUTbank.scala 290:25]
    cosLUT[270] <= cosLUTBank1[14] @[LUTbank.scala 290:25]
    cosLUT[271] <= cosLUTBank1[15] @[LUTbank.scala 290:25]
    cosLUT[272] <= cosLUTBank1[16] @[LUTbank.scala 290:25]
    cosLUT[273] <= cosLUTBank1[17] @[LUTbank.scala 290:25]
    cosLUT[274] <= cosLUTBank1[18] @[LUTbank.scala 290:25]
    cosLUT[275] <= cosLUTBank1[19] @[LUTbank.scala 290:25]
    cosLUT[276] <= cosLUTBank1[20] @[LUTbank.scala 290:25]
    cosLUT[277] <= cosLUTBank1[21] @[LUTbank.scala 290:25]
    cosLUT[278] <= cosLUTBank1[22] @[LUTbank.scala 290:25]
    cosLUT[279] <= cosLUTBank1[23] @[LUTbank.scala 290:25]
    cosLUT[280] <= cosLUTBank1[24] @[LUTbank.scala 290:25]
    cosLUT[281] <= cosLUTBank1[25] @[LUTbank.scala 290:25]
    cosLUT[282] <= cosLUTBank1[26] @[LUTbank.scala 290:25]
    cosLUT[283] <= cosLUTBank1[27] @[LUTbank.scala 290:25]
    cosLUT[284] <= cosLUTBank1[28] @[LUTbank.scala 290:25]
    cosLUT[285] <= cosLUTBank1[29] @[LUTbank.scala 290:25]
    cosLUT[286] <= cosLUTBank1[30] @[LUTbank.scala 290:25]
    cosLUT[287] <= cosLUTBank1[31] @[LUTbank.scala 290:25]
    cosLUT[288] <= cosLUTBank1[32] @[LUTbank.scala 290:25]
    cosLUT[289] <= cosLUTBank1[33] @[LUTbank.scala 290:25]
    cosLUT[290] <= cosLUTBank1[34] @[LUTbank.scala 290:25]
    cosLUT[291] <= cosLUTBank1[35] @[LUTbank.scala 290:25]
    cosLUT[292] <= cosLUTBank1[36] @[LUTbank.scala 290:25]
    cosLUT[293] <= cosLUTBank1[37] @[LUTbank.scala 290:25]
    cosLUT[294] <= cosLUTBank1[38] @[LUTbank.scala 290:25]
    cosLUT[295] <= cosLUTBank1[39] @[LUTbank.scala 290:25]
    cosLUT[296] <= cosLUTBank1[40] @[LUTbank.scala 290:25]
    cosLUT[297] <= cosLUTBank1[41] @[LUTbank.scala 290:25]
    cosLUT[298] <= cosLUTBank1[42] @[LUTbank.scala 290:25]
    cosLUT[299] <= cosLUTBank1[43] @[LUTbank.scala 290:25]
    cosLUT[300] <= cosLUTBank1[44] @[LUTbank.scala 290:25]
    cosLUT[301] <= cosLUTBank1[45] @[LUTbank.scala 290:25]
    cosLUT[302] <= cosLUTBank1[46] @[LUTbank.scala 290:25]
    cosLUT[303] <= cosLUTBank1[47] @[LUTbank.scala 290:25]
    cosLUT[304] <= cosLUTBank1[48] @[LUTbank.scala 290:25]
    cosLUT[305] <= cosLUTBank1[49] @[LUTbank.scala 290:25]
    cosLUT[306] <= cosLUTBank1[50] @[LUTbank.scala 290:25]
    cosLUT[307] <= cosLUTBank1[51] @[LUTbank.scala 290:25]
    cosLUT[308] <= cosLUTBank1[52] @[LUTbank.scala 290:25]
    cosLUT[309] <= cosLUTBank1[53] @[LUTbank.scala 290:25]
    cosLUT[310] <= cosLUTBank1[54] @[LUTbank.scala 290:25]
    cosLUT[311] <= cosLUTBank1[55] @[LUTbank.scala 290:25]
    cosLUT[312] <= cosLUTBank1[56] @[LUTbank.scala 290:25]
    cosLUT[313] <= cosLUTBank1[57] @[LUTbank.scala 290:25]
    cosLUT[314] <= cosLUTBank1[58] @[LUTbank.scala 290:25]
    cosLUT[315] <= cosLUTBank1[59] @[LUTbank.scala 290:25]
    cosLUT[316] <= cosLUTBank1[60] @[LUTbank.scala 290:25]
    cosLUT[317] <= cosLUTBank1[61] @[LUTbank.scala 290:25]
    cosLUT[318] <= cosLUTBank1[62] @[LUTbank.scala 290:25]
    cosLUT[319] <= cosLUTBank1[63] @[LUTbank.scala 290:25]
    cosLUT[320] <= cosLUTBank1[64] @[LUTbank.scala 290:25]
    cosLUT[321] <= cosLUTBank1[65] @[LUTbank.scala 290:25]
    cosLUT[322] <= cosLUTBank1[66] @[LUTbank.scala 290:25]
    cosLUT[323] <= cosLUTBank1[67] @[LUTbank.scala 290:25]
    cosLUT[324] <= cosLUTBank1[68] @[LUTbank.scala 290:25]
    cosLUT[325] <= cosLUTBank1[69] @[LUTbank.scala 290:25]
    cosLUT[326] <= cosLUTBank1[70] @[LUTbank.scala 290:25]
    cosLUT[327] <= cosLUTBank1[71] @[LUTbank.scala 290:25]
    cosLUT[328] <= cosLUTBank1[72] @[LUTbank.scala 290:25]
    cosLUT[329] <= cosLUTBank1[73] @[LUTbank.scala 290:25]
    cosLUT[330] <= cosLUTBank1[74] @[LUTbank.scala 290:25]
    cosLUT[331] <= cosLUTBank1[75] @[LUTbank.scala 290:25]
    cosLUT[332] <= cosLUTBank1[76] @[LUTbank.scala 290:25]
    cosLUT[333] <= cosLUTBank1[77] @[LUTbank.scala 290:25]
    cosLUT[334] <= cosLUTBank1[78] @[LUTbank.scala 290:25]
    cosLUT[335] <= cosLUTBank1[79] @[LUTbank.scala 290:25]
    cosLUT[336] <= cosLUTBank1[80] @[LUTbank.scala 290:25]
    cosLUT[337] <= cosLUTBank1[81] @[LUTbank.scala 290:25]
    cosLUT[338] <= cosLUTBank1[82] @[LUTbank.scala 290:25]
    cosLUT[339] <= cosLUTBank1[83] @[LUTbank.scala 290:25]
    cosLUT[340] <= cosLUTBank1[84] @[LUTbank.scala 290:25]
    cosLUT[341] <= cosLUTBank1[85] @[LUTbank.scala 290:25]
    cosLUT[342] <= cosLUTBank1[86] @[LUTbank.scala 290:25]
    cosLUT[343] <= cosLUTBank1[87] @[LUTbank.scala 290:25]
    cosLUT[344] <= cosLUTBank1[88] @[LUTbank.scala 290:25]
    cosLUT[345] <= cosLUTBank1[89] @[LUTbank.scala 290:25]
    cosLUT[346] <= cosLUTBank1[90] @[LUTbank.scala 290:25]
    cosLUT[347] <= cosLUTBank1[91] @[LUTbank.scala 290:25]
    cosLUT[348] <= cosLUTBank1[92] @[LUTbank.scala 290:25]
    cosLUT[349] <= cosLUTBank1[93] @[LUTbank.scala 290:25]
    cosLUT[350] <= cosLUTBank1[94] @[LUTbank.scala 290:25]
    cosLUT[351] <= cosLUTBank1[95] @[LUTbank.scala 290:25]
    cosLUT[352] <= cosLUTBank1[96] @[LUTbank.scala 290:25]
    cosLUT[353] <= cosLUTBank1[97] @[LUTbank.scala 290:25]
    cosLUT[354] <= cosLUTBank1[98] @[LUTbank.scala 290:25]
    cosLUT[355] <= cosLUTBank1[99] @[LUTbank.scala 290:25]
    cosLUT[356] <= cosLUTBank1[100] @[LUTbank.scala 290:25]
    cosLUT[357] <= cosLUTBank1[101] @[LUTbank.scala 290:25]
    cosLUT[358] <= cosLUTBank1[102] @[LUTbank.scala 290:25]
    cosLUT[359] <= cosLUTBank1[103] @[LUTbank.scala 290:25]
    cosLUT[360] <= cosLUTBank1[104] @[LUTbank.scala 290:25]
    cosLUT[361] <= cosLUTBank1[105] @[LUTbank.scala 290:25]
    cosLUT[362] <= cosLUTBank1[106] @[LUTbank.scala 290:25]
    cosLUT[363] <= cosLUTBank1[107] @[LUTbank.scala 290:25]
    cosLUT[364] <= cosLUTBank1[108] @[LUTbank.scala 290:25]
    cosLUT[365] <= cosLUTBank1[109] @[LUTbank.scala 290:25]
    cosLUT[366] <= cosLUTBank1[110] @[LUTbank.scala 290:25]
    cosLUT[367] <= cosLUTBank1[111] @[LUTbank.scala 290:25]
    cosLUT[368] <= cosLUTBank1[112] @[LUTbank.scala 290:25]
    cosLUT[369] <= cosLUTBank1[113] @[LUTbank.scala 290:25]
    cosLUT[370] <= cosLUTBank1[114] @[LUTbank.scala 290:25]
    cosLUT[371] <= cosLUTBank1[115] @[LUTbank.scala 290:25]
    cosLUT[372] <= cosLUTBank1[116] @[LUTbank.scala 290:25]
    cosLUT[373] <= cosLUTBank1[117] @[LUTbank.scala 290:25]
    cosLUT[374] <= cosLUTBank1[118] @[LUTbank.scala 290:25]
    cosLUT[375] <= cosLUTBank1[119] @[LUTbank.scala 290:25]
    cosLUT[376] <= cosLUTBank1[120] @[LUTbank.scala 290:25]
    cosLUT[377] <= cosLUTBank1[121] @[LUTbank.scala 290:25]
    cosLUT[378] <= cosLUTBank1[122] @[LUTbank.scala 290:25]
    cosLUT[379] <= cosLUTBank1[123] @[LUTbank.scala 290:25]
    cosLUT[380] <= cosLUTBank1[124] @[LUTbank.scala 290:25]
    cosLUT[381] <= cosLUTBank1[125] @[LUTbank.scala 290:25]
    cosLUT[382] <= cosLUTBank1[126] @[LUTbank.scala 290:25]
    cosLUT[383] <= cosLUTBank1[127] @[LUTbank.scala 290:25]
    cosLUT[384] <= cosLUTBank1[128] @[LUTbank.scala 290:25]
    cosLUT[385] <= cosLUTBank1[129] @[LUTbank.scala 290:25]
    cosLUT[386] <= cosLUTBank1[130] @[LUTbank.scala 290:25]
    cosLUT[387] <= cosLUTBank1[131] @[LUTbank.scala 290:25]
    cosLUT[388] <= cosLUTBank1[132] @[LUTbank.scala 290:25]
    cosLUT[389] <= cosLUTBank1[133] @[LUTbank.scala 290:25]
    cosLUT[390] <= cosLUTBank1[134] @[LUTbank.scala 290:25]
    cosLUT[391] <= cosLUTBank1[135] @[LUTbank.scala 290:25]
    cosLUT[392] <= cosLUTBank1[136] @[LUTbank.scala 290:25]
    cosLUT[393] <= cosLUTBank1[137] @[LUTbank.scala 290:25]
    cosLUT[394] <= cosLUTBank1[138] @[LUTbank.scala 290:25]
    cosLUT[395] <= cosLUTBank1[139] @[LUTbank.scala 290:25]
    cosLUT[396] <= cosLUTBank1[140] @[LUTbank.scala 290:25]
    cosLUT[397] <= cosLUTBank1[141] @[LUTbank.scala 290:25]
    cosLUT[398] <= cosLUTBank1[142] @[LUTbank.scala 290:25]
    cosLUT[399] <= cosLUTBank1[143] @[LUTbank.scala 290:25]
    cosLUT[400] <= cosLUTBank1[144] @[LUTbank.scala 290:25]
    cosLUT[401] <= cosLUTBank1[145] @[LUTbank.scala 290:25]
    cosLUT[402] <= cosLUTBank1[146] @[LUTbank.scala 290:25]
    cosLUT[403] <= cosLUTBank1[147] @[LUTbank.scala 290:25]
    cosLUT[404] <= cosLUTBank1[148] @[LUTbank.scala 290:25]
    cosLUT[405] <= cosLUTBank1[149] @[LUTbank.scala 290:25]
    cosLUT[406] <= cosLUTBank1[150] @[LUTbank.scala 290:25]
    cosLUT[407] <= cosLUTBank1[151] @[LUTbank.scala 290:25]
    cosLUT[408] <= cosLUTBank1[152] @[LUTbank.scala 290:25]
    cosLUT[409] <= cosLUTBank1[153] @[LUTbank.scala 290:25]
    cosLUT[410] <= cosLUTBank1[154] @[LUTbank.scala 290:25]
    cosLUT[411] <= cosLUTBank1[155] @[LUTbank.scala 290:25]
    cosLUT[412] <= cosLUTBank1[156] @[LUTbank.scala 290:25]
    cosLUT[413] <= cosLUTBank1[157] @[LUTbank.scala 290:25]
    cosLUT[414] <= cosLUTBank1[158] @[LUTbank.scala 290:25]
    cosLUT[415] <= cosLUTBank1[159] @[LUTbank.scala 290:25]
    cosLUT[416] <= cosLUTBank1[160] @[LUTbank.scala 290:25]
    cosLUT[417] <= cosLUTBank1[161] @[LUTbank.scala 290:25]
    cosLUT[418] <= cosLUTBank1[162] @[LUTbank.scala 290:25]
    cosLUT[419] <= cosLUTBank1[163] @[LUTbank.scala 290:25]
    cosLUT[420] <= cosLUTBank1[164] @[LUTbank.scala 290:25]
    cosLUT[421] <= cosLUTBank1[165] @[LUTbank.scala 290:25]
    cosLUT[422] <= cosLUTBank1[166] @[LUTbank.scala 290:25]
    cosLUT[423] <= cosLUTBank1[167] @[LUTbank.scala 290:25]
    cosLUT[424] <= cosLUTBank1[168] @[LUTbank.scala 290:25]
    cosLUT[425] <= cosLUTBank1[169] @[LUTbank.scala 290:25]
    cosLUT[426] <= cosLUTBank1[170] @[LUTbank.scala 290:25]
    cosLUT[427] <= cosLUTBank1[171] @[LUTbank.scala 290:25]
    cosLUT[428] <= cosLUTBank1[172] @[LUTbank.scala 290:25]
    cosLUT[429] <= cosLUTBank1[173] @[LUTbank.scala 290:25]
    cosLUT[430] <= cosLUTBank1[174] @[LUTbank.scala 290:25]
    cosLUT[431] <= cosLUTBank1[175] @[LUTbank.scala 290:25]
    cosLUT[432] <= cosLUTBank1[176] @[LUTbank.scala 290:25]
    cosLUT[433] <= cosLUTBank1[177] @[LUTbank.scala 290:25]
    cosLUT[434] <= cosLUTBank1[178] @[LUTbank.scala 290:25]
    cosLUT[435] <= cosLUTBank1[179] @[LUTbank.scala 290:25]
    cosLUT[436] <= cosLUTBank1[180] @[LUTbank.scala 290:25]
    cosLUT[437] <= cosLUTBank1[181] @[LUTbank.scala 290:25]
    cosLUT[438] <= cosLUTBank1[182] @[LUTbank.scala 290:25]
    cosLUT[439] <= cosLUTBank1[183] @[LUTbank.scala 290:25]
    cosLUT[440] <= cosLUTBank1[184] @[LUTbank.scala 290:25]
    cosLUT[441] <= cosLUTBank1[185] @[LUTbank.scala 290:25]
    cosLUT[442] <= cosLUTBank1[186] @[LUTbank.scala 290:25]
    cosLUT[443] <= cosLUTBank1[187] @[LUTbank.scala 290:25]
    cosLUT[444] <= cosLUTBank1[188] @[LUTbank.scala 290:25]
    cosLUT[445] <= cosLUTBank1[189] @[LUTbank.scala 290:25]
    cosLUT[446] <= cosLUTBank1[190] @[LUTbank.scala 290:25]
    cosLUT[447] <= cosLUTBank1[191] @[LUTbank.scala 290:25]
    cosLUT[448] <= cosLUTBank1[192] @[LUTbank.scala 290:25]
    cosLUT[449] <= cosLUTBank1[193] @[LUTbank.scala 290:25]
    cosLUT[450] <= cosLUTBank1[194] @[LUTbank.scala 290:25]
    cosLUT[451] <= cosLUTBank1[195] @[LUTbank.scala 290:25]
    cosLUT[452] <= cosLUTBank1[196] @[LUTbank.scala 290:25]
    cosLUT[453] <= cosLUTBank1[197] @[LUTbank.scala 290:25]
    cosLUT[454] <= cosLUTBank1[198] @[LUTbank.scala 290:25]
    cosLUT[455] <= cosLUTBank1[199] @[LUTbank.scala 290:25]
    cosLUT[456] <= cosLUTBank1[200] @[LUTbank.scala 290:25]
    cosLUT[457] <= cosLUTBank1[201] @[LUTbank.scala 290:25]
    cosLUT[458] <= cosLUTBank1[202] @[LUTbank.scala 290:25]
    cosLUT[459] <= cosLUTBank1[203] @[LUTbank.scala 290:25]
    cosLUT[460] <= cosLUTBank1[204] @[LUTbank.scala 290:25]
    cosLUT[461] <= cosLUTBank1[205] @[LUTbank.scala 290:25]
    cosLUT[462] <= cosLUTBank1[206] @[LUTbank.scala 290:25]
    cosLUT[463] <= cosLUTBank1[207] @[LUTbank.scala 290:25]
    cosLUT[464] <= cosLUTBank1[208] @[LUTbank.scala 290:25]
    cosLUT[465] <= cosLUTBank1[209] @[LUTbank.scala 290:25]
    cosLUT[466] <= cosLUTBank1[210] @[LUTbank.scala 290:25]
    cosLUT[467] <= cosLUTBank1[211] @[LUTbank.scala 290:25]
    cosLUT[468] <= cosLUTBank1[212] @[LUTbank.scala 290:25]
    cosLUT[469] <= cosLUTBank1[213] @[LUTbank.scala 290:25]
    cosLUT[470] <= cosLUTBank1[214] @[LUTbank.scala 290:25]
    cosLUT[471] <= cosLUTBank1[215] @[LUTbank.scala 290:25]
    cosLUT[472] <= cosLUTBank1[216] @[LUTbank.scala 290:25]
    cosLUT[473] <= cosLUTBank1[217] @[LUTbank.scala 290:25]
    cosLUT[474] <= cosLUTBank1[218] @[LUTbank.scala 290:25]
    cosLUT[475] <= cosLUTBank1[219] @[LUTbank.scala 290:25]
    cosLUT[476] <= cosLUTBank1[220] @[LUTbank.scala 290:25]
    cosLUT[477] <= cosLUTBank1[221] @[LUTbank.scala 290:25]
    cosLUT[478] <= cosLUTBank1[222] @[LUTbank.scala 290:25]
    cosLUT[479] <= cosLUTBank1[223] @[LUTbank.scala 290:25]
    cosLUT[480] <= cosLUTBank1[224] @[LUTbank.scala 290:25]
    cosLUT[481] <= cosLUTBank1[225] @[LUTbank.scala 290:25]
    cosLUT[482] <= cosLUTBank1[226] @[LUTbank.scala 290:25]
    cosLUT[483] <= cosLUTBank1[227] @[LUTbank.scala 290:25]
    cosLUT[484] <= cosLUTBank1[228] @[LUTbank.scala 290:25]
    cosLUT[485] <= cosLUTBank1[229] @[LUTbank.scala 290:25]
    cosLUT[486] <= cosLUTBank1[230] @[LUTbank.scala 290:25]
    cosLUT[487] <= cosLUTBank1[231] @[LUTbank.scala 290:25]
    cosLUT[488] <= cosLUTBank1[232] @[LUTbank.scala 290:25]
    cosLUT[489] <= cosLUTBank1[233] @[LUTbank.scala 290:25]
    cosLUT[490] <= cosLUTBank1[234] @[LUTbank.scala 290:25]
    cosLUT[491] <= cosLUTBank1[235] @[LUTbank.scala 290:25]
    cosLUT[492] <= cosLUTBank1[236] @[LUTbank.scala 290:25]
    cosLUT[493] <= cosLUTBank1[237] @[LUTbank.scala 290:25]
    cosLUT[494] <= cosLUTBank1[238] @[LUTbank.scala 290:25]
    cosLUT[495] <= cosLUTBank1[239] @[LUTbank.scala 290:25]
    cosLUT[496] <= cosLUTBank1[240] @[LUTbank.scala 290:25]
    cosLUT[497] <= cosLUTBank1[241] @[LUTbank.scala 290:25]
    cosLUT[498] <= cosLUTBank1[242] @[LUTbank.scala 290:25]
    cosLUT[499] <= cosLUTBank1[243] @[LUTbank.scala 290:25]
    cosLUT[500] <= cosLUTBank1[244] @[LUTbank.scala 290:25]
    cosLUT[501] <= cosLUTBank1[245] @[LUTbank.scala 290:25]
    cosLUT[502] <= cosLUTBank1[246] @[LUTbank.scala 290:25]
    cosLUT[503] <= cosLUTBank1[247] @[LUTbank.scala 290:25]
    cosLUT[504] <= cosLUTBank1[248] @[LUTbank.scala 290:25]
    cosLUT[505] <= cosLUTBank1[249] @[LUTbank.scala 290:25]
    cosLUT[506] <= cosLUTBank1[250] @[LUTbank.scala 290:25]
    cosLUT[507] <= cosLUTBank1[251] @[LUTbank.scala 290:25]
    cosLUT[508] <= cosLUTBank1[252] @[LUTbank.scala 290:25]
    cosLUT[509] <= cosLUTBank1[253] @[LUTbank.scala 290:25]
    cosLUT[510] <= cosLUTBank1[254] @[LUTbank.scala 290:25]
    cosLUT[511] <= cosLUTBank1[255] @[LUTbank.scala 290:25]
    cosLUT[512] <= cosLUTBank2[0] @[LUTbank.scala 290:25]
    cosLUT[513] <= cosLUTBank2[1] @[LUTbank.scala 290:25]
    cosLUT[514] <= cosLUTBank2[2] @[LUTbank.scala 290:25]
    cosLUT[515] <= cosLUTBank2[3] @[LUTbank.scala 290:25]
    cosLUT[516] <= cosLUTBank2[4] @[LUTbank.scala 290:25]
    cosLUT[517] <= cosLUTBank2[5] @[LUTbank.scala 290:25]
    cosLUT[518] <= cosLUTBank2[6] @[LUTbank.scala 290:25]
    cosLUT[519] <= cosLUTBank2[7] @[LUTbank.scala 290:25]
    cosLUT[520] <= cosLUTBank2[8] @[LUTbank.scala 290:25]
    cosLUT[521] <= cosLUTBank2[9] @[LUTbank.scala 290:25]
    cosLUT[522] <= cosLUTBank2[10] @[LUTbank.scala 290:25]
    cosLUT[523] <= cosLUTBank2[11] @[LUTbank.scala 290:25]
    cosLUT[524] <= cosLUTBank2[12] @[LUTbank.scala 290:25]
    cosLUT[525] <= cosLUTBank2[13] @[LUTbank.scala 290:25]
    cosLUT[526] <= cosLUTBank2[14] @[LUTbank.scala 290:25]
    cosLUT[527] <= cosLUTBank2[15] @[LUTbank.scala 290:25]
    cosLUT[528] <= cosLUTBank2[16] @[LUTbank.scala 290:25]
    cosLUT[529] <= cosLUTBank2[17] @[LUTbank.scala 290:25]
    cosLUT[530] <= cosLUTBank2[18] @[LUTbank.scala 290:25]
    cosLUT[531] <= cosLUTBank2[19] @[LUTbank.scala 290:25]
    cosLUT[532] <= cosLUTBank2[20] @[LUTbank.scala 290:25]
    cosLUT[533] <= cosLUTBank2[21] @[LUTbank.scala 290:25]
    cosLUT[534] <= cosLUTBank2[22] @[LUTbank.scala 290:25]
    cosLUT[535] <= cosLUTBank2[23] @[LUTbank.scala 290:25]
    cosLUT[536] <= cosLUTBank2[24] @[LUTbank.scala 290:25]
    cosLUT[537] <= cosLUTBank2[25] @[LUTbank.scala 290:25]
    cosLUT[538] <= cosLUTBank2[26] @[LUTbank.scala 290:25]
    cosLUT[539] <= cosLUTBank2[27] @[LUTbank.scala 290:25]
    cosLUT[540] <= cosLUTBank2[28] @[LUTbank.scala 290:25]
    cosLUT[541] <= cosLUTBank2[29] @[LUTbank.scala 290:25]
    cosLUT[542] <= cosLUTBank2[30] @[LUTbank.scala 290:25]
    cosLUT[543] <= cosLUTBank2[31] @[LUTbank.scala 290:25]
    cosLUT[544] <= cosLUTBank2[32] @[LUTbank.scala 290:25]
    cosLUT[545] <= cosLUTBank2[33] @[LUTbank.scala 290:25]
    cosLUT[546] <= cosLUTBank2[34] @[LUTbank.scala 290:25]
    cosLUT[547] <= cosLUTBank2[35] @[LUTbank.scala 290:25]
    cosLUT[548] <= cosLUTBank2[36] @[LUTbank.scala 290:25]
    cosLUT[549] <= cosLUTBank2[37] @[LUTbank.scala 290:25]
    cosLUT[550] <= cosLUTBank2[38] @[LUTbank.scala 290:25]
    cosLUT[551] <= cosLUTBank2[39] @[LUTbank.scala 290:25]
    cosLUT[552] <= cosLUTBank2[40] @[LUTbank.scala 290:25]
    cosLUT[553] <= cosLUTBank2[41] @[LUTbank.scala 290:25]
    cosLUT[554] <= cosLUTBank2[42] @[LUTbank.scala 290:25]
    cosLUT[555] <= cosLUTBank2[43] @[LUTbank.scala 290:25]
    cosLUT[556] <= cosLUTBank2[44] @[LUTbank.scala 290:25]
    cosLUT[557] <= cosLUTBank2[45] @[LUTbank.scala 290:25]
    cosLUT[558] <= cosLUTBank2[46] @[LUTbank.scala 290:25]
    cosLUT[559] <= cosLUTBank2[47] @[LUTbank.scala 290:25]
    cosLUT[560] <= cosLUTBank2[48] @[LUTbank.scala 290:25]
    cosLUT[561] <= cosLUTBank2[49] @[LUTbank.scala 290:25]
    cosLUT[562] <= cosLUTBank2[50] @[LUTbank.scala 290:25]
    cosLUT[563] <= cosLUTBank2[51] @[LUTbank.scala 290:25]
    cosLUT[564] <= cosLUTBank2[52] @[LUTbank.scala 290:25]
    cosLUT[565] <= cosLUTBank2[53] @[LUTbank.scala 290:25]
    cosLUT[566] <= cosLUTBank2[54] @[LUTbank.scala 290:25]
    cosLUT[567] <= cosLUTBank2[55] @[LUTbank.scala 290:25]
    cosLUT[568] <= cosLUTBank2[56] @[LUTbank.scala 290:25]
    cosLUT[569] <= cosLUTBank2[57] @[LUTbank.scala 290:25]
    cosLUT[570] <= cosLUTBank2[58] @[LUTbank.scala 290:25]
    cosLUT[571] <= cosLUTBank2[59] @[LUTbank.scala 290:25]
    cosLUT[572] <= cosLUTBank2[60] @[LUTbank.scala 290:25]
    cosLUT[573] <= cosLUTBank2[61] @[LUTbank.scala 290:25]
    cosLUT[574] <= cosLUTBank2[62] @[LUTbank.scala 290:25]
    cosLUT[575] <= cosLUTBank2[63] @[LUTbank.scala 290:25]
    cosLUT[576] <= cosLUTBank2[64] @[LUTbank.scala 290:25]
    cosLUT[577] <= cosLUTBank2[65] @[LUTbank.scala 290:25]
    cosLUT[578] <= cosLUTBank2[66] @[LUTbank.scala 290:25]
    cosLUT[579] <= cosLUTBank2[67] @[LUTbank.scala 290:25]
    cosLUT[580] <= cosLUTBank2[68] @[LUTbank.scala 290:25]
    cosLUT[581] <= cosLUTBank2[69] @[LUTbank.scala 290:25]
    cosLUT[582] <= cosLUTBank2[70] @[LUTbank.scala 290:25]
    cosLUT[583] <= cosLUTBank2[71] @[LUTbank.scala 290:25]
    cosLUT[584] <= cosLUTBank2[72] @[LUTbank.scala 290:25]
    cosLUT[585] <= cosLUTBank2[73] @[LUTbank.scala 290:25]
    cosLUT[586] <= cosLUTBank2[74] @[LUTbank.scala 290:25]
    cosLUT[587] <= cosLUTBank2[75] @[LUTbank.scala 290:25]
    cosLUT[588] <= cosLUTBank2[76] @[LUTbank.scala 290:25]
    cosLUT[589] <= cosLUTBank2[77] @[LUTbank.scala 290:25]
    cosLUT[590] <= cosLUTBank2[78] @[LUTbank.scala 290:25]
    cosLUT[591] <= cosLUTBank2[79] @[LUTbank.scala 290:25]
    cosLUT[592] <= cosLUTBank2[80] @[LUTbank.scala 290:25]
    cosLUT[593] <= cosLUTBank2[81] @[LUTbank.scala 290:25]
    cosLUT[594] <= cosLUTBank2[82] @[LUTbank.scala 290:25]
    cosLUT[595] <= cosLUTBank2[83] @[LUTbank.scala 290:25]
    cosLUT[596] <= cosLUTBank2[84] @[LUTbank.scala 290:25]
    cosLUT[597] <= cosLUTBank2[85] @[LUTbank.scala 290:25]
    cosLUT[598] <= cosLUTBank2[86] @[LUTbank.scala 290:25]
    cosLUT[599] <= cosLUTBank2[87] @[LUTbank.scala 290:25]
    cosLUT[600] <= cosLUTBank2[88] @[LUTbank.scala 290:25]
    cosLUT[601] <= cosLUTBank2[89] @[LUTbank.scala 290:25]
    cosLUT[602] <= cosLUTBank2[90] @[LUTbank.scala 290:25]
    cosLUT[603] <= cosLUTBank2[91] @[LUTbank.scala 290:25]
    cosLUT[604] <= cosLUTBank2[92] @[LUTbank.scala 290:25]
    cosLUT[605] <= cosLUTBank2[93] @[LUTbank.scala 290:25]
    cosLUT[606] <= cosLUTBank2[94] @[LUTbank.scala 290:25]
    cosLUT[607] <= cosLUTBank2[95] @[LUTbank.scala 290:25]
    cosLUT[608] <= cosLUTBank2[96] @[LUTbank.scala 290:25]
    cosLUT[609] <= cosLUTBank2[97] @[LUTbank.scala 290:25]
    cosLUT[610] <= cosLUTBank2[98] @[LUTbank.scala 290:25]
    cosLUT[611] <= cosLUTBank2[99] @[LUTbank.scala 290:25]
    cosLUT[612] <= cosLUTBank2[100] @[LUTbank.scala 290:25]
    cosLUT[613] <= cosLUTBank2[101] @[LUTbank.scala 290:25]
    cosLUT[614] <= cosLUTBank2[102] @[LUTbank.scala 290:25]
    cosLUT[615] <= cosLUTBank2[103] @[LUTbank.scala 290:25]
    cosLUT[616] <= cosLUTBank2[104] @[LUTbank.scala 290:25]
    cosLUT[617] <= cosLUTBank2[105] @[LUTbank.scala 290:25]
    cosLUT[618] <= cosLUTBank2[106] @[LUTbank.scala 290:25]
    cosLUT[619] <= cosLUTBank2[107] @[LUTbank.scala 290:25]
    cosLUT[620] <= cosLUTBank2[108] @[LUTbank.scala 290:25]
    cosLUT[621] <= cosLUTBank2[109] @[LUTbank.scala 290:25]
    cosLUT[622] <= cosLUTBank2[110] @[LUTbank.scala 290:25]
    cosLUT[623] <= cosLUTBank2[111] @[LUTbank.scala 290:25]
    cosLUT[624] <= cosLUTBank2[112] @[LUTbank.scala 290:25]
    cosLUT[625] <= cosLUTBank2[113] @[LUTbank.scala 290:25]
    cosLUT[626] <= cosLUTBank2[114] @[LUTbank.scala 290:25]
    cosLUT[627] <= cosLUTBank2[115] @[LUTbank.scala 290:25]
    cosLUT[628] <= cosLUTBank2[116] @[LUTbank.scala 290:25]
    cosLUT[629] <= cosLUTBank2[117] @[LUTbank.scala 290:25]
    cosLUT[630] <= cosLUTBank2[118] @[LUTbank.scala 290:25]
    cosLUT[631] <= cosLUTBank2[119] @[LUTbank.scala 290:25]
    cosLUT[632] <= cosLUTBank2[120] @[LUTbank.scala 290:25]
    cosLUT[633] <= cosLUTBank2[121] @[LUTbank.scala 290:25]
    cosLUT[634] <= cosLUTBank2[122] @[LUTbank.scala 290:25]
    cosLUT[635] <= cosLUTBank2[123] @[LUTbank.scala 290:25]
    cosLUT[636] <= cosLUTBank2[124] @[LUTbank.scala 290:25]
    cosLUT[637] <= cosLUTBank2[125] @[LUTbank.scala 290:25]
    cosLUT[638] <= cosLUTBank2[126] @[LUTbank.scala 290:25]
    cosLUT[639] <= cosLUTBank2[127] @[LUTbank.scala 290:25]
    cosLUT[640] <= cosLUTBank2[128] @[LUTbank.scala 290:25]
    cosLUT[641] <= cosLUTBank2[129] @[LUTbank.scala 290:25]
    cosLUT[642] <= cosLUTBank2[130] @[LUTbank.scala 290:25]
    cosLUT[643] <= cosLUTBank2[131] @[LUTbank.scala 290:25]
    cosLUT[644] <= cosLUTBank2[132] @[LUTbank.scala 290:25]
    cosLUT[645] <= cosLUTBank2[133] @[LUTbank.scala 290:25]
    cosLUT[646] <= cosLUTBank2[134] @[LUTbank.scala 290:25]
    cosLUT[647] <= cosLUTBank2[135] @[LUTbank.scala 290:25]
    cosLUT[648] <= cosLUTBank2[136] @[LUTbank.scala 290:25]
    cosLUT[649] <= cosLUTBank2[137] @[LUTbank.scala 290:25]
    cosLUT[650] <= cosLUTBank2[138] @[LUTbank.scala 290:25]
    cosLUT[651] <= cosLUTBank2[139] @[LUTbank.scala 290:25]
    cosLUT[652] <= cosLUTBank2[140] @[LUTbank.scala 290:25]
    cosLUT[653] <= cosLUTBank2[141] @[LUTbank.scala 290:25]
    cosLUT[654] <= cosLUTBank2[142] @[LUTbank.scala 290:25]
    cosLUT[655] <= cosLUTBank2[143] @[LUTbank.scala 290:25]
    cosLUT[656] <= cosLUTBank2[144] @[LUTbank.scala 290:25]
    cosLUT[657] <= cosLUTBank2[145] @[LUTbank.scala 290:25]
    cosLUT[658] <= cosLUTBank2[146] @[LUTbank.scala 290:25]
    cosLUT[659] <= cosLUTBank2[147] @[LUTbank.scala 290:25]
    cosLUT[660] <= cosLUTBank2[148] @[LUTbank.scala 290:25]
    cosLUT[661] <= cosLUTBank2[149] @[LUTbank.scala 290:25]
    cosLUT[662] <= cosLUTBank2[150] @[LUTbank.scala 290:25]
    cosLUT[663] <= cosLUTBank2[151] @[LUTbank.scala 290:25]
    cosLUT[664] <= cosLUTBank2[152] @[LUTbank.scala 290:25]
    cosLUT[665] <= cosLUTBank2[153] @[LUTbank.scala 290:25]
    cosLUT[666] <= cosLUTBank2[154] @[LUTbank.scala 290:25]
    cosLUT[667] <= cosLUTBank2[155] @[LUTbank.scala 290:25]
    cosLUT[668] <= cosLUTBank2[156] @[LUTbank.scala 290:25]
    cosLUT[669] <= cosLUTBank2[157] @[LUTbank.scala 290:25]
    cosLUT[670] <= cosLUTBank2[158] @[LUTbank.scala 290:25]
    cosLUT[671] <= cosLUTBank2[159] @[LUTbank.scala 290:25]
    cosLUT[672] <= cosLUTBank2[160] @[LUTbank.scala 290:25]
    cosLUT[673] <= cosLUTBank2[161] @[LUTbank.scala 290:25]
    cosLUT[674] <= cosLUTBank2[162] @[LUTbank.scala 290:25]
    cosLUT[675] <= cosLUTBank2[163] @[LUTbank.scala 290:25]
    cosLUT[676] <= cosLUTBank2[164] @[LUTbank.scala 290:25]
    cosLUT[677] <= cosLUTBank2[165] @[LUTbank.scala 290:25]
    cosLUT[678] <= cosLUTBank2[166] @[LUTbank.scala 290:25]
    cosLUT[679] <= cosLUTBank2[167] @[LUTbank.scala 290:25]
    cosLUT[680] <= cosLUTBank2[168] @[LUTbank.scala 290:25]
    cosLUT[681] <= cosLUTBank2[169] @[LUTbank.scala 290:25]
    cosLUT[682] <= cosLUTBank2[170] @[LUTbank.scala 290:25]
    cosLUT[683] <= cosLUTBank2[171] @[LUTbank.scala 290:25]
    cosLUT[684] <= cosLUTBank2[172] @[LUTbank.scala 290:25]
    cosLUT[685] <= cosLUTBank2[173] @[LUTbank.scala 290:25]
    cosLUT[686] <= cosLUTBank2[174] @[LUTbank.scala 290:25]
    cosLUT[687] <= cosLUTBank2[175] @[LUTbank.scala 290:25]
    cosLUT[688] <= cosLUTBank2[176] @[LUTbank.scala 290:25]
    cosLUT[689] <= cosLUTBank2[177] @[LUTbank.scala 290:25]
    cosLUT[690] <= cosLUTBank2[178] @[LUTbank.scala 290:25]
    cosLUT[691] <= cosLUTBank2[179] @[LUTbank.scala 290:25]
    cosLUT[692] <= cosLUTBank2[180] @[LUTbank.scala 290:25]
    cosLUT[693] <= cosLUTBank2[181] @[LUTbank.scala 290:25]
    cosLUT[694] <= cosLUTBank2[182] @[LUTbank.scala 290:25]
    cosLUT[695] <= cosLUTBank2[183] @[LUTbank.scala 290:25]
    cosLUT[696] <= cosLUTBank2[184] @[LUTbank.scala 290:25]
    cosLUT[697] <= cosLUTBank2[185] @[LUTbank.scala 290:25]
    cosLUT[698] <= cosLUTBank2[186] @[LUTbank.scala 290:25]
    cosLUT[699] <= cosLUTBank2[187] @[LUTbank.scala 290:25]
    cosLUT[700] <= cosLUTBank2[188] @[LUTbank.scala 290:25]
    cosLUT[701] <= cosLUTBank2[189] @[LUTbank.scala 290:25]
    cosLUT[702] <= cosLUTBank2[190] @[LUTbank.scala 290:25]
    cosLUT[703] <= cosLUTBank2[191] @[LUTbank.scala 290:25]
    cosLUT[704] <= cosLUTBank2[192] @[LUTbank.scala 290:25]
    cosLUT[705] <= cosLUTBank2[193] @[LUTbank.scala 290:25]
    cosLUT[706] <= cosLUTBank2[194] @[LUTbank.scala 290:25]
    cosLUT[707] <= cosLUTBank2[195] @[LUTbank.scala 290:25]
    cosLUT[708] <= cosLUTBank2[196] @[LUTbank.scala 290:25]
    cosLUT[709] <= cosLUTBank2[197] @[LUTbank.scala 290:25]
    cosLUT[710] <= cosLUTBank2[198] @[LUTbank.scala 290:25]
    cosLUT[711] <= cosLUTBank2[199] @[LUTbank.scala 290:25]
    cosLUT[712] <= cosLUTBank2[200] @[LUTbank.scala 290:25]
    cosLUT[713] <= cosLUTBank2[201] @[LUTbank.scala 290:25]
    cosLUT[714] <= cosLUTBank2[202] @[LUTbank.scala 290:25]
    cosLUT[715] <= cosLUTBank2[203] @[LUTbank.scala 290:25]
    cosLUT[716] <= cosLUTBank2[204] @[LUTbank.scala 290:25]
    cosLUT[717] <= cosLUTBank2[205] @[LUTbank.scala 290:25]
    cosLUT[718] <= cosLUTBank2[206] @[LUTbank.scala 290:25]
    cosLUT[719] <= cosLUTBank2[207] @[LUTbank.scala 290:25]
    cosLUT[720] <= cosLUTBank2[208] @[LUTbank.scala 290:25]
    cosLUT[721] <= cosLUTBank2[209] @[LUTbank.scala 290:25]
    cosLUT[722] <= cosLUTBank2[210] @[LUTbank.scala 290:25]
    cosLUT[723] <= cosLUTBank2[211] @[LUTbank.scala 290:25]
    cosLUT[724] <= cosLUTBank2[212] @[LUTbank.scala 290:25]
    cosLUT[725] <= cosLUTBank2[213] @[LUTbank.scala 290:25]
    cosLUT[726] <= cosLUTBank2[214] @[LUTbank.scala 290:25]
    cosLUT[727] <= cosLUTBank2[215] @[LUTbank.scala 290:25]
    cosLUT[728] <= cosLUTBank2[216] @[LUTbank.scala 290:25]
    cosLUT[729] <= cosLUTBank2[217] @[LUTbank.scala 290:25]
    cosLUT[730] <= cosLUTBank2[218] @[LUTbank.scala 290:25]
    cosLUT[731] <= cosLUTBank2[219] @[LUTbank.scala 290:25]
    cosLUT[732] <= cosLUTBank2[220] @[LUTbank.scala 290:25]
    cosLUT[733] <= cosLUTBank2[221] @[LUTbank.scala 290:25]
    cosLUT[734] <= cosLUTBank2[222] @[LUTbank.scala 290:25]
    cosLUT[735] <= cosLUTBank2[223] @[LUTbank.scala 290:25]
    cosLUT[736] <= cosLUTBank2[224] @[LUTbank.scala 290:25]
    cosLUT[737] <= cosLUTBank2[225] @[LUTbank.scala 290:25]
    cosLUT[738] <= cosLUTBank2[226] @[LUTbank.scala 290:25]
    cosLUT[739] <= cosLUTBank2[227] @[LUTbank.scala 290:25]
    cosLUT[740] <= cosLUTBank2[228] @[LUTbank.scala 290:25]
    cosLUT[741] <= cosLUTBank2[229] @[LUTbank.scala 290:25]
    cosLUT[742] <= cosLUTBank2[230] @[LUTbank.scala 290:25]
    cosLUT[743] <= cosLUTBank2[231] @[LUTbank.scala 290:25]
    cosLUT[744] <= cosLUTBank2[232] @[LUTbank.scala 290:25]
    cosLUT[745] <= cosLUTBank2[233] @[LUTbank.scala 290:25]
    cosLUT[746] <= cosLUTBank2[234] @[LUTbank.scala 290:25]
    cosLUT[747] <= cosLUTBank2[235] @[LUTbank.scala 290:25]
    cosLUT[748] <= cosLUTBank2[236] @[LUTbank.scala 290:25]
    cosLUT[749] <= cosLUTBank2[237] @[LUTbank.scala 290:25]
    cosLUT[750] <= cosLUTBank2[238] @[LUTbank.scala 290:25]
    cosLUT[751] <= cosLUTBank2[239] @[LUTbank.scala 290:25]
    cosLUT[752] <= cosLUTBank2[240] @[LUTbank.scala 290:25]
    cosLUT[753] <= cosLUTBank2[241] @[LUTbank.scala 290:25]
    cosLUT[754] <= cosLUTBank2[242] @[LUTbank.scala 290:25]
    cosLUT[755] <= cosLUTBank2[243] @[LUTbank.scala 290:25]
    cosLUT[756] <= cosLUTBank2[244] @[LUTbank.scala 290:25]
    cosLUT[757] <= cosLUTBank2[245] @[LUTbank.scala 290:25]
    cosLUT[758] <= cosLUTBank2[246] @[LUTbank.scala 290:25]
    cosLUT[759] <= cosLUTBank2[247] @[LUTbank.scala 290:25]
    cosLUT[760] <= cosLUTBank2[248] @[LUTbank.scala 290:25]
    cosLUT[761] <= cosLUTBank2[249] @[LUTbank.scala 290:25]
    cosLUT[762] <= cosLUTBank2[250] @[LUTbank.scala 290:25]
    cosLUT[763] <= cosLUTBank2[251] @[LUTbank.scala 290:25]
    cosLUT[764] <= cosLUTBank2[252] @[LUTbank.scala 290:25]
    cosLUT[765] <= cosLUTBank2[253] @[LUTbank.scala 290:25]
    cosLUT[766] <= cosLUTBank2[254] @[LUTbank.scala 290:25]
    cosLUT[767] <= cosLUTBank2[255] @[LUTbank.scala 290:25]
    cosLUT[768] <= cosLUTBank3[0] @[LUTbank.scala 290:25]
    cosLUT[769] <= cosLUTBank3[1] @[LUTbank.scala 290:25]
    cosLUT[770] <= cosLUTBank3[2] @[LUTbank.scala 290:25]
    cosLUT[771] <= cosLUTBank3[3] @[LUTbank.scala 290:25]
    cosLUT[772] <= cosLUTBank3[4] @[LUTbank.scala 290:25]
    cosLUT[773] <= cosLUTBank3[5] @[LUTbank.scala 290:25]
    cosLUT[774] <= cosLUTBank3[6] @[LUTbank.scala 290:25]
    cosLUT[775] <= cosLUTBank3[7] @[LUTbank.scala 290:25]
    cosLUT[776] <= cosLUTBank3[8] @[LUTbank.scala 290:25]
    cosLUT[777] <= cosLUTBank3[9] @[LUTbank.scala 290:25]
    cosLUT[778] <= cosLUTBank3[10] @[LUTbank.scala 290:25]
    cosLUT[779] <= cosLUTBank3[11] @[LUTbank.scala 290:25]
    cosLUT[780] <= cosLUTBank3[12] @[LUTbank.scala 290:25]
    cosLUT[781] <= cosLUTBank3[13] @[LUTbank.scala 290:25]
    cosLUT[782] <= cosLUTBank3[14] @[LUTbank.scala 290:25]
    cosLUT[783] <= cosLUTBank3[15] @[LUTbank.scala 290:25]
    cosLUT[784] <= cosLUTBank3[16] @[LUTbank.scala 290:25]
    cosLUT[785] <= cosLUTBank3[17] @[LUTbank.scala 290:25]
    cosLUT[786] <= cosLUTBank3[18] @[LUTbank.scala 290:25]
    cosLUT[787] <= cosLUTBank3[19] @[LUTbank.scala 290:25]
    cosLUT[788] <= cosLUTBank3[20] @[LUTbank.scala 290:25]
    cosLUT[789] <= cosLUTBank3[21] @[LUTbank.scala 290:25]
    cosLUT[790] <= cosLUTBank3[22] @[LUTbank.scala 290:25]
    cosLUT[791] <= cosLUTBank3[23] @[LUTbank.scala 290:25]
    cosLUT[792] <= cosLUTBank3[24] @[LUTbank.scala 290:25]
    cosLUT[793] <= cosLUTBank3[25] @[LUTbank.scala 290:25]
    cosLUT[794] <= cosLUTBank3[26] @[LUTbank.scala 290:25]
    cosLUT[795] <= cosLUTBank3[27] @[LUTbank.scala 290:25]
    cosLUT[796] <= cosLUTBank3[28] @[LUTbank.scala 290:25]
    cosLUT[797] <= cosLUTBank3[29] @[LUTbank.scala 290:25]
    cosLUT[798] <= cosLUTBank3[30] @[LUTbank.scala 290:25]
    cosLUT[799] <= cosLUTBank3[31] @[LUTbank.scala 290:25]
    cosLUT[800] <= cosLUTBank3[32] @[LUTbank.scala 290:25]
    cosLUT[801] <= cosLUTBank3[33] @[LUTbank.scala 290:25]
    cosLUT[802] <= cosLUTBank3[34] @[LUTbank.scala 290:25]
    cosLUT[803] <= cosLUTBank3[35] @[LUTbank.scala 290:25]
    cosLUT[804] <= cosLUTBank3[36] @[LUTbank.scala 290:25]
    cosLUT[805] <= cosLUTBank3[37] @[LUTbank.scala 290:25]
    cosLUT[806] <= cosLUTBank3[38] @[LUTbank.scala 290:25]
    cosLUT[807] <= cosLUTBank3[39] @[LUTbank.scala 290:25]
    cosLUT[808] <= cosLUTBank3[40] @[LUTbank.scala 290:25]
    cosLUT[809] <= cosLUTBank3[41] @[LUTbank.scala 290:25]
    cosLUT[810] <= cosLUTBank3[42] @[LUTbank.scala 290:25]
    cosLUT[811] <= cosLUTBank3[43] @[LUTbank.scala 290:25]
    cosLUT[812] <= cosLUTBank3[44] @[LUTbank.scala 290:25]
    cosLUT[813] <= cosLUTBank3[45] @[LUTbank.scala 290:25]
    cosLUT[814] <= cosLUTBank3[46] @[LUTbank.scala 290:25]
    cosLUT[815] <= cosLUTBank3[47] @[LUTbank.scala 290:25]
    cosLUT[816] <= cosLUTBank3[48] @[LUTbank.scala 290:25]
    cosLUT[817] <= cosLUTBank3[49] @[LUTbank.scala 290:25]
    cosLUT[818] <= cosLUTBank3[50] @[LUTbank.scala 290:25]
    cosLUT[819] <= cosLUTBank3[51] @[LUTbank.scala 290:25]
    cosLUT[820] <= cosLUTBank3[52] @[LUTbank.scala 290:25]
    cosLUT[821] <= cosLUTBank3[53] @[LUTbank.scala 290:25]
    cosLUT[822] <= cosLUTBank3[54] @[LUTbank.scala 290:25]
    cosLUT[823] <= cosLUTBank3[55] @[LUTbank.scala 290:25]
    cosLUT[824] <= cosLUTBank3[56] @[LUTbank.scala 290:25]
    cosLUT[825] <= cosLUTBank3[57] @[LUTbank.scala 290:25]
    cosLUT[826] <= cosLUTBank3[58] @[LUTbank.scala 290:25]
    cosLUT[827] <= cosLUTBank3[59] @[LUTbank.scala 290:25]
    cosLUT[828] <= cosLUTBank3[60] @[LUTbank.scala 290:25]
    cosLUT[829] <= cosLUTBank3[61] @[LUTbank.scala 290:25]
    cosLUT[830] <= cosLUTBank3[62] @[LUTbank.scala 290:25]
    cosLUT[831] <= cosLUTBank3[63] @[LUTbank.scala 290:25]
    cosLUT[832] <= cosLUTBank3[64] @[LUTbank.scala 290:25]
    cosLUT[833] <= cosLUTBank3[65] @[LUTbank.scala 290:25]
    cosLUT[834] <= cosLUTBank3[66] @[LUTbank.scala 290:25]
    cosLUT[835] <= cosLUTBank3[67] @[LUTbank.scala 290:25]
    cosLUT[836] <= cosLUTBank3[68] @[LUTbank.scala 290:25]
    cosLUT[837] <= cosLUTBank3[69] @[LUTbank.scala 290:25]
    cosLUT[838] <= cosLUTBank3[70] @[LUTbank.scala 290:25]
    cosLUT[839] <= cosLUTBank3[71] @[LUTbank.scala 290:25]
    cosLUT[840] <= cosLUTBank3[72] @[LUTbank.scala 290:25]
    cosLUT[841] <= cosLUTBank3[73] @[LUTbank.scala 290:25]
    cosLUT[842] <= cosLUTBank3[74] @[LUTbank.scala 290:25]
    cosLUT[843] <= cosLUTBank3[75] @[LUTbank.scala 290:25]
    cosLUT[844] <= cosLUTBank3[76] @[LUTbank.scala 290:25]
    cosLUT[845] <= cosLUTBank3[77] @[LUTbank.scala 290:25]
    cosLUT[846] <= cosLUTBank3[78] @[LUTbank.scala 290:25]
    cosLUT[847] <= cosLUTBank3[79] @[LUTbank.scala 290:25]
    cosLUT[848] <= cosLUTBank3[80] @[LUTbank.scala 290:25]
    cosLUT[849] <= cosLUTBank3[81] @[LUTbank.scala 290:25]
    cosLUT[850] <= cosLUTBank3[82] @[LUTbank.scala 290:25]
    cosLUT[851] <= cosLUTBank3[83] @[LUTbank.scala 290:25]
    cosLUT[852] <= cosLUTBank3[84] @[LUTbank.scala 290:25]
    cosLUT[853] <= cosLUTBank3[85] @[LUTbank.scala 290:25]
    cosLUT[854] <= cosLUTBank3[86] @[LUTbank.scala 290:25]
    cosLUT[855] <= cosLUTBank3[87] @[LUTbank.scala 290:25]
    cosLUT[856] <= cosLUTBank3[88] @[LUTbank.scala 290:25]
    cosLUT[857] <= cosLUTBank3[89] @[LUTbank.scala 290:25]
    cosLUT[858] <= cosLUTBank3[90] @[LUTbank.scala 290:25]
    cosLUT[859] <= cosLUTBank3[91] @[LUTbank.scala 290:25]
    cosLUT[860] <= cosLUTBank3[92] @[LUTbank.scala 290:25]
    cosLUT[861] <= cosLUTBank3[93] @[LUTbank.scala 290:25]
    cosLUT[862] <= cosLUTBank3[94] @[LUTbank.scala 290:25]
    cosLUT[863] <= cosLUTBank3[95] @[LUTbank.scala 290:25]
    cosLUT[864] <= cosLUTBank3[96] @[LUTbank.scala 290:25]
    cosLUT[865] <= cosLUTBank3[97] @[LUTbank.scala 290:25]
    cosLUT[866] <= cosLUTBank3[98] @[LUTbank.scala 290:25]
    cosLUT[867] <= cosLUTBank3[99] @[LUTbank.scala 290:25]
    cosLUT[868] <= cosLUTBank3[100] @[LUTbank.scala 290:25]
    cosLUT[869] <= cosLUTBank3[101] @[LUTbank.scala 290:25]
    cosLUT[870] <= cosLUTBank3[102] @[LUTbank.scala 290:25]
    cosLUT[871] <= cosLUTBank3[103] @[LUTbank.scala 290:25]
    cosLUT[872] <= cosLUTBank3[104] @[LUTbank.scala 290:25]
    cosLUT[873] <= cosLUTBank3[105] @[LUTbank.scala 290:25]
    cosLUT[874] <= cosLUTBank3[106] @[LUTbank.scala 290:25]
    cosLUT[875] <= cosLUTBank3[107] @[LUTbank.scala 290:25]
    cosLUT[876] <= cosLUTBank3[108] @[LUTbank.scala 290:25]
    cosLUT[877] <= cosLUTBank3[109] @[LUTbank.scala 290:25]
    cosLUT[878] <= cosLUTBank3[110] @[LUTbank.scala 290:25]
    cosLUT[879] <= cosLUTBank3[111] @[LUTbank.scala 290:25]
    cosLUT[880] <= cosLUTBank3[112] @[LUTbank.scala 290:25]
    cosLUT[881] <= cosLUTBank3[113] @[LUTbank.scala 290:25]
    cosLUT[882] <= cosLUTBank3[114] @[LUTbank.scala 290:25]
    cosLUT[883] <= cosLUTBank3[115] @[LUTbank.scala 290:25]
    cosLUT[884] <= cosLUTBank3[116] @[LUTbank.scala 290:25]
    cosLUT[885] <= cosLUTBank3[117] @[LUTbank.scala 290:25]
    cosLUT[886] <= cosLUTBank3[118] @[LUTbank.scala 290:25]
    cosLUT[887] <= cosLUTBank3[119] @[LUTbank.scala 290:25]
    cosLUT[888] <= cosLUTBank3[120] @[LUTbank.scala 290:25]
    cosLUT[889] <= cosLUTBank3[121] @[LUTbank.scala 290:25]
    cosLUT[890] <= cosLUTBank3[122] @[LUTbank.scala 290:25]
    cosLUT[891] <= cosLUTBank3[123] @[LUTbank.scala 290:25]
    cosLUT[892] <= cosLUTBank3[124] @[LUTbank.scala 290:25]
    cosLUT[893] <= cosLUTBank3[125] @[LUTbank.scala 290:25]
    cosLUT[894] <= cosLUTBank3[126] @[LUTbank.scala 290:25]
    cosLUT[895] <= cosLUTBank3[127] @[LUTbank.scala 290:25]
    cosLUT[896] <= cosLUTBank3[128] @[LUTbank.scala 290:25]
    cosLUT[897] <= cosLUTBank3[129] @[LUTbank.scala 290:25]
    cosLUT[898] <= cosLUTBank3[130] @[LUTbank.scala 290:25]
    cosLUT[899] <= cosLUTBank3[131] @[LUTbank.scala 290:25]
    cosLUT[900] <= cosLUTBank3[132] @[LUTbank.scala 290:25]
    cosLUT[901] <= cosLUTBank3[133] @[LUTbank.scala 290:25]
    cosLUT[902] <= cosLUTBank3[134] @[LUTbank.scala 290:25]
    cosLUT[903] <= cosLUTBank3[135] @[LUTbank.scala 290:25]
    cosLUT[904] <= cosLUTBank3[136] @[LUTbank.scala 290:25]
    cosLUT[905] <= cosLUTBank3[137] @[LUTbank.scala 290:25]
    cosLUT[906] <= cosLUTBank3[138] @[LUTbank.scala 290:25]
    cosLUT[907] <= cosLUTBank3[139] @[LUTbank.scala 290:25]
    cosLUT[908] <= cosLUTBank3[140] @[LUTbank.scala 290:25]
    cosLUT[909] <= cosLUTBank3[141] @[LUTbank.scala 290:25]
    cosLUT[910] <= cosLUTBank3[142] @[LUTbank.scala 290:25]
    cosLUT[911] <= cosLUTBank3[143] @[LUTbank.scala 290:25]
    cosLUT[912] <= cosLUTBank3[144] @[LUTbank.scala 290:25]
    cosLUT[913] <= cosLUTBank3[145] @[LUTbank.scala 290:25]
    cosLUT[914] <= cosLUTBank3[146] @[LUTbank.scala 290:25]
    cosLUT[915] <= cosLUTBank3[147] @[LUTbank.scala 290:25]
    cosLUT[916] <= cosLUTBank3[148] @[LUTbank.scala 290:25]
    cosLUT[917] <= cosLUTBank3[149] @[LUTbank.scala 290:25]
    cosLUT[918] <= cosLUTBank3[150] @[LUTbank.scala 290:25]
    cosLUT[919] <= cosLUTBank3[151] @[LUTbank.scala 290:25]
    cosLUT[920] <= cosLUTBank3[152] @[LUTbank.scala 290:25]
    cosLUT[921] <= cosLUTBank3[153] @[LUTbank.scala 290:25]
    cosLUT[922] <= cosLUTBank3[154] @[LUTbank.scala 290:25]
    cosLUT[923] <= cosLUTBank3[155] @[LUTbank.scala 290:25]
    cosLUT[924] <= cosLUTBank3[156] @[LUTbank.scala 290:25]
    cosLUT[925] <= cosLUTBank3[157] @[LUTbank.scala 290:25]
    cosLUT[926] <= cosLUTBank3[158] @[LUTbank.scala 290:25]
    cosLUT[927] <= cosLUTBank3[159] @[LUTbank.scala 290:25]
    cosLUT[928] <= cosLUTBank3[160] @[LUTbank.scala 290:25]
    cosLUT[929] <= cosLUTBank3[161] @[LUTbank.scala 290:25]
    cosLUT[930] <= cosLUTBank3[162] @[LUTbank.scala 290:25]
    cosLUT[931] <= cosLUTBank3[163] @[LUTbank.scala 290:25]
    cosLUT[932] <= cosLUTBank3[164] @[LUTbank.scala 290:25]
    cosLUT[933] <= cosLUTBank3[165] @[LUTbank.scala 290:25]
    cosLUT[934] <= cosLUTBank3[166] @[LUTbank.scala 290:25]
    cosLUT[935] <= cosLUTBank3[167] @[LUTbank.scala 290:25]
    cosLUT[936] <= cosLUTBank3[168] @[LUTbank.scala 290:25]
    cosLUT[937] <= cosLUTBank3[169] @[LUTbank.scala 290:25]
    cosLUT[938] <= cosLUTBank3[170] @[LUTbank.scala 290:25]
    cosLUT[939] <= cosLUTBank3[171] @[LUTbank.scala 290:25]
    cosLUT[940] <= cosLUTBank3[172] @[LUTbank.scala 290:25]
    cosLUT[941] <= cosLUTBank3[173] @[LUTbank.scala 290:25]
    cosLUT[942] <= cosLUTBank3[174] @[LUTbank.scala 290:25]
    cosLUT[943] <= cosLUTBank3[175] @[LUTbank.scala 290:25]
    cosLUT[944] <= cosLUTBank3[176] @[LUTbank.scala 290:25]
    cosLUT[945] <= cosLUTBank3[177] @[LUTbank.scala 290:25]
    cosLUT[946] <= cosLUTBank3[178] @[LUTbank.scala 290:25]
    cosLUT[947] <= cosLUTBank3[179] @[LUTbank.scala 290:25]
    cosLUT[948] <= cosLUTBank3[180] @[LUTbank.scala 290:25]
    cosLUT[949] <= cosLUTBank3[181] @[LUTbank.scala 290:25]
    cosLUT[950] <= cosLUTBank3[182] @[LUTbank.scala 290:25]
    cosLUT[951] <= cosLUTBank3[183] @[LUTbank.scala 290:25]
    cosLUT[952] <= cosLUTBank3[184] @[LUTbank.scala 290:25]
    cosLUT[953] <= cosLUTBank3[185] @[LUTbank.scala 290:25]
    cosLUT[954] <= cosLUTBank3[186] @[LUTbank.scala 290:25]
    cosLUT[955] <= cosLUTBank3[187] @[LUTbank.scala 290:25]
    cosLUT[956] <= cosLUTBank3[188] @[LUTbank.scala 290:25]
    cosLUT[957] <= cosLUTBank3[189] @[LUTbank.scala 290:25]
    cosLUT[958] <= cosLUTBank3[190] @[LUTbank.scala 290:25]
    cosLUT[959] <= cosLUTBank3[191] @[LUTbank.scala 290:25]
    cosLUT[960] <= cosLUTBank3[192] @[LUTbank.scala 290:25]
    cosLUT[961] <= cosLUTBank3[193] @[LUTbank.scala 290:25]
    cosLUT[962] <= cosLUTBank3[194] @[LUTbank.scala 290:25]
    cosLUT[963] <= cosLUTBank3[195] @[LUTbank.scala 290:25]
    cosLUT[964] <= cosLUTBank3[196] @[LUTbank.scala 290:25]
    cosLUT[965] <= cosLUTBank3[197] @[LUTbank.scala 290:25]
    cosLUT[966] <= cosLUTBank3[198] @[LUTbank.scala 290:25]
    cosLUT[967] <= cosLUTBank3[199] @[LUTbank.scala 290:25]
    cosLUT[968] <= cosLUTBank3[200] @[LUTbank.scala 290:25]
    cosLUT[969] <= cosLUTBank3[201] @[LUTbank.scala 290:25]
    cosLUT[970] <= cosLUTBank3[202] @[LUTbank.scala 290:25]
    cosLUT[971] <= cosLUTBank3[203] @[LUTbank.scala 290:25]
    cosLUT[972] <= cosLUTBank3[204] @[LUTbank.scala 290:25]
    cosLUT[973] <= cosLUTBank3[205] @[LUTbank.scala 290:25]
    cosLUT[974] <= cosLUTBank3[206] @[LUTbank.scala 290:25]
    cosLUT[975] <= cosLUTBank3[207] @[LUTbank.scala 290:25]
    cosLUT[976] <= cosLUTBank3[208] @[LUTbank.scala 290:25]
    cosLUT[977] <= cosLUTBank3[209] @[LUTbank.scala 290:25]
    cosLUT[978] <= cosLUTBank3[210] @[LUTbank.scala 290:25]
    cosLUT[979] <= cosLUTBank3[211] @[LUTbank.scala 290:25]
    cosLUT[980] <= cosLUTBank3[212] @[LUTbank.scala 290:25]
    cosLUT[981] <= cosLUTBank3[213] @[LUTbank.scala 290:25]
    cosLUT[982] <= cosLUTBank3[214] @[LUTbank.scala 290:25]
    cosLUT[983] <= cosLUTBank3[215] @[LUTbank.scala 290:25]
    cosLUT[984] <= cosLUTBank3[216] @[LUTbank.scala 290:25]
    cosLUT[985] <= cosLUTBank3[217] @[LUTbank.scala 290:25]
    cosLUT[986] <= cosLUTBank3[218] @[LUTbank.scala 290:25]
    cosLUT[987] <= cosLUTBank3[219] @[LUTbank.scala 290:25]
    cosLUT[988] <= cosLUTBank3[220] @[LUTbank.scala 290:25]
    cosLUT[989] <= cosLUTBank3[221] @[LUTbank.scala 290:25]
    cosLUT[990] <= cosLUTBank3[222] @[LUTbank.scala 290:25]
    cosLUT[991] <= cosLUTBank3[223] @[LUTbank.scala 290:25]
    cosLUT[992] <= cosLUTBank3[224] @[LUTbank.scala 290:25]
    cosLUT[993] <= cosLUTBank3[225] @[LUTbank.scala 290:25]
    cosLUT[994] <= cosLUTBank3[226] @[LUTbank.scala 290:25]
    cosLUT[995] <= cosLUTBank3[227] @[LUTbank.scala 290:25]
    cosLUT[996] <= cosLUTBank3[228] @[LUTbank.scala 290:25]
    cosLUT[997] <= cosLUTBank3[229] @[LUTbank.scala 290:25]
    cosLUT[998] <= cosLUTBank3[230] @[LUTbank.scala 290:25]
    cosLUT[999] <= cosLUTBank3[231] @[LUTbank.scala 290:25]
    cosLUT[1000] <= cosLUTBank3[232] @[LUTbank.scala 290:25]
    cosLUT[1001] <= cosLUTBank3[233] @[LUTbank.scala 290:25]
    cosLUT[1002] <= cosLUTBank3[234] @[LUTbank.scala 290:25]
    cosLUT[1003] <= cosLUTBank3[235] @[LUTbank.scala 290:25]
    cosLUT[1004] <= cosLUTBank3[236] @[LUTbank.scala 290:25]
    cosLUT[1005] <= cosLUTBank3[237] @[LUTbank.scala 290:25]
    cosLUT[1006] <= cosLUTBank3[238] @[LUTbank.scala 290:25]
    cosLUT[1007] <= cosLUTBank3[239] @[LUTbank.scala 290:25]
    cosLUT[1008] <= cosLUTBank3[240] @[LUTbank.scala 290:25]
    cosLUT[1009] <= cosLUTBank3[241] @[LUTbank.scala 290:25]
    cosLUT[1010] <= cosLUTBank3[242] @[LUTbank.scala 290:25]
    cosLUT[1011] <= cosLUTBank3[243] @[LUTbank.scala 290:25]
    cosLUT[1012] <= cosLUTBank3[244] @[LUTbank.scala 290:25]
    cosLUT[1013] <= cosLUTBank3[245] @[LUTbank.scala 290:25]
    cosLUT[1014] <= cosLUTBank3[246] @[LUTbank.scala 290:25]
    cosLUT[1015] <= cosLUTBank3[247] @[LUTbank.scala 290:25]
    cosLUT[1016] <= cosLUTBank3[248] @[LUTbank.scala 290:25]
    cosLUT[1017] <= cosLUTBank3[249] @[LUTbank.scala 290:25]
    cosLUT[1018] <= cosLUTBank3[250] @[LUTbank.scala 290:25]
    cosLUT[1019] <= cosLUTBank3[251] @[LUTbank.scala 290:25]
    cosLUT[1020] <= cosLUTBank3[252] @[LUTbank.scala 290:25]
    cosLUT[1021] <= cosLUTBank3[253] @[LUTbank.scala 290:25]
    cosLUT[1022] <= cosLUTBank3[254] @[LUTbank.scala 290:25]
    cosLUT[1023] <= cosLUTBank3[255] @[LUTbank.scala 290:25]
    cosLUT[1024] <= cosLUTBank3[256] @[LUTbank.scala 290:25]
    wire sinLUT : UInt<30>[1025] @[LUTbank.scala 291:25]
    sinLUT[0] <= sinLUTBank0[0] @[LUTbank.scala 291:25]
    sinLUT[1] <= sinLUTBank0[1] @[LUTbank.scala 291:25]
    sinLUT[2] <= sinLUTBank0[2] @[LUTbank.scala 291:25]
    sinLUT[3] <= sinLUTBank0[3] @[LUTbank.scala 291:25]
    sinLUT[4] <= sinLUTBank0[4] @[LUTbank.scala 291:25]
    sinLUT[5] <= sinLUTBank0[5] @[LUTbank.scala 291:25]
    sinLUT[6] <= sinLUTBank0[6] @[LUTbank.scala 291:25]
    sinLUT[7] <= sinLUTBank0[7] @[LUTbank.scala 291:25]
    sinLUT[8] <= sinLUTBank0[8] @[LUTbank.scala 291:25]
    sinLUT[9] <= sinLUTBank0[9] @[LUTbank.scala 291:25]
    sinLUT[10] <= sinLUTBank0[10] @[LUTbank.scala 291:25]
    sinLUT[11] <= sinLUTBank0[11] @[LUTbank.scala 291:25]
    sinLUT[12] <= sinLUTBank0[12] @[LUTbank.scala 291:25]
    sinLUT[13] <= sinLUTBank0[13] @[LUTbank.scala 291:25]
    sinLUT[14] <= sinLUTBank0[14] @[LUTbank.scala 291:25]
    sinLUT[15] <= sinLUTBank0[15] @[LUTbank.scala 291:25]
    sinLUT[16] <= sinLUTBank0[16] @[LUTbank.scala 291:25]
    sinLUT[17] <= sinLUTBank0[17] @[LUTbank.scala 291:25]
    sinLUT[18] <= sinLUTBank0[18] @[LUTbank.scala 291:25]
    sinLUT[19] <= sinLUTBank0[19] @[LUTbank.scala 291:25]
    sinLUT[20] <= sinLUTBank0[20] @[LUTbank.scala 291:25]
    sinLUT[21] <= sinLUTBank0[21] @[LUTbank.scala 291:25]
    sinLUT[22] <= sinLUTBank0[22] @[LUTbank.scala 291:25]
    sinLUT[23] <= sinLUTBank0[23] @[LUTbank.scala 291:25]
    sinLUT[24] <= sinLUTBank0[24] @[LUTbank.scala 291:25]
    sinLUT[25] <= sinLUTBank0[25] @[LUTbank.scala 291:25]
    sinLUT[26] <= sinLUTBank0[26] @[LUTbank.scala 291:25]
    sinLUT[27] <= sinLUTBank0[27] @[LUTbank.scala 291:25]
    sinLUT[28] <= sinLUTBank0[28] @[LUTbank.scala 291:25]
    sinLUT[29] <= sinLUTBank0[29] @[LUTbank.scala 291:25]
    sinLUT[30] <= sinLUTBank0[30] @[LUTbank.scala 291:25]
    sinLUT[31] <= sinLUTBank0[31] @[LUTbank.scala 291:25]
    sinLUT[32] <= sinLUTBank0[32] @[LUTbank.scala 291:25]
    sinLUT[33] <= sinLUTBank0[33] @[LUTbank.scala 291:25]
    sinLUT[34] <= sinLUTBank0[34] @[LUTbank.scala 291:25]
    sinLUT[35] <= sinLUTBank0[35] @[LUTbank.scala 291:25]
    sinLUT[36] <= sinLUTBank0[36] @[LUTbank.scala 291:25]
    sinLUT[37] <= sinLUTBank0[37] @[LUTbank.scala 291:25]
    sinLUT[38] <= sinLUTBank0[38] @[LUTbank.scala 291:25]
    sinLUT[39] <= sinLUTBank0[39] @[LUTbank.scala 291:25]
    sinLUT[40] <= sinLUTBank0[40] @[LUTbank.scala 291:25]
    sinLUT[41] <= sinLUTBank0[41] @[LUTbank.scala 291:25]
    sinLUT[42] <= sinLUTBank0[42] @[LUTbank.scala 291:25]
    sinLUT[43] <= sinLUTBank0[43] @[LUTbank.scala 291:25]
    sinLUT[44] <= sinLUTBank0[44] @[LUTbank.scala 291:25]
    sinLUT[45] <= sinLUTBank0[45] @[LUTbank.scala 291:25]
    sinLUT[46] <= sinLUTBank0[46] @[LUTbank.scala 291:25]
    sinLUT[47] <= sinLUTBank0[47] @[LUTbank.scala 291:25]
    sinLUT[48] <= sinLUTBank0[48] @[LUTbank.scala 291:25]
    sinLUT[49] <= sinLUTBank0[49] @[LUTbank.scala 291:25]
    sinLUT[50] <= sinLUTBank0[50] @[LUTbank.scala 291:25]
    sinLUT[51] <= sinLUTBank0[51] @[LUTbank.scala 291:25]
    sinLUT[52] <= sinLUTBank0[52] @[LUTbank.scala 291:25]
    sinLUT[53] <= sinLUTBank0[53] @[LUTbank.scala 291:25]
    sinLUT[54] <= sinLUTBank0[54] @[LUTbank.scala 291:25]
    sinLUT[55] <= sinLUTBank0[55] @[LUTbank.scala 291:25]
    sinLUT[56] <= sinLUTBank0[56] @[LUTbank.scala 291:25]
    sinLUT[57] <= sinLUTBank0[57] @[LUTbank.scala 291:25]
    sinLUT[58] <= sinLUTBank0[58] @[LUTbank.scala 291:25]
    sinLUT[59] <= sinLUTBank0[59] @[LUTbank.scala 291:25]
    sinLUT[60] <= sinLUTBank0[60] @[LUTbank.scala 291:25]
    sinLUT[61] <= sinLUTBank0[61] @[LUTbank.scala 291:25]
    sinLUT[62] <= sinLUTBank0[62] @[LUTbank.scala 291:25]
    sinLUT[63] <= sinLUTBank0[63] @[LUTbank.scala 291:25]
    sinLUT[64] <= sinLUTBank0[64] @[LUTbank.scala 291:25]
    sinLUT[65] <= sinLUTBank0[65] @[LUTbank.scala 291:25]
    sinLUT[66] <= sinLUTBank0[66] @[LUTbank.scala 291:25]
    sinLUT[67] <= sinLUTBank0[67] @[LUTbank.scala 291:25]
    sinLUT[68] <= sinLUTBank0[68] @[LUTbank.scala 291:25]
    sinLUT[69] <= sinLUTBank0[69] @[LUTbank.scala 291:25]
    sinLUT[70] <= sinLUTBank0[70] @[LUTbank.scala 291:25]
    sinLUT[71] <= sinLUTBank0[71] @[LUTbank.scala 291:25]
    sinLUT[72] <= sinLUTBank0[72] @[LUTbank.scala 291:25]
    sinLUT[73] <= sinLUTBank0[73] @[LUTbank.scala 291:25]
    sinLUT[74] <= sinLUTBank0[74] @[LUTbank.scala 291:25]
    sinLUT[75] <= sinLUTBank0[75] @[LUTbank.scala 291:25]
    sinLUT[76] <= sinLUTBank0[76] @[LUTbank.scala 291:25]
    sinLUT[77] <= sinLUTBank0[77] @[LUTbank.scala 291:25]
    sinLUT[78] <= sinLUTBank0[78] @[LUTbank.scala 291:25]
    sinLUT[79] <= sinLUTBank0[79] @[LUTbank.scala 291:25]
    sinLUT[80] <= sinLUTBank0[80] @[LUTbank.scala 291:25]
    sinLUT[81] <= sinLUTBank0[81] @[LUTbank.scala 291:25]
    sinLUT[82] <= sinLUTBank0[82] @[LUTbank.scala 291:25]
    sinLUT[83] <= sinLUTBank0[83] @[LUTbank.scala 291:25]
    sinLUT[84] <= sinLUTBank0[84] @[LUTbank.scala 291:25]
    sinLUT[85] <= sinLUTBank0[85] @[LUTbank.scala 291:25]
    sinLUT[86] <= sinLUTBank0[86] @[LUTbank.scala 291:25]
    sinLUT[87] <= sinLUTBank0[87] @[LUTbank.scala 291:25]
    sinLUT[88] <= sinLUTBank0[88] @[LUTbank.scala 291:25]
    sinLUT[89] <= sinLUTBank0[89] @[LUTbank.scala 291:25]
    sinLUT[90] <= sinLUTBank0[90] @[LUTbank.scala 291:25]
    sinLUT[91] <= sinLUTBank0[91] @[LUTbank.scala 291:25]
    sinLUT[92] <= sinLUTBank0[92] @[LUTbank.scala 291:25]
    sinLUT[93] <= sinLUTBank0[93] @[LUTbank.scala 291:25]
    sinLUT[94] <= sinLUTBank0[94] @[LUTbank.scala 291:25]
    sinLUT[95] <= sinLUTBank0[95] @[LUTbank.scala 291:25]
    sinLUT[96] <= sinLUTBank0[96] @[LUTbank.scala 291:25]
    sinLUT[97] <= sinLUTBank0[97] @[LUTbank.scala 291:25]
    sinLUT[98] <= sinLUTBank0[98] @[LUTbank.scala 291:25]
    sinLUT[99] <= sinLUTBank0[99] @[LUTbank.scala 291:25]
    sinLUT[100] <= sinLUTBank0[100] @[LUTbank.scala 291:25]
    sinLUT[101] <= sinLUTBank0[101] @[LUTbank.scala 291:25]
    sinLUT[102] <= sinLUTBank0[102] @[LUTbank.scala 291:25]
    sinLUT[103] <= sinLUTBank0[103] @[LUTbank.scala 291:25]
    sinLUT[104] <= sinLUTBank0[104] @[LUTbank.scala 291:25]
    sinLUT[105] <= sinLUTBank0[105] @[LUTbank.scala 291:25]
    sinLUT[106] <= sinLUTBank0[106] @[LUTbank.scala 291:25]
    sinLUT[107] <= sinLUTBank0[107] @[LUTbank.scala 291:25]
    sinLUT[108] <= sinLUTBank0[108] @[LUTbank.scala 291:25]
    sinLUT[109] <= sinLUTBank0[109] @[LUTbank.scala 291:25]
    sinLUT[110] <= sinLUTBank0[110] @[LUTbank.scala 291:25]
    sinLUT[111] <= sinLUTBank0[111] @[LUTbank.scala 291:25]
    sinLUT[112] <= sinLUTBank0[112] @[LUTbank.scala 291:25]
    sinLUT[113] <= sinLUTBank0[113] @[LUTbank.scala 291:25]
    sinLUT[114] <= sinLUTBank0[114] @[LUTbank.scala 291:25]
    sinLUT[115] <= sinLUTBank0[115] @[LUTbank.scala 291:25]
    sinLUT[116] <= sinLUTBank0[116] @[LUTbank.scala 291:25]
    sinLUT[117] <= sinLUTBank0[117] @[LUTbank.scala 291:25]
    sinLUT[118] <= sinLUTBank0[118] @[LUTbank.scala 291:25]
    sinLUT[119] <= sinLUTBank0[119] @[LUTbank.scala 291:25]
    sinLUT[120] <= sinLUTBank0[120] @[LUTbank.scala 291:25]
    sinLUT[121] <= sinLUTBank0[121] @[LUTbank.scala 291:25]
    sinLUT[122] <= sinLUTBank0[122] @[LUTbank.scala 291:25]
    sinLUT[123] <= sinLUTBank0[123] @[LUTbank.scala 291:25]
    sinLUT[124] <= sinLUTBank0[124] @[LUTbank.scala 291:25]
    sinLUT[125] <= sinLUTBank0[125] @[LUTbank.scala 291:25]
    sinLUT[126] <= sinLUTBank0[126] @[LUTbank.scala 291:25]
    sinLUT[127] <= sinLUTBank0[127] @[LUTbank.scala 291:25]
    sinLUT[128] <= sinLUTBank0[128] @[LUTbank.scala 291:25]
    sinLUT[129] <= sinLUTBank0[129] @[LUTbank.scala 291:25]
    sinLUT[130] <= sinLUTBank0[130] @[LUTbank.scala 291:25]
    sinLUT[131] <= sinLUTBank0[131] @[LUTbank.scala 291:25]
    sinLUT[132] <= sinLUTBank0[132] @[LUTbank.scala 291:25]
    sinLUT[133] <= sinLUTBank0[133] @[LUTbank.scala 291:25]
    sinLUT[134] <= sinLUTBank0[134] @[LUTbank.scala 291:25]
    sinLUT[135] <= sinLUTBank0[135] @[LUTbank.scala 291:25]
    sinLUT[136] <= sinLUTBank0[136] @[LUTbank.scala 291:25]
    sinLUT[137] <= sinLUTBank0[137] @[LUTbank.scala 291:25]
    sinLUT[138] <= sinLUTBank0[138] @[LUTbank.scala 291:25]
    sinLUT[139] <= sinLUTBank0[139] @[LUTbank.scala 291:25]
    sinLUT[140] <= sinLUTBank0[140] @[LUTbank.scala 291:25]
    sinLUT[141] <= sinLUTBank0[141] @[LUTbank.scala 291:25]
    sinLUT[142] <= sinLUTBank0[142] @[LUTbank.scala 291:25]
    sinLUT[143] <= sinLUTBank0[143] @[LUTbank.scala 291:25]
    sinLUT[144] <= sinLUTBank0[144] @[LUTbank.scala 291:25]
    sinLUT[145] <= sinLUTBank0[145] @[LUTbank.scala 291:25]
    sinLUT[146] <= sinLUTBank0[146] @[LUTbank.scala 291:25]
    sinLUT[147] <= sinLUTBank0[147] @[LUTbank.scala 291:25]
    sinLUT[148] <= sinLUTBank0[148] @[LUTbank.scala 291:25]
    sinLUT[149] <= sinLUTBank0[149] @[LUTbank.scala 291:25]
    sinLUT[150] <= sinLUTBank0[150] @[LUTbank.scala 291:25]
    sinLUT[151] <= sinLUTBank0[151] @[LUTbank.scala 291:25]
    sinLUT[152] <= sinLUTBank0[152] @[LUTbank.scala 291:25]
    sinLUT[153] <= sinLUTBank0[153] @[LUTbank.scala 291:25]
    sinLUT[154] <= sinLUTBank0[154] @[LUTbank.scala 291:25]
    sinLUT[155] <= sinLUTBank0[155] @[LUTbank.scala 291:25]
    sinLUT[156] <= sinLUTBank0[156] @[LUTbank.scala 291:25]
    sinLUT[157] <= sinLUTBank0[157] @[LUTbank.scala 291:25]
    sinLUT[158] <= sinLUTBank0[158] @[LUTbank.scala 291:25]
    sinLUT[159] <= sinLUTBank0[159] @[LUTbank.scala 291:25]
    sinLUT[160] <= sinLUTBank0[160] @[LUTbank.scala 291:25]
    sinLUT[161] <= sinLUTBank0[161] @[LUTbank.scala 291:25]
    sinLUT[162] <= sinLUTBank0[162] @[LUTbank.scala 291:25]
    sinLUT[163] <= sinLUTBank0[163] @[LUTbank.scala 291:25]
    sinLUT[164] <= sinLUTBank0[164] @[LUTbank.scala 291:25]
    sinLUT[165] <= sinLUTBank0[165] @[LUTbank.scala 291:25]
    sinLUT[166] <= sinLUTBank0[166] @[LUTbank.scala 291:25]
    sinLUT[167] <= sinLUTBank0[167] @[LUTbank.scala 291:25]
    sinLUT[168] <= sinLUTBank0[168] @[LUTbank.scala 291:25]
    sinLUT[169] <= sinLUTBank0[169] @[LUTbank.scala 291:25]
    sinLUT[170] <= sinLUTBank0[170] @[LUTbank.scala 291:25]
    sinLUT[171] <= sinLUTBank0[171] @[LUTbank.scala 291:25]
    sinLUT[172] <= sinLUTBank0[172] @[LUTbank.scala 291:25]
    sinLUT[173] <= sinLUTBank0[173] @[LUTbank.scala 291:25]
    sinLUT[174] <= sinLUTBank0[174] @[LUTbank.scala 291:25]
    sinLUT[175] <= sinLUTBank0[175] @[LUTbank.scala 291:25]
    sinLUT[176] <= sinLUTBank0[176] @[LUTbank.scala 291:25]
    sinLUT[177] <= sinLUTBank0[177] @[LUTbank.scala 291:25]
    sinLUT[178] <= sinLUTBank0[178] @[LUTbank.scala 291:25]
    sinLUT[179] <= sinLUTBank0[179] @[LUTbank.scala 291:25]
    sinLUT[180] <= sinLUTBank0[180] @[LUTbank.scala 291:25]
    sinLUT[181] <= sinLUTBank0[181] @[LUTbank.scala 291:25]
    sinLUT[182] <= sinLUTBank0[182] @[LUTbank.scala 291:25]
    sinLUT[183] <= sinLUTBank0[183] @[LUTbank.scala 291:25]
    sinLUT[184] <= sinLUTBank0[184] @[LUTbank.scala 291:25]
    sinLUT[185] <= sinLUTBank0[185] @[LUTbank.scala 291:25]
    sinLUT[186] <= sinLUTBank0[186] @[LUTbank.scala 291:25]
    sinLUT[187] <= sinLUTBank0[187] @[LUTbank.scala 291:25]
    sinLUT[188] <= sinLUTBank0[188] @[LUTbank.scala 291:25]
    sinLUT[189] <= sinLUTBank0[189] @[LUTbank.scala 291:25]
    sinLUT[190] <= sinLUTBank0[190] @[LUTbank.scala 291:25]
    sinLUT[191] <= sinLUTBank0[191] @[LUTbank.scala 291:25]
    sinLUT[192] <= sinLUTBank0[192] @[LUTbank.scala 291:25]
    sinLUT[193] <= sinLUTBank0[193] @[LUTbank.scala 291:25]
    sinLUT[194] <= sinLUTBank0[194] @[LUTbank.scala 291:25]
    sinLUT[195] <= sinLUTBank0[195] @[LUTbank.scala 291:25]
    sinLUT[196] <= sinLUTBank0[196] @[LUTbank.scala 291:25]
    sinLUT[197] <= sinLUTBank0[197] @[LUTbank.scala 291:25]
    sinLUT[198] <= sinLUTBank0[198] @[LUTbank.scala 291:25]
    sinLUT[199] <= sinLUTBank0[199] @[LUTbank.scala 291:25]
    sinLUT[200] <= sinLUTBank0[200] @[LUTbank.scala 291:25]
    sinLUT[201] <= sinLUTBank0[201] @[LUTbank.scala 291:25]
    sinLUT[202] <= sinLUTBank0[202] @[LUTbank.scala 291:25]
    sinLUT[203] <= sinLUTBank0[203] @[LUTbank.scala 291:25]
    sinLUT[204] <= sinLUTBank0[204] @[LUTbank.scala 291:25]
    sinLUT[205] <= sinLUTBank0[205] @[LUTbank.scala 291:25]
    sinLUT[206] <= sinLUTBank0[206] @[LUTbank.scala 291:25]
    sinLUT[207] <= sinLUTBank0[207] @[LUTbank.scala 291:25]
    sinLUT[208] <= sinLUTBank0[208] @[LUTbank.scala 291:25]
    sinLUT[209] <= sinLUTBank0[209] @[LUTbank.scala 291:25]
    sinLUT[210] <= sinLUTBank0[210] @[LUTbank.scala 291:25]
    sinLUT[211] <= sinLUTBank0[211] @[LUTbank.scala 291:25]
    sinLUT[212] <= sinLUTBank0[212] @[LUTbank.scala 291:25]
    sinLUT[213] <= sinLUTBank0[213] @[LUTbank.scala 291:25]
    sinLUT[214] <= sinLUTBank0[214] @[LUTbank.scala 291:25]
    sinLUT[215] <= sinLUTBank0[215] @[LUTbank.scala 291:25]
    sinLUT[216] <= sinLUTBank0[216] @[LUTbank.scala 291:25]
    sinLUT[217] <= sinLUTBank0[217] @[LUTbank.scala 291:25]
    sinLUT[218] <= sinLUTBank0[218] @[LUTbank.scala 291:25]
    sinLUT[219] <= sinLUTBank0[219] @[LUTbank.scala 291:25]
    sinLUT[220] <= sinLUTBank0[220] @[LUTbank.scala 291:25]
    sinLUT[221] <= sinLUTBank0[221] @[LUTbank.scala 291:25]
    sinLUT[222] <= sinLUTBank0[222] @[LUTbank.scala 291:25]
    sinLUT[223] <= sinLUTBank0[223] @[LUTbank.scala 291:25]
    sinLUT[224] <= sinLUTBank0[224] @[LUTbank.scala 291:25]
    sinLUT[225] <= sinLUTBank0[225] @[LUTbank.scala 291:25]
    sinLUT[226] <= sinLUTBank0[226] @[LUTbank.scala 291:25]
    sinLUT[227] <= sinLUTBank0[227] @[LUTbank.scala 291:25]
    sinLUT[228] <= sinLUTBank0[228] @[LUTbank.scala 291:25]
    sinLUT[229] <= sinLUTBank0[229] @[LUTbank.scala 291:25]
    sinLUT[230] <= sinLUTBank0[230] @[LUTbank.scala 291:25]
    sinLUT[231] <= sinLUTBank0[231] @[LUTbank.scala 291:25]
    sinLUT[232] <= sinLUTBank0[232] @[LUTbank.scala 291:25]
    sinLUT[233] <= sinLUTBank0[233] @[LUTbank.scala 291:25]
    sinLUT[234] <= sinLUTBank0[234] @[LUTbank.scala 291:25]
    sinLUT[235] <= sinLUTBank0[235] @[LUTbank.scala 291:25]
    sinLUT[236] <= sinLUTBank0[236] @[LUTbank.scala 291:25]
    sinLUT[237] <= sinLUTBank0[237] @[LUTbank.scala 291:25]
    sinLUT[238] <= sinLUTBank0[238] @[LUTbank.scala 291:25]
    sinLUT[239] <= sinLUTBank0[239] @[LUTbank.scala 291:25]
    sinLUT[240] <= sinLUTBank0[240] @[LUTbank.scala 291:25]
    sinLUT[241] <= sinLUTBank0[241] @[LUTbank.scala 291:25]
    sinLUT[242] <= sinLUTBank0[242] @[LUTbank.scala 291:25]
    sinLUT[243] <= sinLUTBank0[243] @[LUTbank.scala 291:25]
    sinLUT[244] <= sinLUTBank0[244] @[LUTbank.scala 291:25]
    sinLUT[245] <= sinLUTBank0[245] @[LUTbank.scala 291:25]
    sinLUT[246] <= sinLUTBank0[246] @[LUTbank.scala 291:25]
    sinLUT[247] <= sinLUTBank0[247] @[LUTbank.scala 291:25]
    sinLUT[248] <= sinLUTBank0[248] @[LUTbank.scala 291:25]
    sinLUT[249] <= sinLUTBank0[249] @[LUTbank.scala 291:25]
    sinLUT[250] <= sinLUTBank0[250] @[LUTbank.scala 291:25]
    sinLUT[251] <= sinLUTBank0[251] @[LUTbank.scala 291:25]
    sinLUT[252] <= sinLUTBank0[252] @[LUTbank.scala 291:25]
    sinLUT[253] <= sinLUTBank0[253] @[LUTbank.scala 291:25]
    sinLUT[254] <= sinLUTBank0[254] @[LUTbank.scala 291:25]
    sinLUT[255] <= sinLUTBank0[255] @[LUTbank.scala 291:25]
    sinLUT[256] <= sinLUTBank1[0] @[LUTbank.scala 291:25]
    sinLUT[257] <= sinLUTBank1[1] @[LUTbank.scala 291:25]
    sinLUT[258] <= sinLUTBank1[2] @[LUTbank.scala 291:25]
    sinLUT[259] <= sinLUTBank1[3] @[LUTbank.scala 291:25]
    sinLUT[260] <= sinLUTBank1[4] @[LUTbank.scala 291:25]
    sinLUT[261] <= sinLUTBank1[5] @[LUTbank.scala 291:25]
    sinLUT[262] <= sinLUTBank1[6] @[LUTbank.scala 291:25]
    sinLUT[263] <= sinLUTBank1[7] @[LUTbank.scala 291:25]
    sinLUT[264] <= sinLUTBank1[8] @[LUTbank.scala 291:25]
    sinLUT[265] <= sinLUTBank1[9] @[LUTbank.scala 291:25]
    sinLUT[266] <= sinLUTBank1[10] @[LUTbank.scala 291:25]
    sinLUT[267] <= sinLUTBank1[11] @[LUTbank.scala 291:25]
    sinLUT[268] <= sinLUTBank1[12] @[LUTbank.scala 291:25]
    sinLUT[269] <= sinLUTBank1[13] @[LUTbank.scala 291:25]
    sinLUT[270] <= sinLUTBank1[14] @[LUTbank.scala 291:25]
    sinLUT[271] <= sinLUTBank1[15] @[LUTbank.scala 291:25]
    sinLUT[272] <= sinLUTBank1[16] @[LUTbank.scala 291:25]
    sinLUT[273] <= sinLUTBank1[17] @[LUTbank.scala 291:25]
    sinLUT[274] <= sinLUTBank1[18] @[LUTbank.scala 291:25]
    sinLUT[275] <= sinLUTBank1[19] @[LUTbank.scala 291:25]
    sinLUT[276] <= sinLUTBank1[20] @[LUTbank.scala 291:25]
    sinLUT[277] <= sinLUTBank1[21] @[LUTbank.scala 291:25]
    sinLUT[278] <= sinLUTBank1[22] @[LUTbank.scala 291:25]
    sinLUT[279] <= sinLUTBank1[23] @[LUTbank.scala 291:25]
    sinLUT[280] <= sinLUTBank1[24] @[LUTbank.scala 291:25]
    sinLUT[281] <= sinLUTBank1[25] @[LUTbank.scala 291:25]
    sinLUT[282] <= sinLUTBank1[26] @[LUTbank.scala 291:25]
    sinLUT[283] <= sinLUTBank1[27] @[LUTbank.scala 291:25]
    sinLUT[284] <= sinLUTBank1[28] @[LUTbank.scala 291:25]
    sinLUT[285] <= sinLUTBank1[29] @[LUTbank.scala 291:25]
    sinLUT[286] <= sinLUTBank1[30] @[LUTbank.scala 291:25]
    sinLUT[287] <= sinLUTBank1[31] @[LUTbank.scala 291:25]
    sinLUT[288] <= sinLUTBank1[32] @[LUTbank.scala 291:25]
    sinLUT[289] <= sinLUTBank1[33] @[LUTbank.scala 291:25]
    sinLUT[290] <= sinLUTBank1[34] @[LUTbank.scala 291:25]
    sinLUT[291] <= sinLUTBank1[35] @[LUTbank.scala 291:25]
    sinLUT[292] <= sinLUTBank1[36] @[LUTbank.scala 291:25]
    sinLUT[293] <= sinLUTBank1[37] @[LUTbank.scala 291:25]
    sinLUT[294] <= sinLUTBank1[38] @[LUTbank.scala 291:25]
    sinLUT[295] <= sinLUTBank1[39] @[LUTbank.scala 291:25]
    sinLUT[296] <= sinLUTBank1[40] @[LUTbank.scala 291:25]
    sinLUT[297] <= sinLUTBank1[41] @[LUTbank.scala 291:25]
    sinLUT[298] <= sinLUTBank1[42] @[LUTbank.scala 291:25]
    sinLUT[299] <= sinLUTBank1[43] @[LUTbank.scala 291:25]
    sinLUT[300] <= sinLUTBank1[44] @[LUTbank.scala 291:25]
    sinLUT[301] <= sinLUTBank1[45] @[LUTbank.scala 291:25]
    sinLUT[302] <= sinLUTBank1[46] @[LUTbank.scala 291:25]
    sinLUT[303] <= sinLUTBank1[47] @[LUTbank.scala 291:25]
    sinLUT[304] <= sinLUTBank1[48] @[LUTbank.scala 291:25]
    sinLUT[305] <= sinLUTBank1[49] @[LUTbank.scala 291:25]
    sinLUT[306] <= sinLUTBank1[50] @[LUTbank.scala 291:25]
    sinLUT[307] <= sinLUTBank1[51] @[LUTbank.scala 291:25]
    sinLUT[308] <= sinLUTBank1[52] @[LUTbank.scala 291:25]
    sinLUT[309] <= sinLUTBank1[53] @[LUTbank.scala 291:25]
    sinLUT[310] <= sinLUTBank1[54] @[LUTbank.scala 291:25]
    sinLUT[311] <= sinLUTBank1[55] @[LUTbank.scala 291:25]
    sinLUT[312] <= sinLUTBank1[56] @[LUTbank.scala 291:25]
    sinLUT[313] <= sinLUTBank1[57] @[LUTbank.scala 291:25]
    sinLUT[314] <= sinLUTBank1[58] @[LUTbank.scala 291:25]
    sinLUT[315] <= sinLUTBank1[59] @[LUTbank.scala 291:25]
    sinLUT[316] <= sinLUTBank1[60] @[LUTbank.scala 291:25]
    sinLUT[317] <= sinLUTBank1[61] @[LUTbank.scala 291:25]
    sinLUT[318] <= sinLUTBank1[62] @[LUTbank.scala 291:25]
    sinLUT[319] <= sinLUTBank1[63] @[LUTbank.scala 291:25]
    sinLUT[320] <= sinLUTBank1[64] @[LUTbank.scala 291:25]
    sinLUT[321] <= sinLUTBank1[65] @[LUTbank.scala 291:25]
    sinLUT[322] <= sinLUTBank1[66] @[LUTbank.scala 291:25]
    sinLUT[323] <= sinLUTBank1[67] @[LUTbank.scala 291:25]
    sinLUT[324] <= sinLUTBank1[68] @[LUTbank.scala 291:25]
    sinLUT[325] <= sinLUTBank1[69] @[LUTbank.scala 291:25]
    sinLUT[326] <= sinLUTBank1[70] @[LUTbank.scala 291:25]
    sinLUT[327] <= sinLUTBank1[71] @[LUTbank.scala 291:25]
    sinLUT[328] <= sinLUTBank1[72] @[LUTbank.scala 291:25]
    sinLUT[329] <= sinLUTBank1[73] @[LUTbank.scala 291:25]
    sinLUT[330] <= sinLUTBank1[74] @[LUTbank.scala 291:25]
    sinLUT[331] <= sinLUTBank1[75] @[LUTbank.scala 291:25]
    sinLUT[332] <= sinLUTBank1[76] @[LUTbank.scala 291:25]
    sinLUT[333] <= sinLUTBank1[77] @[LUTbank.scala 291:25]
    sinLUT[334] <= sinLUTBank1[78] @[LUTbank.scala 291:25]
    sinLUT[335] <= sinLUTBank1[79] @[LUTbank.scala 291:25]
    sinLUT[336] <= sinLUTBank1[80] @[LUTbank.scala 291:25]
    sinLUT[337] <= sinLUTBank1[81] @[LUTbank.scala 291:25]
    sinLUT[338] <= sinLUTBank1[82] @[LUTbank.scala 291:25]
    sinLUT[339] <= sinLUTBank1[83] @[LUTbank.scala 291:25]
    sinLUT[340] <= sinLUTBank1[84] @[LUTbank.scala 291:25]
    sinLUT[341] <= sinLUTBank1[85] @[LUTbank.scala 291:25]
    sinLUT[342] <= sinLUTBank1[86] @[LUTbank.scala 291:25]
    sinLUT[343] <= sinLUTBank1[87] @[LUTbank.scala 291:25]
    sinLUT[344] <= sinLUTBank1[88] @[LUTbank.scala 291:25]
    sinLUT[345] <= sinLUTBank1[89] @[LUTbank.scala 291:25]
    sinLUT[346] <= sinLUTBank1[90] @[LUTbank.scala 291:25]
    sinLUT[347] <= sinLUTBank1[91] @[LUTbank.scala 291:25]
    sinLUT[348] <= sinLUTBank1[92] @[LUTbank.scala 291:25]
    sinLUT[349] <= sinLUTBank1[93] @[LUTbank.scala 291:25]
    sinLUT[350] <= sinLUTBank1[94] @[LUTbank.scala 291:25]
    sinLUT[351] <= sinLUTBank1[95] @[LUTbank.scala 291:25]
    sinLUT[352] <= sinLUTBank1[96] @[LUTbank.scala 291:25]
    sinLUT[353] <= sinLUTBank1[97] @[LUTbank.scala 291:25]
    sinLUT[354] <= sinLUTBank1[98] @[LUTbank.scala 291:25]
    sinLUT[355] <= sinLUTBank1[99] @[LUTbank.scala 291:25]
    sinLUT[356] <= sinLUTBank1[100] @[LUTbank.scala 291:25]
    sinLUT[357] <= sinLUTBank1[101] @[LUTbank.scala 291:25]
    sinLUT[358] <= sinLUTBank1[102] @[LUTbank.scala 291:25]
    sinLUT[359] <= sinLUTBank1[103] @[LUTbank.scala 291:25]
    sinLUT[360] <= sinLUTBank1[104] @[LUTbank.scala 291:25]
    sinLUT[361] <= sinLUTBank1[105] @[LUTbank.scala 291:25]
    sinLUT[362] <= sinLUTBank1[106] @[LUTbank.scala 291:25]
    sinLUT[363] <= sinLUTBank1[107] @[LUTbank.scala 291:25]
    sinLUT[364] <= sinLUTBank1[108] @[LUTbank.scala 291:25]
    sinLUT[365] <= sinLUTBank1[109] @[LUTbank.scala 291:25]
    sinLUT[366] <= sinLUTBank1[110] @[LUTbank.scala 291:25]
    sinLUT[367] <= sinLUTBank1[111] @[LUTbank.scala 291:25]
    sinLUT[368] <= sinLUTBank1[112] @[LUTbank.scala 291:25]
    sinLUT[369] <= sinLUTBank1[113] @[LUTbank.scala 291:25]
    sinLUT[370] <= sinLUTBank1[114] @[LUTbank.scala 291:25]
    sinLUT[371] <= sinLUTBank1[115] @[LUTbank.scala 291:25]
    sinLUT[372] <= sinLUTBank1[116] @[LUTbank.scala 291:25]
    sinLUT[373] <= sinLUTBank1[117] @[LUTbank.scala 291:25]
    sinLUT[374] <= sinLUTBank1[118] @[LUTbank.scala 291:25]
    sinLUT[375] <= sinLUTBank1[119] @[LUTbank.scala 291:25]
    sinLUT[376] <= sinLUTBank1[120] @[LUTbank.scala 291:25]
    sinLUT[377] <= sinLUTBank1[121] @[LUTbank.scala 291:25]
    sinLUT[378] <= sinLUTBank1[122] @[LUTbank.scala 291:25]
    sinLUT[379] <= sinLUTBank1[123] @[LUTbank.scala 291:25]
    sinLUT[380] <= sinLUTBank1[124] @[LUTbank.scala 291:25]
    sinLUT[381] <= sinLUTBank1[125] @[LUTbank.scala 291:25]
    sinLUT[382] <= sinLUTBank1[126] @[LUTbank.scala 291:25]
    sinLUT[383] <= sinLUTBank1[127] @[LUTbank.scala 291:25]
    sinLUT[384] <= sinLUTBank1[128] @[LUTbank.scala 291:25]
    sinLUT[385] <= sinLUTBank1[129] @[LUTbank.scala 291:25]
    sinLUT[386] <= sinLUTBank1[130] @[LUTbank.scala 291:25]
    sinLUT[387] <= sinLUTBank1[131] @[LUTbank.scala 291:25]
    sinLUT[388] <= sinLUTBank1[132] @[LUTbank.scala 291:25]
    sinLUT[389] <= sinLUTBank1[133] @[LUTbank.scala 291:25]
    sinLUT[390] <= sinLUTBank1[134] @[LUTbank.scala 291:25]
    sinLUT[391] <= sinLUTBank1[135] @[LUTbank.scala 291:25]
    sinLUT[392] <= sinLUTBank1[136] @[LUTbank.scala 291:25]
    sinLUT[393] <= sinLUTBank1[137] @[LUTbank.scala 291:25]
    sinLUT[394] <= sinLUTBank1[138] @[LUTbank.scala 291:25]
    sinLUT[395] <= sinLUTBank1[139] @[LUTbank.scala 291:25]
    sinLUT[396] <= sinLUTBank1[140] @[LUTbank.scala 291:25]
    sinLUT[397] <= sinLUTBank1[141] @[LUTbank.scala 291:25]
    sinLUT[398] <= sinLUTBank1[142] @[LUTbank.scala 291:25]
    sinLUT[399] <= sinLUTBank1[143] @[LUTbank.scala 291:25]
    sinLUT[400] <= sinLUTBank1[144] @[LUTbank.scala 291:25]
    sinLUT[401] <= sinLUTBank1[145] @[LUTbank.scala 291:25]
    sinLUT[402] <= sinLUTBank1[146] @[LUTbank.scala 291:25]
    sinLUT[403] <= sinLUTBank1[147] @[LUTbank.scala 291:25]
    sinLUT[404] <= sinLUTBank1[148] @[LUTbank.scala 291:25]
    sinLUT[405] <= sinLUTBank1[149] @[LUTbank.scala 291:25]
    sinLUT[406] <= sinLUTBank1[150] @[LUTbank.scala 291:25]
    sinLUT[407] <= sinLUTBank1[151] @[LUTbank.scala 291:25]
    sinLUT[408] <= sinLUTBank1[152] @[LUTbank.scala 291:25]
    sinLUT[409] <= sinLUTBank1[153] @[LUTbank.scala 291:25]
    sinLUT[410] <= sinLUTBank1[154] @[LUTbank.scala 291:25]
    sinLUT[411] <= sinLUTBank1[155] @[LUTbank.scala 291:25]
    sinLUT[412] <= sinLUTBank1[156] @[LUTbank.scala 291:25]
    sinLUT[413] <= sinLUTBank1[157] @[LUTbank.scala 291:25]
    sinLUT[414] <= sinLUTBank1[158] @[LUTbank.scala 291:25]
    sinLUT[415] <= sinLUTBank1[159] @[LUTbank.scala 291:25]
    sinLUT[416] <= sinLUTBank1[160] @[LUTbank.scala 291:25]
    sinLUT[417] <= sinLUTBank1[161] @[LUTbank.scala 291:25]
    sinLUT[418] <= sinLUTBank1[162] @[LUTbank.scala 291:25]
    sinLUT[419] <= sinLUTBank1[163] @[LUTbank.scala 291:25]
    sinLUT[420] <= sinLUTBank1[164] @[LUTbank.scala 291:25]
    sinLUT[421] <= sinLUTBank1[165] @[LUTbank.scala 291:25]
    sinLUT[422] <= sinLUTBank1[166] @[LUTbank.scala 291:25]
    sinLUT[423] <= sinLUTBank1[167] @[LUTbank.scala 291:25]
    sinLUT[424] <= sinLUTBank1[168] @[LUTbank.scala 291:25]
    sinLUT[425] <= sinLUTBank1[169] @[LUTbank.scala 291:25]
    sinLUT[426] <= sinLUTBank1[170] @[LUTbank.scala 291:25]
    sinLUT[427] <= sinLUTBank1[171] @[LUTbank.scala 291:25]
    sinLUT[428] <= sinLUTBank1[172] @[LUTbank.scala 291:25]
    sinLUT[429] <= sinLUTBank1[173] @[LUTbank.scala 291:25]
    sinLUT[430] <= sinLUTBank1[174] @[LUTbank.scala 291:25]
    sinLUT[431] <= sinLUTBank1[175] @[LUTbank.scala 291:25]
    sinLUT[432] <= sinLUTBank1[176] @[LUTbank.scala 291:25]
    sinLUT[433] <= sinLUTBank1[177] @[LUTbank.scala 291:25]
    sinLUT[434] <= sinLUTBank1[178] @[LUTbank.scala 291:25]
    sinLUT[435] <= sinLUTBank1[179] @[LUTbank.scala 291:25]
    sinLUT[436] <= sinLUTBank1[180] @[LUTbank.scala 291:25]
    sinLUT[437] <= sinLUTBank1[181] @[LUTbank.scala 291:25]
    sinLUT[438] <= sinLUTBank1[182] @[LUTbank.scala 291:25]
    sinLUT[439] <= sinLUTBank1[183] @[LUTbank.scala 291:25]
    sinLUT[440] <= sinLUTBank1[184] @[LUTbank.scala 291:25]
    sinLUT[441] <= sinLUTBank1[185] @[LUTbank.scala 291:25]
    sinLUT[442] <= sinLUTBank1[186] @[LUTbank.scala 291:25]
    sinLUT[443] <= sinLUTBank1[187] @[LUTbank.scala 291:25]
    sinLUT[444] <= sinLUTBank1[188] @[LUTbank.scala 291:25]
    sinLUT[445] <= sinLUTBank1[189] @[LUTbank.scala 291:25]
    sinLUT[446] <= sinLUTBank1[190] @[LUTbank.scala 291:25]
    sinLUT[447] <= sinLUTBank1[191] @[LUTbank.scala 291:25]
    sinLUT[448] <= sinLUTBank1[192] @[LUTbank.scala 291:25]
    sinLUT[449] <= sinLUTBank1[193] @[LUTbank.scala 291:25]
    sinLUT[450] <= sinLUTBank1[194] @[LUTbank.scala 291:25]
    sinLUT[451] <= sinLUTBank1[195] @[LUTbank.scala 291:25]
    sinLUT[452] <= sinLUTBank1[196] @[LUTbank.scala 291:25]
    sinLUT[453] <= sinLUTBank1[197] @[LUTbank.scala 291:25]
    sinLUT[454] <= sinLUTBank1[198] @[LUTbank.scala 291:25]
    sinLUT[455] <= sinLUTBank1[199] @[LUTbank.scala 291:25]
    sinLUT[456] <= sinLUTBank1[200] @[LUTbank.scala 291:25]
    sinLUT[457] <= sinLUTBank1[201] @[LUTbank.scala 291:25]
    sinLUT[458] <= sinLUTBank1[202] @[LUTbank.scala 291:25]
    sinLUT[459] <= sinLUTBank1[203] @[LUTbank.scala 291:25]
    sinLUT[460] <= sinLUTBank1[204] @[LUTbank.scala 291:25]
    sinLUT[461] <= sinLUTBank1[205] @[LUTbank.scala 291:25]
    sinLUT[462] <= sinLUTBank1[206] @[LUTbank.scala 291:25]
    sinLUT[463] <= sinLUTBank1[207] @[LUTbank.scala 291:25]
    sinLUT[464] <= sinLUTBank1[208] @[LUTbank.scala 291:25]
    sinLUT[465] <= sinLUTBank1[209] @[LUTbank.scala 291:25]
    sinLUT[466] <= sinLUTBank1[210] @[LUTbank.scala 291:25]
    sinLUT[467] <= sinLUTBank1[211] @[LUTbank.scala 291:25]
    sinLUT[468] <= sinLUTBank1[212] @[LUTbank.scala 291:25]
    sinLUT[469] <= sinLUTBank1[213] @[LUTbank.scala 291:25]
    sinLUT[470] <= sinLUTBank1[214] @[LUTbank.scala 291:25]
    sinLUT[471] <= sinLUTBank1[215] @[LUTbank.scala 291:25]
    sinLUT[472] <= sinLUTBank1[216] @[LUTbank.scala 291:25]
    sinLUT[473] <= sinLUTBank1[217] @[LUTbank.scala 291:25]
    sinLUT[474] <= sinLUTBank1[218] @[LUTbank.scala 291:25]
    sinLUT[475] <= sinLUTBank1[219] @[LUTbank.scala 291:25]
    sinLUT[476] <= sinLUTBank1[220] @[LUTbank.scala 291:25]
    sinLUT[477] <= sinLUTBank1[221] @[LUTbank.scala 291:25]
    sinLUT[478] <= sinLUTBank1[222] @[LUTbank.scala 291:25]
    sinLUT[479] <= sinLUTBank1[223] @[LUTbank.scala 291:25]
    sinLUT[480] <= sinLUTBank1[224] @[LUTbank.scala 291:25]
    sinLUT[481] <= sinLUTBank1[225] @[LUTbank.scala 291:25]
    sinLUT[482] <= sinLUTBank1[226] @[LUTbank.scala 291:25]
    sinLUT[483] <= sinLUTBank1[227] @[LUTbank.scala 291:25]
    sinLUT[484] <= sinLUTBank1[228] @[LUTbank.scala 291:25]
    sinLUT[485] <= sinLUTBank1[229] @[LUTbank.scala 291:25]
    sinLUT[486] <= sinLUTBank1[230] @[LUTbank.scala 291:25]
    sinLUT[487] <= sinLUTBank1[231] @[LUTbank.scala 291:25]
    sinLUT[488] <= sinLUTBank1[232] @[LUTbank.scala 291:25]
    sinLUT[489] <= sinLUTBank1[233] @[LUTbank.scala 291:25]
    sinLUT[490] <= sinLUTBank1[234] @[LUTbank.scala 291:25]
    sinLUT[491] <= sinLUTBank1[235] @[LUTbank.scala 291:25]
    sinLUT[492] <= sinLUTBank1[236] @[LUTbank.scala 291:25]
    sinLUT[493] <= sinLUTBank1[237] @[LUTbank.scala 291:25]
    sinLUT[494] <= sinLUTBank1[238] @[LUTbank.scala 291:25]
    sinLUT[495] <= sinLUTBank1[239] @[LUTbank.scala 291:25]
    sinLUT[496] <= sinLUTBank1[240] @[LUTbank.scala 291:25]
    sinLUT[497] <= sinLUTBank1[241] @[LUTbank.scala 291:25]
    sinLUT[498] <= sinLUTBank1[242] @[LUTbank.scala 291:25]
    sinLUT[499] <= sinLUTBank1[243] @[LUTbank.scala 291:25]
    sinLUT[500] <= sinLUTBank1[244] @[LUTbank.scala 291:25]
    sinLUT[501] <= sinLUTBank1[245] @[LUTbank.scala 291:25]
    sinLUT[502] <= sinLUTBank1[246] @[LUTbank.scala 291:25]
    sinLUT[503] <= sinLUTBank1[247] @[LUTbank.scala 291:25]
    sinLUT[504] <= sinLUTBank1[248] @[LUTbank.scala 291:25]
    sinLUT[505] <= sinLUTBank1[249] @[LUTbank.scala 291:25]
    sinLUT[506] <= sinLUTBank1[250] @[LUTbank.scala 291:25]
    sinLUT[507] <= sinLUTBank1[251] @[LUTbank.scala 291:25]
    sinLUT[508] <= sinLUTBank1[252] @[LUTbank.scala 291:25]
    sinLUT[509] <= sinLUTBank1[253] @[LUTbank.scala 291:25]
    sinLUT[510] <= sinLUTBank1[254] @[LUTbank.scala 291:25]
    sinLUT[511] <= sinLUTBank1[255] @[LUTbank.scala 291:25]
    sinLUT[512] <= sinLUTBank2[0] @[LUTbank.scala 291:25]
    sinLUT[513] <= sinLUTBank2[1] @[LUTbank.scala 291:25]
    sinLUT[514] <= sinLUTBank2[2] @[LUTbank.scala 291:25]
    sinLUT[515] <= sinLUTBank2[3] @[LUTbank.scala 291:25]
    sinLUT[516] <= sinLUTBank2[4] @[LUTbank.scala 291:25]
    sinLUT[517] <= sinLUTBank2[5] @[LUTbank.scala 291:25]
    sinLUT[518] <= sinLUTBank2[6] @[LUTbank.scala 291:25]
    sinLUT[519] <= sinLUTBank2[7] @[LUTbank.scala 291:25]
    sinLUT[520] <= sinLUTBank2[8] @[LUTbank.scala 291:25]
    sinLUT[521] <= sinLUTBank2[9] @[LUTbank.scala 291:25]
    sinLUT[522] <= sinLUTBank2[10] @[LUTbank.scala 291:25]
    sinLUT[523] <= sinLUTBank2[11] @[LUTbank.scala 291:25]
    sinLUT[524] <= sinLUTBank2[12] @[LUTbank.scala 291:25]
    sinLUT[525] <= sinLUTBank2[13] @[LUTbank.scala 291:25]
    sinLUT[526] <= sinLUTBank2[14] @[LUTbank.scala 291:25]
    sinLUT[527] <= sinLUTBank2[15] @[LUTbank.scala 291:25]
    sinLUT[528] <= sinLUTBank2[16] @[LUTbank.scala 291:25]
    sinLUT[529] <= sinLUTBank2[17] @[LUTbank.scala 291:25]
    sinLUT[530] <= sinLUTBank2[18] @[LUTbank.scala 291:25]
    sinLUT[531] <= sinLUTBank2[19] @[LUTbank.scala 291:25]
    sinLUT[532] <= sinLUTBank2[20] @[LUTbank.scala 291:25]
    sinLUT[533] <= sinLUTBank2[21] @[LUTbank.scala 291:25]
    sinLUT[534] <= sinLUTBank2[22] @[LUTbank.scala 291:25]
    sinLUT[535] <= sinLUTBank2[23] @[LUTbank.scala 291:25]
    sinLUT[536] <= sinLUTBank2[24] @[LUTbank.scala 291:25]
    sinLUT[537] <= sinLUTBank2[25] @[LUTbank.scala 291:25]
    sinLUT[538] <= sinLUTBank2[26] @[LUTbank.scala 291:25]
    sinLUT[539] <= sinLUTBank2[27] @[LUTbank.scala 291:25]
    sinLUT[540] <= sinLUTBank2[28] @[LUTbank.scala 291:25]
    sinLUT[541] <= sinLUTBank2[29] @[LUTbank.scala 291:25]
    sinLUT[542] <= sinLUTBank2[30] @[LUTbank.scala 291:25]
    sinLUT[543] <= sinLUTBank2[31] @[LUTbank.scala 291:25]
    sinLUT[544] <= sinLUTBank2[32] @[LUTbank.scala 291:25]
    sinLUT[545] <= sinLUTBank2[33] @[LUTbank.scala 291:25]
    sinLUT[546] <= sinLUTBank2[34] @[LUTbank.scala 291:25]
    sinLUT[547] <= sinLUTBank2[35] @[LUTbank.scala 291:25]
    sinLUT[548] <= sinLUTBank2[36] @[LUTbank.scala 291:25]
    sinLUT[549] <= sinLUTBank2[37] @[LUTbank.scala 291:25]
    sinLUT[550] <= sinLUTBank2[38] @[LUTbank.scala 291:25]
    sinLUT[551] <= sinLUTBank2[39] @[LUTbank.scala 291:25]
    sinLUT[552] <= sinLUTBank2[40] @[LUTbank.scala 291:25]
    sinLUT[553] <= sinLUTBank2[41] @[LUTbank.scala 291:25]
    sinLUT[554] <= sinLUTBank2[42] @[LUTbank.scala 291:25]
    sinLUT[555] <= sinLUTBank2[43] @[LUTbank.scala 291:25]
    sinLUT[556] <= sinLUTBank2[44] @[LUTbank.scala 291:25]
    sinLUT[557] <= sinLUTBank2[45] @[LUTbank.scala 291:25]
    sinLUT[558] <= sinLUTBank2[46] @[LUTbank.scala 291:25]
    sinLUT[559] <= sinLUTBank2[47] @[LUTbank.scala 291:25]
    sinLUT[560] <= sinLUTBank2[48] @[LUTbank.scala 291:25]
    sinLUT[561] <= sinLUTBank2[49] @[LUTbank.scala 291:25]
    sinLUT[562] <= sinLUTBank2[50] @[LUTbank.scala 291:25]
    sinLUT[563] <= sinLUTBank2[51] @[LUTbank.scala 291:25]
    sinLUT[564] <= sinLUTBank2[52] @[LUTbank.scala 291:25]
    sinLUT[565] <= sinLUTBank2[53] @[LUTbank.scala 291:25]
    sinLUT[566] <= sinLUTBank2[54] @[LUTbank.scala 291:25]
    sinLUT[567] <= sinLUTBank2[55] @[LUTbank.scala 291:25]
    sinLUT[568] <= sinLUTBank2[56] @[LUTbank.scala 291:25]
    sinLUT[569] <= sinLUTBank2[57] @[LUTbank.scala 291:25]
    sinLUT[570] <= sinLUTBank2[58] @[LUTbank.scala 291:25]
    sinLUT[571] <= sinLUTBank2[59] @[LUTbank.scala 291:25]
    sinLUT[572] <= sinLUTBank2[60] @[LUTbank.scala 291:25]
    sinLUT[573] <= sinLUTBank2[61] @[LUTbank.scala 291:25]
    sinLUT[574] <= sinLUTBank2[62] @[LUTbank.scala 291:25]
    sinLUT[575] <= sinLUTBank2[63] @[LUTbank.scala 291:25]
    sinLUT[576] <= sinLUTBank2[64] @[LUTbank.scala 291:25]
    sinLUT[577] <= sinLUTBank2[65] @[LUTbank.scala 291:25]
    sinLUT[578] <= sinLUTBank2[66] @[LUTbank.scala 291:25]
    sinLUT[579] <= sinLUTBank2[67] @[LUTbank.scala 291:25]
    sinLUT[580] <= sinLUTBank2[68] @[LUTbank.scala 291:25]
    sinLUT[581] <= sinLUTBank2[69] @[LUTbank.scala 291:25]
    sinLUT[582] <= sinLUTBank2[70] @[LUTbank.scala 291:25]
    sinLUT[583] <= sinLUTBank2[71] @[LUTbank.scala 291:25]
    sinLUT[584] <= sinLUTBank2[72] @[LUTbank.scala 291:25]
    sinLUT[585] <= sinLUTBank2[73] @[LUTbank.scala 291:25]
    sinLUT[586] <= sinLUTBank2[74] @[LUTbank.scala 291:25]
    sinLUT[587] <= sinLUTBank2[75] @[LUTbank.scala 291:25]
    sinLUT[588] <= sinLUTBank2[76] @[LUTbank.scala 291:25]
    sinLUT[589] <= sinLUTBank2[77] @[LUTbank.scala 291:25]
    sinLUT[590] <= sinLUTBank2[78] @[LUTbank.scala 291:25]
    sinLUT[591] <= sinLUTBank2[79] @[LUTbank.scala 291:25]
    sinLUT[592] <= sinLUTBank2[80] @[LUTbank.scala 291:25]
    sinLUT[593] <= sinLUTBank2[81] @[LUTbank.scala 291:25]
    sinLUT[594] <= sinLUTBank2[82] @[LUTbank.scala 291:25]
    sinLUT[595] <= sinLUTBank2[83] @[LUTbank.scala 291:25]
    sinLUT[596] <= sinLUTBank2[84] @[LUTbank.scala 291:25]
    sinLUT[597] <= sinLUTBank2[85] @[LUTbank.scala 291:25]
    sinLUT[598] <= sinLUTBank2[86] @[LUTbank.scala 291:25]
    sinLUT[599] <= sinLUTBank2[87] @[LUTbank.scala 291:25]
    sinLUT[600] <= sinLUTBank2[88] @[LUTbank.scala 291:25]
    sinLUT[601] <= sinLUTBank2[89] @[LUTbank.scala 291:25]
    sinLUT[602] <= sinLUTBank2[90] @[LUTbank.scala 291:25]
    sinLUT[603] <= sinLUTBank2[91] @[LUTbank.scala 291:25]
    sinLUT[604] <= sinLUTBank2[92] @[LUTbank.scala 291:25]
    sinLUT[605] <= sinLUTBank2[93] @[LUTbank.scala 291:25]
    sinLUT[606] <= sinLUTBank2[94] @[LUTbank.scala 291:25]
    sinLUT[607] <= sinLUTBank2[95] @[LUTbank.scala 291:25]
    sinLUT[608] <= sinLUTBank2[96] @[LUTbank.scala 291:25]
    sinLUT[609] <= sinLUTBank2[97] @[LUTbank.scala 291:25]
    sinLUT[610] <= sinLUTBank2[98] @[LUTbank.scala 291:25]
    sinLUT[611] <= sinLUTBank2[99] @[LUTbank.scala 291:25]
    sinLUT[612] <= sinLUTBank2[100] @[LUTbank.scala 291:25]
    sinLUT[613] <= sinLUTBank2[101] @[LUTbank.scala 291:25]
    sinLUT[614] <= sinLUTBank2[102] @[LUTbank.scala 291:25]
    sinLUT[615] <= sinLUTBank2[103] @[LUTbank.scala 291:25]
    sinLUT[616] <= sinLUTBank2[104] @[LUTbank.scala 291:25]
    sinLUT[617] <= sinLUTBank2[105] @[LUTbank.scala 291:25]
    sinLUT[618] <= sinLUTBank2[106] @[LUTbank.scala 291:25]
    sinLUT[619] <= sinLUTBank2[107] @[LUTbank.scala 291:25]
    sinLUT[620] <= sinLUTBank2[108] @[LUTbank.scala 291:25]
    sinLUT[621] <= sinLUTBank2[109] @[LUTbank.scala 291:25]
    sinLUT[622] <= sinLUTBank2[110] @[LUTbank.scala 291:25]
    sinLUT[623] <= sinLUTBank2[111] @[LUTbank.scala 291:25]
    sinLUT[624] <= sinLUTBank2[112] @[LUTbank.scala 291:25]
    sinLUT[625] <= sinLUTBank2[113] @[LUTbank.scala 291:25]
    sinLUT[626] <= sinLUTBank2[114] @[LUTbank.scala 291:25]
    sinLUT[627] <= sinLUTBank2[115] @[LUTbank.scala 291:25]
    sinLUT[628] <= sinLUTBank2[116] @[LUTbank.scala 291:25]
    sinLUT[629] <= sinLUTBank2[117] @[LUTbank.scala 291:25]
    sinLUT[630] <= sinLUTBank2[118] @[LUTbank.scala 291:25]
    sinLUT[631] <= sinLUTBank2[119] @[LUTbank.scala 291:25]
    sinLUT[632] <= sinLUTBank2[120] @[LUTbank.scala 291:25]
    sinLUT[633] <= sinLUTBank2[121] @[LUTbank.scala 291:25]
    sinLUT[634] <= sinLUTBank2[122] @[LUTbank.scala 291:25]
    sinLUT[635] <= sinLUTBank2[123] @[LUTbank.scala 291:25]
    sinLUT[636] <= sinLUTBank2[124] @[LUTbank.scala 291:25]
    sinLUT[637] <= sinLUTBank2[125] @[LUTbank.scala 291:25]
    sinLUT[638] <= sinLUTBank2[126] @[LUTbank.scala 291:25]
    sinLUT[639] <= sinLUTBank2[127] @[LUTbank.scala 291:25]
    sinLUT[640] <= sinLUTBank2[128] @[LUTbank.scala 291:25]
    sinLUT[641] <= sinLUTBank2[129] @[LUTbank.scala 291:25]
    sinLUT[642] <= sinLUTBank2[130] @[LUTbank.scala 291:25]
    sinLUT[643] <= sinLUTBank2[131] @[LUTbank.scala 291:25]
    sinLUT[644] <= sinLUTBank2[132] @[LUTbank.scala 291:25]
    sinLUT[645] <= sinLUTBank2[133] @[LUTbank.scala 291:25]
    sinLUT[646] <= sinLUTBank2[134] @[LUTbank.scala 291:25]
    sinLUT[647] <= sinLUTBank2[135] @[LUTbank.scala 291:25]
    sinLUT[648] <= sinLUTBank2[136] @[LUTbank.scala 291:25]
    sinLUT[649] <= sinLUTBank2[137] @[LUTbank.scala 291:25]
    sinLUT[650] <= sinLUTBank2[138] @[LUTbank.scala 291:25]
    sinLUT[651] <= sinLUTBank2[139] @[LUTbank.scala 291:25]
    sinLUT[652] <= sinLUTBank2[140] @[LUTbank.scala 291:25]
    sinLUT[653] <= sinLUTBank2[141] @[LUTbank.scala 291:25]
    sinLUT[654] <= sinLUTBank2[142] @[LUTbank.scala 291:25]
    sinLUT[655] <= sinLUTBank2[143] @[LUTbank.scala 291:25]
    sinLUT[656] <= sinLUTBank2[144] @[LUTbank.scala 291:25]
    sinLUT[657] <= sinLUTBank2[145] @[LUTbank.scala 291:25]
    sinLUT[658] <= sinLUTBank2[146] @[LUTbank.scala 291:25]
    sinLUT[659] <= sinLUTBank2[147] @[LUTbank.scala 291:25]
    sinLUT[660] <= sinLUTBank2[148] @[LUTbank.scala 291:25]
    sinLUT[661] <= sinLUTBank2[149] @[LUTbank.scala 291:25]
    sinLUT[662] <= sinLUTBank2[150] @[LUTbank.scala 291:25]
    sinLUT[663] <= sinLUTBank2[151] @[LUTbank.scala 291:25]
    sinLUT[664] <= sinLUTBank2[152] @[LUTbank.scala 291:25]
    sinLUT[665] <= sinLUTBank2[153] @[LUTbank.scala 291:25]
    sinLUT[666] <= sinLUTBank2[154] @[LUTbank.scala 291:25]
    sinLUT[667] <= sinLUTBank2[155] @[LUTbank.scala 291:25]
    sinLUT[668] <= sinLUTBank2[156] @[LUTbank.scala 291:25]
    sinLUT[669] <= sinLUTBank2[157] @[LUTbank.scala 291:25]
    sinLUT[670] <= sinLUTBank2[158] @[LUTbank.scala 291:25]
    sinLUT[671] <= sinLUTBank2[159] @[LUTbank.scala 291:25]
    sinLUT[672] <= sinLUTBank2[160] @[LUTbank.scala 291:25]
    sinLUT[673] <= sinLUTBank2[161] @[LUTbank.scala 291:25]
    sinLUT[674] <= sinLUTBank2[162] @[LUTbank.scala 291:25]
    sinLUT[675] <= sinLUTBank2[163] @[LUTbank.scala 291:25]
    sinLUT[676] <= sinLUTBank2[164] @[LUTbank.scala 291:25]
    sinLUT[677] <= sinLUTBank2[165] @[LUTbank.scala 291:25]
    sinLUT[678] <= sinLUTBank2[166] @[LUTbank.scala 291:25]
    sinLUT[679] <= sinLUTBank2[167] @[LUTbank.scala 291:25]
    sinLUT[680] <= sinLUTBank2[168] @[LUTbank.scala 291:25]
    sinLUT[681] <= sinLUTBank2[169] @[LUTbank.scala 291:25]
    sinLUT[682] <= sinLUTBank2[170] @[LUTbank.scala 291:25]
    sinLUT[683] <= sinLUTBank2[171] @[LUTbank.scala 291:25]
    sinLUT[684] <= sinLUTBank2[172] @[LUTbank.scala 291:25]
    sinLUT[685] <= sinLUTBank2[173] @[LUTbank.scala 291:25]
    sinLUT[686] <= sinLUTBank2[174] @[LUTbank.scala 291:25]
    sinLUT[687] <= sinLUTBank2[175] @[LUTbank.scala 291:25]
    sinLUT[688] <= sinLUTBank2[176] @[LUTbank.scala 291:25]
    sinLUT[689] <= sinLUTBank2[177] @[LUTbank.scala 291:25]
    sinLUT[690] <= sinLUTBank2[178] @[LUTbank.scala 291:25]
    sinLUT[691] <= sinLUTBank2[179] @[LUTbank.scala 291:25]
    sinLUT[692] <= sinLUTBank2[180] @[LUTbank.scala 291:25]
    sinLUT[693] <= sinLUTBank2[181] @[LUTbank.scala 291:25]
    sinLUT[694] <= sinLUTBank2[182] @[LUTbank.scala 291:25]
    sinLUT[695] <= sinLUTBank2[183] @[LUTbank.scala 291:25]
    sinLUT[696] <= sinLUTBank2[184] @[LUTbank.scala 291:25]
    sinLUT[697] <= sinLUTBank2[185] @[LUTbank.scala 291:25]
    sinLUT[698] <= sinLUTBank2[186] @[LUTbank.scala 291:25]
    sinLUT[699] <= sinLUTBank2[187] @[LUTbank.scala 291:25]
    sinLUT[700] <= sinLUTBank2[188] @[LUTbank.scala 291:25]
    sinLUT[701] <= sinLUTBank2[189] @[LUTbank.scala 291:25]
    sinLUT[702] <= sinLUTBank2[190] @[LUTbank.scala 291:25]
    sinLUT[703] <= sinLUTBank2[191] @[LUTbank.scala 291:25]
    sinLUT[704] <= sinLUTBank2[192] @[LUTbank.scala 291:25]
    sinLUT[705] <= sinLUTBank2[193] @[LUTbank.scala 291:25]
    sinLUT[706] <= sinLUTBank2[194] @[LUTbank.scala 291:25]
    sinLUT[707] <= sinLUTBank2[195] @[LUTbank.scala 291:25]
    sinLUT[708] <= sinLUTBank2[196] @[LUTbank.scala 291:25]
    sinLUT[709] <= sinLUTBank2[197] @[LUTbank.scala 291:25]
    sinLUT[710] <= sinLUTBank2[198] @[LUTbank.scala 291:25]
    sinLUT[711] <= sinLUTBank2[199] @[LUTbank.scala 291:25]
    sinLUT[712] <= sinLUTBank2[200] @[LUTbank.scala 291:25]
    sinLUT[713] <= sinLUTBank2[201] @[LUTbank.scala 291:25]
    sinLUT[714] <= sinLUTBank2[202] @[LUTbank.scala 291:25]
    sinLUT[715] <= sinLUTBank2[203] @[LUTbank.scala 291:25]
    sinLUT[716] <= sinLUTBank2[204] @[LUTbank.scala 291:25]
    sinLUT[717] <= sinLUTBank2[205] @[LUTbank.scala 291:25]
    sinLUT[718] <= sinLUTBank2[206] @[LUTbank.scala 291:25]
    sinLUT[719] <= sinLUTBank2[207] @[LUTbank.scala 291:25]
    sinLUT[720] <= sinLUTBank2[208] @[LUTbank.scala 291:25]
    sinLUT[721] <= sinLUTBank2[209] @[LUTbank.scala 291:25]
    sinLUT[722] <= sinLUTBank2[210] @[LUTbank.scala 291:25]
    sinLUT[723] <= sinLUTBank2[211] @[LUTbank.scala 291:25]
    sinLUT[724] <= sinLUTBank2[212] @[LUTbank.scala 291:25]
    sinLUT[725] <= sinLUTBank2[213] @[LUTbank.scala 291:25]
    sinLUT[726] <= sinLUTBank2[214] @[LUTbank.scala 291:25]
    sinLUT[727] <= sinLUTBank2[215] @[LUTbank.scala 291:25]
    sinLUT[728] <= sinLUTBank2[216] @[LUTbank.scala 291:25]
    sinLUT[729] <= sinLUTBank2[217] @[LUTbank.scala 291:25]
    sinLUT[730] <= sinLUTBank2[218] @[LUTbank.scala 291:25]
    sinLUT[731] <= sinLUTBank2[219] @[LUTbank.scala 291:25]
    sinLUT[732] <= sinLUTBank2[220] @[LUTbank.scala 291:25]
    sinLUT[733] <= sinLUTBank2[221] @[LUTbank.scala 291:25]
    sinLUT[734] <= sinLUTBank2[222] @[LUTbank.scala 291:25]
    sinLUT[735] <= sinLUTBank2[223] @[LUTbank.scala 291:25]
    sinLUT[736] <= sinLUTBank2[224] @[LUTbank.scala 291:25]
    sinLUT[737] <= sinLUTBank2[225] @[LUTbank.scala 291:25]
    sinLUT[738] <= sinLUTBank2[226] @[LUTbank.scala 291:25]
    sinLUT[739] <= sinLUTBank2[227] @[LUTbank.scala 291:25]
    sinLUT[740] <= sinLUTBank2[228] @[LUTbank.scala 291:25]
    sinLUT[741] <= sinLUTBank2[229] @[LUTbank.scala 291:25]
    sinLUT[742] <= sinLUTBank2[230] @[LUTbank.scala 291:25]
    sinLUT[743] <= sinLUTBank2[231] @[LUTbank.scala 291:25]
    sinLUT[744] <= sinLUTBank2[232] @[LUTbank.scala 291:25]
    sinLUT[745] <= sinLUTBank2[233] @[LUTbank.scala 291:25]
    sinLUT[746] <= sinLUTBank2[234] @[LUTbank.scala 291:25]
    sinLUT[747] <= sinLUTBank2[235] @[LUTbank.scala 291:25]
    sinLUT[748] <= sinLUTBank2[236] @[LUTbank.scala 291:25]
    sinLUT[749] <= sinLUTBank2[237] @[LUTbank.scala 291:25]
    sinLUT[750] <= sinLUTBank2[238] @[LUTbank.scala 291:25]
    sinLUT[751] <= sinLUTBank2[239] @[LUTbank.scala 291:25]
    sinLUT[752] <= sinLUTBank2[240] @[LUTbank.scala 291:25]
    sinLUT[753] <= sinLUTBank2[241] @[LUTbank.scala 291:25]
    sinLUT[754] <= sinLUTBank2[242] @[LUTbank.scala 291:25]
    sinLUT[755] <= sinLUTBank2[243] @[LUTbank.scala 291:25]
    sinLUT[756] <= sinLUTBank2[244] @[LUTbank.scala 291:25]
    sinLUT[757] <= sinLUTBank2[245] @[LUTbank.scala 291:25]
    sinLUT[758] <= sinLUTBank2[246] @[LUTbank.scala 291:25]
    sinLUT[759] <= sinLUTBank2[247] @[LUTbank.scala 291:25]
    sinLUT[760] <= sinLUTBank2[248] @[LUTbank.scala 291:25]
    sinLUT[761] <= sinLUTBank2[249] @[LUTbank.scala 291:25]
    sinLUT[762] <= sinLUTBank2[250] @[LUTbank.scala 291:25]
    sinLUT[763] <= sinLUTBank2[251] @[LUTbank.scala 291:25]
    sinLUT[764] <= sinLUTBank2[252] @[LUTbank.scala 291:25]
    sinLUT[765] <= sinLUTBank2[253] @[LUTbank.scala 291:25]
    sinLUT[766] <= sinLUTBank2[254] @[LUTbank.scala 291:25]
    sinLUT[767] <= sinLUTBank2[255] @[LUTbank.scala 291:25]
    sinLUT[768] <= sinLUTBank3[0] @[LUTbank.scala 291:25]
    sinLUT[769] <= sinLUTBank3[1] @[LUTbank.scala 291:25]
    sinLUT[770] <= sinLUTBank3[2] @[LUTbank.scala 291:25]
    sinLUT[771] <= sinLUTBank3[3] @[LUTbank.scala 291:25]
    sinLUT[772] <= sinLUTBank3[4] @[LUTbank.scala 291:25]
    sinLUT[773] <= sinLUTBank3[5] @[LUTbank.scala 291:25]
    sinLUT[774] <= sinLUTBank3[6] @[LUTbank.scala 291:25]
    sinLUT[775] <= sinLUTBank3[7] @[LUTbank.scala 291:25]
    sinLUT[776] <= sinLUTBank3[8] @[LUTbank.scala 291:25]
    sinLUT[777] <= sinLUTBank3[9] @[LUTbank.scala 291:25]
    sinLUT[778] <= sinLUTBank3[10] @[LUTbank.scala 291:25]
    sinLUT[779] <= sinLUTBank3[11] @[LUTbank.scala 291:25]
    sinLUT[780] <= sinLUTBank3[12] @[LUTbank.scala 291:25]
    sinLUT[781] <= sinLUTBank3[13] @[LUTbank.scala 291:25]
    sinLUT[782] <= sinLUTBank3[14] @[LUTbank.scala 291:25]
    sinLUT[783] <= sinLUTBank3[15] @[LUTbank.scala 291:25]
    sinLUT[784] <= sinLUTBank3[16] @[LUTbank.scala 291:25]
    sinLUT[785] <= sinLUTBank3[17] @[LUTbank.scala 291:25]
    sinLUT[786] <= sinLUTBank3[18] @[LUTbank.scala 291:25]
    sinLUT[787] <= sinLUTBank3[19] @[LUTbank.scala 291:25]
    sinLUT[788] <= sinLUTBank3[20] @[LUTbank.scala 291:25]
    sinLUT[789] <= sinLUTBank3[21] @[LUTbank.scala 291:25]
    sinLUT[790] <= sinLUTBank3[22] @[LUTbank.scala 291:25]
    sinLUT[791] <= sinLUTBank3[23] @[LUTbank.scala 291:25]
    sinLUT[792] <= sinLUTBank3[24] @[LUTbank.scala 291:25]
    sinLUT[793] <= sinLUTBank3[25] @[LUTbank.scala 291:25]
    sinLUT[794] <= sinLUTBank3[26] @[LUTbank.scala 291:25]
    sinLUT[795] <= sinLUTBank3[27] @[LUTbank.scala 291:25]
    sinLUT[796] <= sinLUTBank3[28] @[LUTbank.scala 291:25]
    sinLUT[797] <= sinLUTBank3[29] @[LUTbank.scala 291:25]
    sinLUT[798] <= sinLUTBank3[30] @[LUTbank.scala 291:25]
    sinLUT[799] <= sinLUTBank3[31] @[LUTbank.scala 291:25]
    sinLUT[800] <= sinLUTBank3[32] @[LUTbank.scala 291:25]
    sinLUT[801] <= sinLUTBank3[33] @[LUTbank.scala 291:25]
    sinLUT[802] <= sinLUTBank3[34] @[LUTbank.scala 291:25]
    sinLUT[803] <= sinLUTBank3[35] @[LUTbank.scala 291:25]
    sinLUT[804] <= sinLUTBank3[36] @[LUTbank.scala 291:25]
    sinLUT[805] <= sinLUTBank3[37] @[LUTbank.scala 291:25]
    sinLUT[806] <= sinLUTBank3[38] @[LUTbank.scala 291:25]
    sinLUT[807] <= sinLUTBank3[39] @[LUTbank.scala 291:25]
    sinLUT[808] <= sinLUTBank3[40] @[LUTbank.scala 291:25]
    sinLUT[809] <= sinLUTBank3[41] @[LUTbank.scala 291:25]
    sinLUT[810] <= sinLUTBank3[42] @[LUTbank.scala 291:25]
    sinLUT[811] <= sinLUTBank3[43] @[LUTbank.scala 291:25]
    sinLUT[812] <= sinLUTBank3[44] @[LUTbank.scala 291:25]
    sinLUT[813] <= sinLUTBank3[45] @[LUTbank.scala 291:25]
    sinLUT[814] <= sinLUTBank3[46] @[LUTbank.scala 291:25]
    sinLUT[815] <= sinLUTBank3[47] @[LUTbank.scala 291:25]
    sinLUT[816] <= sinLUTBank3[48] @[LUTbank.scala 291:25]
    sinLUT[817] <= sinLUTBank3[49] @[LUTbank.scala 291:25]
    sinLUT[818] <= sinLUTBank3[50] @[LUTbank.scala 291:25]
    sinLUT[819] <= sinLUTBank3[51] @[LUTbank.scala 291:25]
    sinLUT[820] <= sinLUTBank3[52] @[LUTbank.scala 291:25]
    sinLUT[821] <= sinLUTBank3[53] @[LUTbank.scala 291:25]
    sinLUT[822] <= sinLUTBank3[54] @[LUTbank.scala 291:25]
    sinLUT[823] <= sinLUTBank3[55] @[LUTbank.scala 291:25]
    sinLUT[824] <= sinLUTBank3[56] @[LUTbank.scala 291:25]
    sinLUT[825] <= sinLUTBank3[57] @[LUTbank.scala 291:25]
    sinLUT[826] <= sinLUTBank3[58] @[LUTbank.scala 291:25]
    sinLUT[827] <= sinLUTBank3[59] @[LUTbank.scala 291:25]
    sinLUT[828] <= sinLUTBank3[60] @[LUTbank.scala 291:25]
    sinLUT[829] <= sinLUTBank3[61] @[LUTbank.scala 291:25]
    sinLUT[830] <= sinLUTBank3[62] @[LUTbank.scala 291:25]
    sinLUT[831] <= sinLUTBank3[63] @[LUTbank.scala 291:25]
    sinLUT[832] <= sinLUTBank3[64] @[LUTbank.scala 291:25]
    sinLUT[833] <= sinLUTBank3[65] @[LUTbank.scala 291:25]
    sinLUT[834] <= sinLUTBank3[66] @[LUTbank.scala 291:25]
    sinLUT[835] <= sinLUTBank3[67] @[LUTbank.scala 291:25]
    sinLUT[836] <= sinLUTBank3[68] @[LUTbank.scala 291:25]
    sinLUT[837] <= sinLUTBank3[69] @[LUTbank.scala 291:25]
    sinLUT[838] <= sinLUTBank3[70] @[LUTbank.scala 291:25]
    sinLUT[839] <= sinLUTBank3[71] @[LUTbank.scala 291:25]
    sinLUT[840] <= sinLUTBank3[72] @[LUTbank.scala 291:25]
    sinLUT[841] <= sinLUTBank3[73] @[LUTbank.scala 291:25]
    sinLUT[842] <= sinLUTBank3[74] @[LUTbank.scala 291:25]
    sinLUT[843] <= sinLUTBank3[75] @[LUTbank.scala 291:25]
    sinLUT[844] <= sinLUTBank3[76] @[LUTbank.scala 291:25]
    sinLUT[845] <= sinLUTBank3[77] @[LUTbank.scala 291:25]
    sinLUT[846] <= sinLUTBank3[78] @[LUTbank.scala 291:25]
    sinLUT[847] <= sinLUTBank3[79] @[LUTbank.scala 291:25]
    sinLUT[848] <= sinLUTBank3[80] @[LUTbank.scala 291:25]
    sinLUT[849] <= sinLUTBank3[81] @[LUTbank.scala 291:25]
    sinLUT[850] <= sinLUTBank3[82] @[LUTbank.scala 291:25]
    sinLUT[851] <= sinLUTBank3[83] @[LUTbank.scala 291:25]
    sinLUT[852] <= sinLUTBank3[84] @[LUTbank.scala 291:25]
    sinLUT[853] <= sinLUTBank3[85] @[LUTbank.scala 291:25]
    sinLUT[854] <= sinLUTBank3[86] @[LUTbank.scala 291:25]
    sinLUT[855] <= sinLUTBank3[87] @[LUTbank.scala 291:25]
    sinLUT[856] <= sinLUTBank3[88] @[LUTbank.scala 291:25]
    sinLUT[857] <= sinLUTBank3[89] @[LUTbank.scala 291:25]
    sinLUT[858] <= sinLUTBank3[90] @[LUTbank.scala 291:25]
    sinLUT[859] <= sinLUTBank3[91] @[LUTbank.scala 291:25]
    sinLUT[860] <= sinLUTBank3[92] @[LUTbank.scala 291:25]
    sinLUT[861] <= sinLUTBank3[93] @[LUTbank.scala 291:25]
    sinLUT[862] <= sinLUTBank3[94] @[LUTbank.scala 291:25]
    sinLUT[863] <= sinLUTBank3[95] @[LUTbank.scala 291:25]
    sinLUT[864] <= sinLUTBank3[96] @[LUTbank.scala 291:25]
    sinLUT[865] <= sinLUTBank3[97] @[LUTbank.scala 291:25]
    sinLUT[866] <= sinLUTBank3[98] @[LUTbank.scala 291:25]
    sinLUT[867] <= sinLUTBank3[99] @[LUTbank.scala 291:25]
    sinLUT[868] <= sinLUTBank3[100] @[LUTbank.scala 291:25]
    sinLUT[869] <= sinLUTBank3[101] @[LUTbank.scala 291:25]
    sinLUT[870] <= sinLUTBank3[102] @[LUTbank.scala 291:25]
    sinLUT[871] <= sinLUTBank3[103] @[LUTbank.scala 291:25]
    sinLUT[872] <= sinLUTBank3[104] @[LUTbank.scala 291:25]
    sinLUT[873] <= sinLUTBank3[105] @[LUTbank.scala 291:25]
    sinLUT[874] <= sinLUTBank3[106] @[LUTbank.scala 291:25]
    sinLUT[875] <= sinLUTBank3[107] @[LUTbank.scala 291:25]
    sinLUT[876] <= sinLUTBank3[108] @[LUTbank.scala 291:25]
    sinLUT[877] <= sinLUTBank3[109] @[LUTbank.scala 291:25]
    sinLUT[878] <= sinLUTBank3[110] @[LUTbank.scala 291:25]
    sinLUT[879] <= sinLUTBank3[111] @[LUTbank.scala 291:25]
    sinLUT[880] <= sinLUTBank3[112] @[LUTbank.scala 291:25]
    sinLUT[881] <= sinLUTBank3[113] @[LUTbank.scala 291:25]
    sinLUT[882] <= sinLUTBank3[114] @[LUTbank.scala 291:25]
    sinLUT[883] <= sinLUTBank3[115] @[LUTbank.scala 291:25]
    sinLUT[884] <= sinLUTBank3[116] @[LUTbank.scala 291:25]
    sinLUT[885] <= sinLUTBank3[117] @[LUTbank.scala 291:25]
    sinLUT[886] <= sinLUTBank3[118] @[LUTbank.scala 291:25]
    sinLUT[887] <= sinLUTBank3[119] @[LUTbank.scala 291:25]
    sinLUT[888] <= sinLUTBank3[120] @[LUTbank.scala 291:25]
    sinLUT[889] <= sinLUTBank3[121] @[LUTbank.scala 291:25]
    sinLUT[890] <= sinLUTBank3[122] @[LUTbank.scala 291:25]
    sinLUT[891] <= sinLUTBank3[123] @[LUTbank.scala 291:25]
    sinLUT[892] <= sinLUTBank3[124] @[LUTbank.scala 291:25]
    sinLUT[893] <= sinLUTBank3[125] @[LUTbank.scala 291:25]
    sinLUT[894] <= sinLUTBank3[126] @[LUTbank.scala 291:25]
    sinLUT[895] <= sinLUTBank3[127] @[LUTbank.scala 291:25]
    sinLUT[896] <= sinLUTBank3[128] @[LUTbank.scala 291:25]
    sinLUT[897] <= sinLUTBank3[129] @[LUTbank.scala 291:25]
    sinLUT[898] <= sinLUTBank3[130] @[LUTbank.scala 291:25]
    sinLUT[899] <= sinLUTBank3[131] @[LUTbank.scala 291:25]
    sinLUT[900] <= sinLUTBank3[132] @[LUTbank.scala 291:25]
    sinLUT[901] <= sinLUTBank3[133] @[LUTbank.scala 291:25]
    sinLUT[902] <= sinLUTBank3[134] @[LUTbank.scala 291:25]
    sinLUT[903] <= sinLUTBank3[135] @[LUTbank.scala 291:25]
    sinLUT[904] <= sinLUTBank3[136] @[LUTbank.scala 291:25]
    sinLUT[905] <= sinLUTBank3[137] @[LUTbank.scala 291:25]
    sinLUT[906] <= sinLUTBank3[138] @[LUTbank.scala 291:25]
    sinLUT[907] <= sinLUTBank3[139] @[LUTbank.scala 291:25]
    sinLUT[908] <= sinLUTBank3[140] @[LUTbank.scala 291:25]
    sinLUT[909] <= sinLUTBank3[141] @[LUTbank.scala 291:25]
    sinLUT[910] <= sinLUTBank3[142] @[LUTbank.scala 291:25]
    sinLUT[911] <= sinLUTBank3[143] @[LUTbank.scala 291:25]
    sinLUT[912] <= sinLUTBank3[144] @[LUTbank.scala 291:25]
    sinLUT[913] <= sinLUTBank3[145] @[LUTbank.scala 291:25]
    sinLUT[914] <= sinLUTBank3[146] @[LUTbank.scala 291:25]
    sinLUT[915] <= sinLUTBank3[147] @[LUTbank.scala 291:25]
    sinLUT[916] <= sinLUTBank3[148] @[LUTbank.scala 291:25]
    sinLUT[917] <= sinLUTBank3[149] @[LUTbank.scala 291:25]
    sinLUT[918] <= sinLUTBank3[150] @[LUTbank.scala 291:25]
    sinLUT[919] <= sinLUTBank3[151] @[LUTbank.scala 291:25]
    sinLUT[920] <= sinLUTBank3[152] @[LUTbank.scala 291:25]
    sinLUT[921] <= sinLUTBank3[153] @[LUTbank.scala 291:25]
    sinLUT[922] <= sinLUTBank3[154] @[LUTbank.scala 291:25]
    sinLUT[923] <= sinLUTBank3[155] @[LUTbank.scala 291:25]
    sinLUT[924] <= sinLUTBank3[156] @[LUTbank.scala 291:25]
    sinLUT[925] <= sinLUTBank3[157] @[LUTbank.scala 291:25]
    sinLUT[926] <= sinLUTBank3[158] @[LUTbank.scala 291:25]
    sinLUT[927] <= sinLUTBank3[159] @[LUTbank.scala 291:25]
    sinLUT[928] <= sinLUTBank3[160] @[LUTbank.scala 291:25]
    sinLUT[929] <= sinLUTBank3[161] @[LUTbank.scala 291:25]
    sinLUT[930] <= sinLUTBank3[162] @[LUTbank.scala 291:25]
    sinLUT[931] <= sinLUTBank3[163] @[LUTbank.scala 291:25]
    sinLUT[932] <= sinLUTBank3[164] @[LUTbank.scala 291:25]
    sinLUT[933] <= sinLUTBank3[165] @[LUTbank.scala 291:25]
    sinLUT[934] <= sinLUTBank3[166] @[LUTbank.scala 291:25]
    sinLUT[935] <= sinLUTBank3[167] @[LUTbank.scala 291:25]
    sinLUT[936] <= sinLUTBank3[168] @[LUTbank.scala 291:25]
    sinLUT[937] <= sinLUTBank3[169] @[LUTbank.scala 291:25]
    sinLUT[938] <= sinLUTBank3[170] @[LUTbank.scala 291:25]
    sinLUT[939] <= sinLUTBank3[171] @[LUTbank.scala 291:25]
    sinLUT[940] <= sinLUTBank3[172] @[LUTbank.scala 291:25]
    sinLUT[941] <= sinLUTBank3[173] @[LUTbank.scala 291:25]
    sinLUT[942] <= sinLUTBank3[174] @[LUTbank.scala 291:25]
    sinLUT[943] <= sinLUTBank3[175] @[LUTbank.scala 291:25]
    sinLUT[944] <= sinLUTBank3[176] @[LUTbank.scala 291:25]
    sinLUT[945] <= sinLUTBank3[177] @[LUTbank.scala 291:25]
    sinLUT[946] <= sinLUTBank3[178] @[LUTbank.scala 291:25]
    sinLUT[947] <= sinLUTBank3[179] @[LUTbank.scala 291:25]
    sinLUT[948] <= sinLUTBank3[180] @[LUTbank.scala 291:25]
    sinLUT[949] <= sinLUTBank3[181] @[LUTbank.scala 291:25]
    sinLUT[950] <= sinLUTBank3[182] @[LUTbank.scala 291:25]
    sinLUT[951] <= sinLUTBank3[183] @[LUTbank.scala 291:25]
    sinLUT[952] <= sinLUTBank3[184] @[LUTbank.scala 291:25]
    sinLUT[953] <= sinLUTBank3[185] @[LUTbank.scala 291:25]
    sinLUT[954] <= sinLUTBank3[186] @[LUTbank.scala 291:25]
    sinLUT[955] <= sinLUTBank3[187] @[LUTbank.scala 291:25]
    sinLUT[956] <= sinLUTBank3[188] @[LUTbank.scala 291:25]
    sinLUT[957] <= sinLUTBank3[189] @[LUTbank.scala 291:25]
    sinLUT[958] <= sinLUTBank3[190] @[LUTbank.scala 291:25]
    sinLUT[959] <= sinLUTBank3[191] @[LUTbank.scala 291:25]
    sinLUT[960] <= sinLUTBank3[192] @[LUTbank.scala 291:25]
    sinLUT[961] <= sinLUTBank3[193] @[LUTbank.scala 291:25]
    sinLUT[962] <= sinLUTBank3[194] @[LUTbank.scala 291:25]
    sinLUT[963] <= sinLUTBank3[195] @[LUTbank.scala 291:25]
    sinLUT[964] <= sinLUTBank3[196] @[LUTbank.scala 291:25]
    sinLUT[965] <= sinLUTBank3[197] @[LUTbank.scala 291:25]
    sinLUT[966] <= sinLUTBank3[198] @[LUTbank.scala 291:25]
    sinLUT[967] <= sinLUTBank3[199] @[LUTbank.scala 291:25]
    sinLUT[968] <= sinLUTBank3[200] @[LUTbank.scala 291:25]
    sinLUT[969] <= sinLUTBank3[201] @[LUTbank.scala 291:25]
    sinLUT[970] <= sinLUTBank3[202] @[LUTbank.scala 291:25]
    sinLUT[971] <= sinLUTBank3[203] @[LUTbank.scala 291:25]
    sinLUT[972] <= sinLUTBank3[204] @[LUTbank.scala 291:25]
    sinLUT[973] <= sinLUTBank3[205] @[LUTbank.scala 291:25]
    sinLUT[974] <= sinLUTBank3[206] @[LUTbank.scala 291:25]
    sinLUT[975] <= sinLUTBank3[207] @[LUTbank.scala 291:25]
    sinLUT[976] <= sinLUTBank3[208] @[LUTbank.scala 291:25]
    sinLUT[977] <= sinLUTBank3[209] @[LUTbank.scala 291:25]
    sinLUT[978] <= sinLUTBank3[210] @[LUTbank.scala 291:25]
    sinLUT[979] <= sinLUTBank3[211] @[LUTbank.scala 291:25]
    sinLUT[980] <= sinLUTBank3[212] @[LUTbank.scala 291:25]
    sinLUT[981] <= sinLUTBank3[213] @[LUTbank.scala 291:25]
    sinLUT[982] <= sinLUTBank3[214] @[LUTbank.scala 291:25]
    sinLUT[983] <= sinLUTBank3[215] @[LUTbank.scala 291:25]
    sinLUT[984] <= sinLUTBank3[216] @[LUTbank.scala 291:25]
    sinLUT[985] <= sinLUTBank3[217] @[LUTbank.scala 291:25]
    sinLUT[986] <= sinLUTBank3[218] @[LUTbank.scala 291:25]
    sinLUT[987] <= sinLUTBank3[219] @[LUTbank.scala 291:25]
    sinLUT[988] <= sinLUTBank3[220] @[LUTbank.scala 291:25]
    sinLUT[989] <= sinLUTBank3[221] @[LUTbank.scala 291:25]
    sinLUT[990] <= sinLUTBank3[222] @[LUTbank.scala 291:25]
    sinLUT[991] <= sinLUTBank3[223] @[LUTbank.scala 291:25]
    sinLUT[992] <= sinLUTBank3[224] @[LUTbank.scala 291:25]
    sinLUT[993] <= sinLUTBank3[225] @[LUTbank.scala 291:25]
    sinLUT[994] <= sinLUTBank3[226] @[LUTbank.scala 291:25]
    sinLUT[995] <= sinLUTBank3[227] @[LUTbank.scala 291:25]
    sinLUT[996] <= sinLUTBank3[228] @[LUTbank.scala 291:25]
    sinLUT[997] <= sinLUTBank3[229] @[LUTbank.scala 291:25]
    sinLUT[998] <= sinLUTBank3[230] @[LUTbank.scala 291:25]
    sinLUT[999] <= sinLUTBank3[231] @[LUTbank.scala 291:25]
    sinLUT[1000] <= sinLUTBank3[232] @[LUTbank.scala 291:25]
    sinLUT[1001] <= sinLUTBank3[233] @[LUTbank.scala 291:25]
    sinLUT[1002] <= sinLUTBank3[234] @[LUTbank.scala 291:25]
    sinLUT[1003] <= sinLUTBank3[235] @[LUTbank.scala 291:25]
    sinLUT[1004] <= sinLUTBank3[236] @[LUTbank.scala 291:25]
    sinLUT[1005] <= sinLUTBank3[237] @[LUTbank.scala 291:25]
    sinLUT[1006] <= sinLUTBank3[238] @[LUTbank.scala 291:25]
    sinLUT[1007] <= sinLUTBank3[239] @[LUTbank.scala 291:25]
    sinLUT[1008] <= sinLUTBank3[240] @[LUTbank.scala 291:25]
    sinLUT[1009] <= sinLUTBank3[241] @[LUTbank.scala 291:25]
    sinLUT[1010] <= sinLUTBank3[242] @[LUTbank.scala 291:25]
    sinLUT[1011] <= sinLUTBank3[243] @[LUTbank.scala 291:25]
    sinLUT[1012] <= sinLUTBank3[244] @[LUTbank.scala 291:25]
    sinLUT[1013] <= sinLUTBank3[245] @[LUTbank.scala 291:25]
    sinLUT[1014] <= sinLUTBank3[246] @[LUTbank.scala 291:25]
    sinLUT[1015] <= sinLUTBank3[247] @[LUTbank.scala 291:25]
    sinLUT[1016] <= sinLUTBank3[248] @[LUTbank.scala 291:25]
    sinLUT[1017] <= sinLUTBank3[249] @[LUTbank.scala 291:25]
    sinLUT[1018] <= sinLUTBank3[250] @[LUTbank.scala 291:25]
    sinLUT[1019] <= sinLUTBank3[251] @[LUTbank.scala 291:25]
    sinLUT[1020] <= sinLUTBank3[252] @[LUTbank.scala 291:25]
    sinLUT[1021] <= sinLUTBank3[253] @[LUTbank.scala 291:25]
    sinLUT[1022] <= sinLUTBank3[254] @[LUTbank.scala 291:25]
    sinLUT[1023] <= sinLUTBank3[255] @[LUTbank.scala 291:25]
    sinLUT[1024] <= sinLUTBank3[256] @[LUTbank.scala 291:25]
    node _io_cosOut_T = bits(io.cosIndex, 10, 0)
    node _io_cosOut_T_1 = mux(io.EN, cosLUT[_io_cosOut_T], UInt<32>("h0")) @[LUTbank.scala 293:21]
    io.cosOut <= _io_cosOut_T_1 @[LUTbank.scala 293:15]
    node _io_sinOut_T = bits(io.sinIndex, 10, 0)
    node _io_sinOut_T_1 = mux(io.EN, sinLUT[_io_sinOut_T], UInt<32>("h0")) @[LUTbank.scala 294:21]
    io.sinOut <= _io_sinOut_T_1 @[LUTbank.scala 294:15]
    node _io_ENout_T = mux(io.EN, io.EN, UInt<1>("h0")) @[LUTbank.scala 295:21]
    io.ENout <= _io_ENout_T @[LUTbank.scala 295:15]

  module SinCosLUT :
    input clock : Clock
    input reset : Reset
    output io : { flip x : UInt<32>[2], flip EN : UInt<1>, flip angle : UInt<32>, sinOut : UInt<32>, cosOut : UInt<32>, ENout : UInt<1>, xFWD : UInt<32>[2]}

    inst indexCalculator of IndexCalculator @[sincosLUT.scala 92:31]
    indexCalculator.clock <= clock
    indexCalculator.reset <= reset
    inst lutModule of CosLUT @[sincosLUT.scala 93:25]
    lutModule.clock <= clock
    lutModule.reset <= reset
    indexCalculator.io.EN <= io.EN @[sincosLUT.scala 95:25]
    indexCalculator.io.angle <= io.angle @[sincosLUT.scala 96:28]
    lutModule.io.cosIndex <= indexCalculator.io.cosIndex @[sincosLUT.scala 98:25]
    lutModule.io.sinIndex <= indexCalculator.io.sinIndex @[sincosLUT.scala 99:25]
    lutModule.io.EN <= indexCalculator.io.ENout @[sincosLUT.scala 100:19]
    node _io_xFWD_0_T = mux(lutModule.io.ENout, io.x[0], UInt<32>("h0")) @[sincosLUT.scala 102:20]
    io.xFWD[0] <= _io_xFWD_0_T @[sincosLUT.scala 102:14]
    node _io_xFWD_1_T = mux(lutModule.io.ENout, io.x[1], UInt<32>("h0")) @[sincosLUT.scala 103:20]
    io.xFWD[1] <= _io_xFWD_1_T @[sincosLUT.scala 103:14]
    node _io_cosOut_T = bits(lutModule.io.cosOut, 30, 0) @[sincosLUT.scala 105:91]
    node _io_cosOut_T_1 = cat(indexCalculator.io.cosSign, _io_cosOut_T) @[Cat.scala 33:92]
    node _io_cosOut_T_2 = mux(lutModule.io.ENout, _io_cosOut_T_1, UInt<32>("h0")) @[sincosLUT.scala 105:19]
    io.cosOut <= _io_cosOut_T_2 @[sincosLUT.scala 105:13]
    node _io_sinOut_T = bits(lutModule.io.sinOut, 30, 0) @[sincosLUT.scala 106:91]
    node _io_sinOut_T_1 = cat(indexCalculator.io.sinSign, _io_sinOut_T) @[Cat.scala 33:92]
    node _io_sinOut_T_2 = mux(lutModule.io.ENout, _io_sinOut_T_1, UInt<32>("h0")) @[sincosLUT.scala 106:19]
    io.sinOut <= _io_sinOut_T_2 @[sincosLUT.scala 106:13]
    node _io_ENout_T = mux(lutModule.io.ENout, lutModule.io.ENout, UInt<1>("h0")) @[sincosLUT.scala 107:19]
    io.ENout <= _io_ENout_T @[sincosLUT.scala 107:13]

  module MulFullRawFN_3 :
    output io : { flip a : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>}, flip b : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>}, invalidExc : UInt<1>, rawOut : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<48>}}

    node _notSigNaN_invalidExc_T = and(io.a.isInf, io.b.isZero) @[MulRecFN.scala 58:44]
    node _notSigNaN_invalidExc_T_1 = and(io.a.isZero, io.b.isInf) @[MulRecFN.scala 58:76]
    node notSigNaN_invalidExc = or(_notSigNaN_invalidExc_T, _notSigNaN_invalidExc_T_1) @[MulRecFN.scala 58:60]
    node notNaN_isInfOut = or(io.a.isInf, io.b.isInf) @[MulRecFN.scala 59:38]
    node notNaN_isZeroOut = or(io.a.isZero, io.b.isZero) @[MulRecFN.scala 60:40]
    node notNaN_signOut = xor(io.a.sign, io.b.sign) @[MulRecFN.scala 61:36]
    node _common_sExpOut_T = add(io.a.sExp, io.b.sExp) @[MulRecFN.scala 62:36]
    node _common_sExpOut_T_1 = tail(_common_sExpOut_T, 1) @[MulRecFN.scala 62:36]
    node _common_sExpOut_T_2 = asSInt(_common_sExpOut_T_1) @[MulRecFN.scala 62:36]
    node _common_sExpOut_T_3 = sub(_common_sExpOut_T_2, asSInt(UInt<10>("h100"))) @[MulRecFN.scala 62:48]
    node _common_sExpOut_T_4 = tail(_common_sExpOut_T_3, 1) @[MulRecFN.scala 62:48]
    node common_sExpOut = asSInt(_common_sExpOut_T_4) @[MulRecFN.scala 62:48]
    node _common_sigOut_T = mul(io.a.sig, io.b.sig) @[MulRecFN.scala 63:35]
    node common_sigOut = bits(_common_sigOut_T, 47, 0) @[MulRecFN.scala 63:46]
    node _io_invalidExc_T = bits(io.a.sig, 22, 22) @[common.scala 82:56]
    node _io_invalidExc_T_1 = eq(_io_invalidExc_T, UInt<1>("h0")) @[common.scala 82:49]
    node _io_invalidExc_T_2 = and(io.a.isNaN, _io_invalidExc_T_1) @[common.scala 82:46]
    node _io_invalidExc_T_3 = bits(io.b.sig, 22, 22) @[common.scala 82:56]
    node _io_invalidExc_T_4 = eq(_io_invalidExc_T_3, UInt<1>("h0")) @[common.scala 82:49]
    node _io_invalidExc_T_5 = and(io.b.isNaN, _io_invalidExc_T_4) @[common.scala 82:46]
    node _io_invalidExc_T_6 = or(_io_invalidExc_T_2, _io_invalidExc_T_5) @[MulRecFN.scala 66:45]
    node _io_invalidExc_T_7 = or(_io_invalidExc_T_6, notSigNaN_invalidExc) @[MulRecFN.scala 66:71]
    io.invalidExc <= _io_invalidExc_T_7 @[MulRecFN.scala 66:19]
    io.rawOut.isInf <= notNaN_isInfOut @[MulRecFN.scala 67:21]
    io.rawOut.isZero <= notNaN_isZeroOut @[MulRecFN.scala 68:22]
    io.rawOut.sExp <= common_sExpOut @[MulRecFN.scala 69:20]
    node _io_rawOut_isNaN_T = or(io.a.isNaN, io.b.isNaN) @[MulRecFN.scala 70:35]
    io.rawOut.isNaN <= _io_rawOut_isNaN_T @[MulRecFN.scala 70:21]
    io.rawOut.sign <= notNaN_signOut @[MulRecFN.scala 71:20]
    io.rawOut.sig <= common_sigOut @[MulRecFN.scala 72:19]

  module MulRawFN_3 :
    output io : { flip a : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>}, flip b : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>}, invalidExc : UInt<1>, rawOut : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<27>}}

    inst mulFullRaw of MulFullRawFN_3 @[MulRecFN.scala 84:28]
    mulFullRaw.io.a.sig <= io.a.sig @[MulRecFN.scala 86:21]
    mulFullRaw.io.a.sExp <= io.a.sExp @[MulRecFN.scala 86:21]
    mulFullRaw.io.a.sign <= io.a.sign @[MulRecFN.scala 86:21]
    mulFullRaw.io.a.isZero <= io.a.isZero @[MulRecFN.scala 86:21]
    mulFullRaw.io.a.isInf <= io.a.isInf @[MulRecFN.scala 86:21]
    mulFullRaw.io.a.isNaN <= io.a.isNaN @[MulRecFN.scala 86:21]
    mulFullRaw.io.b.sig <= io.b.sig @[MulRecFN.scala 87:21]
    mulFullRaw.io.b.sExp <= io.b.sExp @[MulRecFN.scala 87:21]
    mulFullRaw.io.b.sign <= io.b.sign @[MulRecFN.scala 87:21]
    mulFullRaw.io.b.isZero <= io.b.isZero @[MulRecFN.scala 87:21]
    mulFullRaw.io.b.isInf <= io.b.isInf @[MulRecFN.scala 87:21]
    mulFullRaw.io.b.isNaN <= io.b.isNaN @[MulRecFN.scala 87:21]
    io.invalidExc <= mulFullRaw.io.invalidExc @[MulRecFN.scala 89:19]
    io.rawOut <= mulFullRaw.io.rawOut @[MulRecFN.scala 90:15]
    node _io_rawOut_sig_T = shr(mulFullRaw.io.rawOut.sig, 22) @[MulRecFN.scala 93:15]
    node _io_rawOut_sig_T_1 = bits(mulFullRaw.io.rawOut.sig, 21, 0) @[MulRecFN.scala 93:37]
    node _io_rawOut_sig_T_2 = orr(_io_rawOut_sig_T_1) @[MulRecFN.scala 93:55]
    node _io_rawOut_sig_T_3 = cat(_io_rawOut_sig_T, _io_rawOut_sig_T_2) @[Cat.scala 33:92]
    io.rawOut.sig <= _io_rawOut_sig_T_3 @[MulRecFN.scala 91:19]

  module RoundAnyRawFNToRecFN_ie8_is26_oe8_os24_4 :
    output io : { flip invalidExc : UInt<1>, flip infiniteExc : UInt<1>, flip in : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<27>}, flip roundingMode : UInt<3>, flip detectTininess : UInt<1>, out : UInt<33>, exceptionFlags : UInt<5>}

    node roundingMode_near_even = eq(io.roundingMode, UInt<3>("h0")) @[RoundAnyRawFNToRecFN.scala 90:53]
    node roundingMode_minMag = eq(io.roundingMode, UInt<3>("h1")) @[RoundAnyRawFNToRecFN.scala 91:53]
    node roundingMode_min = eq(io.roundingMode, UInt<3>("h2")) @[RoundAnyRawFNToRecFN.scala 92:53]
    node roundingMode_max = eq(io.roundingMode, UInt<3>("h3")) @[RoundAnyRawFNToRecFN.scala 93:53]
    node roundingMode_near_maxMag = eq(io.roundingMode, UInt<3>("h4")) @[RoundAnyRawFNToRecFN.scala 94:53]
    node roundingMode_odd = eq(io.roundingMode, UInt<3>("h6")) @[RoundAnyRawFNToRecFN.scala 95:53]
    node _roundMagUp_T = and(roundingMode_min, io.in.sign) @[RoundAnyRawFNToRecFN.scala 98:27]
    node _roundMagUp_T_1 = eq(io.in.sign, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 98:66]
    node _roundMagUp_T_2 = and(roundingMode_max, _roundMagUp_T_1) @[RoundAnyRawFNToRecFN.scala 98:63]
    node roundMagUp = or(_roundMagUp_T, _roundMagUp_T_2) @[RoundAnyRawFNToRecFN.scala 98:42]
    node adjustedSig = shl(io.in.sig, 0) @[RoundAnyRawFNToRecFN.scala 114:22]
    node doShiftSigDown1 = bits(adjustedSig, 26, 26) @[RoundAnyRawFNToRecFN.scala 120:57]
    wire common_expOut : UInt<9> @[RoundAnyRawFNToRecFN.scala 122:31]
    wire common_fractOut : UInt<23> @[RoundAnyRawFNToRecFN.scala 123:31]
    wire common_overflow : UInt<1> @[RoundAnyRawFNToRecFN.scala 124:37]
    wire common_totalUnderflow : UInt<1> @[RoundAnyRawFNToRecFN.scala 125:37]
    wire common_underflow : UInt<1> @[RoundAnyRawFNToRecFN.scala 126:37]
    wire common_inexact : UInt<1> @[RoundAnyRawFNToRecFN.scala 127:37]
    node _roundMask_T = bits(io.in.sExp, 8, 0) @[RoundAnyRawFNToRecFN.scala 156:37]
    node _roundMask_T_1 = not(_roundMask_T) @[primitives.scala 52:21]
    node roundMask_msb = bits(_roundMask_T_1, 8, 8) @[primitives.scala 58:25]
    node roundMask_lsbs = bits(_roundMask_T_1, 7, 0) @[primitives.scala 59:26]
    node roundMask_msb_1 = bits(roundMask_lsbs, 7, 7) @[primitives.scala 58:25]
    node roundMask_lsbs_1 = bits(roundMask_lsbs, 6, 0) @[primitives.scala 59:26]
    node roundMask_msb_2 = bits(roundMask_lsbs_1, 6, 6) @[primitives.scala 58:25]
    node roundMask_lsbs_2 = bits(roundMask_lsbs_1, 5, 0) @[primitives.scala 59:26]
    node roundMask_shift = dshr(asSInt(UInt<65>("h10000000000000000")), roundMask_lsbs_2) @[primitives.scala 76:56]
    node _roundMask_T_2 = bits(roundMask_shift, 63, 42) @[primitives.scala 78:22]
    node _roundMask_T_3 = bits(_roundMask_T_2, 15, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_4 = shl(UInt<8>("hff"), 8) @[Bitwise.scala 107:52]
    node _roundMask_T_5 = xor(UInt<16>("hffff"), _roundMask_T_4) @[Bitwise.scala 107:21]
    node _roundMask_T_6 = shr(_roundMask_T_3, 8) @[Bitwise.scala 108:21]
    node _roundMask_T_7 = and(_roundMask_T_6, _roundMask_T_5) @[Bitwise.scala 108:31]
    node _roundMask_T_8 = bits(_roundMask_T_3, 7, 0) @[Bitwise.scala 108:46]
    node _roundMask_T_9 = shl(_roundMask_T_8, 8) @[Bitwise.scala 108:70]
    node _roundMask_T_10 = not(_roundMask_T_5) @[Bitwise.scala 108:82]
    node _roundMask_T_11 = and(_roundMask_T_9, _roundMask_T_10) @[Bitwise.scala 108:80]
    node _roundMask_T_12 = or(_roundMask_T_7, _roundMask_T_11) @[Bitwise.scala 108:39]
    node _roundMask_T_13 = bits(_roundMask_T_5, 11, 0) @[Bitwise.scala 107:28]
    node _roundMask_T_14 = shl(_roundMask_T_13, 4) @[Bitwise.scala 107:52]
    node _roundMask_T_15 = xor(_roundMask_T_5, _roundMask_T_14) @[Bitwise.scala 107:21]
    node _roundMask_T_16 = shr(_roundMask_T_12, 4) @[Bitwise.scala 108:21]
    node _roundMask_T_17 = and(_roundMask_T_16, _roundMask_T_15) @[Bitwise.scala 108:31]
    node _roundMask_T_18 = bits(_roundMask_T_12, 11, 0) @[Bitwise.scala 108:46]
    node _roundMask_T_19 = shl(_roundMask_T_18, 4) @[Bitwise.scala 108:70]
    node _roundMask_T_20 = not(_roundMask_T_15) @[Bitwise.scala 108:82]
    node _roundMask_T_21 = and(_roundMask_T_19, _roundMask_T_20) @[Bitwise.scala 108:80]
    node _roundMask_T_22 = or(_roundMask_T_17, _roundMask_T_21) @[Bitwise.scala 108:39]
    node _roundMask_T_23 = bits(_roundMask_T_15, 13, 0) @[Bitwise.scala 107:28]
    node _roundMask_T_24 = shl(_roundMask_T_23, 2) @[Bitwise.scala 107:52]
    node _roundMask_T_25 = xor(_roundMask_T_15, _roundMask_T_24) @[Bitwise.scala 107:21]
    node _roundMask_T_26 = shr(_roundMask_T_22, 2) @[Bitwise.scala 108:21]
    node _roundMask_T_27 = and(_roundMask_T_26, _roundMask_T_25) @[Bitwise.scala 108:31]
    node _roundMask_T_28 = bits(_roundMask_T_22, 13, 0) @[Bitwise.scala 108:46]
    node _roundMask_T_29 = shl(_roundMask_T_28, 2) @[Bitwise.scala 108:70]
    node _roundMask_T_30 = not(_roundMask_T_25) @[Bitwise.scala 108:82]
    node _roundMask_T_31 = and(_roundMask_T_29, _roundMask_T_30) @[Bitwise.scala 108:80]
    node _roundMask_T_32 = or(_roundMask_T_27, _roundMask_T_31) @[Bitwise.scala 108:39]
    node _roundMask_T_33 = bits(_roundMask_T_25, 14, 0) @[Bitwise.scala 107:28]
    node _roundMask_T_34 = shl(_roundMask_T_33, 1) @[Bitwise.scala 107:52]
    node _roundMask_T_35 = xor(_roundMask_T_25, _roundMask_T_34) @[Bitwise.scala 107:21]
    node _roundMask_T_36 = shr(_roundMask_T_32, 1) @[Bitwise.scala 108:21]
    node _roundMask_T_37 = and(_roundMask_T_36, _roundMask_T_35) @[Bitwise.scala 108:31]
    node _roundMask_T_38 = bits(_roundMask_T_32, 14, 0) @[Bitwise.scala 108:46]
    node _roundMask_T_39 = shl(_roundMask_T_38, 1) @[Bitwise.scala 108:70]
    node _roundMask_T_40 = not(_roundMask_T_35) @[Bitwise.scala 108:82]
    node _roundMask_T_41 = and(_roundMask_T_39, _roundMask_T_40) @[Bitwise.scala 108:80]
    node _roundMask_T_42 = or(_roundMask_T_37, _roundMask_T_41) @[Bitwise.scala 108:39]
    node _roundMask_T_43 = bits(_roundMask_T_2, 21, 16) @[Bitwise.scala 114:47]
    node _roundMask_T_44 = bits(_roundMask_T_43, 3, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_45 = bits(_roundMask_T_44, 1, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_46 = bits(_roundMask_T_45, 0, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_47 = bits(_roundMask_T_45, 1, 1) @[Bitwise.scala 114:47]
    node _roundMask_T_48 = cat(_roundMask_T_46, _roundMask_T_47) @[Cat.scala 33:92]
    node _roundMask_T_49 = bits(_roundMask_T_44, 3, 2) @[Bitwise.scala 114:47]
    node _roundMask_T_50 = bits(_roundMask_T_49, 0, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_51 = bits(_roundMask_T_49, 1, 1) @[Bitwise.scala 114:47]
    node _roundMask_T_52 = cat(_roundMask_T_50, _roundMask_T_51) @[Cat.scala 33:92]
    node _roundMask_T_53 = cat(_roundMask_T_48, _roundMask_T_52) @[Cat.scala 33:92]
    node _roundMask_T_54 = bits(_roundMask_T_43, 5, 4) @[Bitwise.scala 114:47]
    node _roundMask_T_55 = bits(_roundMask_T_54, 0, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_56 = bits(_roundMask_T_54, 1, 1) @[Bitwise.scala 114:47]
    node _roundMask_T_57 = cat(_roundMask_T_55, _roundMask_T_56) @[Cat.scala 33:92]
    node _roundMask_T_58 = cat(_roundMask_T_53, _roundMask_T_57) @[Cat.scala 33:92]
    node _roundMask_T_59 = cat(_roundMask_T_42, _roundMask_T_58) @[Cat.scala 33:92]
    node _roundMask_T_60 = not(_roundMask_T_59) @[primitives.scala 73:32]
    node _roundMask_T_61 = mux(roundMask_msb_2, UInt<1>("h0"), _roundMask_T_60) @[primitives.scala 73:21]
    node _roundMask_T_62 = not(_roundMask_T_61) @[primitives.scala 73:17]
    node _roundMask_T_63 = cat(_roundMask_T_62, UInt<3>("h7")) @[primitives.scala 68:58]
    node roundMask_msb_3 = bits(roundMask_lsbs_1, 6, 6) @[primitives.scala 58:25]
    node roundMask_lsbs_3 = bits(roundMask_lsbs_1, 5, 0) @[primitives.scala 59:26]
    node roundMask_shift_1 = dshr(asSInt(UInt<65>("h10000000000000000")), roundMask_lsbs_3) @[primitives.scala 76:56]
    node _roundMask_T_64 = bits(roundMask_shift_1, 2, 0) @[primitives.scala 78:22]
    node _roundMask_T_65 = bits(_roundMask_T_64, 1, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_66 = bits(_roundMask_T_65, 0, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_67 = bits(_roundMask_T_65, 1, 1) @[Bitwise.scala 114:47]
    node _roundMask_T_68 = cat(_roundMask_T_66, _roundMask_T_67) @[Cat.scala 33:92]
    node _roundMask_T_69 = bits(_roundMask_T_64, 2, 2) @[Bitwise.scala 114:47]
    node _roundMask_T_70 = cat(_roundMask_T_68, _roundMask_T_69) @[Cat.scala 33:92]
    node _roundMask_T_71 = mux(roundMask_msb_3, _roundMask_T_70, UInt<1>("h0")) @[primitives.scala 62:24]
    node _roundMask_T_72 = mux(roundMask_msb_1, _roundMask_T_63, _roundMask_T_71) @[primitives.scala 67:24]
    node _roundMask_T_73 = mux(roundMask_msb, _roundMask_T_72, UInt<1>("h0")) @[primitives.scala 62:24]
    node _roundMask_T_74 = or(_roundMask_T_73, doShiftSigDown1) @[RoundAnyRawFNToRecFN.scala 159:23]
    node roundMask = cat(_roundMask_T_74, UInt<2>("h3")) @[RoundAnyRawFNToRecFN.scala 159:42]
    node _shiftedRoundMask_T = cat(UInt<1>("h0"), roundMask) @[RoundAnyRawFNToRecFN.scala 162:41]
    node shiftedRoundMask = shr(_shiftedRoundMask_T, 1) @[RoundAnyRawFNToRecFN.scala 162:53]
    node _roundPosMask_T = not(shiftedRoundMask) @[RoundAnyRawFNToRecFN.scala 163:28]
    node roundPosMask = and(_roundPosMask_T, roundMask) @[RoundAnyRawFNToRecFN.scala 163:46]
    node _roundPosBit_T = and(adjustedSig, roundPosMask) @[RoundAnyRawFNToRecFN.scala 164:40]
    node roundPosBit = orr(_roundPosBit_T) @[RoundAnyRawFNToRecFN.scala 164:56]
    node _anyRoundExtra_T = and(adjustedSig, shiftedRoundMask) @[RoundAnyRawFNToRecFN.scala 165:42]
    node anyRoundExtra = orr(_anyRoundExtra_T) @[RoundAnyRawFNToRecFN.scala 165:62]
    node anyRound = or(roundPosBit, anyRoundExtra) @[RoundAnyRawFNToRecFN.scala 166:36]
    node _roundIncr_T = or(roundingMode_near_even, roundingMode_near_maxMag) @[RoundAnyRawFNToRecFN.scala 169:38]
    node _roundIncr_T_1 = and(_roundIncr_T, roundPosBit) @[RoundAnyRawFNToRecFN.scala 169:67]
    node _roundIncr_T_2 = and(roundMagUp, anyRound) @[RoundAnyRawFNToRecFN.scala 171:29]
    node roundIncr = or(_roundIncr_T_1, _roundIncr_T_2) @[RoundAnyRawFNToRecFN.scala 170:31]
    node _roundedSig_T = or(adjustedSig, roundMask) @[RoundAnyRawFNToRecFN.scala 174:32]
    node _roundedSig_T_1 = shr(_roundedSig_T, 2) @[RoundAnyRawFNToRecFN.scala 174:44]
    node _roundedSig_T_2 = add(_roundedSig_T_1, UInt<1>("h1")) @[RoundAnyRawFNToRecFN.scala 174:49]
    node _roundedSig_T_3 = and(roundingMode_near_even, roundPosBit) @[RoundAnyRawFNToRecFN.scala 175:49]
    node _roundedSig_T_4 = eq(anyRoundExtra, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 176:30]
    node _roundedSig_T_5 = and(_roundedSig_T_3, _roundedSig_T_4) @[RoundAnyRawFNToRecFN.scala 175:64]
    node _roundedSig_T_6 = shr(roundMask, 1) @[RoundAnyRawFNToRecFN.scala 177:35]
    node _roundedSig_T_7 = mux(_roundedSig_T_5, _roundedSig_T_6, UInt<26>("h0")) @[RoundAnyRawFNToRecFN.scala 175:25]
    node _roundedSig_T_8 = not(_roundedSig_T_7) @[RoundAnyRawFNToRecFN.scala 175:21]
    node _roundedSig_T_9 = and(_roundedSig_T_2, _roundedSig_T_8) @[RoundAnyRawFNToRecFN.scala 174:57]
    node _roundedSig_T_10 = not(roundMask) @[RoundAnyRawFNToRecFN.scala 180:32]
    node _roundedSig_T_11 = and(adjustedSig, _roundedSig_T_10) @[RoundAnyRawFNToRecFN.scala 180:30]
    node _roundedSig_T_12 = shr(_roundedSig_T_11, 2) @[RoundAnyRawFNToRecFN.scala 180:43]
    node _roundedSig_T_13 = and(roundingMode_odd, anyRound) @[RoundAnyRawFNToRecFN.scala 181:42]
    node _roundedSig_T_14 = shr(roundPosMask, 1) @[RoundAnyRawFNToRecFN.scala 181:67]
    node _roundedSig_T_15 = mux(_roundedSig_T_13, _roundedSig_T_14, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 181:24]
    node _roundedSig_T_16 = or(_roundedSig_T_12, _roundedSig_T_15) @[RoundAnyRawFNToRecFN.scala 180:47]
    node roundedSig = mux(roundIncr, _roundedSig_T_9, _roundedSig_T_16) @[RoundAnyRawFNToRecFN.scala 173:16]
    node _sRoundedExp_T = shr(roundedSig, 24) @[RoundAnyRawFNToRecFN.scala 185:54]
    node _sRoundedExp_T_1 = cvt(_sRoundedExp_T) @[RoundAnyRawFNToRecFN.scala 185:76]
    node sRoundedExp = add(io.in.sExp, _sRoundedExp_T_1) @[RoundAnyRawFNToRecFN.scala 185:40]
    node _common_expOut_T = bits(sRoundedExp, 8, 0) @[RoundAnyRawFNToRecFN.scala 187:37]
    common_expOut <= _common_expOut_T @[RoundAnyRawFNToRecFN.scala 187:23]
    node _common_fractOut_T = bits(roundedSig, 23, 1) @[RoundAnyRawFNToRecFN.scala 190:27]
    node _common_fractOut_T_1 = bits(roundedSig, 22, 0) @[RoundAnyRawFNToRecFN.scala 191:27]
    node _common_fractOut_T_2 = mux(doShiftSigDown1, _common_fractOut_T, _common_fractOut_T_1) @[RoundAnyRawFNToRecFN.scala 189:16]
    common_fractOut <= _common_fractOut_T_2 @[RoundAnyRawFNToRecFN.scala 188:25]
    node _common_overflow_T = shr(sRoundedExp, 7) @[RoundAnyRawFNToRecFN.scala 196:30]
    node _common_overflow_T_1 = geq(_common_overflow_T, asSInt(UInt<3>("h3"))) @[RoundAnyRawFNToRecFN.scala 196:50]
    common_overflow <= _common_overflow_T_1 @[RoundAnyRawFNToRecFN.scala 193:25]
    node _common_totalUnderflow_T = lt(sRoundedExp, asSInt(UInt<8>("h6b"))) @[RoundAnyRawFNToRecFN.scala 200:31]
    common_totalUnderflow <= _common_totalUnderflow_T @[RoundAnyRawFNToRecFN.scala 197:31]
    node _unboundedRange_roundPosBit_T = bits(adjustedSig, 2, 2) @[RoundAnyRawFNToRecFN.scala 203:45]
    node _unboundedRange_roundPosBit_T_1 = bits(adjustedSig, 1, 1) @[RoundAnyRawFNToRecFN.scala 203:61]
    node unboundedRange_roundPosBit = mux(doShiftSigDown1, _unboundedRange_roundPosBit_T, _unboundedRange_roundPosBit_T_1) @[RoundAnyRawFNToRecFN.scala 203:16]
    node _unboundedRange_anyRound_T = bits(adjustedSig, 2, 2) @[RoundAnyRawFNToRecFN.scala 205:44]
    node _unboundedRange_anyRound_T_1 = and(doShiftSigDown1, _unboundedRange_anyRound_T) @[RoundAnyRawFNToRecFN.scala 205:30]
    node _unboundedRange_anyRound_T_2 = bits(adjustedSig, 1, 0) @[RoundAnyRawFNToRecFN.scala 205:63]
    node _unboundedRange_anyRound_T_3 = orr(_unboundedRange_anyRound_T_2) @[RoundAnyRawFNToRecFN.scala 205:70]
    node unboundedRange_anyRound = or(_unboundedRange_anyRound_T_1, _unboundedRange_anyRound_T_3) @[RoundAnyRawFNToRecFN.scala 205:49]
    node _unboundedRange_roundIncr_T = or(roundingMode_near_even, roundingMode_near_maxMag) @[RoundAnyRawFNToRecFN.scala 207:38]
    node _unboundedRange_roundIncr_T_1 = and(_unboundedRange_roundIncr_T, unboundedRange_roundPosBit) @[RoundAnyRawFNToRecFN.scala 207:67]
    node _unboundedRange_roundIncr_T_2 = and(roundMagUp, unboundedRange_anyRound) @[RoundAnyRawFNToRecFN.scala 209:29]
    node unboundedRange_roundIncr = or(_unboundedRange_roundIncr_T_1, _unboundedRange_roundIncr_T_2) @[RoundAnyRawFNToRecFN.scala 208:46]
    node _roundCarry_T = bits(roundedSig, 25, 25) @[RoundAnyRawFNToRecFN.scala 212:27]
    node _roundCarry_T_1 = bits(roundedSig, 24, 24) @[RoundAnyRawFNToRecFN.scala 213:27]
    node roundCarry = mux(doShiftSigDown1, _roundCarry_T, _roundCarry_T_1) @[RoundAnyRawFNToRecFN.scala 211:16]
    node _common_underflow_T = shr(io.in.sExp, 8) @[RoundAnyRawFNToRecFN.scala 220:49]
    node _common_underflow_T_1 = leq(_common_underflow_T, asSInt(UInt<1>("h0"))) @[RoundAnyRawFNToRecFN.scala 220:64]
    node _common_underflow_T_2 = and(anyRound, _common_underflow_T_1) @[RoundAnyRawFNToRecFN.scala 220:32]
    node _common_underflow_T_3 = bits(roundMask, 3, 3) @[RoundAnyRawFNToRecFN.scala 221:57]
    node _common_underflow_T_4 = bits(roundMask, 2, 2) @[RoundAnyRawFNToRecFN.scala 221:71]
    node _common_underflow_T_5 = mux(doShiftSigDown1, _common_underflow_T_3, _common_underflow_T_4) @[RoundAnyRawFNToRecFN.scala 221:30]
    node _common_underflow_T_6 = and(_common_underflow_T_2, _common_underflow_T_5) @[RoundAnyRawFNToRecFN.scala 220:72]
    node _common_underflow_T_7 = eq(io.detectTininess, UInt<1>("h1")) @[RoundAnyRawFNToRecFN.scala 222:49]
    node _common_underflow_T_8 = bits(roundMask, 4, 4) @[RoundAnyRawFNToRecFN.scala 224:49]
    node _common_underflow_T_9 = bits(roundMask, 3, 3) @[RoundAnyRawFNToRecFN.scala 225:49]
    node _common_underflow_T_10 = mux(doShiftSigDown1, _common_underflow_T_8, _common_underflow_T_9) @[RoundAnyRawFNToRecFN.scala 223:39]
    node _common_underflow_T_11 = eq(_common_underflow_T_10, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 223:34]
    node _common_underflow_T_12 = and(_common_underflow_T_7, _common_underflow_T_11) @[RoundAnyRawFNToRecFN.scala 222:77]
    node _common_underflow_T_13 = and(_common_underflow_T_12, roundCarry) @[RoundAnyRawFNToRecFN.scala 226:38]
    node _common_underflow_T_14 = and(_common_underflow_T_13, roundPosBit) @[RoundAnyRawFNToRecFN.scala 227:45]
    node _common_underflow_T_15 = and(_common_underflow_T_14, unboundedRange_roundIncr) @[RoundAnyRawFNToRecFN.scala 227:60]
    node _common_underflow_T_16 = eq(_common_underflow_T_15, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 222:27]
    node _common_underflow_T_17 = and(_common_underflow_T_6, _common_underflow_T_16) @[RoundAnyRawFNToRecFN.scala 221:76]
    node _common_underflow_T_18 = or(common_totalUnderflow, _common_underflow_T_17) @[RoundAnyRawFNToRecFN.scala 217:40]
    common_underflow <= _common_underflow_T_18 @[RoundAnyRawFNToRecFN.scala 215:26]
    node _common_inexact_T = or(common_totalUnderflow, anyRound) @[RoundAnyRawFNToRecFN.scala 230:49]
    common_inexact <= _common_inexact_T @[RoundAnyRawFNToRecFN.scala 230:24]
    node isNaNOut = or(io.invalidExc, io.in.isNaN) @[RoundAnyRawFNToRecFN.scala 235:34]
    node notNaN_isSpecialInfOut = or(io.infiniteExc, io.in.isInf) @[RoundAnyRawFNToRecFN.scala 236:49]
    node _commonCase_T = eq(isNaNOut, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 237:22]
    node _commonCase_T_1 = eq(notNaN_isSpecialInfOut, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 237:36]
    node _commonCase_T_2 = and(_commonCase_T, _commonCase_T_1) @[RoundAnyRawFNToRecFN.scala 237:33]
    node _commonCase_T_3 = eq(io.in.isZero, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 237:64]
    node commonCase = and(_commonCase_T_2, _commonCase_T_3) @[RoundAnyRawFNToRecFN.scala 237:61]
    node overflow = and(commonCase, common_overflow) @[RoundAnyRawFNToRecFN.scala 238:32]
    node underflow = and(commonCase, common_underflow) @[RoundAnyRawFNToRecFN.scala 239:32]
    node _inexact_T = and(commonCase, common_inexact) @[RoundAnyRawFNToRecFN.scala 240:43]
    node inexact = or(overflow, _inexact_T) @[RoundAnyRawFNToRecFN.scala 240:28]
    node _overflow_roundMagUp_T = or(roundingMode_near_even, roundingMode_near_maxMag) @[RoundAnyRawFNToRecFN.scala 243:32]
    node overflow_roundMagUp = or(_overflow_roundMagUp_T, roundMagUp) @[RoundAnyRawFNToRecFN.scala 243:60]
    node _pegMinNonzeroMagOut_T = and(commonCase, common_totalUnderflow) @[RoundAnyRawFNToRecFN.scala 245:20]
    node _pegMinNonzeroMagOut_T_1 = or(roundMagUp, roundingMode_odd) @[RoundAnyRawFNToRecFN.scala 245:60]
    node pegMinNonzeroMagOut = and(_pegMinNonzeroMagOut_T, _pegMinNonzeroMagOut_T_1) @[RoundAnyRawFNToRecFN.scala 245:45]
    node _pegMaxFiniteMagOut_T = eq(overflow_roundMagUp, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 246:42]
    node pegMaxFiniteMagOut = and(overflow, _pegMaxFiniteMagOut_T) @[RoundAnyRawFNToRecFN.scala 246:39]
    node _notNaN_isInfOut_T = and(overflow, overflow_roundMagUp) @[RoundAnyRawFNToRecFN.scala 248:45]
    node notNaN_isInfOut = or(notNaN_isSpecialInfOut, _notNaN_isInfOut_T) @[RoundAnyRawFNToRecFN.scala 248:32]
    node signOut = mux(isNaNOut, UInt<1>("h0"), io.in.sign) @[RoundAnyRawFNToRecFN.scala 250:22]
    node _expOut_T = or(io.in.isZero, common_totalUnderflow) @[RoundAnyRawFNToRecFN.scala 253:32]
    node _expOut_T_1 = mux(_expOut_T, UInt<9>("h1c0"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 253:18]
    node _expOut_T_2 = not(_expOut_T_1) @[RoundAnyRawFNToRecFN.scala 253:14]
    node _expOut_T_3 = and(common_expOut, _expOut_T_2) @[RoundAnyRawFNToRecFN.scala 252:24]
    node _expOut_T_4 = not(UInt<9>("h6b")) @[RoundAnyRawFNToRecFN.scala 258:19]
    node _expOut_T_5 = mux(pegMinNonzeroMagOut, _expOut_T_4, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 257:18]
    node _expOut_T_6 = not(_expOut_T_5) @[RoundAnyRawFNToRecFN.scala 257:14]
    node _expOut_T_7 = and(_expOut_T_3, _expOut_T_6) @[RoundAnyRawFNToRecFN.scala 256:17]
    node _expOut_T_8 = mux(pegMaxFiniteMagOut, UInt<9>("h80"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 261:18]
    node _expOut_T_9 = not(_expOut_T_8) @[RoundAnyRawFNToRecFN.scala 261:14]
    node _expOut_T_10 = and(_expOut_T_7, _expOut_T_9) @[RoundAnyRawFNToRecFN.scala 260:17]
    node _expOut_T_11 = mux(notNaN_isInfOut, UInt<9>("h40"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 265:18]
    node _expOut_T_12 = not(_expOut_T_11) @[RoundAnyRawFNToRecFN.scala 265:14]
    node _expOut_T_13 = and(_expOut_T_10, _expOut_T_12) @[RoundAnyRawFNToRecFN.scala 264:17]
    node _expOut_T_14 = mux(pegMinNonzeroMagOut, UInt<9>("h6b"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 269:16]
    node _expOut_T_15 = or(_expOut_T_13, _expOut_T_14) @[RoundAnyRawFNToRecFN.scala 268:18]
    node _expOut_T_16 = mux(pegMaxFiniteMagOut, UInt<9>("h17f"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 273:16]
    node _expOut_T_17 = or(_expOut_T_15, _expOut_T_16) @[RoundAnyRawFNToRecFN.scala 272:15]
    node _expOut_T_18 = mux(notNaN_isInfOut, UInt<9>("h180"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 277:16]
    node _expOut_T_19 = or(_expOut_T_17, _expOut_T_18) @[RoundAnyRawFNToRecFN.scala 276:15]
    node _expOut_T_20 = mux(isNaNOut, UInt<9>("h1c0"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 278:16]
    node expOut = or(_expOut_T_19, _expOut_T_20) @[RoundAnyRawFNToRecFN.scala 277:73]
    node _fractOut_T = or(isNaNOut, io.in.isZero) @[RoundAnyRawFNToRecFN.scala 280:22]
    node _fractOut_T_1 = or(_fractOut_T, common_totalUnderflow) @[RoundAnyRawFNToRecFN.scala 280:38]
    node _fractOut_T_2 = mux(isNaNOut, UInt<23>("h400000"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 281:16]
    node _fractOut_T_3 = mux(_fractOut_T_1, _fractOut_T_2, common_fractOut) @[RoundAnyRawFNToRecFN.scala 280:12]
    node _fractOut_T_4 = bits(pegMaxFiniteMagOut, 0, 0) @[Bitwise.scala 77:15]
    node _fractOut_T_5 = mux(_fractOut_T_4, UInt<23>("h7fffff"), UInt<23>("h0")) @[Bitwise.scala 77:12]
    node fractOut = or(_fractOut_T_3, _fractOut_T_5) @[RoundAnyRawFNToRecFN.scala 283:11]
    node _io_out_T = cat(signOut, expOut) @[RoundAnyRawFNToRecFN.scala 286:23]
    node _io_out_T_1 = cat(_io_out_T, fractOut) @[RoundAnyRawFNToRecFN.scala 286:33]
    io.out <= _io_out_T_1 @[RoundAnyRawFNToRecFN.scala 286:12]
    node _io_exceptionFlags_T = cat(io.invalidExc, io.infiniteExc) @[RoundAnyRawFNToRecFN.scala 288:23]
    node _io_exceptionFlags_T_1 = cat(_io_exceptionFlags_T, overflow) @[RoundAnyRawFNToRecFN.scala 288:41]
    node _io_exceptionFlags_T_2 = cat(_io_exceptionFlags_T_1, underflow) @[RoundAnyRawFNToRecFN.scala 288:53]
    node _io_exceptionFlags_T_3 = cat(_io_exceptionFlags_T_2, inexact) @[RoundAnyRawFNToRecFN.scala 288:66]
    io.exceptionFlags <= _io_exceptionFlags_T_3 @[RoundAnyRawFNToRecFN.scala 287:23]

  module RoundRawFNToRecFN_e8_s24_4 :
    output io : { flip invalidExc : UInt<1>, flip infiniteExc : UInt<1>, flip in : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<27>}, flip roundingMode : UInt<3>, flip detectTininess : UInt<1>, out : UInt<33>, exceptionFlags : UInt<5>}

    inst roundAnyRawFNToRecFN of RoundAnyRawFNToRecFN_ie8_is26_oe8_os24_4 @[RoundAnyRawFNToRecFN.scala 310:15]
    roundAnyRawFNToRecFN.io.invalidExc <= io.invalidExc @[RoundAnyRawFNToRecFN.scala 313:44]
    roundAnyRawFNToRecFN.io.infiniteExc <= io.infiniteExc @[RoundAnyRawFNToRecFN.scala 314:44]
    roundAnyRawFNToRecFN.io.in.sig <= io.in.sig @[RoundAnyRawFNToRecFN.scala 315:44]
    roundAnyRawFNToRecFN.io.in.sExp <= io.in.sExp @[RoundAnyRawFNToRecFN.scala 315:44]
    roundAnyRawFNToRecFN.io.in.sign <= io.in.sign @[RoundAnyRawFNToRecFN.scala 315:44]
    roundAnyRawFNToRecFN.io.in.isZero <= io.in.isZero @[RoundAnyRawFNToRecFN.scala 315:44]
    roundAnyRawFNToRecFN.io.in.isInf <= io.in.isInf @[RoundAnyRawFNToRecFN.scala 315:44]
    roundAnyRawFNToRecFN.io.in.isNaN <= io.in.isNaN @[RoundAnyRawFNToRecFN.scala 315:44]
    roundAnyRawFNToRecFN.io.roundingMode <= io.roundingMode @[RoundAnyRawFNToRecFN.scala 316:44]
    roundAnyRawFNToRecFN.io.detectTininess <= io.detectTininess @[RoundAnyRawFNToRecFN.scala 317:44]
    io.out <= roundAnyRawFNToRecFN.io.out @[RoundAnyRawFNToRecFN.scala 318:23]
    io.exceptionFlags <= roundAnyRawFNToRecFN.io.exceptionFlags @[RoundAnyRawFNToRecFN.scala 319:23]

  module MulRecFN_3 :
    output io : { flip a : UInt<33>, flip b : UInt<33>, flip roundingMode : UInt<3>, flip detectTininess : UInt<1>, out : UInt<33>, exceptionFlags : UInt<5>}

    inst mulRawFN of MulRawFN_3 @[MulRecFN.scala 113:26]
    node mulRawFN_io_a_exp = bits(io.a, 31, 23) @[rawFloatFromRecFN.scala 51:21]
    node _mulRawFN_io_a_isZero_T = bits(mulRawFN_io_a_exp, 8, 6) @[rawFloatFromRecFN.scala 52:28]
    node mulRawFN_io_a_isZero = eq(_mulRawFN_io_a_isZero_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 52:53]
    node _mulRawFN_io_a_isSpecial_T = bits(mulRawFN_io_a_exp, 8, 7) @[rawFloatFromRecFN.scala 53:28]
    node mulRawFN_io_a_isSpecial = eq(_mulRawFN_io_a_isSpecial_T, UInt<2>("h3")) @[rawFloatFromRecFN.scala 53:53]
    wire mulRawFN_io_a_out : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>} @[rawFloatFromRecFN.scala 55:23]
    node _mulRawFN_io_a_out_isNaN_T = bits(mulRawFN_io_a_exp, 6, 6) @[rawFloatFromRecFN.scala 56:41]
    node _mulRawFN_io_a_out_isNaN_T_1 = and(mulRawFN_io_a_isSpecial, _mulRawFN_io_a_out_isNaN_T) @[rawFloatFromRecFN.scala 56:33]
    mulRawFN_io_a_out.isNaN <= _mulRawFN_io_a_out_isNaN_T_1 @[rawFloatFromRecFN.scala 56:20]
    node _mulRawFN_io_a_out_isInf_T = bits(mulRawFN_io_a_exp, 6, 6) @[rawFloatFromRecFN.scala 57:41]
    node _mulRawFN_io_a_out_isInf_T_1 = eq(_mulRawFN_io_a_out_isInf_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 57:36]
    node _mulRawFN_io_a_out_isInf_T_2 = and(mulRawFN_io_a_isSpecial, _mulRawFN_io_a_out_isInf_T_1) @[rawFloatFromRecFN.scala 57:33]
    mulRawFN_io_a_out.isInf <= _mulRawFN_io_a_out_isInf_T_2 @[rawFloatFromRecFN.scala 57:20]
    mulRawFN_io_a_out.isZero <= mulRawFN_io_a_isZero @[rawFloatFromRecFN.scala 58:20]
    node _mulRawFN_io_a_out_sign_T = bits(io.a, 32, 32) @[rawFloatFromRecFN.scala 59:25]
    mulRawFN_io_a_out.sign <= _mulRawFN_io_a_out_sign_T @[rawFloatFromRecFN.scala 59:20]
    node _mulRawFN_io_a_out_sExp_T = cvt(mulRawFN_io_a_exp) @[rawFloatFromRecFN.scala 60:27]
    mulRawFN_io_a_out.sExp <= _mulRawFN_io_a_out_sExp_T @[rawFloatFromRecFN.scala 60:20]
    node _mulRawFN_io_a_out_sig_T = eq(mulRawFN_io_a_isZero, UInt<1>("h0")) @[rawFloatFromRecFN.scala 61:35]
    node _mulRawFN_io_a_out_sig_T_1 = cat(UInt<1>("h0"), _mulRawFN_io_a_out_sig_T) @[rawFloatFromRecFN.scala 61:32]
    node _mulRawFN_io_a_out_sig_T_2 = bits(io.a, 22, 0) @[rawFloatFromRecFN.scala 61:49]
    node _mulRawFN_io_a_out_sig_T_3 = cat(_mulRawFN_io_a_out_sig_T_1, _mulRawFN_io_a_out_sig_T_2) @[rawFloatFromRecFN.scala 61:44]
    mulRawFN_io_a_out.sig <= _mulRawFN_io_a_out_sig_T_3 @[rawFloatFromRecFN.scala 61:20]
    mulRawFN.io.a.sig <= mulRawFN_io_a_out.sig @[MulRecFN.scala 115:19]
    mulRawFN.io.a.sExp <= mulRawFN_io_a_out.sExp @[MulRecFN.scala 115:19]
    mulRawFN.io.a.sign <= mulRawFN_io_a_out.sign @[MulRecFN.scala 115:19]
    mulRawFN.io.a.isZero <= mulRawFN_io_a_out.isZero @[MulRecFN.scala 115:19]
    mulRawFN.io.a.isInf <= mulRawFN_io_a_out.isInf @[MulRecFN.scala 115:19]
    mulRawFN.io.a.isNaN <= mulRawFN_io_a_out.isNaN @[MulRecFN.scala 115:19]
    node mulRawFN_io_b_exp = bits(io.b, 31, 23) @[rawFloatFromRecFN.scala 51:21]
    node _mulRawFN_io_b_isZero_T = bits(mulRawFN_io_b_exp, 8, 6) @[rawFloatFromRecFN.scala 52:28]
    node mulRawFN_io_b_isZero = eq(_mulRawFN_io_b_isZero_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 52:53]
    node _mulRawFN_io_b_isSpecial_T = bits(mulRawFN_io_b_exp, 8, 7) @[rawFloatFromRecFN.scala 53:28]
    node mulRawFN_io_b_isSpecial = eq(_mulRawFN_io_b_isSpecial_T, UInt<2>("h3")) @[rawFloatFromRecFN.scala 53:53]
    wire mulRawFN_io_b_out : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>} @[rawFloatFromRecFN.scala 55:23]
    node _mulRawFN_io_b_out_isNaN_T = bits(mulRawFN_io_b_exp, 6, 6) @[rawFloatFromRecFN.scala 56:41]
    node _mulRawFN_io_b_out_isNaN_T_1 = and(mulRawFN_io_b_isSpecial, _mulRawFN_io_b_out_isNaN_T) @[rawFloatFromRecFN.scala 56:33]
    mulRawFN_io_b_out.isNaN <= _mulRawFN_io_b_out_isNaN_T_1 @[rawFloatFromRecFN.scala 56:20]
    node _mulRawFN_io_b_out_isInf_T = bits(mulRawFN_io_b_exp, 6, 6) @[rawFloatFromRecFN.scala 57:41]
    node _mulRawFN_io_b_out_isInf_T_1 = eq(_mulRawFN_io_b_out_isInf_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 57:36]
    node _mulRawFN_io_b_out_isInf_T_2 = and(mulRawFN_io_b_isSpecial, _mulRawFN_io_b_out_isInf_T_1) @[rawFloatFromRecFN.scala 57:33]
    mulRawFN_io_b_out.isInf <= _mulRawFN_io_b_out_isInf_T_2 @[rawFloatFromRecFN.scala 57:20]
    mulRawFN_io_b_out.isZero <= mulRawFN_io_b_isZero @[rawFloatFromRecFN.scala 58:20]
    node _mulRawFN_io_b_out_sign_T = bits(io.b, 32, 32) @[rawFloatFromRecFN.scala 59:25]
    mulRawFN_io_b_out.sign <= _mulRawFN_io_b_out_sign_T @[rawFloatFromRecFN.scala 59:20]
    node _mulRawFN_io_b_out_sExp_T = cvt(mulRawFN_io_b_exp) @[rawFloatFromRecFN.scala 60:27]
    mulRawFN_io_b_out.sExp <= _mulRawFN_io_b_out_sExp_T @[rawFloatFromRecFN.scala 60:20]
    node _mulRawFN_io_b_out_sig_T = eq(mulRawFN_io_b_isZero, UInt<1>("h0")) @[rawFloatFromRecFN.scala 61:35]
    node _mulRawFN_io_b_out_sig_T_1 = cat(UInt<1>("h0"), _mulRawFN_io_b_out_sig_T) @[rawFloatFromRecFN.scala 61:32]
    node _mulRawFN_io_b_out_sig_T_2 = bits(io.b, 22, 0) @[rawFloatFromRecFN.scala 61:49]
    node _mulRawFN_io_b_out_sig_T_3 = cat(_mulRawFN_io_b_out_sig_T_1, _mulRawFN_io_b_out_sig_T_2) @[rawFloatFromRecFN.scala 61:44]
    mulRawFN_io_b_out.sig <= _mulRawFN_io_b_out_sig_T_3 @[rawFloatFromRecFN.scala 61:20]
    mulRawFN.io.b.sig <= mulRawFN_io_b_out.sig @[MulRecFN.scala 116:19]
    mulRawFN.io.b.sExp <= mulRawFN_io_b_out.sExp @[MulRecFN.scala 116:19]
    mulRawFN.io.b.sign <= mulRawFN_io_b_out.sign @[MulRecFN.scala 116:19]
    mulRawFN.io.b.isZero <= mulRawFN_io_b_out.isZero @[MulRecFN.scala 116:19]
    mulRawFN.io.b.isInf <= mulRawFN_io_b_out.isInf @[MulRecFN.scala 116:19]
    mulRawFN.io.b.isNaN <= mulRawFN_io_b_out.isNaN @[MulRecFN.scala 116:19]
    inst roundRawFNToRecFN of RoundRawFNToRecFN_e8_s24_4 @[MulRecFN.scala 121:15]
    roundRawFNToRecFN.io.invalidExc <= mulRawFN.io.invalidExc @[MulRecFN.scala 122:39]
    roundRawFNToRecFN.io.infiniteExc <= UInt<1>("h0") @[MulRecFN.scala 123:39]
    roundRawFNToRecFN.io.in.sig <= mulRawFN.io.rawOut.sig @[MulRecFN.scala 124:39]
    roundRawFNToRecFN.io.in.sExp <= mulRawFN.io.rawOut.sExp @[MulRecFN.scala 124:39]
    roundRawFNToRecFN.io.in.sign <= mulRawFN.io.rawOut.sign @[MulRecFN.scala 124:39]
    roundRawFNToRecFN.io.in.isZero <= mulRawFN.io.rawOut.isZero @[MulRecFN.scala 124:39]
    roundRawFNToRecFN.io.in.isInf <= mulRawFN.io.rawOut.isInf @[MulRecFN.scala 124:39]
    roundRawFNToRecFN.io.in.isNaN <= mulRawFN.io.rawOut.isNaN @[MulRecFN.scala 124:39]
    roundRawFNToRecFN.io.roundingMode <= io.roundingMode @[MulRecFN.scala 125:39]
    roundRawFNToRecFN.io.detectTininess <= io.detectTininess @[MulRecFN.scala 126:41]
    io.out <= roundRawFNToRecFN.io.out @[MulRecFN.scala 127:23]
    io.exceptionFlags <= roundRawFNToRecFN.io.exceptionFlags @[MulRecFN.scala 128:23]

  module FP32Multiplier_3 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<32>, flip b : UInt<32>, result : UInt<32>}

    inst mulRecFN of MulRecFN_3 @[FPU.scala 88:26]
    node a_recoded_rawIn_sign = bits(io.a, 31, 31) @[rawFloatFromFN.scala 44:18]
    node a_recoded_rawIn_expIn = bits(io.a, 30, 23) @[rawFloatFromFN.scala 45:19]
    node a_recoded_rawIn_fractIn = bits(io.a, 22, 0) @[rawFloatFromFN.scala 46:21]
    node a_recoded_rawIn_isZeroExpIn = eq(a_recoded_rawIn_expIn, UInt<1>("h0")) @[rawFloatFromFN.scala 48:30]
    node a_recoded_rawIn_isZeroFractIn = eq(a_recoded_rawIn_fractIn, UInt<1>("h0")) @[rawFloatFromFN.scala 49:34]
    node _a_recoded_rawIn_normDist_T = bits(a_recoded_rawIn_fractIn, 0, 0) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_1 = bits(a_recoded_rawIn_fractIn, 1, 1) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_2 = bits(a_recoded_rawIn_fractIn, 2, 2) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_3 = bits(a_recoded_rawIn_fractIn, 3, 3) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_4 = bits(a_recoded_rawIn_fractIn, 4, 4) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_5 = bits(a_recoded_rawIn_fractIn, 5, 5) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_6 = bits(a_recoded_rawIn_fractIn, 6, 6) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_7 = bits(a_recoded_rawIn_fractIn, 7, 7) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_8 = bits(a_recoded_rawIn_fractIn, 8, 8) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_9 = bits(a_recoded_rawIn_fractIn, 9, 9) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_10 = bits(a_recoded_rawIn_fractIn, 10, 10) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_11 = bits(a_recoded_rawIn_fractIn, 11, 11) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_12 = bits(a_recoded_rawIn_fractIn, 12, 12) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_13 = bits(a_recoded_rawIn_fractIn, 13, 13) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_14 = bits(a_recoded_rawIn_fractIn, 14, 14) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_15 = bits(a_recoded_rawIn_fractIn, 15, 15) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_16 = bits(a_recoded_rawIn_fractIn, 16, 16) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_17 = bits(a_recoded_rawIn_fractIn, 17, 17) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_18 = bits(a_recoded_rawIn_fractIn, 18, 18) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_19 = bits(a_recoded_rawIn_fractIn, 19, 19) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_20 = bits(a_recoded_rawIn_fractIn, 20, 20) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_21 = bits(a_recoded_rawIn_fractIn, 21, 21) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_22 = bits(a_recoded_rawIn_fractIn, 22, 22) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_23 = mux(_a_recoded_rawIn_normDist_T_1, UInt<5>("h15"), UInt<5>("h16")) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_24 = mux(_a_recoded_rawIn_normDist_T_2, UInt<5>("h14"), _a_recoded_rawIn_normDist_T_23) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_25 = mux(_a_recoded_rawIn_normDist_T_3, UInt<5>("h13"), _a_recoded_rawIn_normDist_T_24) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_26 = mux(_a_recoded_rawIn_normDist_T_4, UInt<5>("h12"), _a_recoded_rawIn_normDist_T_25) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_27 = mux(_a_recoded_rawIn_normDist_T_5, UInt<5>("h11"), _a_recoded_rawIn_normDist_T_26) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_28 = mux(_a_recoded_rawIn_normDist_T_6, UInt<5>("h10"), _a_recoded_rawIn_normDist_T_27) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_29 = mux(_a_recoded_rawIn_normDist_T_7, UInt<4>("hf"), _a_recoded_rawIn_normDist_T_28) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_30 = mux(_a_recoded_rawIn_normDist_T_8, UInt<4>("he"), _a_recoded_rawIn_normDist_T_29) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_31 = mux(_a_recoded_rawIn_normDist_T_9, UInt<4>("hd"), _a_recoded_rawIn_normDist_T_30) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_32 = mux(_a_recoded_rawIn_normDist_T_10, UInt<4>("hc"), _a_recoded_rawIn_normDist_T_31) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_33 = mux(_a_recoded_rawIn_normDist_T_11, UInt<4>("hb"), _a_recoded_rawIn_normDist_T_32) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_34 = mux(_a_recoded_rawIn_normDist_T_12, UInt<4>("ha"), _a_recoded_rawIn_normDist_T_33) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_35 = mux(_a_recoded_rawIn_normDist_T_13, UInt<4>("h9"), _a_recoded_rawIn_normDist_T_34) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_36 = mux(_a_recoded_rawIn_normDist_T_14, UInt<4>("h8"), _a_recoded_rawIn_normDist_T_35) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_37 = mux(_a_recoded_rawIn_normDist_T_15, UInt<3>("h7"), _a_recoded_rawIn_normDist_T_36) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_38 = mux(_a_recoded_rawIn_normDist_T_16, UInt<3>("h6"), _a_recoded_rawIn_normDist_T_37) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_39 = mux(_a_recoded_rawIn_normDist_T_17, UInt<3>("h5"), _a_recoded_rawIn_normDist_T_38) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_40 = mux(_a_recoded_rawIn_normDist_T_18, UInt<3>("h4"), _a_recoded_rawIn_normDist_T_39) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_41 = mux(_a_recoded_rawIn_normDist_T_19, UInt<2>("h3"), _a_recoded_rawIn_normDist_T_40) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_42 = mux(_a_recoded_rawIn_normDist_T_20, UInt<2>("h2"), _a_recoded_rawIn_normDist_T_41) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_43 = mux(_a_recoded_rawIn_normDist_T_21, UInt<1>("h1"), _a_recoded_rawIn_normDist_T_42) @[Mux.scala 47:70]
    node a_recoded_rawIn_normDist = mux(_a_recoded_rawIn_normDist_T_22, UInt<1>("h0"), _a_recoded_rawIn_normDist_T_43) @[Mux.scala 47:70]
    node _a_recoded_rawIn_subnormFract_T = dshl(a_recoded_rawIn_fractIn, a_recoded_rawIn_normDist) @[rawFloatFromFN.scala 52:33]
    node _a_recoded_rawIn_subnormFract_T_1 = bits(_a_recoded_rawIn_subnormFract_T, 21, 0) @[rawFloatFromFN.scala 52:46]
    node a_recoded_rawIn_subnormFract = shl(_a_recoded_rawIn_subnormFract_T_1, 1) @[rawFloatFromFN.scala 52:64]
    node _a_recoded_rawIn_adjustedExp_T = xor(a_recoded_rawIn_normDist, UInt<9>("h1ff")) @[rawFloatFromFN.scala 55:18]
    node _a_recoded_rawIn_adjustedExp_T_1 = mux(a_recoded_rawIn_isZeroExpIn, _a_recoded_rawIn_adjustedExp_T, a_recoded_rawIn_expIn) @[rawFloatFromFN.scala 54:10]
    node _a_recoded_rawIn_adjustedExp_T_2 = mux(a_recoded_rawIn_isZeroExpIn, UInt<2>("h2"), UInt<1>("h1")) @[rawFloatFromFN.scala 58:14]
    node _a_recoded_rawIn_adjustedExp_T_3 = or(UInt<8>("h80"), _a_recoded_rawIn_adjustedExp_T_2) @[rawFloatFromFN.scala 58:9]
    node _a_recoded_rawIn_adjustedExp_T_4 = add(_a_recoded_rawIn_adjustedExp_T_1, _a_recoded_rawIn_adjustedExp_T_3) @[rawFloatFromFN.scala 57:9]
    node a_recoded_rawIn_adjustedExp = tail(_a_recoded_rawIn_adjustedExp_T_4, 1) @[rawFloatFromFN.scala 57:9]
    node a_recoded_rawIn_isZero = and(a_recoded_rawIn_isZeroExpIn, a_recoded_rawIn_isZeroFractIn) @[rawFloatFromFN.scala 60:30]
    node _a_recoded_rawIn_isSpecial_T = bits(a_recoded_rawIn_adjustedExp, 8, 7) @[rawFloatFromFN.scala 61:32]
    node a_recoded_rawIn_isSpecial = eq(_a_recoded_rawIn_isSpecial_T, UInt<2>("h3")) @[rawFloatFromFN.scala 61:57]
    wire a_recoded_rawIn : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>} @[rawFloatFromFN.scala 63:19]
    node _a_recoded_rawIn_out_isNaN_T = eq(a_recoded_rawIn_isZeroFractIn, UInt<1>("h0")) @[rawFloatFromFN.scala 64:31]
    node _a_recoded_rawIn_out_isNaN_T_1 = and(a_recoded_rawIn_isSpecial, _a_recoded_rawIn_out_isNaN_T) @[rawFloatFromFN.scala 64:28]
    a_recoded_rawIn.isNaN <= _a_recoded_rawIn_out_isNaN_T_1 @[rawFloatFromFN.scala 64:15]
    node _a_recoded_rawIn_out_isInf_T = and(a_recoded_rawIn_isSpecial, a_recoded_rawIn_isZeroFractIn) @[rawFloatFromFN.scala 65:28]
    a_recoded_rawIn.isInf <= _a_recoded_rawIn_out_isInf_T @[rawFloatFromFN.scala 65:15]
    a_recoded_rawIn.isZero <= a_recoded_rawIn_isZero @[rawFloatFromFN.scala 66:16]
    a_recoded_rawIn.sign <= a_recoded_rawIn_sign @[rawFloatFromFN.scala 67:14]
    node _a_recoded_rawIn_out_sExp_T = bits(a_recoded_rawIn_adjustedExp, 8, 0) @[rawFloatFromFN.scala 68:28]
    node _a_recoded_rawIn_out_sExp_T_1 = cvt(_a_recoded_rawIn_out_sExp_T) @[rawFloatFromFN.scala 68:42]
    a_recoded_rawIn.sExp <= _a_recoded_rawIn_out_sExp_T_1 @[rawFloatFromFN.scala 68:14]
    node _a_recoded_rawIn_out_sig_T = eq(a_recoded_rawIn_isZero, UInt<1>("h0")) @[rawFloatFromFN.scala 70:19]
    node _a_recoded_rawIn_out_sig_T_1 = cat(UInt<1>("h0"), _a_recoded_rawIn_out_sig_T) @[rawFloatFromFN.scala 70:16]
    node _a_recoded_rawIn_out_sig_T_2 = mux(a_recoded_rawIn_isZeroExpIn, a_recoded_rawIn_subnormFract, a_recoded_rawIn_fractIn) @[rawFloatFromFN.scala 70:33]
    node _a_recoded_rawIn_out_sig_T_3 = cat(_a_recoded_rawIn_out_sig_T_1, _a_recoded_rawIn_out_sig_T_2) @[rawFloatFromFN.scala 70:27]
    a_recoded_rawIn.sig <= _a_recoded_rawIn_out_sig_T_3 @[rawFloatFromFN.scala 69:13]
    node _a_recoded_T = bits(a_recoded_rawIn.sExp, 8, 6) @[recFNFromFN.scala 48:50]
    node _a_recoded_T_1 = mux(a_recoded_rawIn.isZero, UInt<3>("h0"), _a_recoded_T) @[recFNFromFN.scala 48:15]
    node _a_recoded_T_2 = mux(a_recoded_rawIn.isNaN, UInt<1>("h1"), UInt<1>("h0")) @[recFNFromFN.scala 49:20]
    node _a_recoded_T_3 = or(_a_recoded_T_1, _a_recoded_T_2) @[recFNFromFN.scala 48:76]
    node _a_recoded_T_4 = cat(a_recoded_rawIn.sign, _a_recoded_T_3) @[recFNFromFN.scala 47:20]
    node _a_recoded_T_5 = bits(a_recoded_rawIn.sExp, 5, 0) @[recFNFromFN.scala 50:23]
    node _a_recoded_T_6 = cat(_a_recoded_T_4, _a_recoded_T_5) @[recFNFromFN.scala 49:45]
    node _a_recoded_T_7 = bits(a_recoded_rawIn.sig, 22, 0) @[recFNFromFN.scala 51:22]
    node a_recoded = cat(_a_recoded_T_6, _a_recoded_T_7) @[recFNFromFN.scala 50:41]
    node b_recoded_rawIn_sign = bits(io.b, 31, 31) @[rawFloatFromFN.scala 44:18]
    node b_recoded_rawIn_expIn = bits(io.b, 30, 23) @[rawFloatFromFN.scala 45:19]
    node b_recoded_rawIn_fractIn = bits(io.b, 22, 0) @[rawFloatFromFN.scala 46:21]
    node b_recoded_rawIn_isZeroExpIn = eq(b_recoded_rawIn_expIn, UInt<1>("h0")) @[rawFloatFromFN.scala 48:30]
    node b_recoded_rawIn_isZeroFractIn = eq(b_recoded_rawIn_fractIn, UInt<1>("h0")) @[rawFloatFromFN.scala 49:34]
    node _b_recoded_rawIn_normDist_T = bits(b_recoded_rawIn_fractIn, 0, 0) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_1 = bits(b_recoded_rawIn_fractIn, 1, 1) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_2 = bits(b_recoded_rawIn_fractIn, 2, 2) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_3 = bits(b_recoded_rawIn_fractIn, 3, 3) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_4 = bits(b_recoded_rawIn_fractIn, 4, 4) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_5 = bits(b_recoded_rawIn_fractIn, 5, 5) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_6 = bits(b_recoded_rawIn_fractIn, 6, 6) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_7 = bits(b_recoded_rawIn_fractIn, 7, 7) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_8 = bits(b_recoded_rawIn_fractIn, 8, 8) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_9 = bits(b_recoded_rawIn_fractIn, 9, 9) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_10 = bits(b_recoded_rawIn_fractIn, 10, 10) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_11 = bits(b_recoded_rawIn_fractIn, 11, 11) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_12 = bits(b_recoded_rawIn_fractIn, 12, 12) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_13 = bits(b_recoded_rawIn_fractIn, 13, 13) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_14 = bits(b_recoded_rawIn_fractIn, 14, 14) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_15 = bits(b_recoded_rawIn_fractIn, 15, 15) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_16 = bits(b_recoded_rawIn_fractIn, 16, 16) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_17 = bits(b_recoded_rawIn_fractIn, 17, 17) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_18 = bits(b_recoded_rawIn_fractIn, 18, 18) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_19 = bits(b_recoded_rawIn_fractIn, 19, 19) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_20 = bits(b_recoded_rawIn_fractIn, 20, 20) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_21 = bits(b_recoded_rawIn_fractIn, 21, 21) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_22 = bits(b_recoded_rawIn_fractIn, 22, 22) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_23 = mux(_b_recoded_rawIn_normDist_T_1, UInt<5>("h15"), UInt<5>("h16")) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_24 = mux(_b_recoded_rawIn_normDist_T_2, UInt<5>("h14"), _b_recoded_rawIn_normDist_T_23) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_25 = mux(_b_recoded_rawIn_normDist_T_3, UInt<5>("h13"), _b_recoded_rawIn_normDist_T_24) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_26 = mux(_b_recoded_rawIn_normDist_T_4, UInt<5>("h12"), _b_recoded_rawIn_normDist_T_25) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_27 = mux(_b_recoded_rawIn_normDist_T_5, UInt<5>("h11"), _b_recoded_rawIn_normDist_T_26) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_28 = mux(_b_recoded_rawIn_normDist_T_6, UInt<5>("h10"), _b_recoded_rawIn_normDist_T_27) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_29 = mux(_b_recoded_rawIn_normDist_T_7, UInt<4>("hf"), _b_recoded_rawIn_normDist_T_28) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_30 = mux(_b_recoded_rawIn_normDist_T_8, UInt<4>("he"), _b_recoded_rawIn_normDist_T_29) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_31 = mux(_b_recoded_rawIn_normDist_T_9, UInt<4>("hd"), _b_recoded_rawIn_normDist_T_30) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_32 = mux(_b_recoded_rawIn_normDist_T_10, UInt<4>("hc"), _b_recoded_rawIn_normDist_T_31) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_33 = mux(_b_recoded_rawIn_normDist_T_11, UInt<4>("hb"), _b_recoded_rawIn_normDist_T_32) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_34 = mux(_b_recoded_rawIn_normDist_T_12, UInt<4>("ha"), _b_recoded_rawIn_normDist_T_33) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_35 = mux(_b_recoded_rawIn_normDist_T_13, UInt<4>("h9"), _b_recoded_rawIn_normDist_T_34) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_36 = mux(_b_recoded_rawIn_normDist_T_14, UInt<4>("h8"), _b_recoded_rawIn_normDist_T_35) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_37 = mux(_b_recoded_rawIn_normDist_T_15, UInt<3>("h7"), _b_recoded_rawIn_normDist_T_36) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_38 = mux(_b_recoded_rawIn_normDist_T_16, UInt<3>("h6"), _b_recoded_rawIn_normDist_T_37) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_39 = mux(_b_recoded_rawIn_normDist_T_17, UInt<3>("h5"), _b_recoded_rawIn_normDist_T_38) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_40 = mux(_b_recoded_rawIn_normDist_T_18, UInt<3>("h4"), _b_recoded_rawIn_normDist_T_39) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_41 = mux(_b_recoded_rawIn_normDist_T_19, UInt<2>("h3"), _b_recoded_rawIn_normDist_T_40) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_42 = mux(_b_recoded_rawIn_normDist_T_20, UInt<2>("h2"), _b_recoded_rawIn_normDist_T_41) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_43 = mux(_b_recoded_rawIn_normDist_T_21, UInt<1>("h1"), _b_recoded_rawIn_normDist_T_42) @[Mux.scala 47:70]
    node b_recoded_rawIn_normDist = mux(_b_recoded_rawIn_normDist_T_22, UInt<1>("h0"), _b_recoded_rawIn_normDist_T_43) @[Mux.scala 47:70]
    node _b_recoded_rawIn_subnormFract_T = dshl(b_recoded_rawIn_fractIn, b_recoded_rawIn_normDist) @[rawFloatFromFN.scala 52:33]
    node _b_recoded_rawIn_subnormFract_T_1 = bits(_b_recoded_rawIn_subnormFract_T, 21, 0) @[rawFloatFromFN.scala 52:46]
    node b_recoded_rawIn_subnormFract = shl(_b_recoded_rawIn_subnormFract_T_1, 1) @[rawFloatFromFN.scala 52:64]
    node _b_recoded_rawIn_adjustedExp_T = xor(b_recoded_rawIn_normDist, UInt<9>("h1ff")) @[rawFloatFromFN.scala 55:18]
    node _b_recoded_rawIn_adjustedExp_T_1 = mux(b_recoded_rawIn_isZeroExpIn, _b_recoded_rawIn_adjustedExp_T, b_recoded_rawIn_expIn) @[rawFloatFromFN.scala 54:10]
    node _b_recoded_rawIn_adjustedExp_T_2 = mux(b_recoded_rawIn_isZeroExpIn, UInt<2>("h2"), UInt<1>("h1")) @[rawFloatFromFN.scala 58:14]
    node _b_recoded_rawIn_adjustedExp_T_3 = or(UInt<8>("h80"), _b_recoded_rawIn_adjustedExp_T_2) @[rawFloatFromFN.scala 58:9]
    node _b_recoded_rawIn_adjustedExp_T_4 = add(_b_recoded_rawIn_adjustedExp_T_1, _b_recoded_rawIn_adjustedExp_T_3) @[rawFloatFromFN.scala 57:9]
    node b_recoded_rawIn_adjustedExp = tail(_b_recoded_rawIn_adjustedExp_T_4, 1) @[rawFloatFromFN.scala 57:9]
    node b_recoded_rawIn_isZero = and(b_recoded_rawIn_isZeroExpIn, b_recoded_rawIn_isZeroFractIn) @[rawFloatFromFN.scala 60:30]
    node _b_recoded_rawIn_isSpecial_T = bits(b_recoded_rawIn_adjustedExp, 8, 7) @[rawFloatFromFN.scala 61:32]
    node b_recoded_rawIn_isSpecial = eq(_b_recoded_rawIn_isSpecial_T, UInt<2>("h3")) @[rawFloatFromFN.scala 61:57]
    wire b_recoded_rawIn : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>} @[rawFloatFromFN.scala 63:19]
    node _b_recoded_rawIn_out_isNaN_T = eq(b_recoded_rawIn_isZeroFractIn, UInt<1>("h0")) @[rawFloatFromFN.scala 64:31]
    node _b_recoded_rawIn_out_isNaN_T_1 = and(b_recoded_rawIn_isSpecial, _b_recoded_rawIn_out_isNaN_T) @[rawFloatFromFN.scala 64:28]
    b_recoded_rawIn.isNaN <= _b_recoded_rawIn_out_isNaN_T_1 @[rawFloatFromFN.scala 64:15]
    node _b_recoded_rawIn_out_isInf_T = and(b_recoded_rawIn_isSpecial, b_recoded_rawIn_isZeroFractIn) @[rawFloatFromFN.scala 65:28]
    b_recoded_rawIn.isInf <= _b_recoded_rawIn_out_isInf_T @[rawFloatFromFN.scala 65:15]
    b_recoded_rawIn.isZero <= b_recoded_rawIn_isZero @[rawFloatFromFN.scala 66:16]
    b_recoded_rawIn.sign <= b_recoded_rawIn_sign @[rawFloatFromFN.scala 67:14]
    node _b_recoded_rawIn_out_sExp_T = bits(b_recoded_rawIn_adjustedExp, 8, 0) @[rawFloatFromFN.scala 68:28]
    node _b_recoded_rawIn_out_sExp_T_1 = cvt(_b_recoded_rawIn_out_sExp_T) @[rawFloatFromFN.scala 68:42]
    b_recoded_rawIn.sExp <= _b_recoded_rawIn_out_sExp_T_1 @[rawFloatFromFN.scala 68:14]
    node _b_recoded_rawIn_out_sig_T = eq(b_recoded_rawIn_isZero, UInt<1>("h0")) @[rawFloatFromFN.scala 70:19]
    node _b_recoded_rawIn_out_sig_T_1 = cat(UInt<1>("h0"), _b_recoded_rawIn_out_sig_T) @[rawFloatFromFN.scala 70:16]
    node _b_recoded_rawIn_out_sig_T_2 = mux(b_recoded_rawIn_isZeroExpIn, b_recoded_rawIn_subnormFract, b_recoded_rawIn_fractIn) @[rawFloatFromFN.scala 70:33]
    node _b_recoded_rawIn_out_sig_T_3 = cat(_b_recoded_rawIn_out_sig_T_1, _b_recoded_rawIn_out_sig_T_2) @[rawFloatFromFN.scala 70:27]
    b_recoded_rawIn.sig <= _b_recoded_rawIn_out_sig_T_3 @[rawFloatFromFN.scala 69:13]
    node _b_recoded_T = bits(b_recoded_rawIn.sExp, 8, 6) @[recFNFromFN.scala 48:50]
    node _b_recoded_T_1 = mux(b_recoded_rawIn.isZero, UInt<3>("h0"), _b_recoded_T) @[recFNFromFN.scala 48:15]
    node _b_recoded_T_2 = mux(b_recoded_rawIn.isNaN, UInt<1>("h1"), UInt<1>("h0")) @[recFNFromFN.scala 49:20]
    node _b_recoded_T_3 = or(_b_recoded_T_1, _b_recoded_T_2) @[recFNFromFN.scala 48:76]
    node _b_recoded_T_4 = cat(b_recoded_rawIn.sign, _b_recoded_T_3) @[recFNFromFN.scala 47:20]
    node _b_recoded_T_5 = bits(b_recoded_rawIn.sExp, 5, 0) @[recFNFromFN.scala 50:23]
    node _b_recoded_T_6 = cat(_b_recoded_T_4, _b_recoded_T_5) @[recFNFromFN.scala 49:45]
    node _b_recoded_T_7 = bits(b_recoded_rawIn.sig, 22, 0) @[recFNFromFN.scala 51:22]
    node b_recoded = cat(_b_recoded_T_6, _b_recoded_T_7) @[recFNFromFN.scala 50:41]
    mulRecFN.io.a <= a_recoded @[FPU.scala 95:19]
    mulRecFN.io.b <= b_recoded @[FPU.scala 96:19]
    mulRecFN.io.roundingMode <= UInt<3>("h0") @[FPU.scala 97:30]
    mulRecFN.io.detectTininess <= UInt<1>("h1") @[FPU.scala 98:32]
    node io_result_rawIn_exp = bits(mulRecFN.io.out, 31, 23) @[rawFloatFromRecFN.scala 51:21]
    node _io_result_rawIn_isZero_T = bits(io_result_rawIn_exp, 8, 6) @[rawFloatFromRecFN.scala 52:28]
    node io_result_rawIn_isZero = eq(_io_result_rawIn_isZero_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 52:53]
    node _io_result_rawIn_isSpecial_T = bits(io_result_rawIn_exp, 8, 7) @[rawFloatFromRecFN.scala 53:28]
    node io_result_rawIn_isSpecial = eq(_io_result_rawIn_isSpecial_T, UInt<2>("h3")) @[rawFloatFromRecFN.scala 53:53]
    wire io_result_rawIn : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>} @[rawFloatFromRecFN.scala 55:23]
    node _io_result_rawIn_out_isNaN_T = bits(io_result_rawIn_exp, 6, 6) @[rawFloatFromRecFN.scala 56:41]
    node _io_result_rawIn_out_isNaN_T_1 = and(io_result_rawIn_isSpecial, _io_result_rawIn_out_isNaN_T) @[rawFloatFromRecFN.scala 56:33]
    io_result_rawIn.isNaN <= _io_result_rawIn_out_isNaN_T_1 @[rawFloatFromRecFN.scala 56:20]
    node _io_result_rawIn_out_isInf_T = bits(io_result_rawIn_exp, 6, 6) @[rawFloatFromRecFN.scala 57:41]
    node _io_result_rawIn_out_isInf_T_1 = eq(_io_result_rawIn_out_isInf_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 57:36]
    node _io_result_rawIn_out_isInf_T_2 = and(io_result_rawIn_isSpecial, _io_result_rawIn_out_isInf_T_1) @[rawFloatFromRecFN.scala 57:33]
    io_result_rawIn.isInf <= _io_result_rawIn_out_isInf_T_2 @[rawFloatFromRecFN.scala 57:20]
    io_result_rawIn.isZero <= io_result_rawIn_isZero @[rawFloatFromRecFN.scala 58:20]
    node _io_result_rawIn_out_sign_T = bits(mulRecFN.io.out, 32, 32) @[rawFloatFromRecFN.scala 59:25]
    io_result_rawIn.sign <= _io_result_rawIn_out_sign_T @[rawFloatFromRecFN.scala 59:20]
    node _io_result_rawIn_out_sExp_T = cvt(io_result_rawIn_exp) @[rawFloatFromRecFN.scala 60:27]
    io_result_rawIn.sExp <= _io_result_rawIn_out_sExp_T @[rawFloatFromRecFN.scala 60:20]
    node _io_result_rawIn_out_sig_T = eq(io_result_rawIn_isZero, UInt<1>("h0")) @[rawFloatFromRecFN.scala 61:35]
    node _io_result_rawIn_out_sig_T_1 = cat(UInt<1>("h0"), _io_result_rawIn_out_sig_T) @[rawFloatFromRecFN.scala 61:32]
    node _io_result_rawIn_out_sig_T_2 = bits(mulRecFN.io.out, 22, 0) @[rawFloatFromRecFN.scala 61:49]
    node _io_result_rawIn_out_sig_T_3 = cat(_io_result_rawIn_out_sig_T_1, _io_result_rawIn_out_sig_T_2) @[rawFloatFromRecFN.scala 61:44]
    io_result_rawIn.sig <= _io_result_rawIn_out_sig_T_3 @[rawFloatFromRecFN.scala 61:20]
    node io_result_isSubnormal = lt(io_result_rawIn.sExp, asSInt(UInt<9>("h82"))) @[fNFromRecFN.scala 51:38]
    node _io_result_denormShiftDist_T = bits(io_result_rawIn.sExp, 4, 0) @[fNFromRecFN.scala 52:47]
    node _io_result_denormShiftDist_T_1 = sub(UInt<1>("h1"), _io_result_denormShiftDist_T) @[fNFromRecFN.scala 52:35]
    node io_result_denormShiftDist = tail(_io_result_denormShiftDist_T_1, 1) @[fNFromRecFN.scala 52:35]
    node _io_result_denormFract_T = shr(io_result_rawIn.sig, 1) @[fNFromRecFN.scala 53:38]
    node _io_result_denormFract_T_1 = dshr(_io_result_denormFract_T, io_result_denormShiftDist) @[fNFromRecFN.scala 53:42]
    node io_result_denormFract = bits(_io_result_denormFract_T_1, 22, 0) @[fNFromRecFN.scala 53:60]
    node _io_result_expOut_T = bits(io_result_rawIn.sExp, 7, 0) @[fNFromRecFN.scala 58:27]
    node _io_result_expOut_T_1 = sub(_io_result_expOut_T, UInt<8>("h81")) @[fNFromRecFN.scala 58:45]
    node _io_result_expOut_T_2 = tail(_io_result_expOut_T_1, 1) @[fNFromRecFN.scala 58:45]
    node _io_result_expOut_T_3 = mux(io_result_isSubnormal, UInt<1>("h0"), _io_result_expOut_T_2) @[fNFromRecFN.scala 56:16]
    node _io_result_expOut_T_4 = or(io_result_rawIn.isNaN, io_result_rawIn.isInf) @[fNFromRecFN.scala 60:44]
    node _io_result_expOut_T_5 = bits(_io_result_expOut_T_4, 0, 0) @[Bitwise.scala 77:15]
    node _io_result_expOut_T_6 = mux(_io_result_expOut_T_5, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 77:12]
    node io_result_expOut = or(_io_result_expOut_T_3, _io_result_expOut_T_6) @[fNFromRecFN.scala 60:15]
    node _io_result_fractOut_T = bits(io_result_rawIn.sig, 22, 0) @[fNFromRecFN.scala 64:48]
    node _io_result_fractOut_T_1 = mux(io_result_rawIn.isInf, UInt<1>("h0"), _io_result_fractOut_T) @[fNFromRecFN.scala 64:20]
    node io_result_fractOut = mux(io_result_isSubnormal, io_result_denormFract, _io_result_fractOut_T_1) @[fNFromRecFN.scala 62:16]
    node io_result_hi = cat(io_result_rawIn.sign, io_result_expOut) @[Cat.scala 33:92]
    node _io_result_T = cat(io_result_hi, io_result_fractOut) @[Cat.scala 33:92]
    io.result <= _io_result_T @[FPU.scala 101:15]

  module MulFullRawFN_4 :
    output io : { flip a : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>}, flip b : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>}, invalidExc : UInt<1>, rawOut : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<48>}}

    node _notSigNaN_invalidExc_T = and(io.a.isInf, io.b.isZero) @[MulRecFN.scala 58:44]
    node _notSigNaN_invalidExc_T_1 = and(io.a.isZero, io.b.isInf) @[MulRecFN.scala 58:76]
    node notSigNaN_invalidExc = or(_notSigNaN_invalidExc_T, _notSigNaN_invalidExc_T_1) @[MulRecFN.scala 58:60]
    node notNaN_isInfOut = or(io.a.isInf, io.b.isInf) @[MulRecFN.scala 59:38]
    node notNaN_isZeroOut = or(io.a.isZero, io.b.isZero) @[MulRecFN.scala 60:40]
    node notNaN_signOut = xor(io.a.sign, io.b.sign) @[MulRecFN.scala 61:36]
    node _common_sExpOut_T = add(io.a.sExp, io.b.sExp) @[MulRecFN.scala 62:36]
    node _common_sExpOut_T_1 = tail(_common_sExpOut_T, 1) @[MulRecFN.scala 62:36]
    node _common_sExpOut_T_2 = asSInt(_common_sExpOut_T_1) @[MulRecFN.scala 62:36]
    node _common_sExpOut_T_3 = sub(_common_sExpOut_T_2, asSInt(UInt<10>("h100"))) @[MulRecFN.scala 62:48]
    node _common_sExpOut_T_4 = tail(_common_sExpOut_T_3, 1) @[MulRecFN.scala 62:48]
    node common_sExpOut = asSInt(_common_sExpOut_T_4) @[MulRecFN.scala 62:48]
    node _common_sigOut_T = mul(io.a.sig, io.b.sig) @[MulRecFN.scala 63:35]
    node common_sigOut = bits(_common_sigOut_T, 47, 0) @[MulRecFN.scala 63:46]
    node _io_invalidExc_T = bits(io.a.sig, 22, 22) @[common.scala 82:56]
    node _io_invalidExc_T_1 = eq(_io_invalidExc_T, UInt<1>("h0")) @[common.scala 82:49]
    node _io_invalidExc_T_2 = and(io.a.isNaN, _io_invalidExc_T_1) @[common.scala 82:46]
    node _io_invalidExc_T_3 = bits(io.b.sig, 22, 22) @[common.scala 82:56]
    node _io_invalidExc_T_4 = eq(_io_invalidExc_T_3, UInt<1>("h0")) @[common.scala 82:49]
    node _io_invalidExc_T_5 = and(io.b.isNaN, _io_invalidExc_T_4) @[common.scala 82:46]
    node _io_invalidExc_T_6 = or(_io_invalidExc_T_2, _io_invalidExc_T_5) @[MulRecFN.scala 66:45]
    node _io_invalidExc_T_7 = or(_io_invalidExc_T_6, notSigNaN_invalidExc) @[MulRecFN.scala 66:71]
    io.invalidExc <= _io_invalidExc_T_7 @[MulRecFN.scala 66:19]
    io.rawOut.isInf <= notNaN_isInfOut @[MulRecFN.scala 67:21]
    io.rawOut.isZero <= notNaN_isZeroOut @[MulRecFN.scala 68:22]
    io.rawOut.sExp <= common_sExpOut @[MulRecFN.scala 69:20]
    node _io_rawOut_isNaN_T = or(io.a.isNaN, io.b.isNaN) @[MulRecFN.scala 70:35]
    io.rawOut.isNaN <= _io_rawOut_isNaN_T @[MulRecFN.scala 70:21]
    io.rawOut.sign <= notNaN_signOut @[MulRecFN.scala 71:20]
    io.rawOut.sig <= common_sigOut @[MulRecFN.scala 72:19]

  module MulRawFN_4 :
    output io : { flip a : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>}, flip b : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>}, invalidExc : UInt<1>, rawOut : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<27>}}

    inst mulFullRaw of MulFullRawFN_4 @[MulRecFN.scala 84:28]
    mulFullRaw.io.a.sig <= io.a.sig @[MulRecFN.scala 86:21]
    mulFullRaw.io.a.sExp <= io.a.sExp @[MulRecFN.scala 86:21]
    mulFullRaw.io.a.sign <= io.a.sign @[MulRecFN.scala 86:21]
    mulFullRaw.io.a.isZero <= io.a.isZero @[MulRecFN.scala 86:21]
    mulFullRaw.io.a.isInf <= io.a.isInf @[MulRecFN.scala 86:21]
    mulFullRaw.io.a.isNaN <= io.a.isNaN @[MulRecFN.scala 86:21]
    mulFullRaw.io.b.sig <= io.b.sig @[MulRecFN.scala 87:21]
    mulFullRaw.io.b.sExp <= io.b.sExp @[MulRecFN.scala 87:21]
    mulFullRaw.io.b.sign <= io.b.sign @[MulRecFN.scala 87:21]
    mulFullRaw.io.b.isZero <= io.b.isZero @[MulRecFN.scala 87:21]
    mulFullRaw.io.b.isInf <= io.b.isInf @[MulRecFN.scala 87:21]
    mulFullRaw.io.b.isNaN <= io.b.isNaN @[MulRecFN.scala 87:21]
    io.invalidExc <= mulFullRaw.io.invalidExc @[MulRecFN.scala 89:19]
    io.rawOut <= mulFullRaw.io.rawOut @[MulRecFN.scala 90:15]
    node _io_rawOut_sig_T = shr(mulFullRaw.io.rawOut.sig, 22) @[MulRecFN.scala 93:15]
    node _io_rawOut_sig_T_1 = bits(mulFullRaw.io.rawOut.sig, 21, 0) @[MulRecFN.scala 93:37]
    node _io_rawOut_sig_T_2 = orr(_io_rawOut_sig_T_1) @[MulRecFN.scala 93:55]
    node _io_rawOut_sig_T_3 = cat(_io_rawOut_sig_T, _io_rawOut_sig_T_2) @[Cat.scala 33:92]
    io.rawOut.sig <= _io_rawOut_sig_T_3 @[MulRecFN.scala 91:19]

  module RoundAnyRawFNToRecFN_ie8_is26_oe8_os24_5 :
    output io : { flip invalidExc : UInt<1>, flip infiniteExc : UInt<1>, flip in : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<27>}, flip roundingMode : UInt<3>, flip detectTininess : UInt<1>, out : UInt<33>, exceptionFlags : UInt<5>}

    node roundingMode_near_even = eq(io.roundingMode, UInt<3>("h0")) @[RoundAnyRawFNToRecFN.scala 90:53]
    node roundingMode_minMag = eq(io.roundingMode, UInt<3>("h1")) @[RoundAnyRawFNToRecFN.scala 91:53]
    node roundingMode_min = eq(io.roundingMode, UInt<3>("h2")) @[RoundAnyRawFNToRecFN.scala 92:53]
    node roundingMode_max = eq(io.roundingMode, UInt<3>("h3")) @[RoundAnyRawFNToRecFN.scala 93:53]
    node roundingMode_near_maxMag = eq(io.roundingMode, UInt<3>("h4")) @[RoundAnyRawFNToRecFN.scala 94:53]
    node roundingMode_odd = eq(io.roundingMode, UInt<3>("h6")) @[RoundAnyRawFNToRecFN.scala 95:53]
    node _roundMagUp_T = and(roundingMode_min, io.in.sign) @[RoundAnyRawFNToRecFN.scala 98:27]
    node _roundMagUp_T_1 = eq(io.in.sign, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 98:66]
    node _roundMagUp_T_2 = and(roundingMode_max, _roundMagUp_T_1) @[RoundAnyRawFNToRecFN.scala 98:63]
    node roundMagUp = or(_roundMagUp_T, _roundMagUp_T_2) @[RoundAnyRawFNToRecFN.scala 98:42]
    node adjustedSig = shl(io.in.sig, 0) @[RoundAnyRawFNToRecFN.scala 114:22]
    node doShiftSigDown1 = bits(adjustedSig, 26, 26) @[RoundAnyRawFNToRecFN.scala 120:57]
    wire common_expOut : UInt<9> @[RoundAnyRawFNToRecFN.scala 122:31]
    wire common_fractOut : UInt<23> @[RoundAnyRawFNToRecFN.scala 123:31]
    wire common_overflow : UInt<1> @[RoundAnyRawFNToRecFN.scala 124:37]
    wire common_totalUnderflow : UInt<1> @[RoundAnyRawFNToRecFN.scala 125:37]
    wire common_underflow : UInt<1> @[RoundAnyRawFNToRecFN.scala 126:37]
    wire common_inexact : UInt<1> @[RoundAnyRawFNToRecFN.scala 127:37]
    node _roundMask_T = bits(io.in.sExp, 8, 0) @[RoundAnyRawFNToRecFN.scala 156:37]
    node _roundMask_T_1 = not(_roundMask_T) @[primitives.scala 52:21]
    node roundMask_msb = bits(_roundMask_T_1, 8, 8) @[primitives.scala 58:25]
    node roundMask_lsbs = bits(_roundMask_T_1, 7, 0) @[primitives.scala 59:26]
    node roundMask_msb_1 = bits(roundMask_lsbs, 7, 7) @[primitives.scala 58:25]
    node roundMask_lsbs_1 = bits(roundMask_lsbs, 6, 0) @[primitives.scala 59:26]
    node roundMask_msb_2 = bits(roundMask_lsbs_1, 6, 6) @[primitives.scala 58:25]
    node roundMask_lsbs_2 = bits(roundMask_lsbs_1, 5, 0) @[primitives.scala 59:26]
    node roundMask_shift = dshr(asSInt(UInt<65>("h10000000000000000")), roundMask_lsbs_2) @[primitives.scala 76:56]
    node _roundMask_T_2 = bits(roundMask_shift, 63, 42) @[primitives.scala 78:22]
    node _roundMask_T_3 = bits(_roundMask_T_2, 15, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_4 = shl(UInt<8>("hff"), 8) @[Bitwise.scala 107:52]
    node _roundMask_T_5 = xor(UInt<16>("hffff"), _roundMask_T_4) @[Bitwise.scala 107:21]
    node _roundMask_T_6 = shr(_roundMask_T_3, 8) @[Bitwise.scala 108:21]
    node _roundMask_T_7 = and(_roundMask_T_6, _roundMask_T_5) @[Bitwise.scala 108:31]
    node _roundMask_T_8 = bits(_roundMask_T_3, 7, 0) @[Bitwise.scala 108:46]
    node _roundMask_T_9 = shl(_roundMask_T_8, 8) @[Bitwise.scala 108:70]
    node _roundMask_T_10 = not(_roundMask_T_5) @[Bitwise.scala 108:82]
    node _roundMask_T_11 = and(_roundMask_T_9, _roundMask_T_10) @[Bitwise.scala 108:80]
    node _roundMask_T_12 = or(_roundMask_T_7, _roundMask_T_11) @[Bitwise.scala 108:39]
    node _roundMask_T_13 = bits(_roundMask_T_5, 11, 0) @[Bitwise.scala 107:28]
    node _roundMask_T_14 = shl(_roundMask_T_13, 4) @[Bitwise.scala 107:52]
    node _roundMask_T_15 = xor(_roundMask_T_5, _roundMask_T_14) @[Bitwise.scala 107:21]
    node _roundMask_T_16 = shr(_roundMask_T_12, 4) @[Bitwise.scala 108:21]
    node _roundMask_T_17 = and(_roundMask_T_16, _roundMask_T_15) @[Bitwise.scala 108:31]
    node _roundMask_T_18 = bits(_roundMask_T_12, 11, 0) @[Bitwise.scala 108:46]
    node _roundMask_T_19 = shl(_roundMask_T_18, 4) @[Bitwise.scala 108:70]
    node _roundMask_T_20 = not(_roundMask_T_15) @[Bitwise.scala 108:82]
    node _roundMask_T_21 = and(_roundMask_T_19, _roundMask_T_20) @[Bitwise.scala 108:80]
    node _roundMask_T_22 = or(_roundMask_T_17, _roundMask_T_21) @[Bitwise.scala 108:39]
    node _roundMask_T_23 = bits(_roundMask_T_15, 13, 0) @[Bitwise.scala 107:28]
    node _roundMask_T_24 = shl(_roundMask_T_23, 2) @[Bitwise.scala 107:52]
    node _roundMask_T_25 = xor(_roundMask_T_15, _roundMask_T_24) @[Bitwise.scala 107:21]
    node _roundMask_T_26 = shr(_roundMask_T_22, 2) @[Bitwise.scala 108:21]
    node _roundMask_T_27 = and(_roundMask_T_26, _roundMask_T_25) @[Bitwise.scala 108:31]
    node _roundMask_T_28 = bits(_roundMask_T_22, 13, 0) @[Bitwise.scala 108:46]
    node _roundMask_T_29 = shl(_roundMask_T_28, 2) @[Bitwise.scala 108:70]
    node _roundMask_T_30 = not(_roundMask_T_25) @[Bitwise.scala 108:82]
    node _roundMask_T_31 = and(_roundMask_T_29, _roundMask_T_30) @[Bitwise.scala 108:80]
    node _roundMask_T_32 = or(_roundMask_T_27, _roundMask_T_31) @[Bitwise.scala 108:39]
    node _roundMask_T_33 = bits(_roundMask_T_25, 14, 0) @[Bitwise.scala 107:28]
    node _roundMask_T_34 = shl(_roundMask_T_33, 1) @[Bitwise.scala 107:52]
    node _roundMask_T_35 = xor(_roundMask_T_25, _roundMask_T_34) @[Bitwise.scala 107:21]
    node _roundMask_T_36 = shr(_roundMask_T_32, 1) @[Bitwise.scala 108:21]
    node _roundMask_T_37 = and(_roundMask_T_36, _roundMask_T_35) @[Bitwise.scala 108:31]
    node _roundMask_T_38 = bits(_roundMask_T_32, 14, 0) @[Bitwise.scala 108:46]
    node _roundMask_T_39 = shl(_roundMask_T_38, 1) @[Bitwise.scala 108:70]
    node _roundMask_T_40 = not(_roundMask_T_35) @[Bitwise.scala 108:82]
    node _roundMask_T_41 = and(_roundMask_T_39, _roundMask_T_40) @[Bitwise.scala 108:80]
    node _roundMask_T_42 = or(_roundMask_T_37, _roundMask_T_41) @[Bitwise.scala 108:39]
    node _roundMask_T_43 = bits(_roundMask_T_2, 21, 16) @[Bitwise.scala 114:47]
    node _roundMask_T_44 = bits(_roundMask_T_43, 3, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_45 = bits(_roundMask_T_44, 1, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_46 = bits(_roundMask_T_45, 0, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_47 = bits(_roundMask_T_45, 1, 1) @[Bitwise.scala 114:47]
    node _roundMask_T_48 = cat(_roundMask_T_46, _roundMask_T_47) @[Cat.scala 33:92]
    node _roundMask_T_49 = bits(_roundMask_T_44, 3, 2) @[Bitwise.scala 114:47]
    node _roundMask_T_50 = bits(_roundMask_T_49, 0, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_51 = bits(_roundMask_T_49, 1, 1) @[Bitwise.scala 114:47]
    node _roundMask_T_52 = cat(_roundMask_T_50, _roundMask_T_51) @[Cat.scala 33:92]
    node _roundMask_T_53 = cat(_roundMask_T_48, _roundMask_T_52) @[Cat.scala 33:92]
    node _roundMask_T_54 = bits(_roundMask_T_43, 5, 4) @[Bitwise.scala 114:47]
    node _roundMask_T_55 = bits(_roundMask_T_54, 0, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_56 = bits(_roundMask_T_54, 1, 1) @[Bitwise.scala 114:47]
    node _roundMask_T_57 = cat(_roundMask_T_55, _roundMask_T_56) @[Cat.scala 33:92]
    node _roundMask_T_58 = cat(_roundMask_T_53, _roundMask_T_57) @[Cat.scala 33:92]
    node _roundMask_T_59 = cat(_roundMask_T_42, _roundMask_T_58) @[Cat.scala 33:92]
    node _roundMask_T_60 = not(_roundMask_T_59) @[primitives.scala 73:32]
    node _roundMask_T_61 = mux(roundMask_msb_2, UInt<1>("h0"), _roundMask_T_60) @[primitives.scala 73:21]
    node _roundMask_T_62 = not(_roundMask_T_61) @[primitives.scala 73:17]
    node _roundMask_T_63 = cat(_roundMask_T_62, UInt<3>("h7")) @[primitives.scala 68:58]
    node roundMask_msb_3 = bits(roundMask_lsbs_1, 6, 6) @[primitives.scala 58:25]
    node roundMask_lsbs_3 = bits(roundMask_lsbs_1, 5, 0) @[primitives.scala 59:26]
    node roundMask_shift_1 = dshr(asSInt(UInt<65>("h10000000000000000")), roundMask_lsbs_3) @[primitives.scala 76:56]
    node _roundMask_T_64 = bits(roundMask_shift_1, 2, 0) @[primitives.scala 78:22]
    node _roundMask_T_65 = bits(_roundMask_T_64, 1, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_66 = bits(_roundMask_T_65, 0, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_67 = bits(_roundMask_T_65, 1, 1) @[Bitwise.scala 114:47]
    node _roundMask_T_68 = cat(_roundMask_T_66, _roundMask_T_67) @[Cat.scala 33:92]
    node _roundMask_T_69 = bits(_roundMask_T_64, 2, 2) @[Bitwise.scala 114:47]
    node _roundMask_T_70 = cat(_roundMask_T_68, _roundMask_T_69) @[Cat.scala 33:92]
    node _roundMask_T_71 = mux(roundMask_msb_3, _roundMask_T_70, UInt<1>("h0")) @[primitives.scala 62:24]
    node _roundMask_T_72 = mux(roundMask_msb_1, _roundMask_T_63, _roundMask_T_71) @[primitives.scala 67:24]
    node _roundMask_T_73 = mux(roundMask_msb, _roundMask_T_72, UInt<1>("h0")) @[primitives.scala 62:24]
    node _roundMask_T_74 = or(_roundMask_T_73, doShiftSigDown1) @[RoundAnyRawFNToRecFN.scala 159:23]
    node roundMask = cat(_roundMask_T_74, UInt<2>("h3")) @[RoundAnyRawFNToRecFN.scala 159:42]
    node _shiftedRoundMask_T = cat(UInt<1>("h0"), roundMask) @[RoundAnyRawFNToRecFN.scala 162:41]
    node shiftedRoundMask = shr(_shiftedRoundMask_T, 1) @[RoundAnyRawFNToRecFN.scala 162:53]
    node _roundPosMask_T = not(shiftedRoundMask) @[RoundAnyRawFNToRecFN.scala 163:28]
    node roundPosMask = and(_roundPosMask_T, roundMask) @[RoundAnyRawFNToRecFN.scala 163:46]
    node _roundPosBit_T = and(adjustedSig, roundPosMask) @[RoundAnyRawFNToRecFN.scala 164:40]
    node roundPosBit = orr(_roundPosBit_T) @[RoundAnyRawFNToRecFN.scala 164:56]
    node _anyRoundExtra_T = and(adjustedSig, shiftedRoundMask) @[RoundAnyRawFNToRecFN.scala 165:42]
    node anyRoundExtra = orr(_anyRoundExtra_T) @[RoundAnyRawFNToRecFN.scala 165:62]
    node anyRound = or(roundPosBit, anyRoundExtra) @[RoundAnyRawFNToRecFN.scala 166:36]
    node _roundIncr_T = or(roundingMode_near_even, roundingMode_near_maxMag) @[RoundAnyRawFNToRecFN.scala 169:38]
    node _roundIncr_T_1 = and(_roundIncr_T, roundPosBit) @[RoundAnyRawFNToRecFN.scala 169:67]
    node _roundIncr_T_2 = and(roundMagUp, anyRound) @[RoundAnyRawFNToRecFN.scala 171:29]
    node roundIncr = or(_roundIncr_T_1, _roundIncr_T_2) @[RoundAnyRawFNToRecFN.scala 170:31]
    node _roundedSig_T = or(adjustedSig, roundMask) @[RoundAnyRawFNToRecFN.scala 174:32]
    node _roundedSig_T_1 = shr(_roundedSig_T, 2) @[RoundAnyRawFNToRecFN.scala 174:44]
    node _roundedSig_T_2 = add(_roundedSig_T_1, UInt<1>("h1")) @[RoundAnyRawFNToRecFN.scala 174:49]
    node _roundedSig_T_3 = and(roundingMode_near_even, roundPosBit) @[RoundAnyRawFNToRecFN.scala 175:49]
    node _roundedSig_T_4 = eq(anyRoundExtra, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 176:30]
    node _roundedSig_T_5 = and(_roundedSig_T_3, _roundedSig_T_4) @[RoundAnyRawFNToRecFN.scala 175:64]
    node _roundedSig_T_6 = shr(roundMask, 1) @[RoundAnyRawFNToRecFN.scala 177:35]
    node _roundedSig_T_7 = mux(_roundedSig_T_5, _roundedSig_T_6, UInt<26>("h0")) @[RoundAnyRawFNToRecFN.scala 175:25]
    node _roundedSig_T_8 = not(_roundedSig_T_7) @[RoundAnyRawFNToRecFN.scala 175:21]
    node _roundedSig_T_9 = and(_roundedSig_T_2, _roundedSig_T_8) @[RoundAnyRawFNToRecFN.scala 174:57]
    node _roundedSig_T_10 = not(roundMask) @[RoundAnyRawFNToRecFN.scala 180:32]
    node _roundedSig_T_11 = and(adjustedSig, _roundedSig_T_10) @[RoundAnyRawFNToRecFN.scala 180:30]
    node _roundedSig_T_12 = shr(_roundedSig_T_11, 2) @[RoundAnyRawFNToRecFN.scala 180:43]
    node _roundedSig_T_13 = and(roundingMode_odd, anyRound) @[RoundAnyRawFNToRecFN.scala 181:42]
    node _roundedSig_T_14 = shr(roundPosMask, 1) @[RoundAnyRawFNToRecFN.scala 181:67]
    node _roundedSig_T_15 = mux(_roundedSig_T_13, _roundedSig_T_14, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 181:24]
    node _roundedSig_T_16 = or(_roundedSig_T_12, _roundedSig_T_15) @[RoundAnyRawFNToRecFN.scala 180:47]
    node roundedSig = mux(roundIncr, _roundedSig_T_9, _roundedSig_T_16) @[RoundAnyRawFNToRecFN.scala 173:16]
    node _sRoundedExp_T = shr(roundedSig, 24) @[RoundAnyRawFNToRecFN.scala 185:54]
    node _sRoundedExp_T_1 = cvt(_sRoundedExp_T) @[RoundAnyRawFNToRecFN.scala 185:76]
    node sRoundedExp = add(io.in.sExp, _sRoundedExp_T_1) @[RoundAnyRawFNToRecFN.scala 185:40]
    node _common_expOut_T = bits(sRoundedExp, 8, 0) @[RoundAnyRawFNToRecFN.scala 187:37]
    common_expOut <= _common_expOut_T @[RoundAnyRawFNToRecFN.scala 187:23]
    node _common_fractOut_T = bits(roundedSig, 23, 1) @[RoundAnyRawFNToRecFN.scala 190:27]
    node _common_fractOut_T_1 = bits(roundedSig, 22, 0) @[RoundAnyRawFNToRecFN.scala 191:27]
    node _common_fractOut_T_2 = mux(doShiftSigDown1, _common_fractOut_T, _common_fractOut_T_1) @[RoundAnyRawFNToRecFN.scala 189:16]
    common_fractOut <= _common_fractOut_T_2 @[RoundAnyRawFNToRecFN.scala 188:25]
    node _common_overflow_T = shr(sRoundedExp, 7) @[RoundAnyRawFNToRecFN.scala 196:30]
    node _common_overflow_T_1 = geq(_common_overflow_T, asSInt(UInt<3>("h3"))) @[RoundAnyRawFNToRecFN.scala 196:50]
    common_overflow <= _common_overflow_T_1 @[RoundAnyRawFNToRecFN.scala 193:25]
    node _common_totalUnderflow_T = lt(sRoundedExp, asSInt(UInt<8>("h6b"))) @[RoundAnyRawFNToRecFN.scala 200:31]
    common_totalUnderflow <= _common_totalUnderflow_T @[RoundAnyRawFNToRecFN.scala 197:31]
    node _unboundedRange_roundPosBit_T = bits(adjustedSig, 2, 2) @[RoundAnyRawFNToRecFN.scala 203:45]
    node _unboundedRange_roundPosBit_T_1 = bits(adjustedSig, 1, 1) @[RoundAnyRawFNToRecFN.scala 203:61]
    node unboundedRange_roundPosBit = mux(doShiftSigDown1, _unboundedRange_roundPosBit_T, _unboundedRange_roundPosBit_T_1) @[RoundAnyRawFNToRecFN.scala 203:16]
    node _unboundedRange_anyRound_T = bits(adjustedSig, 2, 2) @[RoundAnyRawFNToRecFN.scala 205:44]
    node _unboundedRange_anyRound_T_1 = and(doShiftSigDown1, _unboundedRange_anyRound_T) @[RoundAnyRawFNToRecFN.scala 205:30]
    node _unboundedRange_anyRound_T_2 = bits(adjustedSig, 1, 0) @[RoundAnyRawFNToRecFN.scala 205:63]
    node _unboundedRange_anyRound_T_3 = orr(_unboundedRange_anyRound_T_2) @[RoundAnyRawFNToRecFN.scala 205:70]
    node unboundedRange_anyRound = or(_unboundedRange_anyRound_T_1, _unboundedRange_anyRound_T_3) @[RoundAnyRawFNToRecFN.scala 205:49]
    node _unboundedRange_roundIncr_T = or(roundingMode_near_even, roundingMode_near_maxMag) @[RoundAnyRawFNToRecFN.scala 207:38]
    node _unboundedRange_roundIncr_T_1 = and(_unboundedRange_roundIncr_T, unboundedRange_roundPosBit) @[RoundAnyRawFNToRecFN.scala 207:67]
    node _unboundedRange_roundIncr_T_2 = and(roundMagUp, unboundedRange_anyRound) @[RoundAnyRawFNToRecFN.scala 209:29]
    node unboundedRange_roundIncr = or(_unboundedRange_roundIncr_T_1, _unboundedRange_roundIncr_T_2) @[RoundAnyRawFNToRecFN.scala 208:46]
    node _roundCarry_T = bits(roundedSig, 25, 25) @[RoundAnyRawFNToRecFN.scala 212:27]
    node _roundCarry_T_1 = bits(roundedSig, 24, 24) @[RoundAnyRawFNToRecFN.scala 213:27]
    node roundCarry = mux(doShiftSigDown1, _roundCarry_T, _roundCarry_T_1) @[RoundAnyRawFNToRecFN.scala 211:16]
    node _common_underflow_T = shr(io.in.sExp, 8) @[RoundAnyRawFNToRecFN.scala 220:49]
    node _common_underflow_T_1 = leq(_common_underflow_T, asSInt(UInt<1>("h0"))) @[RoundAnyRawFNToRecFN.scala 220:64]
    node _common_underflow_T_2 = and(anyRound, _common_underflow_T_1) @[RoundAnyRawFNToRecFN.scala 220:32]
    node _common_underflow_T_3 = bits(roundMask, 3, 3) @[RoundAnyRawFNToRecFN.scala 221:57]
    node _common_underflow_T_4 = bits(roundMask, 2, 2) @[RoundAnyRawFNToRecFN.scala 221:71]
    node _common_underflow_T_5 = mux(doShiftSigDown1, _common_underflow_T_3, _common_underflow_T_4) @[RoundAnyRawFNToRecFN.scala 221:30]
    node _common_underflow_T_6 = and(_common_underflow_T_2, _common_underflow_T_5) @[RoundAnyRawFNToRecFN.scala 220:72]
    node _common_underflow_T_7 = eq(io.detectTininess, UInt<1>("h1")) @[RoundAnyRawFNToRecFN.scala 222:49]
    node _common_underflow_T_8 = bits(roundMask, 4, 4) @[RoundAnyRawFNToRecFN.scala 224:49]
    node _common_underflow_T_9 = bits(roundMask, 3, 3) @[RoundAnyRawFNToRecFN.scala 225:49]
    node _common_underflow_T_10 = mux(doShiftSigDown1, _common_underflow_T_8, _common_underflow_T_9) @[RoundAnyRawFNToRecFN.scala 223:39]
    node _common_underflow_T_11 = eq(_common_underflow_T_10, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 223:34]
    node _common_underflow_T_12 = and(_common_underflow_T_7, _common_underflow_T_11) @[RoundAnyRawFNToRecFN.scala 222:77]
    node _common_underflow_T_13 = and(_common_underflow_T_12, roundCarry) @[RoundAnyRawFNToRecFN.scala 226:38]
    node _common_underflow_T_14 = and(_common_underflow_T_13, roundPosBit) @[RoundAnyRawFNToRecFN.scala 227:45]
    node _common_underflow_T_15 = and(_common_underflow_T_14, unboundedRange_roundIncr) @[RoundAnyRawFNToRecFN.scala 227:60]
    node _common_underflow_T_16 = eq(_common_underflow_T_15, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 222:27]
    node _common_underflow_T_17 = and(_common_underflow_T_6, _common_underflow_T_16) @[RoundAnyRawFNToRecFN.scala 221:76]
    node _common_underflow_T_18 = or(common_totalUnderflow, _common_underflow_T_17) @[RoundAnyRawFNToRecFN.scala 217:40]
    common_underflow <= _common_underflow_T_18 @[RoundAnyRawFNToRecFN.scala 215:26]
    node _common_inexact_T = or(common_totalUnderflow, anyRound) @[RoundAnyRawFNToRecFN.scala 230:49]
    common_inexact <= _common_inexact_T @[RoundAnyRawFNToRecFN.scala 230:24]
    node isNaNOut = or(io.invalidExc, io.in.isNaN) @[RoundAnyRawFNToRecFN.scala 235:34]
    node notNaN_isSpecialInfOut = or(io.infiniteExc, io.in.isInf) @[RoundAnyRawFNToRecFN.scala 236:49]
    node _commonCase_T = eq(isNaNOut, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 237:22]
    node _commonCase_T_1 = eq(notNaN_isSpecialInfOut, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 237:36]
    node _commonCase_T_2 = and(_commonCase_T, _commonCase_T_1) @[RoundAnyRawFNToRecFN.scala 237:33]
    node _commonCase_T_3 = eq(io.in.isZero, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 237:64]
    node commonCase = and(_commonCase_T_2, _commonCase_T_3) @[RoundAnyRawFNToRecFN.scala 237:61]
    node overflow = and(commonCase, common_overflow) @[RoundAnyRawFNToRecFN.scala 238:32]
    node underflow = and(commonCase, common_underflow) @[RoundAnyRawFNToRecFN.scala 239:32]
    node _inexact_T = and(commonCase, common_inexact) @[RoundAnyRawFNToRecFN.scala 240:43]
    node inexact = or(overflow, _inexact_T) @[RoundAnyRawFNToRecFN.scala 240:28]
    node _overflow_roundMagUp_T = or(roundingMode_near_even, roundingMode_near_maxMag) @[RoundAnyRawFNToRecFN.scala 243:32]
    node overflow_roundMagUp = or(_overflow_roundMagUp_T, roundMagUp) @[RoundAnyRawFNToRecFN.scala 243:60]
    node _pegMinNonzeroMagOut_T = and(commonCase, common_totalUnderflow) @[RoundAnyRawFNToRecFN.scala 245:20]
    node _pegMinNonzeroMagOut_T_1 = or(roundMagUp, roundingMode_odd) @[RoundAnyRawFNToRecFN.scala 245:60]
    node pegMinNonzeroMagOut = and(_pegMinNonzeroMagOut_T, _pegMinNonzeroMagOut_T_1) @[RoundAnyRawFNToRecFN.scala 245:45]
    node _pegMaxFiniteMagOut_T = eq(overflow_roundMagUp, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 246:42]
    node pegMaxFiniteMagOut = and(overflow, _pegMaxFiniteMagOut_T) @[RoundAnyRawFNToRecFN.scala 246:39]
    node _notNaN_isInfOut_T = and(overflow, overflow_roundMagUp) @[RoundAnyRawFNToRecFN.scala 248:45]
    node notNaN_isInfOut = or(notNaN_isSpecialInfOut, _notNaN_isInfOut_T) @[RoundAnyRawFNToRecFN.scala 248:32]
    node signOut = mux(isNaNOut, UInt<1>("h0"), io.in.sign) @[RoundAnyRawFNToRecFN.scala 250:22]
    node _expOut_T = or(io.in.isZero, common_totalUnderflow) @[RoundAnyRawFNToRecFN.scala 253:32]
    node _expOut_T_1 = mux(_expOut_T, UInt<9>("h1c0"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 253:18]
    node _expOut_T_2 = not(_expOut_T_1) @[RoundAnyRawFNToRecFN.scala 253:14]
    node _expOut_T_3 = and(common_expOut, _expOut_T_2) @[RoundAnyRawFNToRecFN.scala 252:24]
    node _expOut_T_4 = not(UInt<9>("h6b")) @[RoundAnyRawFNToRecFN.scala 258:19]
    node _expOut_T_5 = mux(pegMinNonzeroMagOut, _expOut_T_4, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 257:18]
    node _expOut_T_6 = not(_expOut_T_5) @[RoundAnyRawFNToRecFN.scala 257:14]
    node _expOut_T_7 = and(_expOut_T_3, _expOut_T_6) @[RoundAnyRawFNToRecFN.scala 256:17]
    node _expOut_T_8 = mux(pegMaxFiniteMagOut, UInt<9>("h80"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 261:18]
    node _expOut_T_9 = not(_expOut_T_8) @[RoundAnyRawFNToRecFN.scala 261:14]
    node _expOut_T_10 = and(_expOut_T_7, _expOut_T_9) @[RoundAnyRawFNToRecFN.scala 260:17]
    node _expOut_T_11 = mux(notNaN_isInfOut, UInt<9>("h40"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 265:18]
    node _expOut_T_12 = not(_expOut_T_11) @[RoundAnyRawFNToRecFN.scala 265:14]
    node _expOut_T_13 = and(_expOut_T_10, _expOut_T_12) @[RoundAnyRawFNToRecFN.scala 264:17]
    node _expOut_T_14 = mux(pegMinNonzeroMagOut, UInt<9>("h6b"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 269:16]
    node _expOut_T_15 = or(_expOut_T_13, _expOut_T_14) @[RoundAnyRawFNToRecFN.scala 268:18]
    node _expOut_T_16 = mux(pegMaxFiniteMagOut, UInt<9>("h17f"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 273:16]
    node _expOut_T_17 = or(_expOut_T_15, _expOut_T_16) @[RoundAnyRawFNToRecFN.scala 272:15]
    node _expOut_T_18 = mux(notNaN_isInfOut, UInt<9>("h180"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 277:16]
    node _expOut_T_19 = or(_expOut_T_17, _expOut_T_18) @[RoundAnyRawFNToRecFN.scala 276:15]
    node _expOut_T_20 = mux(isNaNOut, UInt<9>("h1c0"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 278:16]
    node expOut = or(_expOut_T_19, _expOut_T_20) @[RoundAnyRawFNToRecFN.scala 277:73]
    node _fractOut_T = or(isNaNOut, io.in.isZero) @[RoundAnyRawFNToRecFN.scala 280:22]
    node _fractOut_T_1 = or(_fractOut_T, common_totalUnderflow) @[RoundAnyRawFNToRecFN.scala 280:38]
    node _fractOut_T_2 = mux(isNaNOut, UInt<23>("h400000"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 281:16]
    node _fractOut_T_3 = mux(_fractOut_T_1, _fractOut_T_2, common_fractOut) @[RoundAnyRawFNToRecFN.scala 280:12]
    node _fractOut_T_4 = bits(pegMaxFiniteMagOut, 0, 0) @[Bitwise.scala 77:15]
    node _fractOut_T_5 = mux(_fractOut_T_4, UInt<23>("h7fffff"), UInt<23>("h0")) @[Bitwise.scala 77:12]
    node fractOut = or(_fractOut_T_3, _fractOut_T_5) @[RoundAnyRawFNToRecFN.scala 283:11]
    node _io_out_T = cat(signOut, expOut) @[RoundAnyRawFNToRecFN.scala 286:23]
    node _io_out_T_1 = cat(_io_out_T, fractOut) @[RoundAnyRawFNToRecFN.scala 286:33]
    io.out <= _io_out_T_1 @[RoundAnyRawFNToRecFN.scala 286:12]
    node _io_exceptionFlags_T = cat(io.invalidExc, io.infiniteExc) @[RoundAnyRawFNToRecFN.scala 288:23]
    node _io_exceptionFlags_T_1 = cat(_io_exceptionFlags_T, overflow) @[RoundAnyRawFNToRecFN.scala 288:41]
    node _io_exceptionFlags_T_2 = cat(_io_exceptionFlags_T_1, underflow) @[RoundAnyRawFNToRecFN.scala 288:53]
    node _io_exceptionFlags_T_3 = cat(_io_exceptionFlags_T_2, inexact) @[RoundAnyRawFNToRecFN.scala 288:66]
    io.exceptionFlags <= _io_exceptionFlags_T_3 @[RoundAnyRawFNToRecFN.scala 287:23]

  module RoundRawFNToRecFN_e8_s24_5 :
    output io : { flip invalidExc : UInt<1>, flip infiniteExc : UInt<1>, flip in : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<27>}, flip roundingMode : UInt<3>, flip detectTininess : UInt<1>, out : UInt<33>, exceptionFlags : UInt<5>}

    inst roundAnyRawFNToRecFN of RoundAnyRawFNToRecFN_ie8_is26_oe8_os24_5 @[RoundAnyRawFNToRecFN.scala 310:15]
    roundAnyRawFNToRecFN.io.invalidExc <= io.invalidExc @[RoundAnyRawFNToRecFN.scala 313:44]
    roundAnyRawFNToRecFN.io.infiniteExc <= io.infiniteExc @[RoundAnyRawFNToRecFN.scala 314:44]
    roundAnyRawFNToRecFN.io.in.sig <= io.in.sig @[RoundAnyRawFNToRecFN.scala 315:44]
    roundAnyRawFNToRecFN.io.in.sExp <= io.in.sExp @[RoundAnyRawFNToRecFN.scala 315:44]
    roundAnyRawFNToRecFN.io.in.sign <= io.in.sign @[RoundAnyRawFNToRecFN.scala 315:44]
    roundAnyRawFNToRecFN.io.in.isZero <= io.in.isZero @[RoundAnyRawFNToRecFN.scala 315:44]
    roundAnyRawFNToRecFN.io.in.isInf <= io.in.isInf @[RoundAnyRawFNToRecFN.scala 315:44]
    roundAnyRawFNToRecFN.io.in.isNaN <= io.in.isNaN @[RoundAnyRawFNToRecFN.scala 315:44]
    roundAnyRawFNToRecFN.io.roundingMode <= io.roundingMode @[RoundAnyRawFNToRecFN.scala 316:44]
    roundAnyRawFNToRecFN.io.detectTininess <= io.detectTininess @[RoundAnyRawFNToRecFN.scala 317:44]
    io.out <= roundAnyRawFNToRecFN.io.out @[RoundAnyRawFNToRecFN.scala 318:23]
    io.exceptionFlags <= roundAnyRawFNToRecFN.io.exceptionFlags @[RoundAnyRawFNToRecFN.scala 319:23]

  module MulRecFN_4 :
    output io : { flip a : UInt<33>, flip b : UInt<33>, flip roundingMode : UInt<3>, flip detectTininess : UInt<1>, out : UInt<33>, exceptionFlags : UInt<5>}

    inst mulRawFN of MulRawFN_4 @[MulRecFN.scala 113:26]
    node mulRawFN_io_a_exp = bits(io.a, 31, 23) @[rawFloatFromRecFN.scala 51:21]
    node _mulRawFN_io_a_isZero_T = bits(mulRawFN_io_a_exp, 8, 6) @[rawFloatFromRecFN.scala 52:28]
    node mulRawFN_io_a_isZero = eq(_mulRawFN_io_a_isZero_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 52:53]
    node _mulRawFN_io_a_isSpecial_T = bits(mulRawFN_io_a_exp, 8, 7) @[rawFloatFromRecFN.scala 53:28]
    node mulRawFN_io_a_isSpecial = eq(_mulRawFN_io_a_isSpecial_T, UInt<2>("h3")) @[rawFloatFromRecFN.scala 53:53]
    wire mulRawFN_io_a_out : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>} @[rawFloatFromRecFN.scala 55:23]
    node _mulRawFN_io_a_out_isNaN_T = bits(mulRawFN_io_a_exp, 6, 6) @[rawFloatFromRecFN.scala 56:41]
    node _mulRawFN_io_a_out_isNaN_T_1 = and(mulRawFN_io_a_isSpecial, _mulRawFN_io_a_out_isNaN_T) @[rawFloatFromRecFN.scala 56:33]
    mulRawFN_io_a_out.isNaN <= _mulRawFN_io_a_out_isNaN_T_1 @[rawFloatFromRecFN.scala 56:20]
    node _mulRawFN_io_a_out_isInf_T = bits(mulRawFN_io_a_exp, 6, 6) @[rawFloatFromRecFN.scala 57:41]
    node _mulRawFN_io_a_out_isInf_T_1 = eq(_mulRawFN_io_a_out_isInf_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 57:36]
    node _mulRawFN_io_a_out_isInf_T_2 = and(mulRawFN_io_a_isSpecial, _mulRawFN_io_a_out_isInf_T_1) @[rawFloatFromRecFN.scala 57:33]
    mulRawFN_io_a_out.isInf <= _mulRawFN_io_a_out_isInf_T_2 @[rawFloatFromRecFN.scala 57:20]
    mulRawFN_io_a_out.isZero <= mulRawFN_io_a_isZero @[rawFloatFromRecFN.scala 58:20]
    node _mulRawFN_io_a_out_sign_T = bits(io.a, 32, 32) @[rawFloatFromRecFN.scala 59:25]
    mulRawFN_io_a_out.sign <= _mulRawFN_io_a_out_sign_T @[rawFloatFromRecFN.scala 59:20]
    node _mulRawFN_io_a_out_sExp_T = cvt(mulRawFN_io_a_exp) @[rawFloatFromRecFN.scala 60:27]
    mulRawFN_io_a_out.sExp <= _mulRawFN_io_a_out_sExp_T @[rawFloatFromRecFN.scala 60:20]
    node _mulRawFN_io_a_out_sig_T = eq(mulRawFN_io_a_isZero, UInt<1>("h0")) @[rawFloatFromRecFN.scala 61:35]
    node _mulRawFN_io_a_out_sig_T_1 = cat(UInt<1>("h0"), _mulRawFN_io_a_out_sig_T) @[rawFloatFromRecFN.scala 61:32]
    node _mulRawFN_io_a_out_sig_T_2 = bits(io.a, 22, 0) @[rawFloatFromRecFN.scala 61:49]
    node _mulRawFN_io_a_out_sig_T_3 = cat(_mulRawFN_io_a_out_sig_T_1, _mulRawFN_io_a_out_sig_T_2) @[rawFloatFromRecFN.scala 61:44]
    mulRawFN_io_a_out.sig <= _mulRawFN_io_a_out_sig_T_3 @[rawFloatFromRecFN.scala 61:20]
    mulRawFN.io.a.sig <= mulRawFN_io_a_out.sig @[MulRecFN.scala 115:19]
    mulRawFN.io.a.sExp <= mulRawFN_io_a_out.sExp @[MulRecFN.scala 115:19]
    mulRawFN.io.a.sign <= mulRawFN_io_a_out.sign @[MulRecFN.scala 115:19]
    mulRawFN.io.a.isZero <= mulRawFN_io_a_out.isZero @[MulRecFN.scala 115:19]
    mulRawFN.io.a.isInf <= mulRawFN_io_a_out.isInf @[MulRecFN.scala 115:19]
    mulRawFN.io.a.isNaN <= mulRawFN_io_a_out.isNaN @[MulRecFN.scala 115:19]
    node mulRawFN_io_b_exp = bits(io.b, 31, 23) @[rawFloatFromRecFN.scala 51:21]
    node _mulRawFN_io_b_isZero_T = bits(mulRawFN_io_b_exp, 8, 6) @[rawFloatFromRecFN.scala 52:28]
    node mulRawFN_io_b_isZero = eq(_mulRawFN_io_b_isZero_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 52:53]
    node _mulRawFN_io_b_isSpecial_T = bits(mulRawFN_io_b_exp, 8, 7) @[rawFloatFromRecFN.scala 53:28]
    node mulRawFN_io_b_isSpecial = eq(_mulRawFN_io_b_isSpecial_T, UInt<2>("h3")) @[rawFloatFromRecFN.scala 53:53]
    wire mulRawFN_io_b_out : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>} @[rawFloatFromRecFN.scala 55:23]
    node _mulRawFN_io_b_out_isNaN_T = bits(mulRawFN_io_b_exp, 6, 6) @[rawFloatFromRecFN.scala 56:41]
    node _mulRawFN_io_b_out_isNaN_T_1 = and(mulRawFN_io_b_isSpecial, _mulRawFN_io_b_out_isNaN_T) @[rawFloatFromRecFN.scala 56:33]
    mulRawFN_io_b_out.isNaN <= _mulRawFN_io_b_out_isNaN_T_1 @[rawFloatFromRecFN.scala 56:20]
    node _mulRawFN_io_b_out_isInf_T = bits(mulRawFN_io_b_exp, 6, 6) @[rawFloatFromRecFN.scala 57:41]
    node _mulRawFN_io_b_out_isInf_T_1 = eq(_mulRawFN_io_b_out_isInf_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 57:36]
    node _mulRawFN_io_b_out_isInf_T_2 = and(mulRawFN_io_b_isSpecial, _mulRawFN_io_b_out_isInf_T_1) @[rawFloatFromRecFN.scala 57:33]
    mulRawFN_io_b_out.isInf <= _mulRawFN_io_b_out_isInf_T_2 @[rawFloatFromRecFN.scala 57:20]
    mulRawFN_io_b_out.isZero <= mulRawFN_io_b_isZero @[rawFloatFromRecFN.scala 58:20]
    node _mulRawFN_io_b_out_sign_T = bits(io.b, 32, 32) @[rawFloatFromRecFN.scala 59:25]
    mulRawFN_io_b_out.sign <= _mulRawFN_io_b_out_sign_T @[rawFloatFromRecFN.scala 59:20]
    node _mulRawFN_io_b_out_sExp_T = cvt(mulRawFN_io_b_exp) @[rawFloatFromRecFN.scala 60:27]
    mulRawFN_io_b_out.sExp <= _mulRawFN_io_b_out_sExp_T @[rawFloatFromRecFN.scala 60:20]
    node _mulRawFN_io_b_out_sig_T = eq(mulRawFN_io_b_isZero, UInt<1>("h0")) @[rawFloatFromRecFN.scala 61:35]
    node _mulRawFN_io_b_out_sig_T_1 = cat(UInt<1>("h0"), _mulRawFN_io_b_out_sig_T) @[rawFloatFromRecFN.scala 61:32]
    node _mulRawFN_io_b_out_sig_T_2 = bits(io.b, 22, 0) @[rawFloatFromRecFN.scala 61:49]
    node _mulRawFN_io_b_out_sig_T_3 = cat(_mulRawFN_io_b_out_sig_T_1, _mulRawFN_io_b_out_sig_T_2) @[rawFloatFromRecFN.scala 61:44]
    mulRawFN_io_b_out.sig <= _mulRawFN_io_b_out_sig_T_3 @[rawFloatFromRecFN.scala 61:20]
    mulRawFN.io.b.sig <= mulRawFN_io_b_out.sig @[MulRecFN.scala 116:19]
    mulRawFN.io.b.sExp <= mulRawFN_io_b_out.sExp @[MulRecFN.scala 116:19]
    mulRawFN.io.b.sign <= mulRawFN_io_b_out.sign @[MulRecFN.scala 116:19]
    mulRawFN.io.b.isZero <= mulRawFN_io_b_out.isZero @[MulRecFN.scala 116:19]
    mulRawFN.io.b.isInf <= mulRawFN_io_b_out.isInf @[MulRecFN.scala 116:19]
    mulRawFN.io.b.isNaN <= mulRawFN_io_b_out.isNaN @[MulRecFN.scala 116:19]
    inst roundRawFNToRecFN of RoundRawFNToRecFN_e8_s24_5 @[MulRecFN.scala 121:15]
    roundRawFNToRecFN.io.invalidExc <= mulRawFN.io.invalidExc @[MulRecFN.scala 122:39]
    roundRawFNToRecFN.io.infiniteExc <= UInt<1>("h0") @[MulRecFN.scala 123:39]
    roundRawFNToRecFN.io.in.sig <= mulRawFN.io.rawOut.sig @[MulRecFN.scala 124:39]
    roundRawFNToRecFN.io.in.sExp <= mulRawFN.io.rawOut.sExp @[MulRecFN.scala 124:39]
    roundRawFNToRecFN.io.in.sign <= mulRawFN.io.rawOut.sign @[MulRecFN.scala 124:39]
    roundRawFNToRecFN.io.in.isZero <= mulRawFN.io.rawOut.isZero @[MulRecFN.scala 124:39]
    roundRawFNToRecFN.io.in.isInf <= mulRawFN.io.rawOut.isInf @[MulRecFN.scala 124:39]
    roundRawFNToRecFN.io.in.isNaN <= mulRawFN.io.rawOut.isNaN @[MulRecFN.scala 124:39]
    roundRawFNToRecFN.io.roundingMode <= io.roundingMode @[MulRecFN.scala 125:39]
    roundRawFNToRecFN.io.detectTininess <= io.detectTininess @[MulRecFN.scala 126:41]
    io.out <= roundRawFNToRecFN.io.out @[MulRecFN.scala 127:23]
    io.exceptionFlags <= roundRawFNToRecFN.io.exceptionFlags @[MulRecFN.scala 128:23]

  module FP32Multiplier_4 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<32>, flip b : UInt<32>, result : UInt<32>}

    inst mulRecFN of MulRecFN_4 @[FPU.scala 88:26]
    node a_recoded_rawIn_sign = bits(io.a, 31, 31) @[rawFloatFromFN.scala 44:18]
    node a_recoded_rawIn_expIn = bits(io.a, 30, 23) @[rawFloatFromFN.scala 45:19]
    node a_recoded_rawIn_fractIn = bits(io.a, 22, 0) @[rawFloatFromFN.scala 46:21]
    node a_recoded_rawIn_isZeroExpIn = eq(a_recoded_rawIn_expIn, UInt<1>("h0")) @[rawFloatFromFN.scala 48:30]
    node a_recoded_rawIn_isZeroFractIn = eq(a_recoded_rawIn_fractIn, UInt<1>("h0")) @[rawFloatFromFN.scala 49:34]
    node _a_recoded_rawIn_normDist_T = bits(a_recoded_rawIn_fractIn, 0, 0) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_1 = bits(a_recoded_rawIn_fractIn, 1, 1) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_2 = bits(a_recoded_rawIn_fractIn, 2, 2) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_3 = bits(a_recoded_rawIn_fractIn, 3, 3) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_4 = bits(a_recoded_rawIn_fractIn, 4, 4) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_5 = bits(a_recoded_rawIn_fractIn, 5, 5) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_6 = bits(a_recoded_rawIn_fractIn, 6, 6) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_7 = bits(a_recoded_rawIn_fractIn, 7, 7) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_8 = bits(a_recoded_rawIn_fractIn, 8, 8) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_9 = bits(a_recoded_rawIn_fractIn, 9, 9) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_10 = bits(a_recoded_rawIn_fractIn, 10, 10) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_11 = bits(a_recoded_rawIn_fractIn, 11, 11) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_12 = bits(a_recoded_rawIn_fractIn, 12, 12) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_13 = bits(a_recoded_rawIn_fractIn, 13, 13) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_14 = bits(a_recoded_rawIn_fractIn, 14, 14) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_15 = bits(a_recoded_rawIn_fractIn, 15, 15) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_16 = bits(a_recoded_rawIn_fractIn, 16, 16) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_17 = bits(a_recoded_rawIn_fractIn, 17, 17) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_18 = bits(a_recoded_rawIn_fractIn, 18, 18) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_19 = bits(a_recoded_rawIn_fractIn, 19, 19) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_20 = bits(a_recoded_rawIn_fractIn, 20, 20) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_21 = bits(a_recoded_rawIn_fractIn, 21, 21) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_22 = bits(a_recoded_rawIn_fractIn, 22, 22) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_23 = mux(_a_recoded_rawIn_normDist_T_1, UInt<5>("h15"), UInt<5>("h16")) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_24 = mux(_a_recoded_rawIn_normDist_T_2, UInt<5>("h14"), _a_recoded_rawIn_normDist_T_23) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_25 = mux(_a_recoded_rawIn_normDist_T_3, UInt<5>("h13"), _a_recoded_rawIn_normDist_T_24) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_26 = mux(_a_recoded_rawIn_normDist_T_4, UInt<5>("h12"), _a_recoded_rawIn_normDist_T_25) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_27 = mux(_a_recoded_rawIn_normDist_T_5, UInt<5>("h11"), _a_recoded_rawIn_normDist_T_26) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_28 = mux(_a_recoded_rawIn_normDist_T_6, UInt<5>("h10"), _a_recoded_rawIn_normDist_T_27) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_29 = mux(_a_recoded_rawIn_normDist_T_7, UInt<4>("hf"), _a_recoded_rawIn_normDist_T_28) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_30 = mux(_a_recoded_rawIn_normDist_T_8, UInt<4>("he"), _a_recoded_rawIn_normDist_T_29) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_31 = mux(_a_recoded_rawIn_normDist_T_9, UInt<4>("hd"), _a_recoded_rawIn_normDist_T_30) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_32 = mux(_a_recoded_rawIn_normDist_T_10, UInt<4>("hc"), _a_recoded_rawIn_normDist_T_31) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_33 = mux(_a_recoded_rawIn_normDist_T_11, UInt<4>("hb"), _a_recoded_rawIn_normDist_T_32) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_34 = mux(_a_recoded_rawIn_normDist_T_12, UInt<4>("ha"), _a_recoded_rawIn_normDist_T_33) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_35 = mux(_a_recoded_rawIn_normDist_T_13, UInt<4>("h9"), _a_recoded_rawIn_normDist_T_34) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_36 = mux(_a_recoded_rawIn_normDist_T_14, UInt<4>("h8"), _a_recoded_rawIn_normDist_T_35) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_37 = mux(_a_recoded_rawIn_normDist_T_15, UInt<3>("h7"), _a_recoded_rawIn_normDist_T_36) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_38 = mux(_a_recoded_rawIn_normDist_T_16, UInt<3>("h6"), _a_recoded_rawIn_normDist_T_37) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_39 = mux(_a_recoded_rawIn_normDist_T_17, UInt<3>("h5"), _a_recoded_rawIn_normDist_T_38) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_40 = mux(_a_recoded_rawIn_normDist_T_18, UInt<3>("h4"), _a_recoded_rawIn_normDist_T_39) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_41 = mux(_a_recoded_rawIn_normDist_T_19, UInt<2>("h3"), _a_recoded_rawIn_normDist_T_40) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_42 = mux(_a_recoded_rawIn_normDist_T_20, UInt<2>("h2"), _a_recoded_rawIn_normDist_T_41) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_43 = mux(_a_recoded_rawIn_normDist_T_21, UInt<1>("h1"), _a_recoded_rawIn_normDist_T_42) @[Mux.scala 47:70]
    node a_recoded_rawIn_normDist = mux(_a_recoded_rawIn_normDist_T_22, UInt<1>("h0"), _a_recoded_rawIn_normDist_T_43) @[Mux.scala 47:70]
    node _a_recoded_rawIn_subnormFract_T = dshl(a_recoded_rawIn_fractIn, a_recoded_rawIn_normDist) @[rawFloatFromFN.scala 52:33]
    node _a_recoded_rawIn_subnormFract_T_1 = bits(_a_recoded_rawIn_subnormFract_T, 21, 0) @[rawFloatFromFN.scala 52:46]
    node a_recoded_rawIn_subnormFract = shl(_a_recoded_rawIn_subnormFract_T_1, 1) @[rawFloatFromFN.scala 52:64]
    node _a_recoded_rawIn_adjustedExp_T = xor(a_recoded_rawIn_normDist, UInt<9>("h1ff")) @[rawFloatFromFN.scala 55:18]
    node _a_recoded_rawIn_adjustedExp_T_1 = mux(a_recoded_rawIn_isZeroExpIn, _a_recoded_rawIn_adjustedExp_T, a_recoded_rawIn_expIn) @[rawFloatFromFN.scala 54:10]
    node _a_recoded_rawIn_adjustedExp_T_2 = mux(a_recoded_rawIn_isZeroExpIn, UInt<2>("h2"), UInt<1>("h1")) @[rawFloatFromFN.scala 58:14]
    node _a_recoded_rawIn_adjustedExp_T_3 = or(UInt<8>("h80"), _a_recoded_rawIn_adjustedExp_T_2) @[rawFloatFromFN.scala 58:9]
    node _a_recoded_rawIn_adjustedExp_T_4 = add(_a_recoded_rawIn_adjustedExp_T_1, _a_recoded_rawIn_adjustedExp_T_3) @[rawFloatFromFN.scala 57:9]
    node a_recoded_rawIn_adjustedExp = tail(_a_recoded_rawIn_adjustedExp_T_4, 1) @[rawFloatFromFN.scala 57:9]
    node a_recoded_rawIn_isZero = and(a_recoded_rawIn_isZeroExpIn, a_recoded_rawIn_isZeroFractIn) @[rawFloatFromFN.scala 60:30]
    node _a_recoded_rawIn_isSpecial_T = bits(a_recoded_rawIn_adjustedExp, 8, 7) @[rawFloatFromFN.scala 61:32]
    node a_recoded_rawIn_isSpecial = eq(_a_recoded_rawIn_isSpecial_T, UInt<2>("h3")) @[rawFloatFromFN.scala 61:57]
    wire a_recoded_rawIn : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>} @[rawFloatFromFN.scala 63:19]
    node _a_recoded_rawIn_out_isNaN_T = eq(a_recoded_rawIn_isZeroFractIn, UInt<1>("h0")) @[rawFloatFromFN.scala 64:31]
    node _a_recoded_rawIn_out_isNaN_T_1 = and(a_recoded_rawIn_isSpecial, _a_recoded_rawIn_out_isNaN_T) @[rawFloatFromFN.scala 64:28]
    a_recoded_rawIn.isNaN <= _a_recoded_rawIn_out_isNaN_T_1 @[rawFloatFromFN.scala 64:15]
    node _a_recoded_rawIn_out_isInf_T = and(a_recoded_rawIn_isSpecial, a_recoded_rawIn_isZeroFractIn) @[rawFloatFromFN.scala 65:28]
    a_recoded_rawIn.isInf <= _a_recoded_rawIn_out_isInf_T @[rawFloatFromFN.scala 65:15]
    a_recoded_rawIn.isZero <= a_recoded_rawIn_isZero @[rawFloatFromFN.scala 66:16]
    a_recoded_rawIn.sign <= a_recoded_rawIn_sign @[rawFloatFromFN.scala 67:14]
    node _a_recoded_rawIn_out_sExp_T = bits(a_recoded_rawIn_adjustedExp, 8, 0) @[rawFloatFromFN.scala 68:28]
    node _a_recoded_rawIn_out_sExp_T_1 = cvt(_a_recoded_rawIn_out_sExp_T) @[rawFloatFromFN.scala 68:42]
    a_recoded_rawIn.sExp <= _a_recoded_rawIn_out_sExp_T_1 @[rawFloatFromFN.scala 68:14]
    node _a_recoded_rawIn_out_sig_T = eq(a_recoded_rawIn_isZero, UInt<1>("h0")) @[rawFloatFromFN.scala 70:19]
    node _a_recoded_rawIn_out_sig_T_1 = cat(UInt<1>("h0"), _a_recoded_rawIn_out_sig_T) @[rawFloatFromFN.scala 70:16]
    node _a_recoded_rawIn_out_sig_T_2 = mux(a_recoded_rawIn_isZeroExpIn, a_recoded_rawIn_subnormFract, a_recoded_rawIn_fractIn) @[rawFloatFromFN.scala 70:33]
    node _a_recoded_rawIn_out_sig_T_3 = cat(_a_recoded_rawIn_out_sig_T_1, _a_recoded_rawIn_out_sig_T_2) @[rawFloatFromFN.scala 70:27]
    a_recoded_rawIn.sig <= _a_recoded_rawIn_out_sig_T_3 @[rawFloatFromFN.scala 69:13]
    node _a_recoded_T = bits(a_recoded_rawIn.sExp, 8, 6) @[recFNFromFN.scala 48:50]
    node _a_recoded_T_1 = mux(a_recoded_rawIn.isZero, UInt<3>("h0"), _a_recoded_T) @[recFNFromFN.scala 48:15]
    node _a_recoded_T_2 = mux(a_recoded_rawIn.isNaN, UInt<1>("h1"), UInt<1>("h0")) @[recFNFromFN.scala 49:20]
    node _a_recoded_T_3 = or(_a_recoded_T_1, _a_recoded_T_2) @[recFNFromFN.scala 48:76]
    node _a_recoded_T_4 = cat(a_recoded_rawIn.sign, _a_recoded_T_3) @[recFNFromFN.scala 47:20]
    node _a_recoded_T_5 = bits(a_recoded_rawIn.sExp, 5, 0) @[recFNFromFN.scala 50:23]
    node _a_recoded_T_6 = cat(_a_recoded_T_4, _a_recoded_T_5) @[recFNFromFN.scala 49:45]
    node _a_recoded_T_7 = bits(a_recoded_rawIn.sig, 22, 0) @[recFNFromFN.scala 51:22]
    node a_recoded = cat(_a_recoded_T_6, _a_recoded_T_7) @[recFNFromFN.scala 50:41]
    node b_recoded_rawIn_sign = bits(io.b, 31, 31) @[rawFloatFromFN.scala 44:18]
    node b_recoded_rawIn_expIn = bits(io.b, 30, 23) @[rawFloatFromFN.scala 45:19]
    node b_recoded_rawIn_fractIn = bits(io.b, 22, 0) @[rawFloatFromFN.scala 46:21]
    node b_recoded_rawIn_isZeroExpIn = eq(b_recoded_rawIn_expIn, UInt<1>("h0")) @[rawFloatFromFN.scala 48:30]
    node b_recoded_rawIn_isZeroFractIn = eq(b_recoded_rawIn_fractIn, UInt<1>("h0")) @[rawFloatFromFN.scala 49:34]
    node _b_recoded_rawIn_normDist_T = bits(b_recoded_rawIn_fractIn, 0, 0) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_1 = bits(b_recoded_rawIn_fractIn, 1, 1) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_2 = bits(b_recoded_rawIn_fractIn, 2, 2) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_3 = bits(b_recoded_rawIn_fractIn, 3, 3) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_4 = bits(b_recoded_rawIn_fractIn, 4, 4) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_5 = bits(b_recoded_rawIn_fractIn, 5, 5) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_6 = bits(b_recoded_rawIn_fractIn, 6, 6) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_7 = bits(b_recoded_rawIn_fractIn, 7, 7) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_8 = bits(b_recoded_rawIn_fractIn, 8, 8) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_9 = bits(b_recoded_rawIn_fractIn, 9, 9) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_10 = bits(b_recoded_rawIn_fractIn, 10, 10) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_11 = bits(b_recoded_rawIn_fractIn, 11, 11) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_12 = bits(b_recoded_rawIn_fractIn, 12, 12) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_13 = bits(b_recoded_rawIn_fractIn, 13, 13) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_14 = bits(b_recoded_rawIn_fractIn, 14, 14) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_15 = bits(b_recoded_rawIn_fractIn, 15, 15) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_16 = bits(b_recoded_rawIn_fractIn, 16, 16) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_17 = bits(b_recoded_rawIn_fractIn, 17, 17) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_18 = bits(b_recoded_rawIn_fractIn, 18, 18) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_19 = bits(b_recoded_rawIn_fractIn, 19, 19) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_20 = bits(b_recoded_rawIn_fractIn, 20, 20) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_21 = bits(b_recoded_rawIn_fractIn, 21, 21) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_22 = bits(b_recoded_rawIn_fractIn, 22, 22) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_23 = mux(_b_recoded_rawIn_normDist_T_1, UInt<5>("h15"), UInt<5>("h16")) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_24 = mux(_b_recoded_rawIn_normDist_T_2, UInt<5>("h14"), _b_recoded_rawIn_normDist_T_23) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_25 = mux(_b_recoded_rawIn_normDist_T_3, UInt<5>("h13"), _b_recoded_rawIn_normDist_T_24) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_26 = mux(_b_recoded_rawIn_normDist_T_4, UInt<5>("h12"), _b_recoded_rawIn_normDist_T_25) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_27 = mux(_b_recoded_rawIn_normDist_T_5, UInt<5>("h11"), _b_recoded_rawIn_normDist_T_26) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_28 = mux(_b_recoded_rawIn_normDist_T_6, UInt<5>("h10"), _b_recoded_rawIn_normDist_T_27) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_29 = mux(_b_recoded_rawIn_normDist_T_7, UInt<4>("hf"), _b_recoded_rawIn_normDist_T_28) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_30 = mux(_b_recoded_rawIn_normDist_T_8, UInt<4>("he"), _b_recoded_rawIn_normDist_T_29) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_31 = mux(_b_recoded_rawIn_normDist_T_9, UInt<4>("hd"), _b_recoded_rawIn_normDist_T_30) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_32 = mux(_b_recoded_rawIn_normDist_T_10, UInt<4>("hc"), _b_recoded_rawIn_normDist_T_31) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_33 = mux(_b_recoded_rawIn_normDist_T_11, UInt<4>("hb"), _b_recoded_rawIn_normDist_T_32) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_34 = mux(_b_recoded_rawIn_normDist_T_12, UInt<4>("ha"), _b_recoded_rawIn_normDist_T_33) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_35 = mux(_b_recoded_rawIn_normDist_T_13, UInt<4>("h9"), _b_recoded_rawIn_normDist_T_34) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_36 = mux(_b_recoded_rawIn_normDist_T_14, UInt<4>("h8"), _b_recoded_rawIn_normDist_T_35) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_37 = mux(_b_recoded_rawIn_normDist_T_15, UInt<3>("h7"), _b_recoded_rawIn_normDist_T_36) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_38 = mux(_b_recoded_rawIn_normDist_T_16, UInt<3>("h6"), _b_recoded_rawIn_normDist_T_37) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_39 = mux(_b_recoded_rawIn_normDist_T_17, UInt<3>("h5"), _b_recoded_rawIn_normDist_T_38) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_40 = mux(_b_recoded_rawIn_normDist_T_18, UInt<3>("h4"), _b_recoded_rawIn_normDist_T_39) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_41 = mux(_b_recoded_rawIn_normDist_T_19, UInt<2>("h3"), _b_recoded_rawIn_normDist_T_40) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_42 = mux(_b_recoded_rawIn_normDist_T_20, UInt<2>("h2"), _b_recoded_rawIn_normDist_T_41) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_43 = mux(_b_recoded_rawIn_normDist_T_21, UInt<1>("h1"), _b_recoded_rawIn_normDist_T_42) @[Mux.scala 47:70]
    node b_recoded_rawIn_normDist = mux(_b_recoded_rawIn_normDist_T_22, UInt<1>("h0"), _b_recoded_rawIn_normDist_T_43) @[Mux.scala 47:70]
    node _b_recoded_rawIn_subnormFract_T = dshl(b_recoded_rawIn_fractIn, b_recoded_rawIn_normDist) @[rawFloatFromFN.scala 52:33]
    node _b_recoded_rawIn_subnormFract_T_1 = bits(_b_recoded_rawIn_subnormFract_T, 21, 0) @[rawFloatFromFN.scala 52:46]
    node b_recoded_rawIn_subnormFract = shl(_b_recoded_rawIn_subnormFract_T_1, 1) @[rawFloatFromFN.scala 52:64]
    node _b_recoded_rawIn_adjustedExp_T = xor(b_recoded_rawIn_normDist, UInt<9>("h1ff")) @[rawFloatFromFN.scala 55:18]
    node _b_recoded_rawIn_adjustedExp_T_1 = mux(b_recoded_rawIn_isZeroExpIn, _b_recoded_rawIn_adjustedExp_T, b_recoded_rawIn_expIn) @[rawFloatFromFN.scala 54:10]
    node _b_recoded_rawIn_adjustedExp_T_2 = mux(b_recoded_rawIn_isZeroExpIn, UInt<2>("h2"), UInt<1>("h1")) @[rawFloatFromFN.scala 58:14]
    node _b_recoded_rawIn_adjustedExp_T_3 = or(UInt<8>("h80"), _b_recoded_rawIn_adjustedExp_T_2) @[rawFloatFromFN.scala 58:9]
    node _b_recoded_rawIn_adjustedExp_T_4 = add(_b_recoded_rawIn_adjustedExp_T_1, _b_recoded_rawIn_adjustedExp_T_3) @[rawFloatFromFN.scala 57:9]
    node b_recoded_rawIn_adjustedExp = tail(_b_recoded_rawIn_adjustedExp_T_4, 1) @[rawFloatFromFN.scala 57:9]
    node b_recoded_rawIn_isZero = and(b_recoded_rawIn_isZeroExpIn, b_recoded_rawIn_isZeroFractIn) @[rawFloatFromFN.scala 60:30]
    node _b_recoded_rawIn_isSpecial_T = bits(b_recoded_rawIn_adjustedExp, 8, 7) @[rawFloatFromFN.scala 61:32]
    node b_recoded_rawIn_isSpecial = eq(_b_recoded_rawIn_isSpecial_T, UInt<2>("h3")) @[rawFloatFromFN.scala 61:57]
    wire b_recoded_rawIn : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>} @[rawFloatFromFN.scala 63:19]
    node _b_recoded_rawIn_out_isNaN_T = eq(b_recoded_rawIn_isZeroFractIn, UInt<1>("h0")) @[rawFloatFromFN.scala 64:31]
    node _b_recoded_rawIn_out_isNaN_T_1 = and(b_recoded_rawIn_isSpecial, _b_recoded_rawIn_out_isNaN_T) @[rawFloatFromFN.scala 64:28]
    b_recoded_rawIn.isNaN <= _b_recoded_rawIn_out_isNaN_T_1 @[rawFloatFromFN.scala 64:15]
    node _b_recoded_rawIn_out_isInf_T = and(b_recoded_rawIn_isSpecial, b_recoded_rawIn_isZeroFractIn) @[rawFloatFromFN.scala 65:28]
    b_recoded_rawIn.isInf <= _b_recoded_rawIn_out_isInf_T @[rawFloatFromFN.scala 65:15]
    b_recoded_rawIn.isZero <= b_recoded_rawIn_isZero @[rawFloatFromFN.scala 66:16]
    b_recoded_rawIn.sign <= b_recoded_rawIn_sign @[rawFloatFromFN.scala 67:14]
    node _b_recoded_rawIn_out_sExp_T = bits(b_recoded_rawIn_adjustedExp, 8, 0) @[rawFloatFromFN.scala 68:28]
    node _b_recoded_rawIn_out_sExp_T_1 = cvt(_b_recoded_rawIn_out_sExp_T) @[rawFloatFromFN.scala 68:42]
    b_recoded_rawIn.sExp <= _b_recoded_rawIn_out_sExp_T_1 @[rawFloatFromFN.scala 68:14]
    node _b_recoded_rawIn_out_sig_T = eq(b_recoded_rawIn_isZero, UInt<1>("h0")) @[rawFloatFromFN.scala 70:19]
    node _b_recoded_rawIn_out_sig_T_1 = cat(UInt<1>("h0"), _b_recoded_rawIn_out_sig_T) @[rawFloatFromFN.scala 70:16]
    node _b_recoded_rawIn_out_sig_T_2 = mux(b_recoded_rawIn_isZeroExpIn, b_recoded_rawIn_subnormFract, b_recoded_rawIn_fractIn) @[rawFloatFromFN.scala 70:33]
    node _b_recoded_rawIn_out_sig_T_3 = cat(_b_recoded_rawIn_out_sig_T_1, _b_recoded_rawIn_out_sig_T_2) @[rawFloatFromFN.scala 70:27]
    b_recoded_rawIn.sig <= _b_recoded_rawIn_out_sig_T_3 @[rawFloatFromFN.scala 69:13]
    node _b_recoded_T = bits(b_recoded_rawIn.sExp, 8, 6) @[recFNFromFN.scala 48:50]
    node _b_recoded_T_1 = mux(b_recoded_rawIn.isZero, UInt<3>("h0"), _b_recoded_T) @[recFNFromFN.scala 48:15]
    node _b_recoded_T_2 = mux(b_recoded_rawIn.isNaN, UInt<1>("h1"), UInt<1>("h0")) @[recFNFromFN.scala 49:20]
    node _b_recoded_T_3 = or(_b_recoded_T_1, _b_recoded_T_2) @[recFNFromFN.scala 48:76]
    node _b_recoded_T_4 = cat(b_recoded_rawIn.sign, _b_recoded_T_3) @[recFNFromFN.scala 47:20]
    node _b_recoded_T_5 = bits(b_recoded_rawIn.sExp, 5, 0) @[recFNFromFN.scala 50:23]
    node _b_recoded_T_6 = cat(_b_recoded_T_4, _b_recoded_T_5) @[recFNFromFN.scala 49:45]
    node _b_recoded_T_7 = bits(b_recoded_rawIn.sig, 22, 0) @[recFNFromFN.scala 51:22]
    node b_recoded = cat(_b_recoded_T_6, _b_recoded_T_7) @[recFNFromFN.scala 50:41]
    mulRecFN.io.a <= a_recoded @[FPU.scala 95:19]
    mulRecFN.io.b <= b_recoded @[FPU.scala 96:19]
    mulRecFN.io.roundingMode <= UInt<3>("h0") @[FPU.scala 97:30]
    mulRecFN.io.detectTininess <= UInt<1>("h1") @[FPU.scala 98:32]
    node io_result_rawIn_exp = bits(mulRecFN.io.out, 31, 23) @[rawFloatFromRecFN.scala 51:21]
    node _io_result_rawIn_isZero_T = bits(io_result_rawIn_exp, 8, 6) @[rawFloatFromRecFN.scala 52:28]
    node io_result_rawIn_isZero = eq(_io_result_rawIn_isZero_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 52:53]
    node _io_result_rawIn_isSpecial_T = bits(io_result_rawIn_exp, 8, 7) @[rawFloatFromRecFN.scala 53:28]
    node io_result_rawIn_isSpecial = eq(_io_result_rawIn_isSpecial_T, UInt<2>("h3")) @[rawFloatFromRecFN.scala 53:53]
    wire io_result_rawIn : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>} @[rawFloatFromRecFN.scala 55:23]
    node _io_result_rawIn_out_isNaN_T = bits(io_result_rawIn_exp, 6, 6) @[rawFloatFromRecFN.scala 56:41]
    node _io_result_rawIn_out_isNaN_T_1 = and(io_result_rawIn_isSpecial, _io_result_rawIn_out_isNaN_T) @[rawFloatFromRecFN.scala 56:33]
    io_result_rawIn.isNaN <= _io_result_rawIn_out_isNaN_T_1 @[rawFloatFromRecFN.scala 56:20]
    node _io_result_rawIn_out_isInf_T = bits(io_result_rawIn_exp, 6, 6) @[rawFloatFromRecFN.scala 57:41]
    node _io_result_rawIn_out_isInf_T_1 = eq(_io_result_rawIn_out_isInf_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 57:36]
    node _io_result_rawIn_out_isInf_T_2 = and(io_result_rawIn_isSpecial, _io_result_rawIn_out_isInf_T_1) @[rawFloatFromRecFN.scala 57:33]
    io_result_rawIn.isInf <= _io_result_rawIn_out_isInf_T_2 @[rawFloatFromRecFN.scala 57:20]
    io_result_rawIn.isZero <= io_result_rawIn_isZero @[rawFloatFromRecFN.scala 58:20]
    node _io_result_rawIn_out_sign_T = bits(mulRecFN.io.out, 32, 32) @[rawFloatFromRecFN.scala 59:25]
    io_result_rawIn.sign <= _io_result_rawIn_out_sign_T @[rawFloatFromRecFN.scala 59:20]
    node _io_result_rawIn_out_sExp_T = cvt(io_result_rawIn_exp) @[rawFloatFromRecFN.scala 60:27]
    io_result_rawIn.sExp <= _io_result_rawIn_out_sExp_T @[rawFloatFromRecFN.scala 60:20]
    node _io_result_rawIn_out_sig_T = eq(io_result_rawIn_isZero, UInt<1>("h0")) @[rawFloatFromRecFN.scala 61:35]
    node _io_result_rawIn_out_sig_T_1 = cat(UInt<1>("h0"), _io_result_rawIn_out_sig_T) @[rawFloatFromRecFN.scala 61:32]
    node _io_result_rawIn_out_sig_T_2 = bits(mulRecFN.io.out, 22, 0) @[rawFloatFromRecFN.scala 61:49]
    node _io_result_rawIn_out_sig_T_3 = cat(_io_result_rawIn_out_sig_T_1, _io_result_rawIn_out_sig_T_2) @[rawFloatFromRecFN.scala 61:44]
    io_result_rawIn.sig <= _io_result_rawIn_out_sig_T_3 @[rawFloatFromRecFN.scala 61:20]
    node io_result_isSubnormal = lt(io_result_rawIn.sExp, asSInt(UInt<9>("h82"))) @[fNFromRecFN.scala 51:38]
    node _io_result_denormShiftDist_T = bits(io_result_rawIn.sExp, 4, 0) @[fNFromRecFN.scala 52:47]
    node _io_result_denormShiftDist_T_1 = sub(UInt<1>("h1"), _io_result_denormShiftDist_T) @[fNFromRecFN.scala 52:35]
    node io_result_denormShiftDist = tail(_io_result_denormShiftDist_T_1, 1) @[fNFromRecFN.scala 52:35]
    node _io_result_denormFract_T = shr(io_result_rawIn.sig, 1) @[fNFromRecFN.scala 53:38]
    node _io_result_denormFract_T_1 = dshr(_io_result_denormFract_T, io_result_denormShiftDist) @[fNFromRecFN.scala 53:42]
    node io_result_denormFract = bits(_io_result_denormFract_T_1, 22, 0) @[fNFromRecFN.scala 53:60]
    node _io_result_expOut_T = bits(io_result_rawIn.sExp, 7, 0) @[fNFromRecFN.scala 58:27]
    node _io_result_expOut_T_1 = sub(_io_result_expOut_T, UInt<8>("h81")) @[fNFromRecFN.scala 58:45]
    node _io_result_expOut_T_2 = tail(_io_result_expOut_T_1, 1) @[fNFromRecFN.scala 58:45]
    node _io_result_expOut_T_3 = mux(io_result_isSubnormal, UInt<1>("h0"), _io_result_expOut_T_2) @[fNFromRecFN.scala 56:16]
    node _io_result_expOut_T_4 = or(io_result_rawIn.isNaN, io_result_rawIn.isInf) @[fNFromRecFN.scala 60:44]
    node _io_result_expOut_T_5 = bits(_io_result_expOut_T_4, 0, 0) @[Bitwise.scala 77:15]
    node _io_result_expOut_T_6 = mux(_io_result_expOut_T_5, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 77:12]
    node io_result_expOut = or(_io_result_expOut_T_3, _io_result_expOut_T_6) @[fNFromRecFN.scala 60:15]
    node _io_result_fractOut_T = bits(io_result_rawIn.sig, 22, 0) @[fNFromRecFN.scala 64:48]
    node _io_result_fractOut_T_1 = mux(io_result_rawIn.isInf, UInt<1>("h0"), _io_result_fractOut_T) @[fNFromRecFN.scala 64:20]
    node io_result_fractOut = mux(io_result_isSubnormal, io_result_denormFract, _io_result_fractOut_T_1) @[fNFromRecFN.scala 62:16]
    node io_result_hi = cat(io_result_rawIn.sign, io_result_expOut) @[Cat.scala 33:92]
    node _io_result_T = cat(io_result_hi, io_result_fractOut) @[Cat.scala 33:92]
    io.result <= _io_result_T @[FPU.scala 101:15]

  module MulFullRawFN_5 :
    output io : { flip a : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>}, flip b : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>}, invalidExc : UInt<1>, rawOut : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<48>}}

    node _notSigNaN_invalidExc_T = and(io.a.isInf, io.b.isZero) @[MulRecFN.scala 58:44]
    node _notSigNaN_invalidExc_T_1 = and(io.a.isZero, io.b.isInf) @[MulRecFN.scala 58:76]
    node notSigNaN_invalidExc = or(_notSigNaN_invalidExc_T, _notSigNaN_invalidExc_T_1) @[MulRecFN.scala 58:60]
    node notNaN_isInfOut = or(io.a.isInf, io.b.isInf) @[MulRecFN.scala 59:38]
    node notNaN_isZeroOut = or(io.a.isZero, io.b.isZero) @[MulRecFN.scala 60:40]
    node notNaN_signOut = xor(io.a.sign, io.b.sign) @[MulRecFN.scala 61:36]
    node _common_sExpOut_T = add(io.a.sExp, io.b.sExp) @[MulRecFN.scala 62:36]
    node _common_sExpOut_T_1 = tail(_common_sExpOut_T, 1) @[MulRecFN.scala 62:36]
    node _common_sExpOut_T_2 = asSInt(_common_sExpOut_T_1) @[MulRecFN.scala 62:36]
    node _common_sExpOut_T_3 = sub(_common_sExpOut_T_2, asSInt(UInt<10>("h100"))) @[MulRecFN.scala 62:48]
    node _common_sExpOut_T_4 = tail(_common_sExpOut_T_3, 1) @[MulRecFN.scala 62:48]
    node common_sExpOut = asSInt(_common_sExpOut_T_4) @[MulRecFN.scala 62:48]
    node _common_sigOut_T = mul(io.a.sig, io.b.sig) @[MulRecFN.scala 63:35]
    node common_sigOut = bits(_common_sigOut_T, 47, 0) @[MulRecFN.scala 63:46]
    node _io_invalidExc_T = bits(io.a.sig, 22, 22) @[common.scala 82:56]
    node _io_invalidExc_T_1 = eq(_io_invalidExc_T, UInt<1>("h0")) @[common.scala 82:49]
    node _io_invalidExc_T_2 = and(io.a.isNaN, _io_invalidExc_T_1) @[common.scala 82:46]
    node _io_invalidExc_T_3 = bits(io.b.sig, 22, 22) @[common.scala 82:56]
    node _io_invalidExc_T_4 = eq(_io_invalidExc_T_3, UInt<1>("h0")) @[common.scala 82:49]
    node _io_invalidExc_T_5 = and(io.b.isNaN, _io_invalidExc_T_4) @[common.scala 82:46]
    node _io_invalidExc_T_6 = or(_io_invalidExc_T_2, _io_invalidExc_T_5) @[MulRecFN.scala 66:45]
    node _io_invalidExc_T_7 = or(_io_invalidExc_T_6, notSigNaN_invalidExc) @[MulRecFN.scala 66:71]
    io.invalidExc <= _io_invalidExc_T_7 @[MulRecFN.scala 66:19]
    io.rawOut.isInf <= notNaN_isInfOut @[MulRecFN.scala 67:21]
    io.rawOut.isZero <= notNaN_isZeroOut @[MulRecFN.scala 68:22]
    io.rawOut.sExp <= common_sExpOut @[MulRecFN.scala 69:20]
    node _io_rawOut_isNaN_T = or(io.a.isNaN, io.b.isNaN) @[MulRecFN.scala 70:35]
    io.rawOut.isNaN <= _io_rawOut_isNaN_T @[MulRecFN.scala 70:21]
    io.rawOut.sign <= notNaN_signOut @[MulRecFN.scala 71:20]
    io.rawOut.sig <= common_sigOut @[MulRecFN.scala 72:19]

  module MulRawFN_5 :
    output io : { flip a : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>}, flip b : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>}, invalidExc : UInt<1>, rawOut : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<27>}}

    inst mulFullRaw of MulFullRawFN_5 @[MulRecFN.scala 84:28]
    mulFullRaw.io.a.sig <= io.a.sig @[MulRecFN.scala 86:21]
    mulFullRaw.io.a.sExp <= io.a.sExp @[MulRecFN.scala 86:21]
    mulFullRaw.io.a.sign <= io.a.sign @[MulRecFN.scala 86:21]
    mulFullRaw.io.a.isZero <= io.a.isZero @[MulRecFN.scala 86:21]
    mulFullRaw.io.a.isInf <= io.a.isInf @[MulRecFN.scala 86:21]
    mulFullRaw.io.a.isNaN <= io.a.isNaN @[MulRecFN.scala 86:21]
    mulFullRaw.io.b.sig <= io.b.sig @[MulRecFN.scala 87:21]
    mulFullRaw.io.b.sExp <= io.b.sExp @[MulRecFN.scala 87:21]
    mulFullRaw.io.b.sign <= io.b.sign @[MulRecFN.scala 87:21]
    mulFullRaw.io.b.isZero <= io.b.isZero @[MulRecFN.scala 87:21]
    mulFullRaw.io.b.isInf <= io.b.isInf @[MulRecFN.scala 87:21]
    mulFullRaw.io.b.isNaN <= io.b.isNaN @[MulRecFN.scala 87:21]
    io.invalidExc <= mulFullRaw.io.invalidExc @[MulRecFN.scala 89:19]
    io.rawOut <= mulFullRaw.io.rawOut @[MulRecFN.scala 90:15]
    node _io_rawOut_sig_T = shr(mulFullRaw.io.rawOut.sig, 22) @[MulRecFN.scala 93:15]
    node _io_rawOut_sig_T_1 = bits(mulFullRaw.io.rawOut.sig, 21, 0) @[MulRecFN.scala 93:37]
    node _io_rawOut_sig_T_2 = orr(_io_rawOut_sig_T_1) @[MulRecFN.scala 93:55]
    node _io_rawOut_sig_T_3 = cat(_io_rawOut_sig_T, _io_rawOut_sig_T_2) @[Cat.scala 33:92]
    io.rawOut.sig <= _io_rawOut_sig_T_3 @[MulRecFN.scala 91:19]

  module RoundAnyRawFNToRecFN_ie8_is26_oe8_os24_6 :
    output io : { flip invalidExc : UInt<1>, flip infiniteExc : UInt<1>, flip in : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<27>}, flip roundingMode : UInt<3>, flip detectTininess : UInt<1>, out : UInt<33>, exceptionFlags : UInt<5>}

    node roundingMode_near_even = eq(io.roundingMode, UInt<3>("h0")) @[RoundAnyRawFNToRecFN.scala 90:53]
    node roundingMode_minMag = eq(io.roundingMode, UInt<3>("h1")) @[RoundAnyRawFNToRecFN.scala 91:53]
    node roundingMode_min = eq(io.roundingMode, UInt<3>("h2")) @[RoundAnyRawFNToRecFN.scala 92:53]
    node roundingMode_max = eq(io.roundingMode, UInt<3>("h3")) @[RoundAnyRawFNToRecFN.scala 93:53]
    node roundingMode_near_maxMag = eq(io.roundingMode, UInt<3>("h4")) @[RoundAnyRawFNToRecFN.scala 94:53]
    node roundingMode_odd = eq(io.roundingMode, UInt<3>("h6")) @[RoundAnyRawFNToRecFN.scala 95:53]
    node _roundMagUp_T = and(roundingMode_min, io.in.sign) @[RoundAnyRawFNToRecFN.scala 98:27]
    node _roundMagUp_T_1 = eq(io.in.sign, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 98:66]
    node _roundMagUp_T_2 = and(roundingMode_max, _roundMagUp_T_1) @[RoundAnyRawFNToRecFN.scala 98:63]
    node roundMagUp = or(_roundMagUp_T, _roundMagUp_T_2) @[RoundAnyRawFNToRecFN.scala 98:42]
    node adjustedSig = shl(io.in.sig, 0) @[RoundAnyRawFNToRecFN.scala 114:22]
    node doShiftSigDown1 = bits(adjustedSig, 26, 26) @[RoundAnyRawFNToRecFN.scala 120:57]
    wire common_expOut : UInt<9> @[RoundAnyRawFNToRecFN.scala 122:31]
    wire common_fractOut : UInt<23> @[RoundAnyRawFNToRecFN.scala 123:31]
    wire common_overflow : UInt<1> @[RoundAnyRawFNToRecFN.scala 124:37]
    wire common_totalUnderflow : UInt<1> @[RoundAnyRawFNToRecFN.scala 125:37]
    wire common_underflow : UInt<1> @[RoundAnyRawFNToRecFN.scala 126:37]
    wire common_inexact : UInt<1> @[RoundAnyRawFNToRecFN.scala 127:37]
    node _roundMask_T = bits(io.in.sExp, 8, 0) @[RoundAnyRawFNToRecFN.scala 156:37]
    node _roundMask_T_1 = not(_roundMask_T) @[primitives.scala 52:21]
    node roundMask_msb = bits(_roundMask_T_1, 8, 8) @[primitives.scala 58:25]
    node roundMask_lsbs = bits(_roundMask_T_1, 7, 0) @[primitives.scala 59:26]
    node roundMask_msb_1 = bits(roundMask_lsbs, 7, 7) @[primitives.scala 58:25]
    node roundMask_lsbs_1 = bits(roundMask_lsbs, 6, 0) @[primitives.scala 59:26]
    node roundMask_msb_2 = bits(roundMask_lsbs_1, 6, 6) @[primitives.scala 58:25]
    node roundMask_lsbs_2 = bits(roundMask_lsbs_1, 5, 0) @[primitives.scala 59:26]
    node roundMask_shift = dshr(asSInt(UInt<65>("h10000000000000000")), roundMask_lsbs_2) @[primitives.scala 76:56]
    node _roundMask_T_2 = bits(roundMask_shift, 63, 42) @[primitives.scala 78:22]
    node _roundMask_T_3 = bits(_roundMask_T_2, 15, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_4 = shl(UInt<8>("hff"), 8) @[Bitwise.scala 107:52]
    node _roundMask_T_5 = xor(UInt<16>("hffff"), _roundMask_T_4) @[Bitwise.scala 107:21]
    node _roundMask_T_6 = shr(_roundMask_T_3, 8) @[Bitwise.scala 108:21]
    node _roundMask_T_7 = and(_roundMask_T_6, _roundMask_T_5) @[Bitwise.scala 108:31]
    node _roundMask_T_8 = bits(_roundMask_T_3, 7, 0) @[Bitwise.scala 108:46]
    node _roundMask_T_9 = shl(_roundMask_T_8, 8) @[Bitwise.scala 108:70]
    node _roundMask_T_10 = not(_roundMask_T_5) @[Bitwise.scala 108:82]
    node _roundMask_T_11 = and(_roundMask_T_9, _roundMask_T_10) @[Bitwise.scala 108:80]
    node _roundMask_T_12 = or(_roundMask_T_7, _roundMask_T_11) @[Bitwise.scala 108:39]
    node _roundMask_T_13 = bits(_roundMask_T_5, 11, 0) @[Bitwise.scala 107:28]
    node _roundMask_T_14 = shl(_roundMask_T_13, 4) @[Bitwise.scala 107:52]
    node _roundMask_T_15 = xor(_roundMask_T_5, _roundMask_T_14) @[Bitwise.scala 107:21]
    node _roundMask_T_16 = shr(_roundMask_T_12, 4) @[Bitwise.scala 108:21]
    node _roundMask_T_17 = and(_roundMask_T_16, _roundMask_T_15) @[Bitwise.scala 108:31]
    node _roundMask_T_18 = bits(_roundMask_T_12, 11, 0) @[Bitwise.scala 108:46]
    node _roundMask_T_19 = shl(_roundMask_T_18, 4) @[Bitwise.scala 108:70]
    node _roundMask_T_20 = not(_roundMask_T_15) @[Bitwise.scala 108:82]
    node _roundMask_T_21 = and(_roundMask_T_19, _roundMask_T_20) @[Bitwise.scala 108:80]
    node _roundMask_T_22 = or(_roundMask_T_17, _roundMask_T_21) @[Bitwise.scala 108:39]
    node _roundMask_T_23 = bits(_roundMask_T_15, 13, 0) @[Bitwise.scala 107:28]
    node _roundMask_T_24 = shl(_roundMask_T_23, 2) @[Bitwise.scala 107:52]
    node _roundMask_T_25 = xor(_roundMask_T_15, _roundMask_T_24) @[Bitwise.scala 107:21]
    node _roundMask_T_26 = shr(_roundMask_T_22, 2) @[Bitwise.scala 108:21]
    node _roundMask_T_27 = and(_roundMask_T_26, _roundMask_T_25) @[Bitwise.scala 108:31]
    node _roundMask_T_28 = bits(_roundMask_T_22, 13, 0) @[Bitwise.scala 108:46]
    node _roundMask_T_29 = shl(_roundMask_T_28, 2) @[Bitwise.scala 108:70]
    node _roundMask_T_30 = not(_roundMask_T_25) @[Bitwise.scala 108:82]
    node _roundMask_T_31 = and(_roundMask_T_29, _roundMask_T_30) @[Bitwise.scala 108:80]
    node _roundMask_T_32 = or(_roundMask_T_27, _roundMask_T_31) @[Bitwise.scala 108:39]
    node _roundMask_T_33 = bits(_roundMask_T_25, 14, 0) @[Bitwise.scala 107:28]
    node _roundMask_T_34 = shl(_roundMask_T_33, 1) @[Bitwise.scala 107:52]
    node _roundMask_T_35 = xor(_roundMask_T_25, _roundMask_T_34) @[Bitwise.scala 107:21]
    node _roundMask_T_36 = shr(_roundMask_T_32, 1) @[Bitwise.scala 108:21]
    node _roundMask_T_37 = and(_roundMask_T_36, _roundMask_T_35) @[Bitwise.scala 108:31]
    node _roundMask_T_38 = bits(_roundMask_T_32, 14, 0) @[Bitwise.scala 108:46]
    node _roundMask_T_39 = shl(_roundMask_T_38, 1) @[Bitwise.scala 108:70]
    node _roundMask_T_40 = not(_roundMask_T_35) @[Bitwise.scala 108:82]
    node _roundMask_T_41 = and(_roundMask_T_39, _roundMask_T_40) @[Bitwise.scala 108:80]
    node _roundMask_T_42 = or(_roundMask_T_37, _roundMask_T_41) @[Bitwise.scala 108:39]
    node _roundMask_T_43 = bits(_roundMask_T_2, 21, 16) @[Bitwise.scala 114:47]
    node _roundMask_T_44 = bits(_roundMask_T_43, 3, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_45 = bits(_roundMask_T_44, 1, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_46 = bits(_roundMask_T_45, 0, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_47 = bits(_roundMask_T_45, 1, 1) @[Bitwise.scala 114:47]
    node _roundMask_T_48 = cat(_roundMask_T_46, _roundMask_T_47) @[Cat.scala 33:92]
    node _roundMask_T_49 = bits(_roundMask_T_44, 3, 2) @[Bitwise.scala 114:47]
    node _roundMask_T_50 = bits(_roundMask_T_49, 0, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_51 = bits(_roundMask_T_49, 1, 1) @[Bitwise.scala 114:47]
    node _roundMask_T_52 = cat(_roundMask_T_50, _roundMask_T_51) @[Cat.scala 33:92]
    node _roundMask_T_53 = cat(_roundMask_T_48, _roundMask_T_52) @[Cat.scala 33:92]
    node _roundMask_T_54 = bits(_roundMask_T_43, 5, 4) @[Bitwise.scala 114:47]
    node _roundMask_T_55 = bits(_roundMask_T_54, 0, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_56 = bits(_roundMask_T_54, 1, 1) @[Bitwise.scala 114:47]
    node _roundMask_T_57 = cat(_roundMask_T_55, _roundMask_T_56) @[Cat.scala 33:92]
    node _roundMask_T_58 = cat(_roundMask_T_53, _roundMask_T_57) @[Cat.scala 33:92]
    node _roundMask_T_59 = cat(_roundMask_T_42, _roundMask_T_58) @[Cat.scala 33:92]
    node _roundMask_T_60 = not(_roundMask_T_59) @[primitives.scala 73:32]
    node _roundMask_T_61 = mux(roundMask_msb_2, UInt<1>("h0"), _roundMask_T_60) @[primitives.scala 73:21]
    node _roundMask_T_62 = not(_roundMask_T_61) @[primitives.scala 73:17]
    node _roundMask_T_63 = cat(_roundMask_T_62, UInt<3>("h7")) @[primitives.scala 68:58]
    node roundMask_msb_3 = bits(roundMask_lsbs_1, 6, 6) @[primitives.scala 58:25]
    node roundMask_lsbs_3 = bits(roundMask_lsbs_1, 5, 0) @[primitives.scala 59:26]
    node roundMask_shift_1 = dshr(asSInt(UInt<65>("h10000000000000000")), roundMask_lsbs_3) @[primitives.scala 76:56]
    node _roundMask_T_64 = bits(roundMask_shift_1, 2, 0) @[primitives.scala 78:22]
    node _roundMask_T_65 = bits(_roundMask_T_64, 1, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_66 = bits(_roundMask_T_65, 0, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_67 = bits(_roundMask_T_65, 1, 1) @[Bitwise.scala 114:47]
    node _roundMask_T_68 = cat(_roundMask_T_66, _roundMask_T_67) @[Cat.scala 33:92]
    node _roundMask_T_69 = bits(_roundMask_T_64, 2, 2) @[Bitwise.scala 114:47]
    node _roundMask_T_70 = cat(_roundMask_T_68, _roundMask_T_69) @[Cat.scala 33:92]
    node _roundMask_T_71 = mux(roundMask_msb_3, _roundMask_T_70, UInt<1>("h0")) @[primitives.scala 62:24]
    node _roundMask_T_72 = mux(roundMask_msb_1, _roundMask_T_63, _roundMask_T_71) @[primitives.scala 67:24]
    node _roundMask_T_73 = mux(roundMask_msb, _roundMask_T_72, UInt<1>("h0")) @[primitives.scala 62:24]
    node _roundMask_T_74 = or(_roundMask_T_73, doShiftSigDown1) @[RoundAnyRawFNToRecFN.scala 159:23]
    node roundMask = cat(_roundMask_T_74, UInt<2>("h3")) @[RoundAnyRawFNToRecFN.scala 159:42]
    node _shiftedRoundMask_T = cat(UInt<1>("h0"), roundMask) @[RoundAnyRawFNToRecFN.scala 162:41]
    node shiftedRoundMask = shr(_shiftedRoundMask_T, 1) @[RoundAnyRawFNToRecFN.scala 162:53]
    node _roundPosMask_T = not(shiftedRoundMask) @[RoundAnyRawFNToRecFN.scala 163:28]
    node roundPosMask = and(_roundPosMask_T, roundMask) @[RoundAnyRawFNToRecFN.scala 163:46]
    node _roundPosBit_T = and(adjustedSig, roundPosMask) @[RoundAnyRawFNToRecFN.scala 164:40]
    node roundPosBit = orr(_roundPosBit_T) @[RoundAnyRawFNToRecFN.scala 164:56]
    node _anyRoundExtra_T = and(adjustedSig, shiftedRoundMask) @[RoundAnyRawFNToRecFN.scala 165:42]
    node anyRoundExtra = orr(_anyRoundExtra_T) @[RoundAnyRawFNToRecFN.scala 165:62]
    node anyRound = or(roundPosBit, anyRoundExtra) @[RoundAnyRawFNToRecFN.scala 166:36]
    node _roundIncr_T = or(roundingMode_near_even, roundingMode_near_maxMag) @[RoundAnyRawFNToRecFN.scala 169:38]
    node _roundIncr_T_1 = and(_roundIncr_T, roundPosBit) @[RoundAnyRawFNToRecFN.scala 169:67]
    node _roundIncr_T_2 = and(roundMagUp, anyRound) @[RoundAnyRawFNToRecFN.scala 171:29]
    node roundIncr = or(_roundIncr_T_1, _roundIncr_T_2) @[RoundAnyRawFNToRecFN.scala 170:31]
    node _roundedSig_T = or(adjustedSig, roundMask) @[RoundAnyRawFNToRecFN.scala 174:32]
    node _roundedSig_T_1 = shr(_roundedSig_T, 2) @[RoundAnyRawFNToRecFN.scala 174:44]
    node _roundedSig_T_2 = add(_roundedSig_T_1, UInt<1>("h1")) @[RoundAnyRawFNToRecFN.scala 174:49]
    node _roundedSig_T_3 = and(roundingMode_near_even, roundPosBit) @[RoundAnyRawFNToRecFN.scala 175:49]
    node _roundedSig_T_4 = eq(anyRoundExtra, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 176:30]
    node _roundedSig_T_5 = and(_roundedSig_T_3, _roundedSig_T_4) @[RoundAnyRawFNToRecFN.scala 175:64]
    node _roundedSig_T_6 = shr(roundMask, 1) @[RoundAnyRawFNToRecFN.scala 177:35]
    node _roundedSig_T_7 = mux(_roundedSig_T_5, _roundedSig_T_6, UInt<26>("h0")) @[RoundAnyRawFNToRecFN.scala 175:25]
    node _roundedSig_T_8 = not(_roundedSig_T_7) @[RoundAnyRawFNToRecFN.scala 175:21]
    node _roundedSig_T_9 = and(_roundedSig_T_2, _roundedSig_T_8) @[RoundAnyRawFNToRecFN.scala 174:57]
    node _roundedSig_T_10 = not(roundMask) @[RoundAnyRawFNToRecFN.scala 180:32]
    node _roundedSig_T_11 = and(adjustedSig, _roundedSig_T_10) @[RoundAnyRawFNToRecFN.scala 180:30]
    node _roundedSig_T_12 = shr(_roundedSig_T_11, 2) @[RoundAnyRawFNToRecFN.scala 180:43]
    node _roundedSig_T_13 = and(roundingMode_odd, anyRound) @[RoundAnyRawFNToRecFN.scala 181:42]
    node _roundedSig_T_14 = shr(roundPosMask, 1) @[RoundAnyRawFNToRecFN.scala 181:67]
    node _roundedSig_T_15 = mux(_roundedSig_T_13, _roundedSig_T_14, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 181:24]
    node _roundedSig_T_16 = or(_roundedSig_T_12, _roundedSig_T_15) @[RoundAnyRawFNToRecFN.scala 180:47]
    node roundedSig = mux(roundIncr, _roundedSig_T_9, _roundedSig_T_16) @[RoundAnyRawFNToRecFN.scala 173:16]
    node _sRoundedExp_T = shr(roundedSig, 24) @[RoundAnyRawFNToRecFN.scala 185:54]
    node _sRoundedExp_T_1 = cvt(_sRoundedExp_T) @[RoundAnyRawFNToRecFN.scala 185:76]
    node sRoundedExp = add(io.in.sExp, _sRoundedExp_T_1) @[RoundAnyRawFNToRecFN.scala 185:40]
    node _common_expOut_T = bits(sRoundedExp, 8, 0) @[RoundAnyRawFNToRecFN.scala 187:37]
    common_expOut <= _common_expOut_T @[RoundAnyRawFNToRecFN.scala 187:23]
    node _common_fractOut_T = bits(roundedSig, 23, 1) @[RoundAnyRawFNToRecFN.scala 190:27]
    node _common_fractOut_T_1 = bits(roundedSig, 22, 0) @[RoundAnyRawFNToRecFN.scala 191:27]
    node _common_fractOut_T_2 = mux(doShiftSigDown1, _common_fractOut_T, _common_fractOut_T_1) @[RoundAnyRawFNToRecFN.scala 189:16]
    common_fractOut <= _common_fractOut_T_2 @[RoundAnyRawFNToRecFN.scala 188:25]
    node _common_overflow_T = shr(sRoundedExp, 7) @[RoundAnyRawFNToRecFN.scala 196:30]
    node _common_overflow_T_1 = geq(_common_overflow_T, asSInt(UInt<3>("h3"))) @[RoundAnyRawFNToRecFN.scala 196:50]
    common_overflow <= _common_overflow_T_1 @[RoundAnyRawFNToRecFN.scala 193:25]
    node _common_totalUnderflow_T = lt(sRoundedExp, asSInt(UInt<8>("h6b"))) @[RoundAnyRawFNToRecFN.scala 200:31]
    common_totalUnderflow <= _common_totalUnderflow_T @[RoundAnyRawFNToRecFN.scala 197:31]
    node _unboundedRange_roundPosBit_T = bits(adjustedSig, 2, 2) @[RoundAnyRawFNToRecFN.scala 203:45]
    node _unboundedRange_roundPosBit_T_1 = bits(adjustedSig, 1, 1) @[RoundAnyRawFNToRecFN.scala 203:61]
    node unboundedRange_roundPosBit = mux(doShiftSigDown1, _unboundedRange_roundPosBit_T, _unboundedRange_roundPosBit_T_1) @[RoundAnyRawFNToRecFN.scala 203:16]
    node _unboundedRange_anyRound_T = bits(adjustedSig, 2, 2) @[RoundAnyRawFNToRecFN.scala 205:44]
    node _unboundedRange_anyRound_T_1 = and(doShiftSigDown1, _unboundedRange_anyRound_T) @[RoundAnyRawFNToRecFN.scala 205:30]
    node _unboundedRange_anyRound_T_2 = bits(adjustedSig, 1, 0) @[RoundAnyRawFNToRecFN.scala 205:63]
    node _unboundedRange_anyRound_T_3 = orr(_unboundedRange_anyRound_T_2) @[RoundAnyRawFNToRecFN.scala 205:70]
    node unboundedRange_anyRound = or(_unboundedRange_anyRound_T_1, _unboundedRange_anyRound_T_3) @[RoundAnyRawFNToRecFN.scala 205:49]
    node _unboundedRange_roundIncr_T = or(roundingMode_near_even, roundingMode_near_maxMag) @[RoundAnyRawFNToRecFN.scala 207:38]
    node _unboundedRange_roundIncr_T_1 = and(_unboundedRange_roundIncr_T, unboundedRange_roundPosBit) @[RoundAnyRawFNToRecFN.scala 207:67]
    node _unboundedRange_roundIncr_T_2 = and(roundMagUp, unboundedRange_anyRound) @[RoundAnyRawFNToRecFN.scala 209:29]
    node unboundedRange_roundIncr = or(_unboundedRange_roundIncr_T_1, _unboundedRange_roundIncr_T_2) @[RoundAnyRawFNToRecFN.scala 208:46]
    node _roundCarry_T = bits(roundedSig, 25, 25) @[RoundAnyRawFNToRecFN.scala 212:27]
    node _roundCarry_T_1 = bits(roundedSig, 24, 24) @[RoundAnyRawFNToRecFN.scala 213:27]
    node roundCarry = mux(doShiftSigDown1, _roundCarry_T, _roundCarry_T_1) @[RoundAnyRawFNToRecFN.scala 211:16]
    node _common_underflow_T = shr(io.in.sExp, 8) @[RoundAnyRawFNToRecFN.scala 220:49]
    node _common_underflow_T_1 = leq(_common_underflow_T, asSInt(UInt<1>("h0"))) @[RoundAnyRawFNToRecFN.scala 220:64]
    node _common_underflow_T_2 = and(anyRound, _common_underflow_T_1) @[RoundAnyRawFNToRecFN.scala 220:32]
    node _common_underflow_T_3 = bits(roundMask, 3, 3) @[RoundAnyRawFNToRecFN.scala 221:57]
    node _common_underflow_T_4 = bits(roundMask, 2, 2) @[RoundAnyRawFNToRecFN.scala 221:71]
    node _common_underflow_T_5 = mux(doShiftSigDown1, _common_underflow_T_3, _common_underflow_T_4) @[RoundAnyRawFNToRecFN.scala 221:30]
    node _common_underflow_T_6 = and(_common_underflow_T_2, _common_underflow_T_5) @[RoundAnyRawFNToRecFN.scala 220:72]
    node _common_underflow_T_7 = eq(io.detectTininess, UInt<1>("h1")) @[RoundAnyRawFNToRecFN.scala 222:49]
    node _common_underflow_T_8 = bits(roundMask, 4, 4) @[RoundAnyRawFNToRecFN.scala 224:49]
    node _common_underflow_T_9 = bits(roundMask, 3, 3) @[RoundAnyRawFNToRecFN.scala 225:49]
    node _common_underflow_T_10 = mux(doShiftSigDown1, _common_underflow_T_8, _common_underflow_T_9) @[RoundAnyRawFNToRecFN.scala 223:39]
    node _common_underflow_T_11 = eq(_common_underflow_T_10, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 223:34]
    node _common_underflow_T_12 = and(_common_underflow_T_7, _common_underflow_T_11) @[RoundAnyRawFNToRecFN.scala 222:77]
    node _common_underflow_T_13 = and(_common_underflow_T_12, roundCarry) @[RoundAnyRawFNToRecFN.scala 226:38]
    node _common_underflow_T_14 = and(_common_underflow_T_13, roundPosBit) @[RoundAnyRawFNToRecFN.scala 227:45]
    node _common_underflow_T_15 = and(_common_underflow_T_14, unboundedRange_roundIncr) @[RoundAnyRawFNToRecFN.scala 227:60]
    node _common_underflow_T_16 = eq(_common_underflow_T_15, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 222:27]
    node _common_underflow_T_17 = and(_common_underflow_T_6, _common_underflow_T_16) @[RoundAnyRawFNToRecFN.scala 221:76]
    node _common_underflow_T_18 = or(common_totalUnderflow, _common_underflow_T_17) @[RoundAnyRawFNToRecFN.scala 217:40]
    common_underflow <= _common_underflow_T_18 @[RoundAnyRawFNToRecFN.scala 215:26]
    node _common_inexact_T = or(common_totalUnderflow, anyRound) @[RoundAnyRawFNToRecFN.scala 230:49]
    common_inexact <= _common_inexact_T @[RoundAnyRawFNToRecFN.scala 230:24]
    node isNaNOut = or(io.invalidExc, io.in.isNaN) @[RoundAnyRawFNToRecFN.scala 235:34]
    node notNaN_isSpecialInfOut = or(io.infiniteExc, io.in.isInf) @[RoundAnyRawFNToRecFN.scala 236:49]
    node _commonCase_T = eq(isNaNOut, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 237:22]
    node _commonCase_T_1 = eq(notNaN_isSpecialInfOut, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 237:36]
    node _commonCase_T_2 = and(_commonCase_T, _commonCase_T_1) @[RoundAnyRawFNToRecFN.scala 237:33]
    node _commonCase_T_3 = eq(io.in.isZero, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 237:64]
    node commonCase = and(_commonCase_T_2, _commonCase_T_3) @[RoundAnyRawFNToRecFN.scala 237:61]
    node overflow = and(commonCase, common_overflow) @[RoundAnyRawFNToRecFN.scala 238:32]
    node underflow = and(commonCase, common_underflow) @[RoundAnyRawFNToRecFN.scala 239:32]
    node _inexact_T = and(commonCase, common_inexact) @[RoundAnyRawFNToRecFN.scala 240:43]
    node inexact = or(overflow, _inexact_T) @[RoundAnyRawFNToRecFN.scala 240:28]
    node _overflow_roundMagUp_T = or(roundingMode_near_even, roundingMode_near_maxMag) @[RoundAnyRawFNToRecFN.scala 243:32]
    node overflow_roundMagUp = or(_overflow_roundMagUp_T, roundMagUp) @[RoundAnyRawFNToRecFN.scala 243:60]
    node _pegMinNonzeroMagOut_T = and(commonCase, common_totalUnderflow) @[RoundAnyRawFNToRecFN.scala 245:20]
    node _pegMinNonzeroMagOut_T_1 = or(roundMagUp, roundingMode_odd) @[RoundAnyRawFNToRecFN.scala 245:60]
    node pegMinNonzeroMagOut = and(_pegMinNonzeroMagOut_T, _pegMinNonzeroMagOut_T_1) @[RoundAnyRawFNToRecFN.scala 245:45]
    node _pegMaxFiniteMagOut_T = eq(overflow_roundMagUp, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 246:42]
    node pegMaxFiniteMagOut = and(overflow, _pegMaxFiniteMagOut_T) @[RoundAnyRawFNToRecFN.scala 246:39]
    node _notNaN_isInfOut_T = and(overflow, overflow_roundMagUp) @[RoundAnyRawFNToRecFN.scala 248:45]
    node notNaN_isInfOut = or(notNaN_isSpecialInfOut, _notNaN_isInfOut_T) @[RoundAnyRawFNToRecFN.scala 248:32]
    node signOut = mux(isNaNOut, UInt<1>("h0"), io.in.sign) @[RoundAnyRawFNToRecFN.scala 250:22]
    node _expOut_T = or(io.in.isZero, common_totalUnderflow) @[RoundAnyRawFNToRecFN.scala 253:32]
    node _expOut_T_1 = mux(_expOut_T, UInt<9>("h1c0"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 253:18]
    node _expOut_T_2 = not(_expOut_T_1) @[RoundAnyRawFNToRecFN.scala 253:14]
    node _expOut_T_3 = and(common_expOut, _expOut_T_2) @[RoundAnyRawFNToRecFN.scala 252:24]
    node _expOut_T_4 = not(UInt<9>("h6b")) @[RoundAnyRawFNToRecFN.scala 258:19]
    node _expOut_T_5 = mux(pegMinNonzeroMagOut, _expOut_T_4, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 257:18]
    node _expOut_T_6 = not(_expOut_T_5) @[RoundAnyRawFNToRecFN.scala 257:14]
    node _expOut_T_7 = and(_expOut_T_3, _expOut_T_6) @[RoundAnyRawFNToRecFN.scala 256:17]
    node _expOut_T_8 = mux(pegMaxFiniteMagOut, UInt<9>("h80"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 261:18]
    node _expOut_T_9 = not(_expOut_T_8) @[RoundAnyRawFNToRecFN.scala 261:14]
    node _expOut_T_10 = and(_expOut_T_7, _expOut_T_9) @[RoundAnyRawFNToRecFN.scala 260:17]
    node _expOut_T_11 = mux(notNaN_isInfOut, UInt<9>("h40"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 265:18]
    node _expOut_T_12 = not(_expOut_T_11) @[RoundAnyRawFNToRecFN.scala 265:14]
    node _expOut_T_13 = and(_expOut_T_10, _expOut_T_12) @[RoundAnyRawFNToRecFN.scala 264:17]
    node _expOut_T_14 = mux(pegMinNonzeroMagOut, UInt<9>("h6b"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 269:16]
    node _expOut_T_15 = or(_expOut_T_13, _expOut_T_14) @[RoundAnyRawFNToRecFN.scala 268:18]
    node _expOut_T_16 = mux(pegMaxFiniteMagOut, UInt<9>("h17f"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 273:16]
    node _expOut_T_17 = or(_expOut_T_15, _expOut_T_16) @[RoundAnyRawFNToRecFN.scala 272:15]
    node _expOut_T_18 = mux(notNaN_isInfOut, UInt<9>("h180"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 277:16]
    node _expOut_T_19 = or(_expOut_T_17, _expOut_T_18) @[RoundAnyRawFNToRecFN.scala 276:15]
    node _expOut_T_20 = mux(isNaNOut, UInt<9>("h1c0"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 278:16]
    node expOut = or(_expOut_T_19, _expOut_T_20) @[RoundAnyRawFNToRecFN.scala 277:73]
    node _fractOut_T = or(isNaNOut, io.in.isZero) @[RoundAnyRawFNToRecFN.scala 280:22]
    node _fractOut_T_1 = or(_fractOut_T, common_totalUnderflow) @[RoundAnyRawFNToRecFN.scala 280:38]
    node _fractOut_T_2 = mux(isNaNOut, UInt<23>("h400000"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 281:16]
    node _fractOut_T_3 = mux(_fractOut_T_1, _fractOut_T_2, common_fractOut) @[RoundAnyRawFNToRecFN.scala 280:12]
    node _fractOut_T_4 = bits(pegMaxFiniteMagOut, 0, 0) @[Bitwise.scala 77:15]
    node _fractOut_T_5 = mux(_fractOut_T_4, UInt<23>("h7fffff"), UInt<23>("h0")) @[Bitwise.scala 77:12]
    node fractOut = or(_fractOut_T_3, _fractOut_T_5) @[RoundAnyRawFNToRecFN.scala 283:11]
    node _io_out_T = cat(signOut, expOut) @[RoundAnyRawFNToRecFN.scala 286:23]
    node _io_out_T_1 = cat(_io_out_T, fractOut) @[RoundAnyRawFNToRecFN.scala 286:33]
    io.out <= _io_out_T_1 @[RoundAnyRawFNToRecFN.scala 286:12]
    node _io_exceptionFlags_T = cat(io.invalidExc, io.infiniteExc) @[RoundAnyRawFNToRecFN.scala 288:23]
    node _io_exceptionFlags_T_1 = cat(_io_exceptionFlags_T, overflow) @[RoundAnyRawFNToRecFN.scala 288:41]
    node _io_exceptionFlags_T_2 = cat(_io_exceptionFlags_T_1, underflow) @[RoundAnyRawFNToRecFN.scala 288:53]
    node _io_exceptionFlags_T_3 = cat(_io_exceptionFlags_T_2, inexact) @[RoundAnyRawFNToRecFN.scala 288:66]
    io.exceptionFlags <= _io_exceptionFlags_T_3 @[RoundAnyRawFNToRecFN.scala 287:23]

  module RoundRawFNToRecFN_e8_s24_6 :
    output io : { flip invalidExc : UInt<1>, flip infiniteExc : UInt<1>, flip in : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<27>}, flip roundingMode : UInt<3>, flip detectTininess : UInt<1>, out : UInt<33>, exceptionFlags : UInt<5>}

    inst roundAnyRawFNToRecFN of RoundAnyRawFNToRecFN_ie8_is26_oe8_os24_6 @[RoundAnyRawFNToRecFN.scala 310:15]
    roundAnyRawFNToRecFN.io.invalidExc <= io.invalidExc @[RoundAnyRawFNToRecFN.scala 313:44]
    roundAnyRawFNToRecFN.io.infiniteExc <= io.infiniteExc @[RoundAnyRawFNToRecFN.scala 314:44]
    roundAnyRawFNToRecFN.io.in.sig <= io.in.sig @[RoundAnyRawFNToRecFN.scala 315:44]
    roundAnyRawFNToRecFN.io.in.sExp <= io.in.sExp @[RoundAnyRawFNToRecFN.scala 315:44]
    roundAnyRawFNToRecFN.io.in.sign <= io.in.sign @[RoundAnyRawFNToRecFN.scala 315:44]
    roundAnyRawFNToRecFN.io.in.isZero <= io.in.isZero @[RoundAnyRawFNToRecFN.scala 315:44]
    roundAnyRawFNToRecFN.io.in.isInf <= io.in.isInf @[RoundAnyRawFNToRecFN.scala 315:44]
    roundAnyRawFNToRecFN.io.in.isNaN <= io.in.isNaN @[RoundAnyRawFNToRecFN.scala 315:44]
    roundAnyRawFNToRecFN.io.roundingMode <= io.roundingMode @[RoundAnyRawFNToRecFN.scala 316:44]
    roundAnyRawFNToRecFN.io.detectTininess <= io.detectTininess @[RoundAnyRawFNToRecFN.scala 317:44]
    io.out <= roundAnyRawFNToRecFN.io.out @[RoundAnyRawFNToRecFN.scala 318:23]
    io.exceptionFlags <= roundAnyRawFNToRecFN.io.exceptionFlags @[RoundAnyRawFNToRecFN.scala 319:23]

  module MulRecFN_5 :
    output io : { flip a : UInt<33>, flip b : UInt<33>, flip roundingMode : UInt<3>, flip detectTininess : UInt<1>, out : UInt<33>, exceptionFlags : UInt<5>}

    inst mulRawFN of MulRawFN_5 @[MulRecFN.scala 113:26]
    node mulRawFN_io_a_exp = bits(io.a, 31, 23) @[rawFloatFromRecFN.scala 51:21]
    node _mulRawFN_io_a_isZero_T = bits(mulRawFN_io_a_exp, 8, 6) @[rawFloatFromRecFN.scala 52:28]
    node mulRawFN_io_a_isZero = eq(_mulRawFN_io_a_isZero_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 52:53]
    node _mulRawFN_io_a_isSpecial_T = bits(mulRawFN_io_a_exp, 8, 7) @[rawFloatFromRecFN.scala 53:28]
    node mulRawFN_io_a_isSpecial = eq(_mulRawFN_io_a_isSpecial_T, UInt<2>("h3")) @[rawFloatFromRecFN.scala 53:53]
    wire mulRawFN_io_a_out : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>} @[rawFloatFromRecFN.scala 55:23]
    node _mulRawFN_io_a_out_isNaN_T = bits(mulRawFN_io_a_exp, 6, 6) @[rawFloatFromRecFN.scala 56:41]
    node _mulRawFN_io_a_out_isNaN_T_1 = and(mulRawFN_io_a_isSpecial, _mulRawFN_io_a_out_isNaN_T) @[rawFloatFromRecFN.scala 56:33]
    mulRawFN_io_a_out.isNaN <= _mulRawFN_io_a_out_isNaN_T_1 @[rawFloatFromRecFN.scala 56:20]
    node _mulRawFN_io_a_out_isInf_T = bits(mulRawFN_io_a_exp, 6, 6) @[rawFloatFromRecFN.scala 57:41]
    node _mulRawFN_io_a_out_isInf_T_1 = eq(_mulRawFN_io_a_out_isInf_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 57:36]
    node _mulRawFN_io_a_out_isInf_T_2 = and(mulRawFN_io_a_isSpecial, _mulRawFN_io_a_out_isInf_T_1) @[rawFloatFromRecFN.scala 57:33]
    mulRawFN_io_a_out.isInf <= _mulRawFN_io_a_out_isInf_T_2 @[rawFloatFromRecFN.scala 57:20]
    mulRawFN_io_a_out.isZero <= mulRawFN_io_a_isZero @[rawFloatFromRecFN.scala 58:20]
    node _mulRawFN_io_a_out_sign_T = bits(io.a, 32, 32) @[rawFloatFromRecFN.scala 59:25]
    mulRawFN_io_a_out.sign <= _mulRawFN_io_a_out_sign_T @[rawFloatFromRecFN.scala 59:20]
    node _mulRawFN_io_a_out_sExp_T = cvt(mulRawFN_io_a_exp) @[rawFloatFromRecFN.scala 60:27]
    mulRawFN_io_a_out.sExp <= _mulRawFN_io_a_out_sExp_T @[rawFloatFromRecFN.scala 60:20]
    node _mulRawFN_io_a_out_sig_T = eq(mulRawFN_io_a_isZero, UInt<1>("h0")) @[rawFloatFromRecFN.scala 61:35]
    node _mulRawFN_io_a_out_sig_T_1 = cat(UInt<1>("h0"), _mulRawFN_io_a_out_sig_T) @[rawFloatFromRecFN.scala 61:32]
    node _mulRawFN_io_a_out_sig_T_2 = bits(io.a, 22, 0) @[rawFloatFromRecFN.scala 61:49]
    node _mulRawFN_io_a_out_sig_T_3 = cat(_mulRawFN_io_a_out_sig_T_1, _mulRawFN_io_a_out_sig_T_2) @[rawFloatFromRecFN.scala 61:44]
    mulRawFN_io_a_out.sig <= _mulRawFN_io_a_out_sig_T_3 @[rawFloatFromRecFN.scala 61:20]
    mulRawFN.io.a.sig <= mulRawFN_io_a_out.sig @[MulRecFN.scala 115:19]
    mulRawFN.io.a.sExp <= mulRawFN_io_a_out.sExp @[MulRecFN.scala 115:19]
    mulRawFN.io.a.sign <= mulRawFN_io_a_out.sign @[MulRecFN.scala 115:19]
    mulRawFN.io.a.isZero <= mulRawFN_io_a_out.isZero @[MulRecFN.scala 115:19]
    mulRawFN.io.a.isInf <= mulRawFN_io_a_out.isInf @[MulRecFN.scala 115:19]
    mulRawFN.io.a.isNaN <= mulRawFN_io_a_out.isNaN @[MulRecFN.scala 115:19]
    node mulRawFN_io_b_exp = bits(io.b, 31, 23) @[rawFloatFromRecFN.scala 51:21]
    node _mulRawFN_io_b_isZero_T = bits(mulRawFN_io_b_exp, 8, 6) @[rawFloatFromRecFN.scala 52:28]
    node mulRawFN_io_b_isZero = eq(_mulRawFN_io_b_isZero_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 52:53]
    node _mulRawFN_io_b_isSpecial_T = bits(mulRawFN_io_b_exp, 8, 7) @[rawFloatFromRecFN.scala 53:28]
    node mulRawFN_io_b_isSpecial = eq(_mulRawFN_io_b_isSpecial_T, UInt<2>("h3")) @[rawFloatFromRecFN.scala 53:53]
    wire mulRawFN_io_b_out : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>} @[rawFloatFromRecFN.scala 55:23]
    node _mulRawFN_io_b_out_isNaN_T = bits(mulRawFN_io_b_exp, 6, 6) @[rawFloatFromRecFN.scala 56:41]
    node _mulRawFN_io_b_out_isNaN_T_1 = and(mulRawFN_io_b_isSpecial, _mulRawFN_io_b_out_isNaN_T) @[rawFloatFromRecFN.scala 56:33]
    mulRawFN_io_b_out.isNaN <= _mulRawFN_io_b_out_isNaN_T_1 @[rawFloatFromRecFN.scala 56:20]
    node _mulRawFN_io_b_out_isInf_T = bits(mulRawFN_io_b_exp, 6, 6) @[rawFloatFromRecFN.scala 57:41]
    node _mulRawFN_io_b_out_isInf_T_1 = eq(_mulRawFN_io_b_out_isInf_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 57:36]
    node _mulRawFN_io_b_out_isInf_T_2 = and(mulRawFN_io_b_isSpecial, _mulRawFN_io_b_out_isInf_T_1) @[rawFloatFromRecFN.scala 57:33]
    mulRawFN_io_b_out.isInf <= _mulRawFN_io_b_out_isInf_T_2 @[rawFloatFromRecFN.scala 57:20]
    mulRawFN_io_b_out.isZero <= mulRawFN_io_b_isZero @[rawFloatFromRecFN.scala 58:20]
    node _mulRawFN_io_b_out_sign_T = bits(io.b, 32, 32) @[rawFloatFromRecFN.scala 59:25]
    mulRawFN_io_b_out.sign <= _mulRawFN_io_b_out_sign_T @[rawFloatFromRecFN.scala 59:20]
    node _mulRawFN_io_b_out_sExp_T = cvt(mulRawFN_io_b_exp) @[rawFloatFromRecFN.scala 60:27]
    mulRawFN_io_b_out.sExp <= _mulRawFN_io_b_out_sExp_T @[rawFloatFromRecFN.scala 60:20]
    node _mulRawFN_io_b_out_sig_T = eq(mulRawFN_io_b_isZero, UInt<1>("h0")) @[rawFloatFromRecFN.scala 61:35]
    node _mulRawFN_io_b_out_sig_T_1 = cat(UInt<1>("h0"), _mulRawFN_io_b_out_sig_T) @[rawFloatFromRecFN.scala 61:32]
    node _mulRawFN_io_b_out_sig_T_2 = bits(io.b, 22, 0) @[rawFloatFromRecFN.scala 61:49]
    node _mulRawFN_io_b_out_sig_T_3 = cat(_mulRawFN_io_b_out_sig_T_1, _mulRawFN_io_b_out_sig_T_2) @[rawFloatFromRecFN.scala 61:44]
    mulRawFN_io_b_out.sig <= _mulRawFN_io_b_out_sig_T_3 @[rawFloatFromRecFN.scala 61:20]
    mulRawFN.io.b.sig <= mulRawFN_io_b_out.sig @[MulRecFN.scala 116:19]
    mulRawFN.io.b.sExp <= mulRawFN_io_b_out.sExp @[MulRecFN.scala 116:19]
    mulRawFN.io.b.sign <= mulRawFN_io_b_out.sign @[MulRecFN.scala 116:19]
    mulRawFN.io.b.isZero <= mulRawFN_io_b_out.isZero @[MulRecFN.scala 116:19]
    mulRawFN.io.b.isInf <= mulRawFN_io_b_out.isInf @[MulRecFN.scala 116:19]
    mulRawFN.io.b.isNaN <= mulRawFN_io_b_out.isNaN @[MulRecFN.scala 116:19]
    inst roundRawFNToRecFN of RoundRawFNToRecFN_e8_s24_6 @[MulRecFN.scala 121:15]
    roundRawFNToRecFN.io.invalidExc <= mulRawFN.io.invalidExc @[MulRecFN.scala 122:39]
    roundRawFNToRecFN.io.infiniteExc <= UInt<1>("h0") @[MulRecFN.scala 123:39]
    roundRawFNToRecFN.io.in.sig <= mulRawFN.io.rawOut.sig @[MulRecFN.scala 124:39]
    roundRawFNToRecFN.io.in.sExp <= mulRawFN.io.rawOut.sExp @[MulRecFN.scala 124:39]
    roundRawFNToRecFN.io.in.sign <= mulRawFN.io.rawOut.sign @[MulRecFN.scala 124:39]
    roundRawFNToRecFN.io.in.isZero <= mulRawFN.io.rawOut.isZero @[MulRecFN.scala 124:39]
    roundRawFNToRecFN.io.in.isInf <= mulRawFN.io.rawOut.isInf @[MulRecFN.scala 124:39]
    roundRawFNToRecFN.io.in.isNaN <= mulRawFN.io.rawOut.isNaN @[MulRecFN.scala 124:39]
    roundRawFNToRecFN.io.roundingMode <= io.roundingMode @[MulRecFN.scala 125:39]
    roundRawFNToRecFN.io.detectTininess <= io.detectTininess @[MulRecFN.scala 126:41]
    io.out <= roundRawFNToRecFN.io.out @[MulRecFN.scala 127:23]
    io.exceptionFlags <= roundRawFNToRecFN.io.exceptionFlags @[MulRecFN.scala 128:23]

  module FP32Multiplier_5 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<32>, flip b : UInt<32>, result : UInt<32>}

    inst mulRecFN of MulRecFN_5 @[FPU.scala 88:26]
    node a_recoded_rawIn_sign = bits(io.a, 31, 31) @[rawFloatFromFN.scala 44:18]
    node a_recoded_rawIn_expIn = bits(io.a, 30, 23) @[rawFloatFromFN.scala 45:19]
    node a_recoded_rawIn_fractIn = bits(io.a, 22, 0) @[rawFloatFromFN.scala 46:21]
    node a_recoded_rawIn_isZeroExpIn = eq(a_recoded_rawIn_expIn, UInt<1>("h0")) @[rawFloatFromFN.scala 48:30]
    node a_recoded_rawIn_isZeroFractIn = eq(a_recoded_rawIn_fractIn, UInt<1>("h0")) @[rawFloatFromFN.scala 49:34]
    node _a_recoded_rawIn_normDist_T = bits(a_recoded_rawIn_fractIn, 0, 0) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_1 = bits(a_recoded_rawIn_fractIn, 1, 1) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_2 = bits(a_recoded_rawIn_fractIn, 2, 2) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_3 = bits(a_recoded_rawIn_fractIn, 3, 3) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_4 = bits(a_recoded_rawIn_fractIn, 4, 4) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_5 = bits(a_recoded_rawIn_fractIn, 5, 5) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_6 = bits(a_recoded_rawIn_fractIn, 6, 6) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_7 = bits(a_recoded_rawIn_fractIn, 7, 7) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_8 = bits(a_recoded_rawIn_fractIn, 8, 8) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_9 = bits(a_recoded_rawIn_fractIn, 9, 9) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_10 = bits(a_recoded_rawIn_fractIn, 10, 10) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_11 = bits(a_recoded_rawIn_fractIn, 11, 11) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_12 = bits(a_recoded_rawIn_fractIn, 12, 12) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_13 = bits(a_recoded_rawIn_fractIn, 13, 13) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_14 = bits(a_recoded_rawIn_fractIn, 14, 14) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_15 = bits(a_recoded_rawIn_fractIn, 15, 15) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_16 = bits(a_recoded_rawIn_fractIn, 16, 16) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_17 = bits(a_recoded_rawIn_fractIn, 17, 17) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_18 = bits(a_recoded_rawIn_fractIn, 18, 18) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_19 = bits(a_recoded_rawIn_fractIn, 19, 19) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_20 = bits(a_recoded_rawIn_fractIn, 20, 20) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_21 = bits(a_recoded_rawIn_fractIn, 21, 21) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_22 = bits(a_recoded_rawIn_fractIn, 22, 22) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_23 = mux(_a_recoded_rawIn_normDist_T_1, UInt<5>("h15"), UInt<5>("h16")) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_24 = mux(_a_recoded_rawIn_normDist_T_2, UInt<5>("h14"), _a_recoded_rawIn_normDist_T_23) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_25 = mux(_a_recoded_rawIn_normDist_T_3, UInt<5>("h13"), _a_recoded_rawIn_normDist_T_24) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_26 = mux(_a_recoded_rawIn_normDist_T_4, UInt<5>("h12"), _a_recoded_rawIn_normDist_T_25) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_27 = mux(_a_recoded_rawIn_normDist_T_5, UInt<5>("h11"), _a_recoded_rawIn_normDist_T_26) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_28 = mux(_a_recoded_rawIn_normDist_T_6, UInt<5>("h10"), _a_recoded_rawIn_normDist_T_27) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_29 = mux(_a_recoded_rawIn_normDist_T_7, UInt<4>("hf"), _a_recoded_rawIn_normDist_T_28) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_30 = mux(_a_recoded_rawIn_normDist_T_8, UInt<4>("he"), _a_recoded_rawIn_normDist_T_29) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_31 = mux(_a_recoded_rawIn_normDist_T_9, UInt<4>("hd"), _a_recoded_rawIn_normDist_T_30) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_32 = mux(_a_recoded_rawIn_normDist_T_10, UInt<4>("hc"), _a_recoded_rawIn_normDist_T_31) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_33 = mux(_a_recoded_rawIn_normDist_T_11, UInt<4>("hb"), _a_recoded_rawIn_normDist_T_32) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_34 = mux(_a_recoded_rawIn_normDist_T_12, UInt<4>("ha"), _a_recoded_rawIn_normDist_T_33) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_35 = mux(_a_recoded_rawIn_normDist_T_13, UInt<4>("h9"), _a_recoded_rawIn_normDist_T_34) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_36 = mux(_a_recoded_rawIn_normDist_T_14, UInt<4>("h8"), _a_recoded_rawIn_normDist_T_35) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_37 = mux(_a_recoded_rawIn_normDist_T_15, UInt<3>("h7"), _a_recoded_rawIn_normDist_T_36) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_38 = mux(_a_recoded_rawIn_normDist_T_16, UInt<3>("h6"), _a_recoded_rawIn_normDist_T_37) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_39 = mux(_a_recoded_rawIn_normDist_T_17, UInt<3>("h5"), _a_recoded_rawIn_normDist_T_38) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_40 = mux(_a_recoded_rawIn_normDist_T_18, UInt<3>("h4"), _a_recoded_rawIn_normDist_T_39) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_41 = mux(_a_recoded_rawIn_normDist_T_19, UInt<2>("h3"), _a_recoded_rawIn_normDist_T_40) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_42 = mux(_a_recoded_rawIn_normDist_T_20, UInt<2>("h2"), _a_recoded_rawIn_normDist_T_41) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_43 = mux(_a_recoded_rawIn_normDist_T_21, UInt<1>("h1"), _a_recoded_rawIn_normDist_T_42) @[Mux.scala 47:70]
    node a_recoded_rawIn_normDist = mux(_a_recoded_rawIn_normDist_T_22, UInt<1>("h0"), _a_recoded_rawIn_normDist_T_43) @[Mux.scala 47:70]
    node _a_recoded_rawIn_subnormFract_T = dshl(a_recoded_rawIn_fractIn, a_recoded_rawIn_normDist) @[rawFloatFromFN.scala 52:33]
    node _a_recoded_rawIn_subnormFract_T_1 = bits(_a_recoded_rawIn_subnormFract_T, 21, 0) @[rawFloatFromFN.scala 52:46]
    node a_recoded_rawIn_subnormFract = shl(_a_recoded_rawIn_subnormFract_T_1, 1) @[rawFloatFromFN.scala 52:64]
    node _a_recoded_rawIn_adjustedExp_T = xor(a_recoded_rawIn_normDist, UInt<9>("h1ff")) @[rawFloatFromFN.scala 55:18]
    node _a_recoded_rawIn_adjustedExp_T_1 = mux(a_recoded_rawIn_isZeroExpIn, _a_recoded_rawIn_adjustedExp_T, a_recoded_rawIn_expIn) @[rawFloatFromFN.scala 54:10]
    node _a_recoded_rawIn_adjustedExp_T_2 = mux(a_recoded_rawIn_isZeroExpIn, UInt<2>("h2"), UInt<1>("h1")) @[rawFloatFromFN.scala 58:14]
    node _a_recoded_rawIn_adjustedExp_T_3 = or(UInt<8>("h80"), _a_recoded_rawIn_adjustedExp_T_2) @[rawFloatFromFN.scala 58:9]
    node _a_recoded_rawIn_adjustedExp_T_4 = add(_a_recoded_rawIn_adjustedExp_T_1, _a_recoded_rawIn_adjustedExp_T_3) @[rawFloatFromFN.scala 57:9]
    node a_recoded_rawIn_adjustedExp = tail(_a_recoded_rawIn_adjustedExp_T_4, 1) @[rawFloatFromFN.scala 57:9]
    node a_recoded_rawIn_isZero = and(a_recoded_rawIn_isZeroExpIn, a_recoded_rawIn_isZeroFractIn) @[rawFloatFromFN.scala 60:30]
    node _a_recoded_rawIn_isSpecial_T = bits(a_recoded_rawIn_adjustedExp, 8, 7) @[rawFloatFromFN.scala 61:32]
    node a_recoded_rawIn_isSpecial = eq(_a_recoded_rawIn_isSpecial_T, UInt<2>("h3")) @[rawFloatFromFN.scala 61:57]
    wire a_recoded_rawIn : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>} @[rawFloatFromFN.scala 63:19]
    node _a_recoded_rawIn_out_isNaN_T = eq(a_recoded_rawIn_isZeroFractIn, UInt<1>("h0")) @[rawFloatFromFN.scala 64:31]
    node _a_recoded_rawIn_out_isNaN_T_1 = and(a_recoded_rawIn_isSpecial, _a_recoded_rawIn_out_isNaN_T) @[rawFloatFromFN.scala 64:28]
    a_recoded_rawIn.isNaN <= _a_recoded_rawIn_out_isNaN_T_1 @[rawFloatFromFN.scala 64:15]
    node _a_recoded_rawIn_out_isInf_T = and(a_recoded_rawIn_isSpecial, a_recoded_rawIn_isZeroFractIn) @[rawFloatFromFN.scala 65:28]
    a_recoded_rawIn.isInf <= _a_recoded_rawIn_out_isInf_T @[rawFloatFromFN.scala 65:15]
    a_recoded_rawIn.isZero <= a_recoded_rawIn_isZero @[rawFloatFromFN.scala 66:16]
    a_recoded_rawIn.sign <= a_recoded_rawIn_sign @[rawFloatFromFN.scala 67:14]
    node _a_recoded_rawIn_out_sExp_T = bits(a_recoded_rawIn_adjustedExp, 8, 0) @[rawFloatFromFN.scala 68:28]
    node _a_recoded_rawIn_out_sExp_T_1 = cvt(_a_recoded_rawIn_out_sExp_T) @[rawFloatFromFN.scala 68:42]
    a_recoded_rawIn.sExp <= _a_recoded_rawIn_out_sExp_T_1 @[rawFloatFromFN.scala 68:14]
    node _a_recoded_rawIn_out_sig_T = eq(a_recoded_rawIn_isZero, UInt<1>("h0")) @[rawFloatFromFN.scala 70:19]
    node _a_recoded_rawIn_out_sig_T_1 = cat(UInt<1>("h0"), _a_recoded_rawIn_out_sig_T) @[rawFloatFromFN.scala 70:16]
    node _a_recoded_rawIn_out_sig_T_2 = mux(a_recoded_rawIn_isZeroExpIn, a_recoded_rawIn_subnormFract, a_recoded_rawIn_fractIn) @[rawFloatFromFN.scala 70:33]
    node _a_recoded_rawIn_out_sig_T_3 = cat(_a_recoded_rawIn_out_sig_T_1, _a_recoded_rawIn_out_sig_T_2) @[rawFloatFromFN.scala 70:27]
    a_recoded_rawIn.sig <= _a_recoded_rawIn_out_sig_T_3 @[rawFloatFromFN.scala 69:13]
    node _a_recoded_T = bits(a_recoded_rawIn.sExp, 8, 6) @[recFNFromFN.scala 48:50]
    node _a_recoded_T_1 = mux(a_recoded_rawIn.isZero, UInt<3>("h0"), _a_recoded_T) @[recFNFromFN.scala 48:15]
    node _a_recoded_T_2 = mux(a_recoded_rawIn.isNaN, UInt<1>("h1"), UInt<1>("h0")) @[recFNFromFN.scala 49:20]
    node _a_recoded_T_3 = or(_a_recoded_T_1, _a_recoded_T_2) @[recFNFromFN.scala 48:76]
    node _a_recoded_T_4 = cat(a_recoded_rawIn.sign, _a_recoded_T_3) @[recFNFromFN.scala 47:20]
    node _a_recoded_T_5 = bits(a_recoded_rawIn.sExp, 5, 0) @[recFNFromFN.scala 50:23]
    node _a_recoded_T_6 = cat(_a_recoded_T_4, _a_recoded_T_5) @[recFNFromFN.scala 49:45]
    node _a_recoded_T_7 = bits(a_recoded_rawIn.sig, 22, 0) @[recFNFromFN.scala 51:22]
    node a_recoded = cat(_a_recoded_T_6, _a_recoded_T_7) @[recFNFromFN.scala 50:41]
    node b_recoded_rawIn_sign = bits(io.b, 31, 31) @[rawFloatFromFN.scala 44:18]
    node b_recoded_rawIn_expIn = bits(io.b, 30, 23) @[rawFloatFromFN.scala 45:19]
    node b_recoded_rawIn_fractIn = bits(io.b, 22, 0) @[rawFloatFromFN.scala 46:21]
    node b_recoded_rawIn_isZeroExpIn = eq(b_recoded_rawIn_expIn, UInt<1>("h0")) @[rawFloatFromFN.scala 48:30]
    node b_recoded_rawIn_isZeroFractIn = eq(b_recoded_rawIn_fractIn, UInt<1>("h0")) @[rawFloatFromFN.scala 49:34]
    node _b_recoded_rawIn_normDist_T = bits(b_recoded_rawIn_fractIn, 0, 0) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_1 = bits(b_recoded_rawIn_fractIn, 1, 1) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_2 = bits(b_recoded_rawIn_fractIn, 2, 2) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_3 = bits(b_recoded_rawIn_fractIn, 3, 3) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_4 = bits(b_recoded_rawIn_fractIn, 4, 4) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_5 = bits(b_recoded_rawIn_fractIn, 5, 5) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_6 = bits(b_recoded_rawIn_fractIn, 6, 6) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_7 = bits(b_recoded_rawIn_fractIn, 7, 7) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_8 = bits(b_recoded_rawIn_fractIn, 8, 8) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_9 = bits(b_recoded_rawIn_fractIn, 9, 9) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_10 = bits(b_recoded_rawIn_fractIn, 10, 10) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_11 = bits(b_recoded_rawIn_fractIn, 11, 11) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_12 = bits(b_recoded_rawIn_fractIn, 12, 12) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_13 = bits(b_recoded_rawIn_fractIn, 13, 13) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_14 = bits(b_recoded_rawIn_fractIn, 14, 14) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_15 = bits(b_recoded_rawIn_fractIn, 15, 15) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_16 = bits(b_recoded_rawIn_fractIn, 16, 16) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_17 = bits(b_recoded_rawIn_fractIn, 17, 17) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_18 = bits(b_recoded_rawIn_fractIn, 18, 18) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_19 = bits(b_recoded_rawIn_fractIn, 19, 19) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_20 = bits(b_recoded_rawIn_fractIn, 20, 20) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_21 = bits(b_recoded_rawIn_fractIn, 21, 21) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_22 = bits(b_recoded_rawIn_fractIn, 22, 22) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_23 = mux(_b_recoded_rawIn_normDist_T_1, UInt<5>("h15"), UInt<5>("h16")) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_24 = mux(_b_recoded_rawIn_normDist_T_2, UInt<5>("h14"), _b_recoded_rawIn_normDist_T_23) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_25 = mux(_b_recoded_rawIn_normDist_T_3, UInt<5>("h13"), _b_recoded_rawIn_normDist_T_24) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_26 = mux(_b_recoded_rawIn_normDist_T_4, UInt<5>("h12"), _b_recoded_rawIn_normDist_T_25) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_27 = mux(_b_recoded_rawIn_normDist_T_5, UInt<5>("h11"), _b_recoded_rawIn_normDist_T_26) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_28 = mux(_b_recoded_rawIn_normDist_T_6, UInt<5>("h10"), _b_recoded_rawIn_normDist_T_27) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_29 = mux(_b_recoded_rawIn_normDist_T_7, UInt<4>("hf"), _b_recoded_rawIn_normDist_T_28) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_30 = mux(_b_recoded_rawIn_normDist_T_8, UInt<4>("he"), _b_recoded_rawIn_normDist_T_29) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_31 = mux(_b_recoded_rawIn_normDist_T_9, UInt<4>("hd"), _b_recoded_rawIn_normDist_T_30) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_32 = mux(_b_recoded_rawIn_normDist_T_10, UInt<4>("hc"), _b_recoded_rawIn_normDist_T_31) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_33 = mux(_b_recoded_rawIn_normDist_T_11, UInt<4>("hb"), _b_recoded_rawIn_normDist_T_32) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_34 = mux(_b_recoded_rawIn_normDist_T_12, UInt<4>("ha"), _b_recoded_rawIn_normDist_T_33) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_35 = mux(_b_recoded_rawIn_normDist_T_13, UInt<4>("h9"), _b_recoded_rawIn_normDist_T_34) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_36 = mux(_b_recoded_rawIn_normDist_T_14, UInt<4>("h8"), _b_recoded_rawIn_normDist_T_35) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_37 = mux(_b_recoded_rawIn_normDist_T_15, UInt<3>("h7"), _b_recoded_rawIn_normDist_T_36) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_38 = mux(_b_recoded_rawIn_normDist_T_16, UInt<3>("h6"), _b_recoded_rawIn_normDist_T_37) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_39 = mux(_b_recoded_rawIn_normDist_T_17, UInt<3>("h5"), _b_recoded_rawIn_normDist_T_38) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_40 = mux(_b_recoded_rawIn_normDist_T_18, UInt<3>("h4"), _b_recoded_rawIn_normDist_T_39) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_41 = mux(_b_recoded_rawIn_normDist_T_19, UInt<2>("h3"), _b_recoded_rawIn_normDist_T_40) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_42 = mux(_b_recoded_rawIn_normDist_T_20, UInt<2>("h2"), _b_recoded_rawIn_normDist_T_41) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_43 = mux(_b_recoded_rawIn_normDist_T_21, UInt<1>("h1"), _b_recoded_rawIn_normDist_T_42) @[Mux.scala 47:70]
    node b_recoded_rawIn_normDist = mux(_b_recoded_rawIn_normDist_T_22, UInt<1>("h0"), _b_recoded_rawIn_normDist_T_43) @[Mux.scala 47:70]
    node _b_recoded_rawIn_subnormFract_T = dshl(b_recoded_rawIn_fractIn, b_recoded_rawIn_normDist) @[rawFloatFromFN.scala 52:33]
    node _b_recoded_rawIn_subnormFract_T_1 = bits(_b_recoded_rawIn_subnormFract_T, 21, 0) @[rawFloatFromFN.scala 52:46]
    node b_recoded_rawIn_subnormFract = shl(_b_recoded_rawIn_subnormFract_T_1, 1) @[rawFloatFromFN.scala 52:64]
    node _b_recoded_rawIn_adjustedExp_T = xor(b_recoded_rawIn_normDist, UInt<9>("h1ff")) @[rawFloatFromFN.scala 55:18]
    node _b_recoded_rawIn_adjustedExp_T_1 = mux(b_recoded_rawIn_isZeroExpIn, _b_recoded_rawIn_adjustedExp_T, b_recoded_rawIn_expIn) @[rawFloatFromFN.scala 54:10]
    node _b_recoded_rawIn_adjustedExp_T_2 = mux(b_recoded_rawIn_isZeroExpIn, UInt<2>("h2"), UInt<1>("h1")) @[rawFloatFromFN.scala 58:14]
    node _b_recoded_rawIn_adjustedExp_T_3 = or(UInt<8>("h80"), _b_recoded_rawIn_adjustedExp_T_2) @[rawFloatFromFN.scala 58:9]
    node _b_recoded_rawIn_adjustedExp_T_4 = add(_b_recoded_rawIn_adjustedExp_T_1, _b_recoded_rawIn_adjustedExp_T_3) @[rawFloatFromFN.scala 57:9]
    node b_recoded_rawIn_adjustedExp = tail(_b_recoded_rawIn_adjustedExp_T_4, 1) @[rawFloatFromFN.scala 57:9]
    node b_recoded_rawIn_isZero = and(b_recoded_rawIn_isZeroExpIn, b_recoded_rawIn_isZeroFractIn) @[rawFloatFromFN.scala 60:30]
    node _b_recoded_rawIn_isSpecial_T = bits(b_recoded_rawIn_adjustedExp, 8, 7) @[rawFloatFromFN.scala 61:32]
    node b_recoded_rawIn_isSpecial = eq(_b_recoded_rawIn_isSpecial_T, UInt<2>("h3")) @[rawFloatFromFN.scala 61:57]
    wire b_recoded_rawIn : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>} @[rawFloatFromFN.scala 63:19]
    node _b_recoded_rawIn_out_isNaN_T = eq(b_recoded_rawIn_isZeroFractIn, UInt<1>("h0")) @[rawFloatFromFN.scala 64:31]
    node _b_recoded_rawIn_out_isNaN_T_1 = and(b_recoded_rawIn_isSpecial, _b_recoded_rawIn_out_isNaN_T) @[rawFloatFromFN.scala 64:28]
    b_recoded_rawIn.isNaN <= _b_recoded_rawIn_out_isNaN_T_1 @[rawFloatFromFN.scala 64:15]
    node _b_recoded_rawIn_out_isInf_T = and(b_recoded_rawIn_isSpecial, b_recoded_rawIn_isZeroFractIn) @[rawFloatFromFN.scala 65:28]
    b_recoded_rawIn.isInf <= _b_recoded_rawIn_out_isInf_T @[rawFloatFromFN.scala 65:15]
    b_recoded_rawIn.isZero <= b_recoded_rawIn_isZero @[rawFloatFromFN.scala 66:16]
    b_recoded_rawIn.sign <= b_recoded_rawIn_sign @[rawFloatFromFN.scala 67:14]
    node _b_recoded_rawIn_out_sExp_T = bits(b_recoded_rawIn_adjustedExp, 8, 0) @[rawFloatFromFN.scala 68:28]
    node _b_recoded_rawIn_out_sExp_T_1 = cvt(_b_recoded_rawIn_out_sExp_T) @[rawFloatFromFN.scala 68:42]
    b_recoded_rawIn.sExp <= _b_recoded_rawIn_out_sExp_T_1 @[rawFloatFromFN.scala 68:14]
    node _b_recoded_rawIn_out_sig_T = eq(b_recoded_rawIn_isZero, UInt<1>("h0")) @[rawFloatFromFN.scala 70:19]
    node _b_recoded_rawIn_out_sig_T_1 = cat(UInt<1>("h0"), _b_recoded_rawIn_out_sig_T) @[rawFloatFromFN.scala 70:16]
    node _b_recoded_rawIn_out_sig_T_2 = mux(b_recoded_rawIn_isZeroExpIn, b_recoded_rawIn_subnormFract, b_recoded_rawIn_fractIn) @[rawFloatFromFN.scala 70:33]
    node _b_recoded_rawIn_out_sig_T_3 = cat(_b_recoded_rawIn_out_sig_T_1, _b_recoded_rawIn_out_sig_T_2) @[rawFloatFromFN.scala 70:27]
    b_recoded_rawIn.sig <= _b_recoded_rawIn_out_sig_T_3 @[rawFloatFromFN.scala 69:13]
    node _b_recoded_T = bits(b_recoded_rawIn.sExp, 8, 6) @[recFNFromFN.scala 48:50]
    node _b_recoded_T_1 = mux(b_recoded_rawIn.isZero, UInt<3>("h0"), _b_recoded_T) @[recFNFromFN.scala 48:15]
    node _b_recoded_T_2 = mux(b_recoded_rawIn.isNaN, UInt<1>("h1"), UInt<1>("h0")) @[recFNFromFN.scala 49:20]
    node _b_recoded_T_3 = or(_b_recoded_T_1, _b_recoded_T_2) @[recFNFromFN.scala 48:76]
    node _b_recoded_T_4 = cat(b_recoded_rawIn.sign, _b_recoded_T_3) @[recFNFromFN.scala 47:20]
    node _b_recoded_T_5 = bits(b_recoded_rawIn.sExp, 5, 0) @[recFNFromFN.scala 50:23]
    node _b_recoded_T_6 = cat(_b_recoded_T_4, _b_recoded_T_5) @[recFNFromFN.scala 49:45]
    node _b_recoded_T_7 = bits(b_recoded_rawIn.sig, 22, 0) @[recFNFromFN.scala 51:22]
    node b_recoded = cat(_b_recoded_T_6, _b_recoded_T_7) @[recFNFromFN.scala 50:41]
    mulRecFN.io.a <= a_recoded @[FPU.scala 95:19]
    mulRecFN.io.b <= b_recoded @[FPU.scala 96:19]
    mulRecFN.io.roundingMode <= UInt<3>("h0") @[FPU.scala 97:30]
    mulRecFN.io.detectTininess <= UInt<1>("h1") @[FPU.scala 98:32]
    node io_result_rawIn_exp = bits(mulRecFN.io.out, 31, 23) @[rawFloatFromRecFN.scala 51:21]
    node _io_result_rawIn_isZero_T = bits(io_result_rawIn_exp, 8, 6) @[rawFloatFromRecFN.scala 52:28]
    node io_result_rawIn_isZero = eq(_io_result_rawIn_isZero_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 52:53]
    node _io_result_rawIn_isSpecial_T = bits(io_result_rawIn_exp, 8, 7) @[rawFloatFromRecFN.scala 53:28]
    node io_result_rawIn_isSpecial = eq(_io_result_rawIn_isSpecial_T, UInt<2>("h3")) @[rawFloatFromRecFN.scala 53:53]
    wire io_result_rawIn : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>} @[rawFloatFromRecFN.scala 55:23]
    node _io_result_rawIn_out_isNaN_T = bits(io_result_rawIn_exp, 6, 6) @[rawFloatFromRecFN.scala 56:41]
    node _io_result_rawIn_out_isNaN_T_1 = and(io_result_rawIn_isSpecial, _io_result_rawIn_out_isNaN_T) @[rawFloatFromRecFN.scala 56:33]
    io_result_rawIn.isNaN <= _io_result_rawIn_out_isNaN_T_1 @[rawFloatFromRecFN.scala 56:20]
    node _io_result_rawIn_out_isInf_T = bits(io_result_rawIn_exp, 6, 6) @[rawFloatFromRecFN.scala 57:41]
    node _io_result_rawIn_out_isInf_T_1 = eq(_io_result_rawIn_out_isInf_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 57:36]
    node _io_result_rawIn_out_isInf_T_2 = and(io_result_rawIn_isSpecial, _io_result_rawIn_out_isInf_T_1) @[rawFloatFromRecFN.scala 57:33]
    io_result_rawIn.isInf <= _io_result_rawIn_out_isInf_T_2 @[rawFloatFromRecFN.scala 57:20]
    io_result_rawIn.isZero <= io_result_rawIn_isZero @[rawFloatFromRecFN.scala 58:20]
    node _io_result_rawIn_out_sign_T = bits(mulRecFN.io.out, 32, 32) @[rawFloatFromRecFN.scala 59:25]
    io_result_rawIn.sign <= _io_result_rawIn_out_sign_T @[rawFloatFromRecFN.scala 59:20]
    node _io_result_rawIn_out_sExp_T = cvt(io_result_rawIn_exp) @[rawFloatFromRecFN.scala 60:27]
    io_result_rawIn.sExp <= _io_result_rawIn_out_sExp_T @[rawFloatFromRecFN.scala 60:20]
    node _io_result_rawIn_out_sig_T = eq(io_result_rawIn_isZero, UInt<1>("h0")) @[rawFloatFromRecFN.scala 61:35]
    node _io_result_rawIn_out_sig_T_1 = cat(UInt<1>("h0"), _io_result_rawIn_out_sig_T) @[rawFloatFromRecFN.scala 61:32]
    node _io_result_rawIn_out_sig_T_2 = bits(mulRecFN.io.out, 22, 0) @[rawFloatFromRecFN.scala 61:49]
    node _io_result_rawIn_out_sig_T_3 = cat(_io_result_rawIn_out_sig_T_1, _io_result_rawIn_out_sig_T_2) @[rawFloatFromRecFN.scala 61:44]
    io_result_rawIn.sig <= _io_result_rawIn_out_sig_T_3 @[rawFloatFromRecFN.scala 61:20]
    node io_result_isSubnormal = lt(io_result_rawIn.sExp, asSInt(UInt<9>("h82"))) @[fNFromRecFN.scala 51:38]
    node _io_result_denormShiftDist_T = bits(io_result_rawIn.sExp, 4, 0) @[fNFromRecFN.scala 52:47]
    node _io_result_denormShiftDist_T_1 = sub(UInt<1>("h1"), _io_result_denormShiftDist_T) @[fNFromRecFN.scala 52:35]
    node io_result_denormShiftDist = tail(_io_result_denormShiftDist_T_1, 1) @[fNFromRecFN.scala 52:35]
    node _io_result_denormFract_T = shr(io_result_rawIn.sig, 1) @[fNFromRecFN.scala 53:38]
    node _io_result_denormFract_T_1 = dshr(_io_result_denormFract_T, io_result_denormShiftDist) @[fNFromRecFN.scala 53:42]
    node io_result_denormFract = bits(_io_result_denormFract_T_1, 22, 0) @[fNFromRecFN.scala 53:60]
    node _io_result_expOut_T = bits(io_result_rawIn.sExp, 7, 0) @[fNFromRecFN.scala 58:27]
    node _io_result_expOut_T_1 = sub(_io_result_expOut_T, UInt<8>("h81")) @[fNFromRecFN.scala 58:45]
    node _io_result_expOut_T_2 = tail(_io_result_expOut_T_1, 1) @[fNFromRecFN.scala 58:45]
    node _io_result_expOut_T_3 = mux(io_result_isSubnormal, UInt<1>("h0"), _io_result_expOut_T_2) @[fNFromRecFN.scala 56:16]
    node _io_result_expOut_T_4 = or(io_result_rawIn.isNaN, io_result_rawIn.isInf) @[fNFromRecFN.scala 60:44]
    node _io_result_expOut_T_5 = bits(_io_result_expOut_T_4, 0, 0) @[Bitwise.scala 77:15]
    node _io_result_expOut_T_6 = mux(_io_result_expOut_T_5, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 77:12]
    node io_result_expOut = or(_io_result_expOut_T_3, _io_result_expOut_T_6) @[fNFromRecFN.scala 60:15]
    node _io_result_fractOut_T = bits(io_result_rawIn.sig, 22, 0) @[fNFromRecFN.scala 64:48]
    node _io_result_fractOut_T_1 = mux(io_result_rawIn.isInf, UInt<1>("h0"), _io_result_fractOut_T) @[fNFromRecFN.scala 64:20]
    node io_result_fractOut = mux(io_result_isSubnormal, io_result_denormFract, _io_result_fractOut_T_1) @[fNFromRecFN.scala 62:16]
    node io_result_hi = cat(io_result_rawIn.sign, io_result_expOut) @[Cat.scala 33:92]
    node _io_result_T = cat(io_result_hi, io_result_fractOut) @[Cat.scala 33:92]
    io.result <= _io_result_T @[FPU.scala 101:15]

  module MulFullRawFN_6 :
    output io : { flip a : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>}, flip b : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>}, invalidExc : UInt<1>, rawOut : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<48>}}

    node _notSigNaN_invalidExc_T = and(io.a.isInf, io.b.isZero) @[MulRecFN.scala 58:44]
    node _notSigNaN_invalidExc_T_1 = and(io.a.isZero, io.b.isInf) @[MulRecFN.scala 58:76]
    node notSigNaN_invalidExc = or(_notSigNaN_invalidExc_T, _notSigNaN_invalidExc_T_1) @[MulRecFN.scala 58:60]
    node notNaN_isInfOut = or(io.a.isInf, io.b.isInf) @[MulRecFN.scala 59:38]
    node notNaN_isZeroOut = or(io.a.isZero, io.b.isZero) @[MulRecFN.scala 60:40]
    node notNaN_signOut = xor(io.a.sign, io.b.sign) @[MulRecFN.scala 61:36]
    node _common_sExpOut_T = add(io.a.sExp, io.b.sExp) @[MulRecFN.scala 62:36]
    node _common_sExpOut_T_1 = tail(_common_sExpOut_T, 1) @[MulRecFN.scala 62:36]
    node _common_sExpOut_T_2 = asSInt(_common_sExpOut_T_1) @[MulRecFN.scala 62:36]
    node _common_sExpOut_T_3 = sub(_common_sExpOut_T_2, asSInt(UInt<10>("h100"))) @[MulRecFN.scala 62:48]
    node _common_sExpOut_T_4 = tail(_common_sExpOut_T_3, 1) @[MulRecFN.scala 62:48]
    node common_sExpOut = asSInt(_common_sExpOut_T_4) @[MulRecFN.scala 62:48]
    node _common_sigOut_T = mul(io.a.sig, io.b.sig) @[MulRecFN.scala 63:35]
    node common_sigOut = bits(_common_sigOut_T, 47, 0) @[MulRecFN.scala 63:46]
    node _io_invalidExc_T = bits(io.a.sig, 22, 22) @[common.scala 82:56]
    node _io_invalidExc_T_1 = eq(_io_invalidExc_T, UInt<1>("h0")) @[common.scala 82:49]
    node _io_invalidExc_T_2 = and(io.a.isNaN, _io_invalidExc_T_1) @[common.scala 82:46]
    node _io_invalidExc_T_3 = bits(io.b.sig, 22, 22) @[common.scala 82:56]
    node _io_invalidExc_T_4 = eq(_io_invalidExc_T_3, UInt<1>("h0")) @[common.scala 82:49]
    node _io_invalidExc_T_5 = and(io.b.isNaN, _io_invalidExc_T_4) @[common.scala 82:46]
    node _io_invalidExc_T_6 = or(_io_invalidExc_T_2, _io_invalidExc_T_5) @[MulRecFN.scala 66:45]
    node _io_invalidExc_T_7 = or(_io_invalidExc_T_6, notSigNaN_invalidExc) @[MulRecFN.scala 66:71]
    io.invalidExc <= _io_invalidExc_T_7 @[MulRecFN.scala 66:19]
    io.rawOut.isInf <= notNaN_isInfOut @[MulRecFN.scala 67:21]
    io.rawOut.isZero <= notNaN_isZeroOut @[MulRecFN.scala 68:22]
    io.rawOut.sExp <= common_sExpOut @[MulRecFN.scala 69:20]
    node _io_rawOut_isNaN_T = or(io.a.isNaN, io.b.isNaN) @[MulRecFN.scala 70:35]
    io.rawOut.isNaN <= _io_rawOut_isNaN_T @[MulRecFN.scala 70:21]
    io.rawOut.sign <= notNaN_signOut @[MulRecFN.scala 71:20]
    io.rawOut.sig <= common_sigOut @[MulRecFN.scala 72:19]

  module MulRawFN_6 :
    output io : { flip a : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>}, flip b : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>}, invalidExc : UInt<1>, rawOut : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<27>}}

    inst mulFullRaw of MulFullRawFN_6 @[MulRecFN.scala 84:28]
    mulFullRaw.io.a.sig <= io.a.sig @[MulRecFN.scala 86:21]
    mulFullRaw.io.a.sExp <= io.a.sExp @[MulRecFN.scala 86:21]
    mulFullRaw.io.a.sign <= io.a.sign @[MulRecFN.scala 86:21]
    mulFullRaw.io.a.isZero <= io.a.isZero @[MulRecFN.scala 86:21]
    mulFullRaw.io.a.isInf <= io.a.isInf @[MulRecFN.scala 86:21]
    mulFullRaw.io.a.isNaN <= io.a.isNaN @[MulRecFN.scala 86:21]
    mulFullRaw.io.b.sig <= io.b.sig @[MulRecFN.scala 87:21]
    mulFullRaw.io.b.sExp <= io.b.sExp @[MulRecFN.scala 87:21]
    mulFullRaw.io.b.sign <= io.b.sign @[MulRecFN.scala 87:21]
    mulFullRaw.io.b.isZero <= io.b.isZero @[MulRecFN.scala 87:21]
    mulFullRaw.io.b.isInf <= io.b.isInf @[MulRecFN.scala 87:21]
    mulFullRaw.io.b.isNaN <= io.b.isNaN @[MulRecFN.scala 87:21]
    io.invalidExc <= mulFullRaw.io.invalidExc @[MulRecFN.scala 89:19]
    io.rawOut <= mulFullRaw.io.rawOut @[MulRecFN.scala 90:15]
    node _io_rawOut_sig_T = shr(mulFullRaw.io.rawOut.sig, 22) @[MulRecFN.scala 93:15]
    node _io_rawOut_sig_T_1 = bits(mulFullRaw.io.rawOut.sig, 21, 0) @[MulRecFN.scala 93:37]
    node _io_rawOut_sig_T_2 = orr(_io_rawOut_sig_T_1) @[MulRecFN.scala 93:55]
    node _io_rawOut_sig_T_3 = cat(_io_rawOut_sig_T, _io_rawOut_sig_T_2) @[Cat.scala 33:92]
    io.rawOut.sig <= _io_rawOut_sig_T_3 @[MulRecFN.scala 91:19]

  module RoundAnyRawFNToRecFN_ie8_is26_oe8_os24_7 :
    output io : { flip invalidExc : UInt<1>, flip infiniteExc : UInt<1>, flip in : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<27>}, flip roundingMode : UInt<3>, flip detectTininess : UInt<1>, out : UInt<33>, exceptionFlags : UInt<5>}

    node roundingMode_near_even = eq(io.roundingMode, UInt<3>("h0")) @[RoundAnyRawFNToRecFN.scala 90:53]
    node roundingMode_minMag = eq(io.roundingMode, UInt<3>("h1")) @[RoundAnyRawFNToRecFN.scala 91:53]
    node roundingMode_min = eq(io.roundingMode, UInt<3>("h2")) @[RoundAnyRawFNToRecFN.scala 92:53]
    node roundingMode_max = eq(io.roundingMode, UInt<3>("h3")) @[RoundAnyRawFNToRecFN.scala 93:53]
    node roundingMode_near_maxMag = eq(io.roundingMode, UInt<3>("h4")) @[RoundAnyRawFNToRecFN.scala 94:53]
    node roundingMode_odd = eq(io.roundingMode, UInt<3>("h6")) @[RoundAnyRawFNToRecFN.scala 95:53]
    node _roundMagUp_T = and(roundingMode_min, io.in.sign) @[RoundAnyRawFNToRecFN.scala 98:27]
    node _roundMagUp_T_1 = eq(io.in.sign, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 98:66]
    node _roundMagUp_T_2 = and(roundingMode_max, _roundMagUp_T_1) @[RoundAnyRawFNToRecFN.scala 98:63]
    node roundMagUp = or(_roundMagUp_T, _roundMagUp_T_2) @[RoundAnyRawFNToRecFN.scala 98:42]
    node adjustedSig = shl(io.in.sig, 0) @[RoundAnyRawFNToRecFN.scala 114:22]
    node doShiftSigDown1 = bits(adjustedSig, 26, 26) @[RoundAnyRawFNToRecFN.scala 120:57]
    wire common_expOut : UInt<9> @[RoundAnyRawFNToRecFN.scala 122:31]
    wire common_fractOut : UInt<23> @[RoundAnyRawFNToRecFN.scala 123:31]
    wire common_overflow : UInt<1> @[RoundAnyRawFNToRecFN.scala 124:37]
    wire common_totalUnderflow : UInt<1> @[RoundAnyRawFNToRecFN.scala 125:37]
    wire common_underflow : UInt<1> @[RoundAnyRawFNToRecFN.scala 126:37]
    wire common_inexact : UInt<1> @[RoundAnyRawFNToRecFN.scala 127:37]
    node _roundMask_T = bits(io.in.sExp, 8, 0) @[RoundAnyRawFNToRecFN.scala 156:37]
    node _roundMask_T_1 = not(_roundMask_T) @[primitives.scala 52:21]
    node roundMask_msb = bits(_roundMask_T_1, 8, 8) @[primitives.scala 58:25]
    node roundMask_lsbs = bits(_roundMask_T_1, 7, 0) @[primitives.scala 59:26]
    node roundMask_msb_1 = bits(roundMask_lsbs, 7, 7) @[primitives.scala 58:25]
    node roundMask_lsbs_1 = bits(roundMask_lsbs, 6, 0) @[primitives.scala 59:26]
    node roundMask_msb_2 = bits(roundMask_lsbs_1, 6, 6) @[primitives.scala 58:25]
    node roundMask_lsbs_2 = bits(roundMask_lsbs_1, 5, 0) @[primitives.scala 59:26]
    node roundMask_shift = dshr(asSInt(UInt<65>("h10000000000000000")), roundMask_lsbs_2) @[primitives.scala 76:56]
    node _roundMask_T_2 = bits(roundMask_shift, 63, 42) @[primitives.scala 78:22]
    node _roundMask_T_3 = bits(_roundMask_T_2, 15, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_4 = shl(UInt<8>("hff"), 8) @[Bitwise.scala 107:52]
    node _roundMask_T_5 = xor(UInt<16>("hffff"), _roundMask_T_4) @[Bitwise.scala 107:21]
    node _roundMask_T_6 = shr(_roundMask_T_3, 8) @[Bitwise.scala 108:21]
    node _roundMask_T_7 = and(_roundMask_T_6, _roundMask_T_5) @[Bitwise.scala 108:31]
    node _roundMask_T_8 = bits(_roundMask_T_3, 7, 0) @[Bitwise.scala 108:46]
    node _roundMask_T_9 = shl(_roundMask_T_8, 8) @[Bitwise.scala 108:70]
    node _roundMask_T_10 = not(_roundMask_T_5) @[Bitwise.scala 108:82]
    node _roundMask_T_11 = and(_roundMask_T_9, _roundMask_T_10) @[Bitwise.scala 108:80]
    node _roundMask_T_12 = or(_roundMask_T_7, _roundMask_T_11) @[Bitwise.scala 108:39]
    node _roundMask_T_13 = bits(_roundMask_T_5, 11, 0) @[Bitwise.scala 107:28]
    node _roundMask_T_14 = shl(_roundMask_T_13, 4) @[Bitwise.scala 107:52]
    node _roundMask_T_15 = xor(_roundMask_T_5, _roundMask_T_14) @[Bitwise.scala 107:21]
    node _roundMask_T_16 = shr(_roundMask_T_12, 4) @[Bitwise.scala 108:21]
    node _roundMask_T_17 = and(_roundMask_T_16, _roundMask_T_15) @[Bitwise.scala 108:31]
    node _roundMask_T_18 = bits(_roundMask_T_12, 11, 0) @[Bitwise.scala 108:46]
    node _roundMask_T_19 = shl(_roundMask_T_18, 4) @[Bitwise.scala 108:70]
    node _roundMask_T_20 = not(_roundMask_T_15) @[Bitwise.scala 108:82]
    node _roundMask_T_21 = and(_roundMask_T_19, _roundMask_T_20) @[Bitwise.scala 108:80]
    node _roundMask_T_22 = or(_roundMask_T_17, _roundMask_T_21) @[Bitwise.scala 108:39]
    node _roundMask_T_23 = bits(_roundMask_T_15, 13, 0) @[Bitwise.scala 107:28]
    node _roundMask_T_24 = shl(_roundMask_T_23, 2) @[Bitwise.scala 107:52]
    node _roundMask_T_25 = xor(_roundMask_T_15, _roundMask_T_24) @[Bitwise.scala 107:21]
    node _roundMask_T_26 = shr(_roundMask_T_22, 2) @[Bitwise.scala 108:21]
    node _roundMask_T_27 = and(_roundMask_T_26, _roundMask_T_25) @[Bitwise.scala 108:31]
    node _roundMask_T_28 = bits(_roundMask_T_22, 13, 0) @[Bitwise.scala 108:46]
    node _roundMask_T_29 = shl(_roundMask_T_28, 2) @[Bitwise.scala 108:70]
    node _roundMask_T_30 = not(_roundMask_T_25) @[Bitwise.scala 108:82]
    node _roundMask_T_31 = and(_roundMask_T_29, _roundMask_T_30) @[Bitwise.scala 108:80]
    node _roundMask_T_32 = or(_roundMask_T_27, _roundMask_T_31) @[Bitwise.scala 108:39]
    node _roundMask_T_33 = bits(_roundMask_T_25, 14, 0) @[Bitwise.scala 107:28]
    node _roundMask_T_34 = shl(_roundMask_T_33, 1) @[Bitwise.scala 107:52]
    node _roundMask_T_35 = xor(_roundMask_T_25, _roundMask_T_34) @[Bitwise.scala 107:21]
    node _roundMask_T_36 = shr(_roundMask_T_32, 1) @[Bitwise.scala 108:21]
    node _roundMask_T_37 = and(_roundMask_T_36, _roundMask_T_35) @[Bitwise.scala 108:31]
    node _roundMask_T_38 = bits(_roundMask_T_32, 14, 0) @[Bitwise.scala 108:46]
    node _roundMask_T_39 = shl(_roundMask_T_38, 1) @[Bitwise.scala 108:70]
    node _roundMask_T_40 = not(_roundMask_T_35) @[Bitwise.scala 108:82]
    node _roundMask_T_41 = and(_roundMask_T_39, _roundMask_T_40) @[Bitwise.scala 108:80]
    node _roundMask_T_42 = or(_roundMask_T_37, _roundMask_T_41) @[Bitwise.scala 108:39]
    node _roundMask_T_43 = bits(_roundMask_T_2, 21, 16) @[Bitwise.scala 114:47]
    node _roundMask_T_44 = bits(_roundMask_T_43, 3, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_45 = bits(_roundMask_T_44, 1, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_46 = bits(_roundMask_T_45, 0, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_47 = bits(_roundMask_T_45, 1, 1) @[Bitwise.scala 114:47]
    node _roundMask_T_48 = cat(_roundMask_T_46, _roundMask_T_47) @[Cat.scala 33:92]
    node _roundMask_T_49 = bits(_roundMask_T_44, 3, 2) @[Bitwise.scala 114:47]
    node _roundMask_T_50 = bits(_roundMask_T_49, 0, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_51 = bits(_roundMask_T_49, 1, 1) @[Bitwise.scala 114:47]
    node _roundMask_T_52 = cat(_roundMask_T_50, _roundMask_T_51) @[Cat.scala 33:92]
    node _roundMask_T_53 = cat(_roundMask_T_48, _roundMask_T_52) @[Cat.scala 33:92]
    node _roundMask_T_54 = bits(_roundMask_T_43, 5, 4) @[Bitwise.scala 114:47]
    node _roundMask_T_55 = bits(_roundMask_T_54, 0, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_56 = bits(_roundMask_T_54, 1, 1) @[Bitwise.scala 114:47]
    node _roundMask_T_57 = cat(_roundMask_T_55, _roundMask_T_56) @[Cat.scala 33:92]
    node _roundMask_T_58 = cat(_roundMask_T_53, _roundMask_T_57) @[Cat.scala 33:92]
    node _roundMask_T_59 = cat(_roundMask_T_42, _roundMask_T_58) @[Cat.scala 33:92]
    node _roundMask_T_60 = not(_roundMask_T_59) @[primitives.scala 73:32]
    node _roundMask_T_61 = mux(roundMask_msb_2, UInt<1>("h0"), _roundMask_T_60) @[primitives.scala 73:21]
    node _roundMask_T_62 = not(_roundMask_T_61) @[primitives.scala 73:17]
    node _roundMask_T_63 = cat(_roundMask_T_62, UInt<3>("h7")) @[primitives.scala 68:58]
    node roundMask_msb_3 = bits(roundMask_lsbs_1, 6, 6) @[primitives.scala 58:25]
    node roundMask_lsbs_3 = bits(roundMask_lsbs_1, 5, 0) @[primitives.scala 59:26]
    node roundMask_shift_1 = dshr(asSInt(UInt<65>("h10000000000000000")), roundMask_lsbs_3) @[primitives.scala 76:56]
    node _roundMask_T_64 = bits(roundMask_shift_1, 2, 0) @[primitives.scala 78:22]
    node _roundMask_T_65 = bits(_roundMask_T_64, 1, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_66 = bits(_roundMask_T_65, 0, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_67 = bits(_roundMask_T_65, 1, 1) @[Bitwise.scala 114:47]
    node _roundMask_T_68 = cat(_roundMask_T_66, _roundMask_T_67) @[Cat.scala 33:92]
    node _roundMask_T_69 = bits(_roundMask_T_64, 2, 2) @[Bitwise.scala 114:47]
    node _roundMask_T_70 = cat(_roundMask_T_68, _roundMask_T_69) @[Cat.scala 33:92]
    node _roundMask_T_71 = mux(roundMask_msb_3, _roundMask_T_70, UInt<1>("h0")) @[primitives.scala 62:24]
    node _roundMask_T_72 = mux(roundMask_msb_1, _roundMask_T_63, _roundMask_T_71) @[primitives.scala 67:24]
    node _roundMask_T_73 = mux(roundMask_msb, _roundMask_T_72, UInt<1>("h0")) @[primitives.scala 62:24]
    node _roundMask_T_74 = or(_roundMask_T_73, doShiftSigDown1) @[RoundAnyRawFNToRecFN.scala 159:23]
    node roundMask = cat(_roundMask_T_74, UInt<2>("h3")) @[RoundAnyRawFNToRecFN.scala 159:42]
    node _shiftedRoundMask_T = cat(UInt<1>("h0"), roundMask) @[RoundAnyRawFNToRecFN.scala 162:41]
    node shiftedRoundMask = shr(_shiftedRoundMask_T, 1) @[RoundAnyRawFNToRecFN.scala 162:53]
    node _roundPosMask_T = not(shiftedRoundMask) @[RoundAnyRawFNToRecFN.scala 163:28]
    node roundPosMask = and(_roundPosMask_T, roundMask) @[RoundAnyRawFNToRecFN.scala 163:46]
    node _roundPosBit_T = and(adjustedSig, roundPosMask) @[RoundAnyRawFNToRecFN.scala 164:40]
    node roundPosBit = orr(_roundPosBit_T) @[RoundAnyRawFNToRecFN.scala 164:56]
    node _anyRoundExtra_T = and(adjustedSig, shiftedRoundMask) @[RoundAnyRawFNToRecFN.scala 165:42]
    node anyRoundExtra = orr(_anyRoundExtra_T) @[RoundAnyRawFNToRecFN.scala 165:62]
    node anyRound = or(roundPosBit, anyRoundExtra) @[RoundAnyRawFNToRecFN.scala 166:36]
    node _roundIncr_T = or(roundingMode_near_even, roundingMode_near_maxMag) @[RoundAnyRawFNToRecFN.scala 169:38]
    node _roundIncr_T_1 = and(_roundIncr_T, roundPosBit) @[RoundAnyRawFNToRecFN.scala 169:67]
    node _roundIncr_T_2 = and(roundMagUp, anyRound) @[RoundAnyRawFNToRecFN.scala 171:29]
    node roundIncr = or(_roundIncr_T_1, _roundIncr_T_2) @[RoundAnyRawFNToRecFN.scala 170:31]
    node _roundedSig_T = or(adjustedSig, roundMask) @[RoundAnyRawFNToRecFN.scala 174:32]
    node _roundedSig_T_1 = shr(_roundedSig_T, 2) @[RoundAnyRawFNToRecFN.scala 174:44]
    node _roundedSig_T_2 = add(_roundedSig_T_1, UInt<1>("h1")) @[RoundAnyRawFNToRecFN.scala 174:49]
    node _roundedSig_T_3 = and(roundingMode_near_even, roundPosBit) @[RoundAnyRawFNToRecFN.scala 175:49]
    node _roundedSig_T_4 = eq(anyRoundExtra, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 176:30]
    node _roundedSig_T_5 = and(_roundedSig_T_3, _roundedSig_T_4) @[RoundAnyRawFNToRecFN.scala 175:64]
    node _roundedSig_T_6 = shr(roundMask, 1) @[RoundAnyRawFNToRecFN.scala 177:35]
    node _roundedSig_T_7 = mux(_roundedSig_T_5, _roundedSig_T_6, UInt<26>("h0")) @[RoundAnyRawFNToRecFN.scala 175:25]
    node _roundedSig_T_8 = not(_roundedSig_T_7) @[RoundAnyRawFNToRecFN.scala 175:21]
    node _roundedSig_T_9 = and(_roundedSig_T_2, _roundedSig_T_8) @[RoundAnyRawFNToRecFN.scala 174:57]
    node _roundedSig_T_10 = not(roundMask) @[RoundAnyRawFNToRecFN.scala 180:32]
    node _roundedSig_T_11 = and(adjustedSig, _roundedSig_T_10) @[RoundAnyRawFNToRecFN.scala 180:30]
    node _roundedSig_T_12 = shr(_roundedSig_T_11, 2) @[RoundAnyRawFNToRecFN.scala 180:43]
    node _roundedSig_T_13 = and(roundingMode_odd, anyRound) @[RoundAnyRawFNToRecFN.scala 181:42]
    node _roundedSig_T_14 = shr(roundPosMask, 1) @[RoundAnyRawFNToRecFN.scala 181:67]
    node _roundedSig_T_15 = mux(_roundedSig_T_13, _roundedSig_T_14, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 181:24]
    node _roundedSig_T_16 = or(_roundedSig_T_12, _roundedSig_T_15) @[RoundAnyRawFNToRecFN.scala 180:47]
    node roundedSig = mux(roundIncr, _roundedSig_T_9, _roundedSig_T_16) @[RoundAnyRawFNToRecFN.scala 173:16]
    node _sRoundedExp_T = shr(roundedSig, 24) @[RoundAnyRawFNToRecFN.scala 185:54]
    node _sRoundedExp_T_1 = cvt(_sRoundedExp_T) @[RoundAnyRawFNToRecFN.scala 185:76]
    node sRoundedExp = add(io.in.sExp, _sRoundedExp_T_1) @[RoundAnyRawFNToRecFN.scala 185:40]
    node _common_expOut_T = bits(sRoundedExp, 8, 0) @[RoundAnyRawFNToRecFN.scala 187:37]
    common_expOut <= _common_expOut_T @[RoundAnyRawFNToRecFN.scala 187:23]
    node _common_fractOut_T = bits(roundedSig, 23, 1) @[RoundAnyRawFNToRecFN.scala 190:27]
    node _common_fractOut_T_1 = bits(roundedSig, 22, 0) @[RoundAnyRawFNToRecFN.scala 191:27]
    node _common_fractOut_T_2 = mux(doShiftSigDown1, _common_fractOut_T, _common_fractOut_T_1) @[RoundAnyRawFNToRecFN.scala 189:16]
    common_fractOut <= _common_fractOut_T_2 @[RoundAnyRawFNToRecFN.scala 188:25]
    node _common_overflow_T = shr(sRoundedExp, 7) @[RoundAnyRawFNToRecFN.scala 196:30]
    node _common_overflow_T_1 = geq(_common_overflow_T, asSInt(UInt<3>("h3"))) @[RoundAnyRawFNToRecFN.scala 196:50]
    common_overflow <= _common_overflow_T_1 @[RoundAnyRawFNToRecFN.scala 193:25]
    node _common_totalUnderflow_T = lt(sRoundedExp, asSInt(UInt<8>("h6b"))) @[RoundAnyRawFNToRecFN.scala 200:31]
    common_totalUnderflow <= _common_totalUnderflow_T @[RoundAnyRawFNToRecFN.scala 197:31]
    node _unboundedRange_roundPosBit_T = bits(adjustedSig, 2, 2) @[RoundAnyRawFNToRecFN.scala 203:45]
    node _unboundedRange_roundPosBit_T_1 = bits(adjustedSig, 1, 1) @[RoundAnyRawFNToRecFN.scala 203:61]
    node unboundedRange_roundPosBit = mux(doShiftSigDown1, _unboundedRange_roundPosBit_T, _unboundedRange_roundPosBit_T_1) @[RoundAnyRawFNToRecFN.scala 203:16]
    node _unboundedRange_anyRound_T = bits(adjustedSig, 2, 2) @[RoundAnyRawFNToRecFN.scala 205:44]
    node _unboundedRange_anyRound_T_1 = and(doShiftSigDown1, _unboundedRange_anyRound_T) @[RoundAnyRawFNToRecFN.scala 205:30]
    node _unboundedRange_anyRound_T_2 = bits(adjustedSig, 1, 0) @[RoundAnyRawFNToRecFN.scala 205:63]
    node _unboundedRange_anyRound_T_3 = orr(_unboundedRange_anyRound_T_2) @[RoundAnyRawFNToRecFN.scala 205:70]
    node unboundedRange_anyRound = or(_unboundedRange_anyRound_T_1, _unboundedRange_anyRound_T_3) @[RoundAnyRawFNToRecFN.scala 205:49]
    node _unboundedRange_roundIncr_T = or(roundingMode_near_even, roundingMode_near_maxMag) @[RoundAnyRawFNToRecFN.scala 207:38]
    node _unboundedRange_roundIncr_T_1 = and(_unboundedRange_roundIncr_T, unboundedRange_roundPosBit) @[RoundAnyRawFNToRecFN.scala 207:67]
    node _unboundedRange_roundIncr_T_2 = and(roundMagUp, unboundedRange_anyRound) @[RoundAnyRawFNToRecFN.scala 209:29]
    node unboundedRange_roundIncr = or(_unboundedRange_roundIncr_T_1, _unboundedRange_roundIncr_T_2) @[RoundAnyRawFNToRecFN.scala 208:46]
    node _roundCarry_T = bits(roundedSig, 25, 25) @[RoundAnyRawFNToRecFN.scala 212:27]
    node _roundCarry_T_1 = bits(roundedSig, 24, 24) @[RoundAnyRawFNToRecFN.scala 213:27]
    node roundCarry = mux(doShiftSigDown1, _roundCarry_T, _roundCarry_T_1) @[RoundAnyRawFNToRecFN.scala 211:16]
    node _common_underflow_T = shr(io.in.sExp, 8) @[RoundAnyRawFNToRecFN.scala 220:49]
    node _common_underflow_T_1 = leq(_common_underflow_T, asSInt(UInt<1>("h0"))) @[RoundAnyRawFNToRecFN.scala 220:64]
    node _common_underflow_T_2 = and(anyRound, _common_underflow_T_1) @[RoundAnyRawFNToRecFN.scala 220:32]
    node _common_underflow_T_3 = bits(roundMask, 3, 3) @[RoundAnyRawFNToRecFN.scala 221:57]
    node _common_underflow_T_4 = bits(roundMask, 2, 2) @[RoundAnyRawFNToRecFN.scala 221:71]
    node _common_underflow_T_5 = mux(doShiftSigDown1, _common_underflow_T_3, _common_underflow_T_4) @[RoundAnyRawFNToRecFN.scala 221:30]
    node _common_underflow_T_6 = and(_common_underflow_T_2, _common_underflow_T_5) @[RoundAnyRawFNToRecFN.scala 220:72]
    node _common_underflow_T_7 = eq(io.detectTininess, UInt<1>("h1")) @[RoundAnyRawFNToRecFN.scala 222:49]
    node _common_underflow_T_8 = bits(roundMask, 4, 4) @[RoundAnyRawFNToRecFN.scala 224:49]
    node _common_underflow_T_9 = bits(roundMask, 3, 3) @[RoundAnyRawFNToRecFN.scala 225:49]
    node _common_underflow_T_10 = mux(doShiftSigDown1, _common_underflow_T_8, _common_underflow_T_9) @[RoundAnyRawFNToRecFN.scala 223:39]
    node _common_underflow_T_11 = eq(_common_underflow_T_10, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 223:34]
    node _common_underflow_T_12 = and(_common_underflow_T_7, _common_underflow_T_11) @[RoundAnyRawFNToRecFN.scala 222:77]
    node _common_underflow_T_13 = and(_common_underflow_T_12, roundCarry) @[RoundAnyRawFNToRecFN.scala 226:38]
    node _common_underflow_T_14 = and(_common_underflow_T_13, roundPosBit) @[RoundAnyRawFNToRecFN.scala 227:45]
    node _common_underflow_T_15 = and(_common_underflow_T_14, unboundedRange_roundIncr) @[RoundAnyRawFNToRecFN.scala 227:60]
    node _common_underflow_T_16 = eq(_common_underflow_T_15, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 222:27]
    node _common_underflow_T_17 = and(_common_underflow_T_6, _common_underflow_T_16) @[RoundAnyRawFNToRecFN.scala 221:76]
    node _common_underflow_T_18 = or(common_totalUnderflow, _common_underflow_T_17) @[RoundAnyRawFNToRecFN.scala 217:40]
    common_underflow <= _common_underflow_T_18 @[RoundAnyRawFNToRecFN.scala 215:26]
    node _common_inexact_T = or(common_totalUnderflow, anyRound) @[RoundAnyRawFNToRecFN.scala 230:49]
    common_inexact <= _common_inexact_T @[RoundAnyRawFNToRecFN.scala 230:24]
    node isNaNOut = or(io.invalidExc, io.in.isNaN) @[RoundAnyRawFNToRecFN.scala 235:34]
    node notNaN_isSpecialInfOut = or(io.infiniteExc, io.in.isInf) @[RoundAnyRawFNToRecFN.scala 236:49]
    node _commonCase_T = eq(isNaNOut, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 237:22]
    node _commonCase_T_1 = eq(notNaN_isSpecialInfOut, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 237:36]
    node _commonCase_T_2 = and(_commonCase_T, _commonCase_T_1) @[RoundAnyRawFNToRecFN.scala 237:33]
    node _commonCase_T_3 = eq(io.in.isZero, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 237:64]
    node commonCase = and(_commonCase_T_2, _commonCase_T_3) @[RoundAnyRawFNToRecFN.scala 237:61]
    node overflow = and(commonCase, common_overflow) @[RoundAnyRawFNToRecFN.scala 238:32]
    node underflow = and(commonCase, common_underflow) @[RoundAnyRawFNToRecFN.scala 239:32]
    node _inexact_T = and(commonCase, common_inexact) @[RoundAnyRawFNToRecFN.scala 240:43]
    node inexact = or(overflow, _inexact_T) @[RoundAnyRawFNToRecFN.scala 240:28]
    node _overflow_roundMagUp_T = or(roundingMode_near_even, roundingMode_near_maxMag) @[RoundAnyRawFNToRecFN.scala 243:32]
    node overflow_roundMagUp = or(_overflow_roundMagUp_T, roundMagUp) @[RoundAnyRawFNToRecFN.scala 243:60]
    node _pegMinNonzeroMagOut_T = and(commonCase, common_totalUnderflow) @[RoundAnyRawFNToRecFN.scala 245:20]
    node _pegMinNonzeroMagOut_T_1 = or(roundMagUp, roundingMode_odd) @[RoundAnyRawFNToRecFN.scala 245:60]
    node pegMinNonzeroMagOut = and(_pegMinNonzeroMagOut_T, _pegMinNonzeroMagOut_T_1) @[RoundAnyRawFNToRecFN.scala 245:45]
    node _pegMaxFiniteMagOut_T = eq(overflow_roundMagUp, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 246:42]
    node pegMaxFiniteMagOut = and(overflow, _pegMaxFiniteMagOut_T) @[RoundAnyRawFNToRecFN.scala 246:39]
    node _notNaN_isInfOut_T = and(overflow, overflow_roundMagUp) @[RoundAnyRawFNToRecFN.scala 248:45]
    node notNaN_isInfOut = or(notNaN_isSpecialInfOut, _notNaN_isInfOut_T) @[RoundAnyRawFNToRecFN.scala 248:32]
    node signOut = mux(isNaNOut, UInt<1>("h0"), io.in.sign) @[RoundAnyRawFNToRecFN.scala 250:22]
    node _expOut_T = or(io.in.isZero, common_totalUnderflow) @[RoundAnyRawFNToRecFN.scala 253:32]
    node _expOut_T_1 = mux(_expOut_T, UInt<9>("h1c0"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 253:18]
    node _expOut_T_2 = not(_expOut_T_1) @[RoundAnyRawFNToRecFN.scala 253:14]
    node _expOut_T_3 = and(common_expOut, _expOut_T_2) @[RoundAnyRawFNToRecFN.scala 252:24]
    node _expOut_T_4 = not(UInt<9>("h6b")) @[RoundAnyRawFNToRecFN.scala 258:19]
    node _expOut_T_5 = mux(pegMinNonzeroMagOut, _expOut_T_4, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 257:18]
    node _expOut_T_6 = not(_expOut_T_5) @[RoundAnyRawFNToRecFN.scala 257:14]
    node _expOut_T_7 = and(_expOut_T_3, _expOut_T_6) @[RoundAnyRawFNToRecFN.scala 256:17]
    node _expOut_T_8 = mux(pegMaxFiniteMagOut, UInt<9>("h80"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 261:18]
    node _expOut_T_9 = not(_expOut_T_8) @[RoundAnyRawFNToRecFN.scala 261:14]
    node _expOut_T_10 = and(_expOut_T_7, _expOut_T_9) @[RoundAnyRawFNToRecFN.scala 260:17]
    node _expOut_T_11 = mux(notNaN_isInfOut, UInt<9>("h40"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 265:18]
    node _expOut_T_12 = not(_expOut_T_11) @[RoundAnyRawFNToRecFN.scala 265:14]
    node _expOut_T_13 = and(_expOut_T_10, _expOut_T_12) @[RoundAnyRawFNToRecFN.scala 264:17]
    node _expOut_T_14 = mux(pegMinNonzeroMagOut, UInt<9>("h6b"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 269:16]
    node _expOut_T_15 = or(_expOut_T_13, _expOut_T_14) @[RoundAnyRawFNToRecFN.scala 268:18]
    node _expOut_T_16 = mux(pegMaxFiniteMagOut, UInt<9>("h17f"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 273:16]
    node _expOut_T_17 = or(_expOut_T_15, _expOut_T_16) @[RoundAnyRawFNToRecFN.scala 272:15]
    node _expOut_T_18 = mux(notNaN_isInfOut, UInt<9>("h180"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 277:16]
    node _expOut_T_19 = or(_expOut_T_17, _expOut_T_18) @[RoundAnyRawFNToRecFN.scala 276:15]
    node _expOut_T_20 = mux(isNaNOut, UInt<9>("h1c0"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 278:16]
    node expOut = or(_expOut_T_19, _expOut_T_20) @[RoundAnyRawFNToRecFN.scala 277:73]
    node _fractOut_T = or(isNaNOut, io.in.isZero) @[RoundAnyRawFNToRecFN.scala 280:22]
    node _fractOut_T_1 = or(_fractOut_T, common_totalUnderflow) @[RoundAnyRawFNToRecFN.scala 280:38]
    node _fractOut_T_2 = mux(isNaNOut, UInt<23>("h400000"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 281:16]
    node _fractOut_T_3 = mux(_fractOut_T_1, _fractOut_T_2, common_fractOut) @[RoundAnyRawFNToRecFN.scala 280:12]
    node _fractOut_T_4 = bits(pegMaxFiniteMagOut, 0, 0) @[Bitwise.scala 77:15]
    node _fractOut_T_5 = mux(_fractOut_T_4, UInt<23>("h7fffff"), UInt<23>("h0")) @[Bitwise.scala 77:12]
    node fractOut = or(_fractOut_T_3, _fractOut_T_5) @[RoundAnyRawFNToRecFN.scala 283:11]
    node _io_out_T = cat(signOut, expOut) @[RoundAnyRawFNToRecFN.scala 286:23]
    node _io_out_T_1 = cat(_io_out_T, fractOut) @[RoundAnyRawFNToRecFN.scala 286:33]
    io.out <= _io_out_T_1 @[RoundAnyRawFNToRecFN.scala 286:12]
    node _io_exceptionFlags_T = cat(io.invalidExc, io.infiniteExc) @[RoundAnyRawFNToRecFN.scala 288:23]
    node _io_exceptionFlags_T_1 = cat(_io_exceptionFlags_T, overflow) @[RoundAnyRawFNToRecFN.scala 288:41]
    node _io_exceptionFlags_T_2 = cat(_io_exceptionFlags_T_1, underflow) @[RoundAnyRawFNToRecFN.scala 288:53]
    node _io_exceptionFlags_T_3 = cat(_io_exceptionFlags_T_2, inexact) @[RoundAnyRawFNToRecFN.scala 288:66]
    io.exceptionFlags <= _io_exceptionFlags_T_3 @[RoundAnyRawFNToRecFN.scala 287:23]

  module RoundRawFNToRecFN_e8_s24_7 :
    output io : { flip invalidExc : UInt<1>, flip infiniteExc : UInt<1>, flip in : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<27>}, flip roundingMode : UInt<3>, flip detectTininess : UInt<1>, out : UInt<33>, exceptionFlags : UInt<5>}

    inst roundAnyRawFNToRecFN of RoundAnyRawFNToRecFN_ie8_is26_oe8_os24_7 @[RoundAnyRawFNToRecFN.scala 310:15]
    roundAnyRawFNToRecFN.io.invalidExc <= io.invalidExc @[RoundAnyRawFNToRecFN.scala 313:44]
    roundAnyRawFNToRecFN.io.infiniteExc <= io.infiniteExc @[RoundAnyRawFNToRecFN.scala 314:44]
    roundAnyRawFNToRecFN.io.in.sig <= io.in.sig @[RoundAnyRawFNToRecFN.scala 315:44]
    roundAnyRawFNToRecFN.io.in.sExp <= io.in.sExp @[RoundAnyRawFNToRecFN.scala 315:44]
    roundAnyRawFNToRecFN.io.in.sign <= io.in.sign @[RoundAnyRawFNToRecFN.scala 315:44]
    roundAnyRawFNToRecFN.io.in.isZero <= io.in.isZero @[RoundAnyRawFNToRecFN.scala 315:44]
    roundAnyRawFNToRecFN.io.in.isInf <= io.in.isInf @[RoundAnyRawFNToRecFN.scala 315:44]
    roundAnyRawFNToRecFN.io.in.isNaN <= io.in.isNaN @[RoundAnyRawFNToRecFN.scala 315:44]
    roundAnyRawFNToRecFN.io.roundingMode <= io.roundingMode @[RoundAnyRawFNToRecFN.scala 316:44]
    roundAnyRawFNToRecFN.io.detectTininess <= io.detectTininess @[RoundAnyRawFNToRecFN.scala 317:44]
    io.out <= roundAnyRawFNToRecFN.io.out @[RoundAnyRawFNToRecFN.scala 318:23]
    io.exceptionFlags <= roundAnyRawFNToRecFN.io.exceptionFlags @[RoundAnyRawFNToRecFN.scala 319:23]

  module MulRecFN_6 :
    output io : { flip a : UInt<33>, flip b : UInt<33>, flip roundingMode : UInt<3>, flip detectTininess : UInt<1>, out : UInt<33>, exceptionFlags : UInt<5>}

    inst mulRawFN of MulRawFN_6 @[MulRecFN.scala 113:26]
    node mulRawFN_io_a_exp = bits(io.a, 31, 23) @[rawFloatFromRecFN.scala 51:21]
    node _mulRawFN_io_a_isZero_T = bits(mulRawFN_io_a_exp, 8, 6) @[rawFloatFromRecFN.scala 52:28]
    node mulRawFN_io_a_isZero = eq(_mulRawFN_io_a_isZero_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 52:53]
    node _mulRawFN_io_a_isSpecial_T = bits(mulRawFN_io_a_exp, 8, 7) @[rawFloatFromRecFN.scala 53:28]
    node mulRawFN_io_a_isSpecial = eq(_mulRawFN_io_a_isSpecial_T, UInt<2>("h3")) @[rawFloatFromRecFN.scala 53:53]
    wire mulRawFN_io_a_out : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>} @[rawFloatFromRecFN.scala 55:23]
    node _mulRawFN_io_a_out_isNaN_T = bits(mulRawFN_io_a_exp, 6, 6) @[rawFloatFromRecFN.scala 56:41]
    node _mulRawFN_io_a_out_isNaN_T_1 = and(mulRawFN_io_a_isSpecial, _mulRawFN_io_a_out_isNaN_T) @[rawFloatFromRecFN.scala 56:33]
    mulRawFN_io_a_out.isNaN <= _mulRawFN_io_a_out_isNaN_T_1 @[rawFloatFromRecFN.scala 56:20]
    node _mulRawFN_io_a_out_isInf_T = bits(mulRawFN_io_a_exp, 6, 6) @[rawFloatFromRecFN.scala 57:41]
    node _mulRawFN_io_a_out_isInf_T_1 = eq(_mulRawFN_io_a_out_isInf_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 57:36]
    node _mulRawFN_io_a_out_isInf_T_2 = and(mulRawFN_io_a_isSpecial, _mulRawFN_io_a_out_isInf_T_1) @[rawFloatFromRecFN.scala 57:33]
    mulRawFN_io_a_out.isInf <= _mulRawFN_io_a_out_isInf_T_2 @[rawFloatFromRecFN.scala 57:20]
    mulRawFN_io_a_out.isZero <= mulRawFN_io_a_isZero @[rawFloatFromRecFN.scala 58:20]
    node _mulRawFN_io_a_out_sign_T = bits(io.a, 32, 32) @[rawFloatFromRecFN.scala 59:25]
    mulRawFN_io_a_out.sign <= _mulRawFN_io_a_out_sign_T @[rawFloatFromRecFN.scala 59:20]
    node _mulRawFN_io_a_out_sExp_T = cvt(mulRawFN_io_a_exp) @[rawFloatFromRecFN.scala 60:27]
    mulRawFN_io_a_out.sExp <= _mulRawFN_io_a_out_sExp_T @[rawFloatFromRecFN.scala 60:20]
    node _mulRawFN_io_a_out_sig_T = eq(mulRawFN_io_a_isZero, UInt<1>("h0")) @[rawFloatFromRecFN.scala 61:35]
    node _mulRawFN_io_a_out_sig_T_1 = cat(UInt<1>("h0"), _mulRawFN_io_a_out_sig_T) @[rawFloatFromRecFN.scala 61:32]
    node _mulRawFN_io_a_out_sig_T_2 = bits(io.a, 22, 0) @[rawFloatFromRecFN.scala 61:49]
    node _mulRawFN_io_a_out_sig_T_3 = cat(_mulRawFN_io_a_out_sig_T_1, _mulRawFN_io_a_out_sig_T_2) @[rawFloatFromRecFN.scala 61:44]
    mulRawFN_io_a_out.sig <= _mulRawFN_io_a_out_sig_T_3 @[rawFloatFromRecFN.scala 61:20]
    mulRawFN.io.a.sig <= mulRawFN_io_a_out.sig @[MulRecFN.scala 115:19]
    mulRawFN.io.a.sExp <= mulRawFN_io_a_out.sExp @[MulRecFN.scala 115:19]
    mulRawFN.io.a.sign <= mulRawFN_io_a_out.sign @[MulRecFN.scala 115:19]
    mulRawFN.io.a.isZero <= mulRawFN_io_a_out.isZero @[MulRecFN.scala 115:19]
    mulRawFN.io.a.isInf <= mulRawFN_io_a_out.isInf @[MulRecFN.scala 115:19]
    mulRawFN.io.a.isNaN <= mulRawFN_io_a_out.isNaN @[MulRecFN.scala 115:19]
    node mulRawFN_io_b_exp = bits(io.b, 31, 23) @[rawFloatFromRecFN.scala 51:21]
    node _mulRawFN_io_b_isZero_T = bits(mulRawFN_io_b_exp, 8, 6) @[rawFloatFromRecFN.scala 52:28]
    node mulRawFN_io_b_isZero = eq(_mulRawFN_io_b_isZero_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 52:53]
    node _mulRawFN_io_b_isSpecial_T = bits(mulRawFN_io_b_exp, 8, 7) @[rawFloatFromRecFN.scala 53:28]
    node mulRawFN_io_b_isSpecial = eq(_mulRawFN_io_b_isSpecial_T, UInt<2>("h3")) @[rawFloatFromRecFN.scala 53:53]
    wire mulRawFN_io_b_out : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>} @[rawFloatFromRecFN.scala 55:23]
    node _mulRawFN_io_b_out_isNaN_T = bits(mulRawFN_io_b_exp, 6, 6) @[rawFloatFromRecFN.scala 56:41]
    node _mulRawFN_io_b_out_isNaN_T_1 = and(mulRawFN_io_b_isSpecial, _mulRawFN_io_b_out_isNaN_T) @[rawFloatFromRecFN.scala 56:33]
    mulRawFN_io_b_out.isNaN <= _mulRawFN_io_b_out_isNaN_T_1 @[rawFloatFromRecFN.scala 56:20]
    node _mulRawFN_io_b_out_isInf_T = bits(mulRawFN_io_b_exp, 6, 6) @[rawFloatFromRecFN.scala 57:41]
    node _mulRawFN_io_b_out_isInf_T_1 = eq(_mulRawFN_io_b_out_isInf_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 57:36]
    node _mulRawFN_io_b_out_isInf_T_2 = and(mulRawFN_io_b_isSpecial, _mulRawFN_io_b_out_isInf_T_1) @[rawFloatFromRecFN.scala 57:33]
    mulRawFN_io_b_out.isInf <= _mulRawFN_io_b_out_isInf_T_2 @[rawFloatFromRecFN.scala 57:20]
    mulRawFN_io_b_out.isZero <= mulRawFN_io_b_isZero @[rawFloatFromRecFN.scala 58:20]
    node _mulRawFN_io_b_out_sign_T = bits(io.b, 32, 32) @[rawFloatFromRecFN.scala 59:25]
    mulRawFN_io_b_out.sign <= _mulRawFN_io_b_out_sign_T @[rawFloatFromRecFN.scala 59:20]
    node _mulRawFN_io_b_out_sExp_T = cvt(mulRawFN_io_b_exp) @[rawFloatFromRecFN.scala 60:27]
    mulRawFN_io_b_out.sExp <= _mulRawFN_io_b_out_sExp_T @[rawFloatFromRecFN.scala 60:20]
    node _mulRawFN_io_b_out_sig_T = eq(mulRawFN_io_b_isZero, UInt<1>("h0")) @[rawFloatFromRecFN.scala 61:35]
    node _mulRawFN_io_b_out_sig_T_1 = cat(UInt<1>("h0"), _mulRawFN_io_b_out_sig_T) @[rawFloatFromRecFN.scala 61:32]
    node _mulRawFN_io_b_out_sig_T_2 = bits(io.b, 22, 0) @[rawFloatFromRecFN.scala 61:49]
    node _mulRawFN_io_b_out_sig_T_3 = cat(_mulRawFN_io_b_out_sig_T_1, _mulRawFN_io_b_out_sig_T_2) @[rawFloatFromRecFN.scala 61:44]
    mulRawFN_io_b_out.sig <= _mulRawFN_io_b_out_sig_T_3 @[rawFloatFromRecFN.scala 61:20]
    mulRawFN.io.b.sig <= mulRawFN_io_b_out.sig @[MulRecFN.scala 116:19]
    mulRawFN.io.b.sExp <= mulRawFN_io_b_out.sExp @[MulRecFN.scala 116:19]
    mulRawFN.io.b.sign <= mulRawFN_io_b_out.sign @[MulRecFN.scala 116:19]
    mulRawFN.io.b.isZero <= mulRawFN_io_b_out.isZero @[MulRecFN.scala 116:19]
    mulRawFN.io.b.isInf <= mulRawFN_io_b_out.isInf @[MulRecFN.scala 116:19]
    mulRawFN.io.b.isNaN <= mulRawFN_io_b_out.isNaN @[MulRecFN.scala 116:19]
    inst roundRawFNToRecFN of RoundRawFNToRecFN_e8_s24_7 @[MulRecFN.scala 121:15]
    roundRawFNToRecFN.io.invalidExc <= mulRawFN.io.invalidExc @[MulRecFN.scala 122:39]
    roundRawFNToRecFN.io.infiniteExc <= UInt<1>("h0") @[MulRecFN.scala 123:39]
    roundRawFNToRecFN.io.in.sig <= mulRawFN.io.rawOut.sig @[MulRecFN.scala 124:39]
    roundRawFNToRecFN.io.in.sExp <= mulRawFN.io.rawOut.sExp @[MulRecFN.scala 124:39]
    roundRawFNToRecFN.io.in.sign <= mulRawFN.io.rawOut.sign @[MulRecFN.scala 124:39]
    roundRawFNToRecFN.io.in.isZero <= mulRawFN.io.rawOut.isZero @[MulRecFN.scala 124:39]
    roundRawFNToRecFN.io.in.isInf <= mulRawFN.io.rawOut.isInf @[MulRecFN.scala 124:39]
    roundRawFNToRecFN.io.in.isNaN <= mulRawFN.io.rawOut.isNaN @[MulRecFN.scala 124:39]
    roundRawFNToRecFN.io.roundingMode <= io.roundingMode @[MulRecFN.scala 125:39]
    roundRawFNToRecFN.io.detectTininess <= io.detectTininess @[MulRecFN.scala 126:41]
    io.out <= roundRawFNToRecFN.io.out @[MulRecFN.scala 127:23]
    io.exceptionFlags <= roundRawFNToRecFN.io.exceptionFlags @[MulRecFN.scala 128:23]

  module FP32Multiplier_6 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<32>, flip b : UInt<32>, result : UInt<32>}

    inst mulRecFN of MulRecFN_6 @[FPU.scala 88:26]
    node a_recoded_rawIn_sign = bits(io.a, 31, 31) @[rawFloatFromFN.scala 44:18]
    node a_recoded_rawIn_expIn = bits(io.a, 30, 23) @[rawFloatFromFN.scala 45:19]
    node a_recoded_rawIn_fractIn = bits(io.a, 22, 0) @[rawFloatFromFN.scala 46:21]
    node a_recoded_rawIn_isZeroExpIn = eq(a_recoded_rawIn_expIn, UInt<1>("h0")) @[rawFloatFromFN.scala 48:30]
    node a_recoded_rawIn_isZeroFractIn = eq(a_recoded_rawIn_fractIn, UInt<1>("h0")) @[rawFloatFromFN.scala 49:34]
    node _a_recoded_rawIn_normDist_T = bits(a_recoded_rawIn_fractIn, 0, 0) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_1 = bits(a_recoded_rawIn_fractIn, 1, 1) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_2 = bits(a_recoded_rawIn_fractIn, 2, 2) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_3 = bits(a_recoded_rawIn_fractIn, 3, 3) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_4 = bits(a_recoded_rawIn_fractIn, 4, 4) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_5 = bits(a_recoded_rawIn_fractIn, 5, 5) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_6 = bits(a_recoded_rawIn_fractIn, 6, 6) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_7 = bits(a_recoded_rawIn_fractIn, 7, 7) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_8 = bits(a_recoded_rawIn_fractIn, 8, 8) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_9 = bits(a_recoded_rawIn_fractIn, 9, 9) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_10 = bits(a_recoded_rawIn_fractIn, 10, 10) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_11 = bits(a_recoded_rawIn_fractIn, 11, 11) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_12 = bits(a_recoded_rawIn_fractIn, 12, 12) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_13 = bits(a_recoded_rawIn_fractIn, 13, 13) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_14 = bits(a_recoded_rawIn_fractIn, 14, 14) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_15 = bits(a_recoded_rawIn_fractIn, 15, 15) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_16 = bits(a_recoded_rawIn_fractIn, 16, 16) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_17 = bits(a_recoded_rawIn_fractIn, 17, 17) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_18 = bits(a_recoded_rawIn_fractIn, 18, 18) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_19 = bits(a_recoded_rawIn_fractIn, 19, 19) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_20 = bits(a_recoded_rawIn_fractIn, 20, 20) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_21 = bits(a_recoded_rawIn_fractIn, 21, 21) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_22 = bits(a_recoded_rawIn_fractIn, 22, 22) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_23 = mux(_a_recoded_rawIn_normDist_T_1, UInt<5>("h15"), UInt<5>("h16")) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_24 = mux(_a_recoded_rawIn_normDist_T_2, UInt<5>("h14"), _a_recoded_rawIn_normDist_T_23) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_25 = mux(_a_recoded_rawIn_normDist_T_3, UInt<5>("h13"), _a_recoded_rawIn_normDist_T_24) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_26 = mux(_a_recoded_rawIn_normDist_T_4, UInt<5>("h12"), _a_recoded_rawIn_normDist_T_25) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_27 = mux(_a_recoded_rawIn_normDist_T_5, UInt<5>("h11"), _a_recoded_rawIn_normDist_T_26) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_28 = mux(_a_recoded_rawIn_normDist_T_6, UInt<5>("h10"), _a_recoded_rawIn_normDist_T_27) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_29 = mux(_a_recoded_rawIn_normDist_T_7, UInt<4>("hf"), _a_recoded_rawIn_normDist_T_28) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_30 = mux(_a_recoded_rawIn_normDist_T_8, UInt<4>("he"), _a_recoded_rawIn_normDist_T_29) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_31 = mux(_a_recoded_rawIn_normDist_T_9, UInt<4>("hd"), _a_recoded_rawIn_normDist_T_30) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_32 = mux(_a_recoded_rawIn_normDist_T_10, UInt<4>("hc"), _a_recoded_rawIn_normDist_T_31) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_33 = mux(_a_recoded_rawIn_normDist_T_11, UInt<4>("hb"), _a_recoded_rawIn_normDist_T_32) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_34 = mux(_a_recoded_rawIn_normDist_T_12, UInt<4>("ha"), _a_recoded_rawIn_normDist_T_33) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_35 = mux(_a_recoded_rawIn_normDist_T_13, UInt<4>("h9"), _a_recoded_rawIn_normDist_T_34) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_36 = mux(_a_recoded_rawIn_normDist_T_14, UInt<4>("h8"), _a_recoded_rawIn_normDist_T_35) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_37 = mux(_a_recoded_rawIn_normDist_T_15, UInt<3>("h7"), _a_recoded_rawIn_normDist_T_36) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_38 = mux(_a_recoded_rawIn_normDist_T_16, UInt<3>("h6"), _a_recoded_rawIn_normDist_T_37) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_39 = mux(_a_recoded_rawIn_normDist_T_17, UInt<3>("h5"), _a_recoded_rawIn_normDist_T_38) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_40 = mux(_a_recoded_rawIn_normDist_T_18, UInt<3>("h4"), _a_recoded_rawIn_normDist_T_39) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_41 = mux(_a_recoded_rawIn_normDist_T_19, UInt<2>("h3"), _a_recoded_rawIn_normDist_T_40) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_42 = mux(_a_recoded_rawIn_normDist_T_20, UInt<2>("h2"), _a_recoded_rawIn_normDist_T_41) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_43 = mux(_a_recoded_rawIn_normDist_T_21, UInt<1>("h1"), _a_recoded_rawIn_normDist_T_42) @[Mux.scala 47:70]
    node a_recoded_rawIn_normDist = mux(_a_recoded_rawIn_normDist_T_22, UInt<1>("h0"), _a_recoded_rawIn_normDist_T_43) @[Mux.scala 47:70]
    node _a_recoded_rawIn_subnormFract_T = dshl(a_recoded_rawIn_fractIn, a_recoded_rawIn_normDist) @[rawFloatFromFN.scala 52:33]
    node _a_recoded_rawIn_subnormFract_T_1 = bits(_a_recoded_rawIn_subnormFract_T, 21, 0) @[rawFloatFromFN.scala 52:46]
    node a_recoded_rawIn_subnormFract = shl(_a_recoded_rawIn_subnormFract_T_1, 1) @[rawFloatFromFN.scala 52:64]
    node _a_recoded_rawIn_adjustedExp_T = xor(a_recoded_rawIn_normDist, UInt<9>("h1ff")) @[rawFloatFromFN.scala 55:18]
    node _a_recoded_rawIn_adjustedExp_T_1 = mux(a_recoded_rawIn_isZeroExpIn, _a_recoded_rawIn_adjustedExp_T, a_recoded_rawIn_expIn) @[rawFloatFromFN.scala 54:10]
    node _a_recoded_rawIn_adjustedExp_T_2 = mux(a_recoded_rawIn_isZeroExpIn, UInt<2>("h2"), UInt<1>("h1")) @[rawFloatFromFN.scala 58:14]
    node _a_recoded_rawIn_adjustedExp_T_3 = or(UInt<8>("h80"), _a_recoded_rawIn_adjustedExp_T_2) @[rawFloatFromFN.scala 58:9]
    node _a_recoded_rawIn_adjustedExp_T_4 = add(_a_recoded_rawIn_adjustedExp_T_1, _a_recoded_rawIn_adjustedExp_T_3) @[rawFloatFromFN.scala 57:9]
    node a_recoded_rawIn_adjustedExp = tail(_a_recoded_rawIn_adjustedExp_T_4, 1) @[rawFloatFromFN.scala 57:9]
    node a_recoded_rawIn_isZero = and(a_recoded_rawIn_isZeroExpIn, a_recoded_rawIn_isZeroFractIn) @[rawFloatFromFN.scala 60:30]
    node _a_recoded_rawIn_isSpecial_T = bits(a_recoded_rawIn_adjustedExp, 8, 7) @[rawFloatFromFN.scala 61:32]
    node a_recoded_rawIn_isSpecial = eq(_a_recoded_rawIn_isSpecial_T, UInt<2>("h3")) @[rawFloatFromFN.scala 61:57]
    wire a_recoded_rawIn : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>} @[rawFloatFromFN.scala 63:19]
    node _a_recoded_rawIn_out_isNaN_T = eq(a_recoded_rawIn_isZeroFractIn, UInt<1>("h0")) @[rawFloatFromFN.scala 64:31]
    node _a_recoded_rawIn_out_isNaN_T_1 = and(a_recoded_rawIn_isSpecial, _a_recoded_rawIn_out_isNaN_T) @[rawFloatFromFN.scala 64:28]
    a_recoded_rawIn.isNaN <= _a_recoded_rawIn_out_isNaN_T_1 @[rawFloatFromFN.scala 64:15]
    node _a_recoded_rawIn_out_isInf_T = and(a_recoded_rawIn_isSpecial, a_recoded_rawIn_isZeroFractIn) @[rawFloatFromFN.scala 65:28]
    a_recoded_rawIn.isInf <= _a_recoded_rawIn_out_isInf_T @[rawFloatFromFN.scala 65:15]
    a_recoded_rawIn.isZero <= a_recoded_rawIn_isZero @[rawFloatFromFN.scala 66:16]
    a_recoded_rawIn.sign <= a_recoded_rawIn_sign @[rawFloatFromFN.scala 67:14]
    node _a_recoded_rawIn_out_sExp_T = bits(a_recoded_rawIn_adjustedExp, 8, 0) @[rawFloatFromFN.scala 68:28]
    node _a_recoded_rawIn_out_sExp_T_1 = cvt(_a_recoded_rawIn_out_sExp_T) @[rawFloatFromFN.scala 68:42]
    a_recoded_rawIn.sExp <= _a_recoded_rawIn_out_sExp_T_1 @[rawFloatFromFN.scala 68:14]
    node _a_recoded_rawIn_out_sig_T = eq(a_recoded_rawIn_isZero, UInt<1>("h0")) @[rawFloatFromFN.scala 70:19]
    node _a_recoded_rawIn_out_sig_T_1 = cat(UInt<1>("h0"), _a_recoded_rawIn_out_sig_T) @[rawFloatFromFN.scala 70:16]
    node _a_recoded_rawIn_out_sig_T_2 = mux(a_recoded_rawIn_isZeroExpIn, a_recoded_rawIn_subnormFract, a_recoded_rawIn_fractIn) @[rawFloatFromFN.scala 70:33]
    node _a_recoded_rawIn_out_sig_T_3 = cat(_a_recoded_rawIn_out_sig_T_1, _a_recoded_rawIn_out_sig_T_2) @[rawFloatFromFN.scala 70:27]
    a_recoded_rawIn.sig <= _a_recoded_rawIn_out_sig_T_3 @[rawFloatFromFN.scala 69:13]
    node _a_recoded_T = bits(a_recoded_rawIn.sExp, 8, 6) @[recFNFromFN.scala 48:50]
    node _a_recoded_T_1 = mux(a_recoded_rawIn.isZero, UInt<3>("h0"), _a_recoded_T) @[recFNFromFN.scala 48:15]
    node _a_recoded_T_2 = mux(a_recoded_rawIn.isNaN, UInt<1>("h1"), UInt<1>("h0")) @[recFNFromFN.scala 49:20]
    node _a_recoded_T_3 = or(_a_recoded_T_1, _a_recoded_T_2) @[recFNFromFN.scala 48:76]
    node _a_recoded_T_4 = cat(a_recoded_rawIn.sign, _a_recoded_T_3) @[recFNFromFN.scala 47:20]
    node _a_recoded_T_5 = bits(a_recoded_rawIn.sExp, 5, 0) @[recFNFromFN.scala 50:23]
    node _a_recoded_T_6 = cat(_a_recoded_T_4, _a_recoded_T_5) @[recFNFromFN.scala 49:45]
    node _a_recoded_T_7 = bits(a_recoded_rawIn.sig, 22, 0) @[recFNFromFN.scala 51:22]
    node a_recoded = cat(_a_recoded_T_6, _a_recoded_T_7) @[recFNFromFN.scala 50:41]
    node b_recoded_rawIn_sign = bits(io.b, 31, 31) @[rawFloatFromFN.scala 44:18]
    node b_recoded_rawIn_expIn = bits(io.b, 30, 23) @[rawFloatFromFN.scala 45:19]
    node b_recoded_rawIn_fractIn = bits(io.b, 22, 0) @[rawFloatFromFN.scala 46:21]
    node b_recoded_rawIn_isZeroExpIn = eq(b_recoded_rawIn_expIn, UInt<1>("h0")) @[rawFloatFromFN.scala 48:30]
    node b_recoded_rawIn_isZeroFractIn = eq(b_recoded_rawIn_fractIn, UInt<1>("h0")) @[rawFloatFromFN.scala 49:34]
    node _b_recoded_rawIn_normDist_T = bits(b_recoded_rawIn_fractIn, 0, 0) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_1 = bits(b_recoded_rawIn_fractIn, 1, 1) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_2 = bits(b_recoded_rawIn_fractIn, 2, 2) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_3 = bits(b_recoded_rawIn_fractIn, 3, 3) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_4 = bits(b_recoded_rawIn_fractIn, 4, 4) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_5 = bits(b_recoded_rawIn_fractIn, 5, 5) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_6 = bits(b_recoded_rawIn_fractIn, 6, 6) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_7 = bits(b_recoded_rawIn_fractIn, 7, 7) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_8 = bits(b_recoded_rawIn_fractIn, 8, 8) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_9 = bits(b_recoded_rawIn_fractIn, 9, 9) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_10 = bits(b_recoded_rawIn_fractIn, 10, 10) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_11 = bits(b_recoded_rawIn_fractIn, 11, 11) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_12 = bits(b_recoded_rawIn_fractIn, 12, 12) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_13 = bits(b_recoded_rawIn_fractIn, 13, 13) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_14 = bits(b_recoded_rawIn_fractIn, 14, 14) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_15 = bits(b_recoded_rawIn_fractIn, 15, 15) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_16 = bits(b_recoded_rawIn_fractIn, 16, 16) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_17 = bits(b_recoded_rawIn_fractIn, 17, 17) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_18 = bits(b_recoded_rawIn_fractIn, 18, 18) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_19 = bits(b_recoded_rawIn_fractIn, 19, 19) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_20 = bits(b_recoded_rawIn_fractIn, 20, 20) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_21 = bits(b_recoded_rawIn_fractIn, 21, 21) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_22 = bits(b_recoded_rawIn_fractIn, 22, 22) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_23 = mux(_b_recoded_rawIn_normDist_T_1, UInt<5>("h15"), UInt<5>("h16")) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_24 = mux(_b_recoded_rawIn_normDist_T_2, UInt<5>("h14"), _b_recoded_rawIn_normDist_T_23) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_25 = mux(_b_recoded_rawIn_normDist_T_3, UInt<5>("h13"), _b_recoded_rawIn_normDist_T_24) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_26 = mux(_b_recoded_rawIn_normDist_T_4, UInt<5>("h12"), _b_recoded_rawIn_normDist_T_25) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_27 = mux(_b_recoded_rawIn_normDist_T_5, UInt<5>("h11"), _b_recoded_rawIn_normDist_T_26) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_28 = mux(_b_recoded_rawIn_normDist_T_6, UInt<5>("h10"), _b_recoded_rawIn_normDist_T_27) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_29 = mux(_b_recoded_rawIn_normDist_T_7, UInt<4>("hf"), _b_recoded_rawIn_normDist_T_28) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_30 = mux(_b_recoded_rawIn_normDist_T_8, UInt<4>("he"), _b_recoded_rawIn_normDist_T_29) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_31 = mux(_b_recoded_rawIn_normDist_T_9, UInt<4>("hd"), _b_recoded_rawIn_normDist_T_30) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_32 = mux(_b_recoded_rawIn_normDist_T_10, UInt<4>("hc"), _b_recoded_rawIn_normDist_T_31) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_33 = mux(_b_recoded_rawIn_normDist_T_11, UInt<4>("hb"), _b_recoded_rawIn_normDist_T_32) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_34 = mux(_b_recoded_rawIn_normDist_T_12, UInt<4>("ha"), _b_recoded_rawIn_normDist_T_33) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_35 = mux(_b_recoded_rawIn_normDist_T_13, UInt<4>("h9"), _b_recoded_rawIn_normDist_T_34) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_36 = mux(_b_recoded_rawIn_normDist_T_14, UInt<4>("h8"), _b_recoded_rawIn_normDist_T_35) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_37 = mux(_b_recoded_rawIn_normDist_T_15, UInt<3>("h7"), _b_recoded_rawIn_normDist_T_36) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_38 = mux(_b_recoded_rawIn_normDist_T_16, UInt<3>("h6"), _b_recoded_rawIn_normDist_T_37) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_39 = mux(_b_recoded_rawIn_normDist_T_17, UInt<3>("h5"), _b_recoded_rawIn_normDist_T_38) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_40 = mux(_b_recoded_rawIn_normDist_T_18, UInt<3>("h4"), _b_recoded_rawIn_normDist_T_39) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_41 = mux(_b_recoded_rawIn_normDist_T_19, UInt<2>("h3"), _b_recoded_rawIn_normDist_T_40) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_42 = mux(_b_recoded_rawIn_normDist_T_20, UInt<2>("h2"), _b_recoded_rawIn_normDist_T_41) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_43 = mux(_b_recoded_rawIn_normDist_T_21, UInt<1>("h1"), _b_recoded_rawIn_normDist_T_42) @[Mux.scala 47:70]
    node b_recoded_rawIn_normDist = mux(_b_recoded_rawIn_normDist_T_22, UInt<1>("h0"), _b_recoded_rawIn_normDist_T_43) @[Mux.scala 47:70]
    node _b_recoded_rawIn_subnormFract_T = dshl(b_recoded_rawIn_fractIn, b_recoded_rawIn_normDist) @[rawFloatFromFN.scala 52:33]
    node _b_recoded_rawIn_subnormFract_T_1 = bits(_b_recoded_rawIn_subnormFract_T, 21, 0) @[rawFloatFromFN.scala 52:46]
    node b_recoded_rawIn_subnormFract = shl(_b_recoded_rawIn_subnormFract_T_1, 1) @[rawFloatFromFN.scala 52:64]
    node _b_recoded_rawIn_adjustedExp_T = xor(b_recoded_rawIn_normDist, UInt<9>("h1ff")) @[rawFloatFromFN.scala 55:18]
    node _b_recoded_rawIn_adjustedExp_T_1 = mux(b_recoded_rawIn_isZeroExpIn, _b_recoded_rawIn_adjustedExp_T, b_recoded_rawIn_expIn) @[rawFloatFromFN.scala 54:10]
    node _b_recoded_rawIn_adjustedExp_T_2 = mux(b_recoded_rawIn_isZeroExpIn, UInt<2>("h2"), UInt<1>("h1")) @[rawFloatFromFN.scala 58:14]
    node _b_recoded_rawIn_adjustedExp_T_3 = or(UInt<8>("h80"), _b_recoded_rawIn_adjustedExp_T_2) @[rawFloatFromFN.scala 58:9]
    node _b_recoded_rawIn_adjustedExp_T_4 = add(_b_recoded_rawIn_adjustedExp_T_1, _b_recoded_rawIn_adjustedExp_T_3) @[rawFloatFromFN.scala 57:9]
    node b_recoded_rawIn_adjustedExp = tail(_b_recoded_rawIn_adjustedExp_T_4, 1) @[rawFloatFromFN.scala 57:9]
    node b_recoded_rawIn_isZero = and(b_recoded_rawIn_isZeroExpIn, b_recoded_rawIn_isZeroFractIn) @[rawFloatFromFN.scala 60:30]
    node _b_recoded_rawIn_isSpecial_T = bits(b_recoded_rawIn_adjustedExp, 8, 7) @[rawFloatFromFN.scala 61:32]
    node b_recoded_rawIn_isSpecial = eq(_b_recoded_rawIn_isSpecial_T, UInt<2>("h3")) @[rawFloatFromFN.scala 61:57]
    wire b_recoded_rawIn : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>} @[rawFloatFromFN.scala 63:19]
    node _b_recoded_rawIn_out_isNaN_T = eq(b_recoded_rawIn_isZeroFractIn, UInt<1>("h0")) @[rawFloatFromFN.scala 64:31]
    node _b_recoded_rawIn_out_isNaN_T_1 = and(b_recoded_rawIn_isSpecial, _b_recoded_rawIn_out_isNaN_T) @[rawFloatFromFN.scala 64:28]
    b_recoded_rawIn.isNaN <= _b_recoded_rawIn_out_isNaN_T_1 @[rawFloatFromFN.scala 64:15]
    node _b_recoded_rawIn_out_isInf_T = and(b_recoded_rawIn_isSpecial, b_recoded_rawIn_isZeroFractIn) @[rawFloatFromFN.scala 65:28]
    b_recoded_rawIn.isInf <= _b_recoded_rawIn_out_isInf_T @[rawFloatFromFN.scala 65:15]
    b_recoded_rawIn.isZero <= b_recoded_rawIn_isZero @[rawFloatFromFN.scala 66:16]
    b_recoded_rawIn.sign <= b_recoded_rawIn_sign @[rawFloatFromFN.scala 67:14]
    node _b_recoded_rawIn_out_sExp_T = bits(b_recoded_rawIn_adjustedExp, 8, 0) @[rawFloatFromFN.scala 68:28]
    node _b_recoded_rawIn_out_sExp_T_1 = cvt(_b_recoded_rawIn_out_sExp_T) @[rawFloatFromFN.scala 68:42]
    b_recoded_rawIn.sExp <= _b_recoded_rawIn_out_sExp_T_1 @[rawFloatFromFN.scala 68:14]
    node _b_recoded_rawIn_out_sig_T = eq(b_recoded_rawIn_isZero, UInt<1>("h0")) @[rawFloatFromFN.scala 70:19]
    node _b_recoded_rawIn_out_sig_T_1 = cat(UInt<1>("h0"), _b_recoded_rawIn_out_sig_T) @[rawFloatFromFN.scala 70:16]
    node _b_recoded_rawIn_out_sig_T_2 = mux(b_recoded_rawIn_isZeroExpIn, b_recoded_rawIn_subnormFract, b_recoded_rawIn_fractIn) @[rawFloatFromFN.scala 70:33]
    node _b_recoded_rawIn_out_sig_T_3 = cat(_b_recoded_rawIn_out_sig_T_1, _b_recoded_rawIn_out_sig_T_2) @[rawFloatFromFN.scala 70:27]
    b_recoded_rawIn.sig <= _b_recoded_rawIn_out_sig_T_3 @[rawFloatFromFN.scala 69:13]
    node _b_recoded_T = bits(b_recoded_rawIn.sExp, 8, 6) @[recFNFromFN.scala 48:50]
    node _b_recoded_T_1 = mux(b_recoded_rawIn.isZero, UInt<3>("h0"), _b_recoded_T) @[recFNFromFN.scala 48:15]
    node _b_recoded_T_2 = mux(b_recoded_rawIn.isNaN, UInt<1>("h1"), UInt<1>("h0")) @[recFNFromFN.scala 49:20]
    node _b_recoded_T_3 = or(_b_recoded_T_1, _b_recoded_T_2) @[recFNFromFN.scala 48:76]
    node _b_recoded_T_4 = cat(b_recoded_rawIn.sign, _b_recoded_T_3) @[recFNFromFN.scala 47:20]
    node _b_recoded_T_5 = bits(b_recoded_rawIn.sExp, 5, 0) @[recFNFromFN.scala 50:23]
    node _b_recoded_T_6 = cat(_b_recoded_T_4, _b_recoded_T_5) @[recFNFromFN.scala 49:45]
    node _b_recoded_T_7 = bits(b_recoded_rawIn.sig, 22, 0) @[recFNFromFN.scala 51:22]
    node b_recoded = cat(_b_recoded_T_6, _b_recoded_T_7) @[recFNFromFN.scala 50:41]
    mulRecFN.io.a <= a_recoded @[FPU.scala 95:19]
    mulRecFN.io.b <= b_recoded @[FPU.scala 96:19]
    mulRecFN.io.roundingMode <= UInt<3>("h0") @[FPU.scala 97:30]
    mulRecFN.io.detectTininess <= UInt<1>("h1") @[FPU.scala 98:32]
    node io_result_rawIn_exp = bits(mulRecFN.io.out, 31, 23) @[rawFloatFromRecFN.scala 51:21]
    node _io_result_rawIn_isZero_T = bits(io_result_rawIn_exp, 8, 6) @[rawFloatFromRecFN.scala 52:28]
    node io_result_rawIn_isZero = eq(_io_result_rawIn_isZero_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 52:53]
    node _io_result_rawIn_isSpecial_T = bits(io_result_rawIn_exp, 8, 7) @[rawFloatFromRecFN.scala 53:28]
    node io_result_rawIn_isSpecial = eq(_io_result_rawIn_isSpecial_T, UInt<2>("h3")) @[rawFloatFromRecFN.scala 53:53]
    wire io_result_rawIn : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>} @[rawFloatFromRecFN.scala 55:23]
    node _io_result_rawIn_out_isNaN_T = bits(io_result_rawIn_exp, 6, 6) @[rawFloatFromRecFN.scala 56:41]
    node _io_result_rawIn_out_isNaN_T_1 = and(io_result_rawIn_isSpecial, _io_result_rawIn_out_isNaN_T) @[rawFloatFromRecFN.scala 56:33]
    io_result_rawIn.isNaN <= _io_result_rawIn_out_isNaN_T_1 @[rawFloatFromRecFN.scala 56:20]
    node _io_result_rawIn_out_isInf_T = bits(io_result_rawIn_exp, 6, 6) @[rawFloatFromRecFN.scala 57:41]
    node _io_result_rawIn_out_isInf_T_1 = eq(_io_result_rawIn_out_isInf_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 57:36]
    node _io_result_rawIn_out_isInf_T_2 = and(io_result_rawIn_isSpecial, _io_result_rawIn_out_isInf_T_1) @[rawFloatFromRecFN.scala 57:33]
    io_result_rawIn.isInf <= _io_result_rawIn_out_isInf_T_2 @[rawFloatFromRecFN.scala 57:20]
    io_result_rawIn.isZero <= io_result_rawIn_isZero @[rawFloatFromRecFN.scala 58:20]
    node _io_result_rawIn_out_sign_T = bits(mulRecFN.io.out, 32, 32) @[rawFloatFromRecFN.scala 59:25]
    io_result_rawIn.sign <= _io_result_rawIn_out_sign_T @[rawFloatFromRecFN.scala 59:20]
    node _io_result_rawIn_out_sExp_T = cvt(io_result_rawIn_exp) @[rawFloatFromRecFN.scala 60:27]
    io_result_rawIn.sExp <= _io_result_rawIn_out_sExp_T @[rawFloatFromRecFN.scala 60:20]
    node _io_result_rawIn_out_sig_T = eq(io_result_rawIn_isZero, UInt<1>("h0")) @[rawFloatFromRecFN.scala 61:35]
    node _io_result_rawIn_out_sig_T_1 = cat(UInt<1>("h0"), _io_result_rawIn_out_sig_T) @[rawFloatFromRecFN.scala 61:32]
    node _io_result_rawIn_out_sig_T_2 = bits(mulRecFN.io.out, 22, 0) @[rawFloatFromRecFN.scala 61:49]
    node _io_result_rawIn_out_sig_T_3 = cat(_io_result_rawIn_out_sig_T_1, _io_result_rawIn_out_sig_T_2) @[rawFloatFromRecFN.scala 61:44]
    io_result_rawIn.sig <= _io_result_rawIn_out_sig_T_3 @[rawFloatFromRecFN.scala 61:20]
    node io_result_isSubnormal = lt(io_result_rawIn.sExp, asSInt(UInt<9>("h82"))) @[fNFromRecFN.scala 51:38]
    node _io_result_denormShiftDist_T = bits(io_result_rawIn.sExp, 4, 0) @[fNFromRecFN.scala 52:47]
    node _io_result_denormShiftDist_T_1 = sub(UInt<1>("h1"), _io_result_denormShiftDist_T) @[fNFromRecFN.scala 52:35]
    node io_result_denormShiftDist = tail(_io_result_denormShiftDist_T_1, 1) @[fNFromRecFN.scala 52:35]
    node _io_result_denormFract_T = shr(io_result_rawIn.sig, 1) @[fNFromRecFN.scala 53:38]
    node _io_result_denormFract_T_1 = dshr(_io_result_denormFract_T, io_result_denormShiftDist) @[fNFromRecFN.scala 53:42]
    node io_result_denormFract = bits(_io_result_denormFract_T_1, 22, 0) @[fNFromRecFN.scala 53:60]
    node _io_result_expOut_T = bits(io_result_rawIn.sExp, 7, 0) @[fNFromRecFN.scala 58:27]
    node _io_result_expOut_T_1 = sub(_io_result_expOut_T, UInt<8>("h81")) @[fNFromRecFN.scala 58:45]
    node _io_result_expOut_T_2 = tail(_io_result_expOut_T_1, 1) @[fNFromRecFN.scala 58:45]
    node _io_result_expOut_T_3 = mux(io_result_isSubnormal, UInt<1>("h0"), _io_result_expOut_T_2) @[fNFromRecFN.scala 56:16]
    node _io_result_expOut_T_4 = or(io_result_rawIn.isNaN, io_result_rawIn.isInf) @[fNFromRecFN.scala 60:44]
    node _io_result_expOut_T_5 = bits(_io_result_expOut_T_4, 0, 0) @[Bitwise.scala 77:15]
    node _io_result_expOut_T_6 = mux(_io_result_expOut_T_5, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 77:12]
    node io_result_expOut = or(_io_result_expOut_T_3, _io_result_expOut_T_6) @[fNFromRecFN.scala 60:15]
    node _io_result_fractOut_T = bits(io_result_rawIn.sig, 22, 0) @[fNFromRecFN.scala 64:48]
    node _io_result_fractOut_T_1 = mux(io_result_rawIn.isInf, UInt<1>("h0"), _io_result_fractOut_T) @[fNFromRecFN.scala 64:20]
    node io_result_fractOut = mux(io_result_isSubnormal, io_result_denormFract, _io_result_fractOut_T_1) @[fNFromRecFN.scala 62:16]
    node io_result_hi = cat(io_result_rawIn.sign, io_result_expOut) @[Cat.scala 33:92]
    node _io_result_T = cat(io_result_hi, io_result_fractOut) @[Cat.scala 33:92]
    io.result <= _io_result_T @[FPU.scala 101:15]

  module AddRawFN_1 :
    output io : { flip subOp : UInt<1>, flip a : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>}, flip b : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>}, flip roundingMode : UInt<3>, invalidExc : UInt<1>, rawOut : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<27>}}

    node effSignB = xor(io.b.sign, io.subOp) @[AddRecFN.scala 60:30]
    node eqSigns = eq(io.a.sign, effSignB) @[AddRecFN.scala 61:29]
    node notEqSigns_signZero = eq(io.roundingMode, UInt<3>("h2")) @[AddRecFN.scala 62:47]
    node _sDiffExps_T = sub(io.a.sExp, io.b.sExp) @[AddRecFN.scala 63:31]
    node _sDiffExps_T_1 = tail(_sDiffExps_T, 1) @[AddRecFN.scala 63:31]
    node sDiffExps = asSInt(_sDiffExps_T_1) @[AddRecFN.scala 63:31]
    node _modNatAlignDist_T = lt(sDiffExps, asSInt(UInt<1>("h0"))) @[AddRecFN.scala 64:41]
    node _modNatAlignDist_T_1 = sub(io.b.sExp, io.a.sExp) @[AddRecFN.scala 64:58]
    node _modNatAlignDist_T_2 = tail(_modNatAlignDist_T_1, 1) @[AddRecFN.scala 64:58]
    node _modNatAlignDist_T_3 = asSInt(_modNatAlignDist_T_2) @[AddRecFN.scala 64:58]
    node _modNatAlignDist_T_4 = mux(_modNatAlignDist_T, _modNatAlignDist_T_3, sDiffExps) @[AddRecFN.scala 64:30]
    node modNatAlignDist = bits(_modNatAlignDist_T_4, 4, 0) @[AddRecFN.scala 64:81]
    node _isMaxAlign_T = shr(sDiffExps, 5) @[AddRecFN.scala 66:19]
    node _isMaxAlign_T_1 = neq(_isMaxAlign_T, asSInt(UInt<1>("h0"))) @[AddRecFN.scala 66:37]
    node _isMaxAlign_T_2 = shr(sDiffExps, 5) @[AddRecFN.scala 67:24]
    node _isMaxAlign_T_3 = neq(_isMaxAlign_T_2, asSInt(UInt<1>("h1"))) @[AddRecFN.scala 67:42]
    node _isMaxAlign_T_4 = bits(sDiffExps, 4, 0) @[AddRecFN.scala 67:63]
    node _isMaxAlign_T_5 = eq(_isMaxAlign_T_4, UInt<1>("h0")) @[AddRecFN.scala 67:87]
    node _isMaxAlign_T_6 = or(_isMaxAlign_T_3, _isMaxAlign_T_5) @[AddRecFN.scala 67:51]
    node isMaxAlign = and(_isMaxAlign_T_1, _isMaxAlign_T_6) @[AddRecFN.scala 66:45]
    node alignDist = mux(isMaxAlign, UInt<5>("h1f"), modNatAlignDist) @[AddRecFN.scala 68:24]
    node _closeSubMags_T = eq(eqSigns, UInt<1>("h0")) @[AddRecFN.scala 69:24]
    node _closeSubMags_T_1 = eq(isMaxAlign, UInt<1>("h0")) @[AddRecFN.scala 69:36]
    node _closeSubMags_T_2 = and(_closeSubMags_T, _closeSubMags_T_1) @[AddRecFN.scala 69:33]
    node _closeSubMags_T_3 = leq(modNatAlignDist, UInt<1>("h1")) @[AddRecFN.scala 69:68]
    node closeSubMags = and(_closeSubMags_T_2, _closeSubMags_T_3) @[AddRecFN.scala 69:48]
    node _close_alignedSigA_T = leq(asSInt(UInt<1>("h0")), sDiffExps) @[AddRecFN.scala 73:18]
    node _close_alignedSigA_T_1 = bits(sDiffExps, 0, 0) @[AddRecFN.scala 73:45]
    node _close_alignedSigA_T_2 = and(_close_alignedSigA_T, _close_alignedSigA_T_1) @[AddRecFN.scala 73:32]
    node _close_alignedSigA_T_3 = shl(io.a.sig, 2) @[AddRecFN.scala 73:58]
    node _close_alignedSigA_T_4 = mux(_close_alignedSigA_T_2, _close_alignedSigA_T_3, UInt<1>("h0")) @[AddRecFN.scala 73:12]
    node _close_alignedSigA_T_5 = leq(asSInt(UInt<1>("h0")), sDiffExps) @[AddRecFN.scala 74:18]
    node _close_alignedSigA_T_6 = bits(sDiffExps, 0, 0) @[AddRecFN.scala 74:45]
    node _close_alignedSigA_T_7 = eq(_close_alignedSigA_T_6, UInt<1>("h0")) @[AddRecFN.scala 74:35]
    node _close_alignedSigA_T_8 = and(_close_alignedSigA_T_5, _close_alignedSigA_T_7) @[AddRecFN.scala 74:32]
    node _close_alignedSigA_T_9 = shl(io.a.sig, 1) @[AddRecFN.scala 74:58]
    node _close_alignedSigA_T_10 = mux(_close_alignedSigA_T_8, _close_alignedSigA_T_9, UInt<1>("h0")) @[AddRecFN.scala 74:12]
    node _close_alignedSigA_T_11 = or(_close_alignedSigA_T_4, _close_alignedSigA_T_10) @[AddRecFN.scala 73:68]
    node _close_alignedSigA_T_12 = lt(sDiffExps, asSInt(UInt<1>("h0"))) @[AddRecFN.scala 75:24]
    node _close_alignedSigA_T_13 = mux(_close_alignedSigA_T_12, io.a.sig, UInt<1>("h0")) @[AddRecFN.scala 75:12]
    node close_alignedSigA = or(_close_alignedSigA_T_11, _close_alignedSigA_T_13) @[AddRecFN.scala 74:68]
    node _close_sSigSum_T = asSInt(close_alignedSigA) @[AddRecFN.scala 76:43]
    node _close_sSigSum_T_1 = shl(io.b.sig, 1) @[AddRecFN.scala 76:61]
    node _close_sSigSum_T_2 = asSInt(_close_sSigSum_T_1) @[AddRecFN.scala 76:66]
    node _close_sSigSum_T_3 = sub(_close_sSigSum_T, _close_sSigSum_T_2) @[AddRecFN.scala 76:50]
    node _close_sSigSum_T_4 = tail(_close_sSigSum_T_3, 1) @[AddRecFN.scala 76:50]
    node close_sSigSum = asSInt(_close_sSigSum_T_4) @[AddRecFN.scala 76:50]
    node _close_sigSum_T = lt(close_sSigSum, asSInt(UInt<1>("h0"))) @[AddRecFN.scala 77:42]
    node _close_sigSum_T_1 = sub(asSInt(UInt<1>("h0")), close_sSigSum) @[AddRecFN.scala 77:49]
    node _close_sigSum_T_2 = tail(_close_sigSum_T_1, 1) @[AddRecFN.scala 77:49]
    node _close_sigSum_T_3 = asSInt(_close_sigSum_T_2) @[AddRecFN.scala 77:49]
    node _close_sigSum_T_4 = mux(_close_sigSum_T, _close_sigSum_T_3, close_sSigSum) @[AddRecFN.scala 77:27]
    node close_sigSum = bits(_close_sigSum_T_4, 25, 0) @[AddRecFN.scala 77:79]
    node close_adjustedSigSum = shl(close_sigSum, 0) @[AddRecFN.scala 78:44]
    wire close_reduced2SigSum_reducedVec : UInt<1>[13] @[primitives.scala 101:30]
    node _close_reduced2SigSum_reducedVec_0_T = bits(close_adjustedSigSum, 1, 0) @[primitives.scala 103:33]
    node _close_reduced2SigSum_reducedVec_0_T_1 = orr(_close_reduced2SigSum_reducedVec_0_T) @[primitives.scala 103:54]
    close_reduced2SigSum_reducedVec[0] <= _close_reduced2SigSum_reducedVec_0_T_1 @[primitives.scala 103:28]
    node _close_reduced2SigSum_reducedVec_1_T = bits(close_adjustedSigSum, 3, 2) @[primitives.scala 103:33]
    node _close_reduced2SigSum_reducedVec_1_T_1 = orr(_close_reduced2SigSum_reducedVec_1_T) @[primitives.scala 103:54]
    close_reduced2SigSum_reducedVec[1] <= _close_reduced2SigSum_reducedVec_1_T_1 @[primitives.scala 103:28]
    node _close_reduced2SigSum_reducedVec_2_T = bits(close_adjustedSigSum, 5, 4) @[primitives.scala 103:33]
    node _close_reduced2SigSum_reducedVec_2_T_1 = orr(_close_reduced2SigSum_reducedVec_2_T) @[primitives.scala 103:54]
    close_reduced2SigSum_reducedVec[2] <= _close_reduced2SigSum_reducedVec_2_T_1 @[primitives.scala 103:28]
    node _close_reduced2SigSum_reducedVec_3_T = bits(close_adjustedSigSum, 7, 6) @[primitives.scala 103:33]
    node _close_reduced2SigSum_reducedVec_3_T_1 = orr(_close_reduced2SigSum_reducedVec_3_T) @[primitives.scala 103:54]
    close_reduced2SigSum_reducedVec[3] <= _close_reduced2SigSum_reducedVec_3_T_1 @[primitives.scala 103:28]
    node _close_reduced2SigSum_reducedVec_4_T = bits(close_adjustedSigSum, 9, 8) @[primitives.scala 103:33]
    node _close_reduced2SigSum_reducedVec_4_T_1 = orr(_close_reduced2SigSum_reducedVec_4_T) @[primitives.scala 103:54]
    close_reduced2SigSum_reducedVec[4] <= _close_reduced2SigSum_reducedVec_4_T_1 @[primitives.scala 103:28]
    node _close_reduced2SigSum_reducedVec_5_T = bits(close_adjustedSigSum, 11, 10) @[primitives.scala 103:33]
    node _close_reduced2SigSum_reducedVec_5_T_1 = orr(_close_reduced2SigSum_reducedVec_5_T) @[primitives.scala 103:54]
    close_reduced2SigSum_reducedVec[5] <= _close_reduced2SigSum_reducedVec_5_T_1 @[primitives.scala 103:28]
    node _close_reduced2SigSum_reducedVec_6_T = bits(close_adjustedSigSum, 13, 12) @[primitives.scala 103:33]
    node _close_reduced2SigSum_reducedVec_6_T_1 = orr(_close_reduced2SigSum_reducedVec_6_T) @[primitives.scala 103:54]
    close_reduced2SigSum_reducedVec[6] <= _close_reduced2SigSum_reducedVec_6_T_1 @[primitives.scala 103:28]
    node _close_reduced2SigSum_reducedVec_7_T = bits(close_adjustedSigSum, 15, 14) @[primitives.scala 103:33]
    node _close_reduced2SigSum_reducedVec_7_T_1 = orr(_close_reduced2SigSum_reducedVec_7_T) @[primitives.scala 103:54]
    close_reduced2SigSum_reducedVec[7] <= _close_reduced2SigSum_reducedVec_7_T_1 @[primitives.scala 103:28]
    node _close_reduced2SigSum_reducedVec_8_T = bits(close_adjustedSigSum, 17, 16) @[primitives.scala 103:33]
    node _close_reduced2SigSum_reducedVec_8_T_1 = orr(_close_reduced2SigSum_reducedVec_8_T) @[primitives.scala 103:54]
    close_reduced2SigSum_reducedVec[8] <= _close_reduced2SigSum_reducedVec_8_T_1 @[primitives.scala 103:28]
    node _close_reduced2SigSum_reducedVec_9_T = bits(close_adjustedSigSum, 19, 18) @[primitives.scala 103:33]
    node _close_reduced2SigSum_reducedVec_9_T_1 = orr(_close_reduced2SigSum_reducedVec_9_T) @[primitives.scala 103:54]
    close_reduced2SigSum_reducedVec[9] <= _close_reduced2SigSum_reducedVec_9_T_1 @[primitives.scala 103:28]
    node _close_reduced2SigSum_reducedVec_10_T = bits(close_adjustedSigSum, 21, 20) @[primitives.scala 103:33]
    node _close_reduced2SigSum_reducedVec_10_T_1 = orr(_close_reduced2SigSum_reducedVec_10_T) @[primitives.scala 103:54]
    close_reduced2SigSum_reducedVec[10] <= _close_reduced2SigSum_reducedVec_10_T_1 @[primitives.scala 103:28]
    node _close_reduced2SigSum_reducedVec_11_T = bits(close_adjustedSigSum, 23, 22) @[primitives.scala 103:33]
    node _close_reduced2SigSum_reducedVec_11_T_1 = orr(_close_reduced2SigSum_reducedVec_11_T) @[primitives.scala 103:54]
    close_reduced2SigSum_reducedVec[11] <= _close_reduced2SigSum_reducedVec_11_T_1 @[primitives.scala 103:28]
    node _close_reduced2SigSum_reducedVec_12_T = bits(close_adjustedSigSum, 25, 24) @[primitives.scala 106:15]
    node _close_reduced2SigSum_reducedVec_12_T_1 = orr(_close_reduced2SigSum_reducedVec_12_T) @[primitives.scala 106:57]
    close_reduced2SigSum_reducedVec[12] <= _close_reduced2SigSum_reducedVec_12_T_1 @[primitives.scala 105:38]
    node close_reduced2SigSum_lo_lo_hi = cat(close_reduced2SigSum_reducedVec[2], close_reduced2SigSum_reducedVec[1]) @[primitives.scala 107:20]
    node close_reduced2SigSum_lo_lo = cat(close_reduced2SigSum_lo_lo_hi, close_reduced2SigSum_reducedVec[0]) @[primitives.scala 107:20]
    node close_reduced2SigSum_lo_hi_hi = cat(close_reduced2SigSum_reducedVec[5], close_reduced2SigSum_reducedVec[4]) @[primitives.scala 107:20]
    node close_reduced2SigSum_lo_hi = cat(close_reduced2SigSum_lo_hi_hi, close_reduced2SigSum_reducedVec[3]) @[primitives.scala 107:20]
    node close_reduced2SigSum_lo = cat(close_reduced2SigSum_lo_hi, close_reduced2SigSum_lo_lo) @[primitives.scala 107:20]
    node close_reduced2SigSum_hi_lo_hi = cat(close_reduced2SigSum_reducedVec[8], close_reduced2SigSum_reducedVec[7]) @[primitives.scala 107:20]
    node close_reduced2SigSum_hi_lo = cat(close_reduced2SigSum_hi_lo_hi, close_reduced2SigSum_reducedVec[6]) @[primitives.scala 107:20]
    node close_reduced2SigSum_hi_hi_lo = cat(close_reduced2SigSum_reducedVec[10], close_reduced2SigSum_reducedVec[9]) @[primitives.scala 107:20]
    node close_reduced2SigSum_hi_hi_hi = cat(close_reduced2SigSum_reducedVec[12], close_reduced2SigSum_reducedVec[11]) @[primitives.scala 107:20]
    node close_reduced2SigSum_hi_hi = cat(close_reduced2SigSum_hi_hi_hi, close_reduced2SigSum_hi_hi_lo) @[primitives.scala 107:20]
    node close_reduced2SigSum_hi = cat(close_reduced2SigSum_hi_hi, close_reduced2SigSum_hi_lo) @[primitives.scala 107:20]
    node close_reduced2SigSum = cat(close_reduced2SigSum_hi, close_reduced2SigSum_lo) @[primitives.scala 107:20]
    node _close_normDistReduced2_T = bits(close_reduced2SigSum, 0, 0) @[primitives.scala 91:52]
    node _close_normDistReduced2_T_1 = bits(close_reduced2SigSum, 1, 1) @[primitives.scala 91:52]
    node _close_normDistReduced2_T_2 = bits(close_reduced2SigSum, 2, 2) @[primitives.scala 91:52]
    node _close_normDistReduced2_T_3 = bits(close_reduced2SigSum, 3, 3) @[primitives.scala 91:52]
    node _close_normDistReduced2_T_4 = bits(close_reduced2SigSum, 4, 4) @[primitives.scala 91:52]
    node _close_normDistReduced2_T_5 = bits(close_reduced2SigSum, 5, 5) @[primitives.scala 91:52]
    node _close_normDistReduced2_T_6 = bits(close_reduced2SigSum, 6, 6) @[primitives.scala 91:52]
    node _close_normDistReduced2_T_7 = bits(close_reduced2SigSum, 7, 7) @[primitives.scala 91:52]
    node _close_normDistReduced2_T_8 = bits(close_reduced2SigSum, 8, 8) @[primitives.scala 91:52]
    node _close_normDistReduced2_T_9 = bits(close_reduced2SigSum, 9, 9) @[primitives.scala 91:52]
    node _close_normDistReduced2_T_10 = bits(close_reduced2SigSum, 10, 10) @[primitives.scala 91:52]
    node _close_normDistReduced2_T_11 = bits(close_reduced2SigSum, 11, 11) @[primitives.scala 91:52]
    node _close_normDistReduced2_T_12 = bits(close_reduced2SigSum, 12, 12) @[primitives.scala 91:52]
    node _close_normDistReduced2_T_13 = mux(_close_normDistReduced2_T_1, UInt<4>("hb"), UInt<4>("hc")) @[Mux.scala 47:70]
    node _close_normDistReduced2_T_14 = mux(_close_normDistReduced2_T_2, UInt<4>("ha"), _close_normDistReduced2_T_13) @[Mux.scala 47:70]
    node _close_normDistReduced2_T_15 = mux(_close_normDistReduced2_T_3, UInt<4>("h9"), _close_normDistReduced2_T_14) @[Mux.scala 47:70]
    node _close_normDistReduced2_T_16 = mux(_close_normDistReduced2_T_4, UInt<4>("h8"), _close_normDistReduced2_T_15) @[Mux.scala 47:70]
    node _close_normDistReduced2_T_17 = mux(_close_normDistReduced2_T_5, UInt<3>("h7"), _close_normDistReduced2_T_16) @[Mux.scala 47:70]
    node _close_normDistReduced2_T_18 = mux(_close_normDistReduced2_T_6, UInt<3>("h6"), _close_normDistReduced2_T_17) @[Mux.scala 47:70]
    node _close_normDistReduced2_T_19 = mux(_close_normDistReduced2_T_7, UInt<3>("h5"), _close_normDistReduced2_T_18) @[Mux.scala 47:70]
    node _close_normDistReduced2_T_20 = mux(_close_normDistReduced2_T_8, UInt<3>("h4"), _close_normDistReduced2_T_19) @[Mux.scala 47:70]
    node _close_normDistReduced2_T_21 = mux(_close_normDistReduced2_T_9, UInt<2>("h3"), _close_normDistReduced2_T_20) @[Mux.scala 47:70]
    node _close_normDistReduced2_T_22 = mux(_close_normDistReduced2_T_10, UInt<2>("h2"), _close_normDistReduced2_T_21) @[Mux.scala 47:70]
    node _close_normDistReduced2_T_23 = mux(_close_normDistReduced2_T_11, UInt<1>("h1"), _close_normDistReduced2_T_22) @[Mux.scala 47:70]
    node close_normDistReduced2 = mux(_close_normDistReduced2_T_12, UInt<1>("h0"), _close_normDistReduced2_T_23) @[Mux.scala 47:70]
    node _close_nearNormDist_T = shl(close_normDistReduced2, 1) @[AddRecFN.scala 81:53]
    node close_nearNormDist = bits(_close_nearNormDist_T, 4, 0) @[AddRecFN.scala 81:57]
    node _close_sigOut_T = dshl(close_sigSum, close_nearNormDist) @[AddRecFN.scala 82:38]
    node _close_sigOut_T_1 = shl(_close_sigOut_T, 1) @[AddRecFN.scala 82:59]
    node close_sigOut = bits(_close_sigOut_T_1, 26, 0) @[AddRecFN.scala 82:63]
    node _close_totalCancellation_T = bits(close_sigOut, 26, 25) @[AddRecFN.scala 83:49]
    node _close_totalCancellation_T_1 = orr(_close_totalCancellation_T) @[AddRecFN.scala 83:82]
    node close_totalCancellation = eq(_close_totalCancellation_T_1, UInt<1>("h0")) @[AddRecFN.scala 83:35]
    node _close_notTotalCancellation_signOut_T = lt(close_sSigSum, asSInt(UInt<1>("h0"))) @[AddRecFN.scala 84:73]
    node close_notTotalCancellation_signOut = xor(io.a.sign, _close_notTotalCancellation_signOut_T) @[AddRecFN.scala 84:56]
    node _far_signOut_T = lt(sDiffExps, asSInt(UInt<1>("h0"))) @[AddRecFN.scala 87:37]
    node far_signOut = mux(_far_signOut_T, effSignB, io.a.sign) @[AddRecFN.scala 87:26]
    node _far_sigLarger_T = lt(sDiffExps, asSInt(UInt<1>("h0"))) @[AddRecFN.scala 88:40]
    node _far_sigLarger_T_1 = mux(_far_sigLarger_T, io.b.sig, io.a.sig) @[AddRecFN.scala 88:29]
    node far_sigLarger = bits(_far_sigLarger_T_1, 23, 0) @[AddRecFN.scala 88:66]
    node _far_sigSmaller_T = lt(sDiffExps, asSInt(UInt<1>("h0"))) @[AddRecFN.scala 89:40]
    node _far_sigSmaller_T_1 = mux(_far_sigSmaller_T, io.a.sig, io.b.sig) @[AddRecFN.scala 89:29]
    node far_sigSmaller = bits(_far_sigSmaller_T_1, 23, 0) @[AddRecFN.scala 89:66]
    node _far_mainAlignedSigSmaller_T = shl(far_sigSmaller, 5) @[AddRecFN.scala 90:52]
    node far_mainAlignedSigSmaller = dshr(_far_mainAlignedSigSmaller_T, alignDist) @[AddRecFN.scala 90:56]
    node _far_reduced4SigSmaller_T = shl(far_sigSmaller, 2) @[AddRecFN.scala 91:60]
    wire far_reduced4SigSmaller_reducedVec : UInt<1>[7] @[primitives.scala 118:30]
    node _far_reduced4SigSmaller_reducedVec_0_T = bits(_far_reduced4SigSmaller_T, 3, 0) @[primitives.scala 120:33]
    node _far_reduced4SigSmaller_reducedVec_0_T_1 = orr(_far_reduced4SigSmaller_reducedVec_0_T) @[primitives.scala 120:54]
    far_reduced4SigSmaller_reducedVec[0] <= _far_reduced4SigSmaller_reducedVec_0_T_1 @[primitives.scala 120:28]
    node _far_reduced4SigSmaller_reducedVec_1_T = bits(_far_reduced4SigSmaller_T, 7, 4) @[primitives.scala 120:33]
    node _far_reduced4SigSmaller_reducedVec_1_T_1 = orr(_far_reduced4SigSmaller_reducedVec_1_T) @[primitives.scala 120:54]
    far_reduced4SigSmaller_reducedVec[1] <= _far_reduced4SigSmaller_reducedVec_1_T_1 @[primitives.scala 120:28]
    node _far_reduced4SigSmaller_reducedVec_2_T = bits(_far_reduced4SigSmaller_T, 11, 8) @[primitives.scala 120:33]
    node _far_reduced4SigSmaller_reducedVec_2_T_1 = orr(_far_reduced4SigSmaller_reducedVec_2_T) @[primitives.scala 120:54]
    far_reduced4SigSmaller_reducedVec[2] <= _far_reduced4SigSmaller_reducedVec_2_T_1 @[primitives.scala 120:28]
    node _far_reduced4SigSmaller_reducedVec_3_T = bits(_far_reduced4SigSmaller_T, 15, 12) @[primitives.scala 120:33]
    node _far_reduced4SigSmaller_reducedVec_3_T_1 = orr(_far_reduced4SigSmaller_reducedVec_3_T) @[primitives.scala 120:54]
    far_reduced4SigSmaller_reducedVec[3] <= _far_reduced4SigSmaller_reducedVec_3_T_1 @[primitives.scala 120:28]
    node _far_reduced4SigSmaller_reducedVec_4_T = bits(_far_reduced4SigSmaller_T, 19, 16) @[primitives.scala 120:33]
    node _far_reduced4SigSmaller_reducedVec_4_T_1 = orr(_far_reduced4SigSmaller_reducedVec_4_T) @[primitives.scala 120:54]
    far_reduced4SigSmaller_reducedVec[4] <= _far_reduced4SigSmaller_reducedVec_4_T_1 @[primitives.scala 120:28]
    node _far_reduced4SigSmaller_reducedVec_5_T = bits(_far_reduced4SigSmaller_T, 23, 20) @[primitives.scala 120:33]
    node _far_reduced4SigSmaller_reducedVec_5_T_1 = orr(_far_reduced4SigSmaller_reducedVec_5_T) @[primitives.scala 120:54]
    far_reduced4SigSmaller_reducedVec[5] <= _far_reduced4SigSmaller_reducedVec_5_T_1 @[primitives.scala 120:28]
    node _far_reduced4SigSmaller_reducedVec_6_T = bits(_far_reduced4SigSmaller_T, 25, 24) @[primitives.scala 123:15]
    node _far_reduced4SigSmaller_reducedVec_6_T_1 = orr(_far_reduced4SigSmaller_reducedVec_6_T) @[primitives.scala 123:57]
    far_reduced4SigSmaller_reducedVec[6] <= _far_reduced4SigSmaller_reducedVec_6_T_1 @[primitives.scala 122:38]
    node far_reduced4SigSmaller_lo_hi = cat(far_reduced4SigSmaller_reducedVec[2], far_reduced4SigSmaller_reducedVec[1]) @[primitives.scala 124:20]
    node far_reduced4SigSmaller_lo = cat(far_reduced4SigSmaller_lo_hi, far_reduced4SigSmaller_reducedVec[0]) @[primitives.scala 124:20]
    node far_reduced4SigSmaller_hi_lo = cat(far_reduced4SigSmaller_reducedVec[4], far_reduced4SigSmaller_reducedVec[3]) @[primitives.scala 124:20]
    node far_reduced4SigSmaller_hi_hi = cat(far_reduced4SigSmaller_reducedVec[6], far_reduced4SigSmaller_reducedVec[5]) @[primitives.scala 124:20]
    node far_reduced4SigSmaller_hi = cat(far_reduced4SigSmaller_hi_hi, far_reduced4SigSmaller_hi_lo) @[primitives.scala 124:20]
    node far_reduced4SigSmaller = cat(far_reduced4SigSmaller_hi, far_reduced4SigSmaller_lo) @[primitives.scala 124:20]
    node _far_roundExtraMask_T = bits(alignDist, 4, 2) @[AddRecFN.scala 92:47]
    node far_roundExtraMask_shift = dshr(asSInt(UInt<9>("h100")), _far_roundExtraMask_T) @[primitives.scala 76:56]
    node _far_roundExtraMask_T_1 = bits(far_roundExtraMask_shift, 7, 1) @[primitives.scala 78:22]
    node _far_roundExtraMask_T_2 = bits(_far_roundExtraMask_T_1, 3, 0) @[Bitwise.scala 114:18]
    node _far_roundExtraMask_T_3 = bits(_far_roundExtraMask_T_2, 1, 0) @[Bitwise.scala 114:18]
    node _far_roundExtraMask_T_4 = bits(_far_roundExtraMask_T_3, 0, 0) @[Bitwise.scala 114:18]
    node _far_roundExtraMask_T_5 = bits(_far_roundExtraMask_T_3, 1, 1) @[Bitwise.scala 114:47]
    node _far_roundExtraMask_T_6 = cat(_far_roundExtraMask_T_4, _far_roundExtraMask_T_5) @[Cat.scala 33:92]
    node _far_roundExtraMask_T_7 = bits(_far_roundExtraMask_T_2, 3, 2) @[Bitwise.scala 114:47]
    node _far_roundExtraMask_T_8 = bits(_far_roundExtraMask_T_7, 0, 0) @[Bitwise.scala 114:18]
    node _far_roundExtraMask_T_9 = bits(_far_roundExtraMask_T_7, 1, 1) @[Bitwise.scala 114:47]
    node _far_roundExtraMask_T_10 = cat(_far_roundExtraMask_T_8, _far_roundExtraMask_T_9) @[Cat.scala 33:92]
    node _far_roundExtraMask_T_11 = cat(_far_roundExtraMask_T_6, _far_roundExtraMask_T_10) @[Cat.scala 33:92]
    node _far_roundExtraMask_T_12 = bits(_far_roundExtraMask_T_1, 6, 4) @[Bitwise.scala 114:47]
    node _far_roundExtraMask_T_13 = bits(_far_roundExtraMask_T_12, 1, 0) @[Bitwise.scala 114:18]
    node _far_roundExtraMask_T_14 = bits(_far_roundExtraMask_T_13, 0, 0) @[Bitwise.scala 114:18]
    node _far_roundExtraMask_T_15 = bits(_far_roundExtraMask_T_13, 1, 1) @[Bitwise.scala 114:47]
    node _far_roundExtraMask_T_16 = cat(_far_roundExtraMask_T_14, _far_roundExtraMask_T_15) @[Cat.scala 33:92]
    node _far_roundExtraMask_T_17 = bits(_far_roundExtraMask_T_12, 2, 2) @[Bitwise.scala 114:47]
    node _far_roundExtraMask_T_18 = cat(_far_roundExtraMask_T_16, _far_roundExtraMask_T_17) @[Cat.scala 33:92]
    node far_roundExtraMask = cat(_far_roundExtraMask_T_11, _far_roundExtraMask_T_18) @[Cat.scala 33:92]
    node _far_alignedSigSmaller_T = shr(far_mainAlignedSigSmaller, 3) @[AddRecFN.scala 94:38]
    node _far_alignedSigSmaller_T_1 = bits(far_mainAlignedSigSmaller, 2, 0) @[AddRecFN.scala 95:38]
    node _far_alignedSigSmaller_T_2 = orr(_far_alignedSigSmaller_T_1) @[AddRecFN.scala 95:45]
    node _far_alignedSigSmaller_T_3 = and(far_reduced4SigSmaller, far_roundExtraMask) @[AddRecFN.scala 95:76]
    node _far_alignedSigSmaller_T_4 = orr(_far_alignedSigSmaller_T_3) @[AddRecFN.scala 95:98]
    node _far_alignedSigSmaller_T_5 = or(_far_alignedSigSmaller_T_2, _far_alignedSigSmaller_T_4) @[AddRecFN.scala 95:49]
    node far_alignedSigSmaller = cat(_far_alignedSigSmaller_T, _far_alignedSigSmaller_T_5) @[Cat.scala 33:92]
    node far_subMags = eq(eqSigns, UInt<1>("h0")) @[AddRecFN.scala 96:23]
    node _far_negAlignedSigSmaller_T = not(far_alignedSigSmaller) @[AddRecFN.scala 97:62]
    node _far_negAlignedSigSmaller_T_1 = cat(UInt<1>("h1"), _far_negAlignedSigSmaller_T) @[Cat.scala 33:92]
    node far_negAlignedSigSmaller = mux(far_subMags, _far_negAlignedSigSmaller_T_1, far_alignedSigSmaller) @[AddRecFN.scala 97:39]
    node _far_sigSum_T = shl(far_sigLarger, 3) @[AddRecFN.scala 98:36]
    node _far_sigSum_T_1 = add(_far_sigSum_T, far_negAlignedSigSmaller) @[AddRecFN.scala 98:41]
    node _far_sigSum_T_2 = tail(_far_sigSum_T_1, 1) @[AddRecFN.scala 98:41]
    node _far_sigSum_T_3 = add(_far_sigSum_T_2, far_subMags) @[AddRecFN.scala 98:68]
    node far_sigSum = tail(_far_sigSum_T_3, 1) @[AddRecFN.scala 98:68]
    node _far_sigOut_T = shr(far_sigSum, 1) @[AddRecFN.scala 99:62]
    node _far_sigOut_T_1 = bits(far_sigSum, 0, 0) @[AddRecFN.scala 99:79]
    node _far_sigOut_T_2 = or(_far_sigOut_T, _far_sigOut_T_1) @[AddRecFN.scala 99:67]
    node _far_sigOut_T_3 = mux(far_subMags, far_sigSum, _far_sigOut_T_2) @[AddRecFN.scala 99:25]
    node far_sigOut = bits(_far_sigOut_T_3, 26, 0) @[AddRecFN.scala 99:83]
    node _notSigNaN_invalidExc_T = and(io.a.isInf, io.b.isInf) @[AddRecFN.scala 102:43]
    node _notSigNaN_invalidExc_T_1 = eq(eqSigns, UInt<1>("h0")) @[AddRecFN.scala 102:60]
    node notSigNaN_invalidExc = and(_notSigNaN_invalidExc_T, _notSigNaN_invalidExc_T_1) @[AddRecFN.scala 102:57]
    node notNaN_isInfOut = or(io.a.isInf, io.b.isInf) @[AddRecFN.scala 103:38]
    node addZeros = and(io.a.isZero, io.b.isZero) @[AddRecFN.scala 104:32]
    node notNaN_specialCase = or(notNaN_isInfOut, addZeros) @[AddRecFN.scala 105:46]
    node _notNaN_isZeroOut_T = eq(notNaN_isInfOut, UInt<1>("h0")) @[AddRecFN.scala 106:41]
    node _notNaN_isZeroOut_T_1 = and(_notNaN_isZeroOut_T, closeSubMags) @[AddRecFN.scala 106:58]
    node _notNaN_isZeroOut_T_2 = and(_notNaN_isZeroOut_T_1, close_totalCancellation) @[AddRecFN.scala 106:74]
    node notNaN_isZeroOut = or(addZeros, _notNaN_isZeroOut_T_2) @[AddRecFN.scala 106:37]
    node _notNaN_signOut_T = and(eqSigns, io.a.sign) @[AddRecFN.scala 108:39]
    node _notNaN_signOut_T_1 = and(io.a.isInf, io.a.sign) @[AddRecFN.scala 109:39]
    node _notNaN_signOut_T_2 = or(_notNaN_signOut_T, _notNaN_signOut_T_1) @[AddRecFN.scala 108:63]
    node _notNaN_signOut_T_3 = and(io.b.isInf, effSignB) @[AddRecFN.scala 110:39]
    node _notNaN_signOut_T_4 = or(_notNaN_signOut_T_2, _notNaN_signOut_T_3) @[AddRecFN.scala 109:63]
    node _notNaN_signOut_T_5 = eq(eqSigns, UInt<1>("h0")) @[AddRecFN.scala 111:30]
    node _notNaN_signOut_T_6 = and(notNaN_isZeroOut, _notNaN_signOut_T_5) @[AddRecFN.scala 111:27]
    node _notNaN_signOut_T_7 = and(_notNaN_signOut_T_6, notEqSigns_signZero) @[AddRecFN.scala 111:39]
    node _notNaN_signOut_T_8 = or(_notNaN_signOut_T_4, _notNaN_signOut_T_7) @[AddRecFN.scala 110:63]
    node _notNaN_signOut_T_9 = eq(notNaN_specialCase, UInt<1>("h0")) @[AddRecFN.scala 112:10]
    node _notNaN_signOut_T_10 = and(_notNaN_signOut_T_9, closeSubMags) @[AddRecFN.scala 112:30]
    node _notNaN_signOut_T_11 = eq(close_totalCancellation, UInt<1>("h0")) @[AddRecFN.scala 112:49]
    node _notNaN_signOut_T_12 = and(_notNaN_signOut_T_10, _notNaN_signOut_T_11) @[AddRecFN.scala 112:46]
    node _notNaN_signOut_T_13 = and(_notNaN_signOut_T_12, close_notTotalCancellation_signOut) @[AddRecFN.scala 113:38]
    node _notNaN_signOut_T_14 = or(_notNaN_signOut_T_8, _notNaN_signOut_T_13) @[AddRecFN.scala 111:63]
    node _notNaN_signOut_T_15 = eq(notNaN_specialCase, UInt<1>("h0")) @[AddRecFN.scala 114:10]
    node _notNaN_signOut_T_16 = eq(closeSubMags, UInt<1>("h0")) @[AddRecFN.scala 114:33]
    node _notNaN_signOut_T_17 = and(_notNaN_signOut_T_15, _notNaN_signOut_T_16) @[AddRecFN.scala 114:30]
    node _notNaN_signOut_T_18 = and(_notNaN_signOut_T_17, far_signOut) @[AddRecFN.scala 114:47]
    node notNaN_signOut = or(_notNaN_signOut_T_14, _notNaN_signOut_T_18) @[AddRecFN.scala 113:77]
    node _common_sExpOut_T = lt(sDiffExps, asSInt(UInt<1>("h0"))) @[AddRecFN.scala 116:41]
    node _common_sExpOut_T_1 = or(closeSubMags, _common_sExpOut_T) @[AddRecFN.scala 116:27]
    node _common_sExpOut_T_2 = mux(_common_sExpOut_T_1, io.b.sExp, io.a.sExp) @[AddRecFN.scala 116:13]
    node _common_sExpOut_T_3 = mux(closeSubMags, close_nearNormDist, far_subMags) @[AddRecFN.scala 117:18]
    node _common_sExpOut_T_4 = cvt(_common_sExpOut_T_3) @[AddRecFN.scala 117:66]
    node _common_sExpOut_T_5 = sub(_common_sExpOut_T_2, _common_sExpOut_T_4) @[AddRecFN.scala 117:13]
    node _common_sExpOut_T_6 = tail(_common_sExpOut_T_5, 1) @[AddRecFN.scala 117:13]
    node common_sExpOut = asSInt(_common_sExpOut_T_6) @[AddRecFN.scala 117:13]
    node common_sigOut = mux(closeSubMags, close_sigOut, far_sigOut) @[AddRecFN.scala 118:28]
    node _io_invalidExc_T = bits(io.a.sig, 22, 22) @[common.scala 82:56]
    node _io_invalidExc_T_1 = eq(_io_invalidExc_T, UInt<1>("h0")) @[common.scala 82:49]
    node _io_invalidExc_T_2 = and(io.a.isNaN, _io_invalidExc_T_1) @[common.scala 82:46]
    node _io_invalidExc_T_3 = bits(io.b.sig, 22, 22) @[common.scala 82:56]
    node _io_invalidExc_T_4 = eq(_io_invalidExc_T_3, UInt<1>("h0")) @[common.scala 82:49]
    node _io_invalidExc_T_5 = and(io.b.isNaN, _io_invalidExc_T_4) @[common.scala 82:46]
    node _io_invalidExc_T_6 = or(_io_invalidExc_T_2, _io_invalidExc_T_5) @[AddRecFN.scala 121:45]
    node _io_invalidExc_T_7 = or(_io_invalidExc_T_6, notSigNaN_invalidExc) @[AddRecFN.scala 121:71]
    io.invalidExc <= _io_invalidExc_T_7 @[AddRecFN.scala 121:19]
    io.rawOut.isInf <= notNaN_isInfOut @[AddRecFN.scala 122:21]
    io.rawOut.isZero <= notNaN_isZeroOut @[AddRecFN.scala 123:22]
    io.rawOut.sExp <= common_sExpOut @[AddRecFN.scala 124:20]
    node _io_rawOut_isNaN_T = or(io.a.isNaN, io.b.isNaN) @[AddRecFN.scala 125:35]
    io.rawOut.isNaN <= _io_rawOut_isNaN_T @[AddRecFN.scala 125:21]
    io.rawOut.sign <= notNaN_signOut @[AddRecFN.scala 126:20]
    io.rawOut.sig <= common_sigOut @[AddRecFN.scala 127:19]

  module RoundAnyRawFNToRecFN_ie8_is26_oe8_os24_8 :
    output io : { flip invalidExc : UInt<1>, flip infiniteExc : UInt<1>, flip in : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<27>}, flip roundingMode : UInt<3>, flip detectTininess : UInt<1>, out : UInt<33>, exceptionFlags : UInt<5>}

    node roundingMode_near_even = eq(io.roundingMode, UInt<3>("h0")) @[RoundAnyRawFNToRecFN.scala 90:53]
    node roundingMode_minMag = eq(io.roundingMode, UInt<3>("h1")) @[RoundAnyRawFNToRecFN.scala 91:53]
    node roundingMode_min = eq(io.roundingMode, UInt<3>("h2")) @[RoundAnyRawFNToRecFN.scala 92:53]
    node roundingMode_max = eq(io.roundingMode, UInt<3>("h3")) @[RoundAnyRawFNToRecFN.scala 93:53]
    node roundingMode_near_maxMag = eq(io.roundingMode, UInt<3>("h4")) @[RoundAnyRawFNToRecFN.scala 94:53]
    node roundingMode_odd = eq(io.roundingMode, UInt<3>("h6")) @[RoundAnyRawFNToRecFN.scala 95:53]
    node _roundMagUp_T = and(roundingMode_min, io.in.sign) @[RoundAnyRawFNToRecFN.scala 98:27]
    node _roundMagUp_T_1 = eq(io.in.sign, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 98:66]
    node _roundMagUp_T_2 = and(roundingMode_max, _roundMagUp_T_1) @[RoundAnyRawFNToRecFN.scala 98:63]
    node roundMagUp = or(_roundMagUp_T, _roundMagUp_T_2) @[RoundAnyRawFNToRecFN.scala 98:42]
    node adjustedSig = shl(io.in.sig, 0) @[RoundAnyRawFNToRecFN.scala 114:22]
    node doShiftSigDown1 = bits(adjustedSig, 26, 26) @[RoundAnyRawFNToRecFN.scala 120:57]
    wire common_expOut : UInt<9> @[RoundAnyRawFNToRecFN.scala 122:31]
    wire common_fractOut : UInt<23> @[RoundAnyRawFNToRecFN.scala 123:31]
    wire common_overflow : UInt<1> @[RoundAnyRawFNToRecFN.scala 124:37]
    wire common_totalUnderflow : UInt<1> @[RoundAnyRawFNToRecFN.scala 125:37]
    wire common_underflow : UInt<1> @[RoundAnyRawFNToRecFN.scala 126:37]
    wire common_inexact : UInt<1> @[RoundAnyRawFNToRecFN.scala 127:37]
    node _roundMask_T = bits(io.in.sExp, 8, 0) @[RoundAnyRawFNToRecFN.scala 156:37]
    node _roundMask_T_1 = not(_roundMask_T) @[primitives.scala 52:21]
    node roundMask_msb = bits(_roundMask_T_1, 8, 8) @[primitives.scala 58:25]
    node roundMask_lsbs = bits(_roundMask_T_1, 7, 0) @[primitives.scala 59:26]
    node roundMask_msb_1 = bits(roundMask_lsbs, 7, 7) @[primitives.scala 58:25]
    node roundMask_lsbs_1 = bits(roundMask_lsbs, 6, 0) @[primitives.scala 59:26]
    node roundMask_msb_2 = bits(roundMask_lsbs_1, 6, 6) @[primitives.scala 58:25]
    node roundMask_lsbs_2 = bits(roundMask_lsbs_1, 5, 0) @[primitives.scala 59:26]
    node roundMask_shift = dshr(asSInt(UInt<65>("h10000000000000000")), roundMask_lsbs_2) @[primitives.scala 76:56]
    node _roundMask_T_2 = bits(roundMask_shift, 63, 42) @[primitives.scala 78:22]
    node _roundMask_T_3 = bits(_roundMask_T_2, 15, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_4 = shl(UInt<8>("hff"), 8) @[Bitwise.scala 107:52]
    node _roundMask_T_5 = xor(UInt<16>("hffff"), _roundMask_T_4) @[Bitwise.scala 107:21]
    node _roundMask_T_6 = shr(_roundMask_T_3, 8) @[Bitwise.scala 108:21]
    node _roundMask_T_7 = and(_roundMask_T_6, _roundMask_T_5) @[Bitwise.scala 108:31]
    node _roundMask_T_8 = bits(_roundMask_T_3, 7, 0) @[Bitwise.scala 108:46]
    node _roundMask_T_9 = shl(_roundMask_T_8, 8) @[Bitwise.scala 108:70]
    node _roundMask_T_10 = not(_roundMask_T_5) @[Bitwise.scala 108:82]
    node _roundMask_T_11 = and(_roundMask_T_9, _roundMask_T_10) @[Bitwise.scala 108:80]
    node _roundMask_T_12 = or(_roundMask_T_7, _roundMask_T_11) @[Bitwise.scala 108:39]
    node _roundMask_T_13 = bits(_roundMask_T_5, 11, 0) @[Bitwise.scala 107:28]
    node _roundMask_T_14 = shl(_roundMask_T_13, 4) @[Bitwise.scala 107:52]
    node _roundMask_T_15 = xor(_roundMask_T_5, _roundMask_T_14) @[Bitwise.scala 107:21]
    node _roundMask_T_16 = shr(_roundMask_T_12, 4) @[Bitwise.scala 108:21]
    node _roundMask_T_17 = and(_roundMask_T_16, _roundMask_T_15) @[Bitwise.scala 108:31]
    node _roundMask_T_18 = bits(_roundMask_T_12, 11, 0) @[Bitwise.scala 108:46]
    node _roundMask_T_19 = shl(_roundMask_T_18, 4) @[Bitwise.scala 108:70]
    node _roundMask_T_20 = not(_roundMask_T_15) @[Bitwise.scala 108:82]
    node _roundMask_T_21 = and(_roundMask_T_19, _roundMask_T_20) @[Bitwise.scala 108:80]
    node _roundMask_T_22 = or(_roundMask_T_17, _roundMask_T_21) @[Bitwise.scala 108:39]
    node _roundMask_T_23 = bits(_roundMask_T_15, 13, 0) @[Bitwise.scala 107:28]
    node _roundMask_T_24 = shl(_roundMask_T_23, 2) @[Bitwise.scala 107:52]
    node _roundMask_T_25 = xor(_roundMask_T_15, _roundMask_T_24) @[Bitwise.scala 107:21]
    node _roundMask_T_26 = shr(_roundMask_T_22, 2) @[Bitwise.scala 108:21]
    node _roundMask_T_27 = and(_roundMask_T_26, _roundMask_T_25) @[Bitwise.scala 108:31]
    node _roundMask_T_28 = bits(_roundMask_T_22, 13, 0) @[Bitwise.scala 108:46]
    node _roundMask_T_29 = shl(_roundMask_T_28, 2) @[Bitwise.scala 108:70]
    node _roundMask_T_30 = not(_roundMask_T_25) @[Bitwise.scala 108:82]
    node _roundMask_T_31 = and(_roundMask_T_29, _roundMask_T_30) @[Bitwise.scala 108:80]
    node _roundMask_T_32 = or(_roundMask_T_27, _roundMask_T_31) @[Bitwise.scala 108:39]
    node _roundMask_T_33 = bits(_roundMask_T_25, 14, 0) @[Bitwise.scala 107:28]
    node _roundMask_T_34 = shl(_roundMask_T_33, 1) @[Bitwise.scala 107:52]
    node _roundMask_T_35 = xor(_roundMask_T_25, _roundMask_T_34) @[Bitwise.scala 107:21]
    node _roundMask_T_36 = shr(_roundMask_T_32, 1) @[Bitwise.scala 108:21]
    node _roundMask_T_37 = and(_roundMask_T_36, _roundMask_T_35) @[Bitwise.scala 108:31]
    node _roundMask_T_38 = bits(_roundMask_T_32, 14, 0) @[Bitwise.scala 108:46]
    node _roundMask_T_39 = shl(_roundMask_T_38, 1) @[Bitwise.scala 108:70]
    node _roundMask_T_40 = not(_roundMask_T_35) @[Bitwise.scala 108:82]
    node _roundMask_T_41 = and(_roundMask_T_39, _roundMask_T_40) @[Bitwise.scala 108:80]
    node _roundMask_T_42 = or(_roundMask_T_37, _roundMask_T_41) @[Bitwise.scala 108:39]
    node _roundMask_T_43 = bits(_roundMask_T_2, 21, 16) @[Bitwise.scala 114:47]
    node _roundMask_T_44 = bits(_roundMask_T_43, 3, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_45 = bits(_roundMask_T_44, 1, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_46 = bits(_roundMask_T_45, 0, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_47 = bits(_roundMask_T_45, 1, 1) @[Bitwise.scala 114:47]
    node _roundMask_T_48 = cat(_roundMask_T_46, _roundMask_T_47) @[Cat.scala 33:92]
    node _roundMask_T_49 = bits(_roundMask_T_44, 3, 2) @[Bitwise.scala 114:47]
    node _roundMask_T_50 = bits(_roundMask_T_49, 0, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_51 = bits(_roundMask_T_49, 1, 1) @[Bitwise.scala 114:47]
    node _roundMask_T_52 = cat(_roundMask_T_50, _roundMask_T_51) @[Cat.scala 33:92]
    node _roundMask_T_53 = cat(_roundMask_T_48, _roundMask_T_52) @[Cat.scala 33:92]
    node _roundMask_T_54 = bits(_roundMask_T_43, 5, 4) @[Bitwise.scala 114:47]
    node _roundMask_T_55 = bits(_roundMask_T_54, 0, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_56 = bits(_roundMask_T_54, 1, 1) @[Bitwise.scala 114:47]
    node _roundMask_T_57 = cat(_roundMask_T_55, _roundMask_T_56) @[Cat.scala 33:92]
    node _roundMask_T_58 = cat(_roundMask_T_53, _roundMask_T_57) @[Cat.scala 33:92]
    node _roundMask_T_59 = cat(_roundMask_T_42, _roundMask_T_58) @[Cat.scala 33:92]
    node _roundMask_T_60 = not(_roundMask_T_59) @[primitives.scala 73:32]
    node _roundMask_T_61 = mux(roundMask_msb_2, UInt<1>("h0"), _roundMask_T_60) @[primitives.scala 73:21]
    node _roundMask_T_62 = not(_roundMask_T_61) @[primitives.scala 73:17]
    node _roundMask_T_63 = cat(_roundMask_T_62, UInt<3>("h7")) @[primitives.scala 68:58]
    node roundMask_msb_3 = bits(roundMask_lsbs_1, 6, 6) @[primitives.scala 58:25]
    node roundMask_lsbs_3 = bits(roundMask_lsbs_1, 5, 0) @[primitives.scala 59:26]
    node roundMask_shift_1 = dshr(asSInt(UInt<65>("h10000000000000000")), roundMask_lsbs_3) @[primitives.scala 76:56]
    node _roundMask_T_64 = bits(roundMask_shift_1, 2, 0) @[primitives.scala 78:22]
    node _roundMask_T_65 = bits(_roundMask_T_64, 1, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_66 = bits(_roundMask_T_65, 0, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_67 = bits(_roundMask_T_65, 1, 1) @[Bitwise.scala 114:47]
    node _roundMask_T_68 = cat(_roundMask_T_66, _roundMask_T_67) @[Cat.scala 33:92]
    node _roundMask_T_69 = bits(_roundMask_T_64, 2, 2) @[Bitwise.scala 114:47]
    node _roundMask_T_70 = cat(_roundMask_T_68, _roundMask_T_69) @[Cat.scala 33:92]
    node _roundMask_T_71 = mux(roundMask_msb_3, _roundMask_T_70, UInt<1>("h0")) @[primitives.scala 62:24]
    node _roundMask_T_72 = mux(roundMask_msb_1, _roundMask_T_63, _roundMask_T_71) @[primitives.scala 67:24]
    node _roundMask_T_73 = mux(roundMask_msb, _roundMask_T_72, UInt<1>("h0")) @[primitives.scala 62:24]
    node _roundMask_T_74 = or(_roundMask_T_73, doShiftSigDown1) @[RoundAnyRawFNToRecFN.scala 159:23]
    node roundMask = cat(_roundMask_T_74, UInt<2>("h3")) @[RoundAnyRawFNToRecFN.scala 159:42]
    node _shiftedRoundMask_T = cat(UInt<1>("h0"), roundMask) @[RoundAnyRawFNToRecFN.scala 162:41]
    node shiftedRoundMask = shr(_shiftedRoundMask_T, 1) @[RoundAnyRawFNToRecFN.scala 162:53]
    node _roundPosMask_T = not(shiftedRoundMask) @[RoundAnyRawFNToRecFN.scala 163:28]
    node roundPosMask = and(_roundPosMask_T, roundMask) @[RoundAnyRawFNToRecFN.scala 163:46]
    node _roundPosBit_T = and(adjustedSig, roundPosMask) @[RoundAnyRawFNToRecFN.scala 164:40]
    node roundPosBit = orr(_roundPosBit_T) @[RoundAnyRawFNToRecFN.scala 164:56]
    node _anyRoundExtra_T = and(adjustedSig, shiftedRoundMask) @[RoundAnyRawFNToRecFN.scala 165:42]
    node anyRoundExtra = orr(_anyRoundExtra_T) @[RoundAnyRawFNToRecFN.scala 165:62]
    node anyRound = or(roundPosBit, anyRoundExtra) @[RoundAnyRawFNToRecFN.scala 166:36]
    node _roundIncr_T = or(roundingMode_near_even, roundingMode_near_maxMag) @[RoundAnyRawFNToRecFN.scala 169:38]
    node _roundIncr_T_1 = and(_roundIncr_T, roundPosBit) @[RoundAnyRawFNToRecFN.scala 169:67]
    node _roundIncr_T_2 = and(roundMagUp, anyRound) @[RoundAnyRawFNToRecFN.scala 171:29]
    node roundIncr = or(_roundIncr_T_1, _roundIncr_T_2) @[RoundAnyRawFNToRecFN.scala 170:31]
    node _roundedSig_T = or(adjustedSig, roundMask) @[RoundAnyRawFNToRecFN.scala 174:32]
    node _roundedSig_T_1 = shr(_roundedSig_T, 2) @[RoundAnyRawFNToRecFN.scala 174:44]
    node _roundedSig_T_2 = add(_roundedSig_T_1, UInt<1>("h1")) @[RoundAnyRawFNToRecFN.scala 174:49]
    node _roundedSig_T_3 = and(roundingMode_near_even, roundPosBit) @[RoundAnyRawFNToRecFN.scala 175:49]
    node _roundedSig_T_4 = eq(anyRoundExtra, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 176:30]
    node _roundedSig_T_5 = and(_roundedSig_T_3, _roundedSig_T_4) @[RoundAnyRawFNToRecFN.scala 175:64]
    node _roundedSig_T_6 = shr(roundMask, 1) @[RoundAnyRawFNToRecFN.scala 177:35]
    node _roundedSig_T_7 = mux(_roundedSig_T_5, _roundedSig_T_6, UInt<26>("h0")) @[RoundAnyRawFNToRecFN.scala 175:25]
    node _roundedSig_T_8 = not(_roundedSig_T_7) @[RoundAnyRawFNToRecFN.scala 175:21]
    node _roundedSig_T_9 = and(_roundedSig_T_2, _roundedSig_T_8) @[RoundAnyRawFNToRecFN.scala 174:57]
    node _roundedSig_T_10 = not(roundMask) @[RoundAnyRawFNToRecFN.scala 180:32]
    node _roundedSig_T_11 = and(adjustedSig, _roundedSig_T_10) @[RoundAnyRawFNToRecFN.scala 180:30]
    node _roundedSig_T_12 = shr(_roundedSig_T_11, 2) @[RoundAnyRawFNToRecFN.scala 180:43]
    node _roundedSig_T_13 = and(roundingMode_odd, anyRound) @[RoundAnyRawFNToRecFN.scala 181:42]
    node _roundedSig_T_14 = shr(roundPosMask, 1) @[RoundAnyRawFNToRecFN.scala 181:67]
    node _roundedSig_T_15 = mux(_roundedSig_T_13, _roundedSig_T_14, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 181:24]
    node _roundedSig_T_16 = or(_roundedSig_T_12, _roundedSig_T_15) @[RoundAnyRawFNToRecFN.scala 180:47]
    node roundedSig = mux(roundIncr, _roundedSig_T_9, _roundedSig_T_16) @[RoundAnyRawFNToRecFN.scala 173:16]
    node _sRoundedExp_T = shr(roundedSig, 24) @[RoundAnyRawFNToRecFN.scala 185:54]
    node _sRoundedExp_T_1 = cvt(_sRoundedExp_T) @[RoundAnyRawFNToRecFN.scala 185:76]
    node sRoundedExp = add(io.in.sExp, _sRoundedExp_T_1) @[RoundAnyRawFNToRecFN.scala 185:40]
    node _common_expOut_T = bits(sRoundedExp, 8, 0) @[RoundAnyRawFNToRecFN.scala 187:37]
    common_expOut <= _common_expOut_T @[RoundAnyRawFNToRecFN.scala 187:23]
    node _common_fractOut_T = bits(roundedSig, 23, 1) @[RoundAnyRawFNToRecFN.scala 190:27]
    node _common_fractOut_T_1 = bits(roundedSig, 22, 0) @[RoundAnyRawFNToRecFN.scala 191:27]
    node _common_fractOut_T_2 = mux(doShiftSigDown1, _common_fractOut_T, _common_fractOut_T_1) @[RoundAnyRawFNToRecFN.scala 189:16]
    common_fractOut <= _common_fractOut_T_2 @[RoundAnyRawFNToRecFN.scala 188:25]
    node _common_overflow_T = shr(sRoundedExp, 7) @[RoundAnyRawFNToRecFN.scala 196:30]
    node _common_overflow_T_1 = geq(_common_overflow_T, asSInt(UInt<3>("h3"))) @[RoundAnyRawFNToRecFN.scala 196:50]
    common_overflow <= _common_overflow_T_1 @[RoundAnyRawFNToRecFN.scala 193:25]
    node _common_totalUnderflow_T = lt(sRoundedExp, asSInt(UInt<8>("h6b"))) @[RoundAnyRawFNToRecFN.scala 200:31]
    common_totalUnderflow <= _common_totalUnderflow_T @[RoundAnyRawFNToRecFN.scala 197:31]
    node _unboundedRange_roundPosBit_T = bits(adjustedSig, 2, 2) @[RoundAnyRawFNToRecFN.scala 203:45]
    node _unboundedRange_roundPosBit_T_1 = bits(adjustedSig, 1, 1) @[RoundAnyRawFNToRecFN.scala 203:61]
    node unboundedRange_roundPosBit = mux(doShiftSigDown1, _unboundedRange_roundPosBit_T, _unboundedRange_roundPosBit_T_1) @[RoundAnyRawFNToRecFN.scala 203:16]
    node _unboundedRange_anyRound_T = bits(adjustedSig, 2, 2) @[RoundAnyRawFNToRecFN.scala 205:44]
    node _unboundedRange_anyRound_T_1 = and(doShiftSigDown1, _unboundedRange_anyRound_T) @[RoundAnyRawFNToRecFN.scala 205:30]
    node _unboundedRange_anyRound_T_2 = bits(adjustedSig, 1, 0) @[RoundAnyRawFNToRecFN.scala 205:63]
    node _unboundedRange_anyRound_T_3 = orr(_unboundedRange_anyRound_T_2) @[RoundAnyRawFNToRecFN.scala 205:70]
    node unboundedRange_anyRound = or(_unboundedRange_anyRound_T_1, _unboundedRange_anyRound_T_3) @[RoundAnyRawFNToRecFN.scala 205:49]
    node _unboundedRange_roundIncr_T = or(roundingMode_near_even, roundingMode_near_maxMag) @[RoundAnyRawFNToRecFN.scala 207:38]
    node _unboundedRange_roundIncr_T_1 = and(_unboundedRange_roundIncr_T, unboundedRange_roundPosBit) @[RoundAnyRawFNToRecFN.scala 207:67]
    node _unboundedRange_roundIncr_T_2 = and(roundMagUp, unboundedRange_anyRound) @[RoundAnyRawFNToRecFN.scala 209:29]
    node unboundedRange_roundIncr = or(_unboundedRange_roundIncr_T_1, _unboundedRange_roundIncr_T_2) @[RoundAnyRawFNToRecFN.scala 208:46]
    node _roundCarry_T = bits(roundedSig, 25, 25) @[RoundAnyRawFNToRecFN.scala 212:27]
    node _roundCarry_T_1 = bits(roundedSig, 24, 24) @[RoundAnyRawFNToRecFN.scala 213:27]
    node roundCarry = mux(doShiftSigDown1, _roundCarry_T, _roundCarry_T_1) @[RoundAnyRawFNToRecFN.scala 211:16]
    node _common_underflow_T = shr(io.in.sExp, 8) @[RoundAnyRawFNToRecFN.scala 220:49]
    node _common_underflow_T_1 = leq(_common_underflow_T, asSInt(UInt<1>("h0"))) @[RoundAnyRawFNToRecFN.scala 220:64]
    node _common_underflow_T_2 = and(anyRound, _common_underflow_T_1) @[RoundAnyRawFNToRecFN.scala 220:32]
    node _common_underflow_T_3 = bits(roundMask, 3, 3) @[RoundAnyRawFNToRecFN.scala 221:57]
    node _common_underflow_T_4 = bits(roundMask, 2, 2) @[RoundAnyRawFNToRecFN.scala 221:71]
    node _common_underflow_T_5 = mux(doShiftSigDown1, _common_underflow_T_3, _common_underflow_T_4) @[RoundAnyRawFNToRecFN.scala 221:30]
    node _common_underflow_T_6 = and(_common_underflow_T_2, _common_underflow_T_5) @[RoundAnyRawFNToRecFN.scala 220:72]
    node _common_underflow_T_7 = eq(io.detectTininess, UInt<1>("h1")) @[RoundAnyRawFNToRecFN.scala 222:49]
    node _common_underflow_T_8 = bits(roundMask, 4, 4) @[RoundAnyRawFNToRecFN.scala 224:49]
    node _common_underflow_T_9 = bits(roundMask, 3, 3) @[RoundAnyRawFNToRecFN.scala 225:49]
    node _common_underflow_T_10 = mux(doShiftSigDown1, _common_underflow_T_8, _common_underflow_T_9) @[RoundAnyRawFNToRecFN.scala 223:39]
    node _common_underflow_T_11 = eq(_common_underflow_T_10, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 223:34]
    node _common_underflow_T_12 = and(_common_underflow_T_7, _common_underflow_T_11) @[RoundAnyRawFNToRecFN.scala 222:77]
    node _common_underflow_T_13 = and(_common_underflow_T_12, roundCarry) @[RoundAnyRawFNToRecFN.scala 226:38]
    node _common_underflow_T_14 = and(_common_underflow_T_13, roundPosBit) @[RoundAnyRawFNToRecFN.scala 227:45]
    node _common_underflow_T_15 = and(_common_underflow_T_14, unboundedRange_roundIncr) @[RoundAnyRawFNToRecFN.scala 227:60]
    node _common_underflow_T_16 = eq(_common_underflow_T_15, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 222:27]
    node _common_underflow_T_17 = and(_common_underflow_T_6, _common_underflow_T_16) @[RoundAnyRawFNToRecFN.scala 221:76]
    node _common_underflow_T_18 = or(common_totalUnderflow, _common_underflow_T_17) @[RoundAnyRawFNToRecFN.scala 217:40]
    common_underflow <= _common_underflow_T_18 @[RoundAnyRawFNToRecFN.scala 215:26]
    node _common_inexact_T = or(common_totalUnderflow, anyRound) @[RoundAnyRawFNToRecFN.scala 230:49]
    common_inexact <= _common_inexact_T @[RoundAnyRawFNToRecFN.scala 230:24]
    node isNaNOut = or(io.invalidExc, io.in.isNaN) @[RoundAnyRawFNToRecFN.scala 235:34]
    node notNaN_isSpecialInfOut = or(io.infiniteExc, io.in.isInf) @[RoundAnyRawFNToRecFN.scala 236:49]
    node _commonCase_T = eq(isNaNOut, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 237:22]
    node _commonCase_T_1 = eq(notNaN_isSpecialInfOut, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 237:36]
    node _commonCase_T_2 = and(_commonCase_T, _commonCase_T_1) @[RoundAnyRawFNToRecFN.scala 237:33]
    node _commonCase_T_3 = eq(io.in.isZero, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 237:64]
    node commonCase = and(_commonCase_T_2, _commonCase_T_3) @[RoundAnyRawFNToRecFN.scala 237:61]
    node overflow = and(commonCase, common_overflow) @[RoundAnyRawFNToRecFN.scala 238:32]
    node underflow = and(commonCase, common_underflow) @[RoundAnyRawFNToRecFN.scala 239:32]
    node _inexact_T = and(commonCase, common_inexact) @[RoundAnyRawFNToRecFN.scala 240:43]
    node inexact = or(overflow, _inexact_T) @[RoundAnyRawFNToRecFN.scala 240:28]
    node _overflow_roundMagUp_T = or(roundingMode_near_even, roundingMode_near_maxMag) @[RoundAnyRawFNToRecFN.scala 243:32]
    node overflow_roundMagUp = or(_overflow_roundMagUp_T, roundMagUp) @[RoundAnyRawFNToRecFN.scala 243:60]
    node _pegMinNonzeroMagOut_T = and(commonCase, common_totalUnderflow) @[RoundAnyRawFNToRecFN.scala 245:20]
    node _pegMinNonzeroMagOut_T_1 = or(roundMagUp, roundingMode_odd) @[RoundAnyRawFNToRecFN.scala 245:60]
    node pegMinNonzeroMagOut = and(_pegMinNonzeroMagOut_T, _pegMinNonzeroMagOut_T_1) @[RoundAnyRawFNToRecFN.scala 245:45]
    node _pegMaxFiniteMagOut_T = eq(overflow_roundMagUp, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 246:42]
    node pegMaxFiniteMagOut = and(overflow, _pegMaxFiniteMagOut_T) @[RoundAnyRawFNToRecFN.scala 246:39]
    node _notNaN_isInfOut_T = and(overflow, overflow_roundMagUp) @[RoundAnyRawFNToRecFN.scala 248:45]
    node notNaN_isInfOut = or(notNaN_isSpecialInfOut, _notNaN_isInfOut_T) @[RoundAnyRawFNToRecFN.scala 248:32]
    node signOut = mux(isNaNOut, UInt<1>("h0"), io.in.sign) @[RoundAnyRawFNToRecFN.scala 250:22]
    node _expOut_T = or(io.in.isZero, common_totalUnderflow) @[RoundAnyRawFNToRecFN.scala 253:32]
    node _expOut_T_1 = mux(_expOut_T, UInt<9>("h1c0"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 253:18]
    node _expOut_T_2 = not(_expOut_T_1) @[RoundAnyRawFNToRecFN.scala 253:14]
    node _expOut_T_3 = and(common_expOut, _expOut_T_2) @[RoundAnyRawFNToRecFN.scala 252:24]
    node _expOut_T_4 = not(UInt<9>("h6b")) @[RoundAnyRawFNToRecFN.scala 258:19]
    node _expOut_T_5 = mux(pegMinNonzeroMagOut, _expOut_T_4, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 257:18]
    node _expOut_T_6 = not(_expOut_T_5) @[RoundAnyRawFNToRecFN.scala 257:14]
    node _expOut_T_7 = and(_expOut_T_3, _expOut_T_6) @[RoundAnyRawFNToRecFN.scala 256:17]
    node _expOut_T_8 = mux(pegMaxFiniteMagOut, UInt<9>("h80"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 261:18]
    node _expOut_T_9 = not(_expOut_T_8) @[RoundAnyRawFNToRecFN.scala 261:14]
    node _expOut_T_10 = and(_expOut_T_7, _expOut_T_9) @[RoundAnyRawFNToRecFN.scala 260:17]
    node _expOut_T_11 = mux(notNaN_isInfOut, UInt<9>("h40"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 265:18]
    node _expOut_T_12 = not(_expOut_T_11) @[RoundAnyRawFNToRecFN.scala 265:14]
    node _expOut_T_13 = and(_expOut_T_10, _expOut_T_12) @[RoundAnyRawFNToRecFN.scala 264:17]
    node _expOut_T_14 = mux(pegMinNonzeroMagOut, UInt<9>("h6b"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 269:16]
    node _expOut_T_15 = or(_expOut_T_13, _expOut_T_14) @[RoundAnyRawFNToRecFN.scala 268:18]
    node _expOut_T_16 = mux(pegMaxFiniteMagOut, UInt<9>("h17f"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 273:16]
    node _expOut_T_17 = or(_expOut_T_15, _expOut_T_16) @[RoundAnyRawFNToRecFN.scala 272:15]
    node _expOut_T_18 = mux(notNaN_isInfOut, UInt<9>("h180"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 277:16]
    node _expOut_T_19 = or(_expOut_T_17, _expOut_T_18) @[RoundAnyRawFNToRecFN.scala 276:15]
    node _expOut_T_20 = mux(isNaNOut, UInt<9>("h1c0"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 278:16]
    node expOut = or(_expOut_T_19, _expOut_T_20) @[RoundAnyRawFNToRecFN.scala 277:73]
    node _fractOut_T = or(isNaNOut, io.in.isZero) @[RoundAnyRawFNToRecFN.scala 280:22]
    node _fractOut_T_1 = or(_fractOut_T, common_totalUnderflow) @[RoundAnyRawFNToRecFN.scala 280:38]
    node _fractOut_T_2 = mux(isNaNOut, UInt<23>("h400000"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 281:16]
    node _fractOut_T_3 = mux(_fractOut_T_1, _fractOut_T_2, common_fractOut) @[RoundAnyRawFNToRecFN.scala 280:12]
    node _fractOut_T_4 = bits(pegMaxFiniteMagOut, 0, 0) @[Bitwise.scala 77:15]
    node _fractOut_T_5 = mux(_fractOut_T_4, UInt<23>("h7fffff"), UInt<23>("h0")) @[Bitwise.scala 77:12]
    node fractOut = or(_fractOut_T_3, _fractOut_T_5) @[RoundAnyRawFNToRecFN.scala 283:11]
    node _io_out_T = cat(signOut, expOut) @[RoundAnyRawFNToRecFN.scala 286:23]
    node _io_out_T_1 = cat(_io_out_T, fractOut) @[RoundAnyRawFNToRecFN.scala 286:33]
    io.out <= _io_out_T_1 @[RoundAnyRawFNToRecFN.scala 286:12]
    node _io_exceptionFlags_T = cat(io.invalidExc, io.infiniteExc) @[RoundAnyRawFNToRecFN.scala 288:23]
    node _io_exceptionFlags_T_1 = cat(_io_exceptionFlags_T, overflow) @[RoundAnyRawFNToRecFN.scala 288:41]
    node _io_exceptionFlags_T_2 = cat(_io_exceptionFlags_T_1, underflow) @[RoundAnyRawFNToRecFN.scala 288:53]
    node _io_exceptionFlags_T_3 = cat(_io_exceptionFlags_T_2, inexact) @[RoundAnyRawFNToRecFN.scala 288:66]
    io.exceptionFlags <= _io_exceptionFlags_T_3 @[RoundAnyRawFNToRecFN.scala 287:23]

  module RoundRawFNToRecFN_e8_s24_8 :
    output io : { flip invalidExc : UInt<1>, flip infiniteExc : UInt<1>, flip in : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<27>}, flip roundingMode : UInt<3>, flip detectTininess : UInt<1>, out : UInt<33>, exceptionFlags : UInt<5>}

    inst roundAnyRawFNToRecFN of RoundAnyRawFNToRecFN_ie8_is26_oe8_os24_8 @[RoundAnyRawFNToRecFN.scala 310:15]
    roundAnyRawFNToRecFN.io.invalidExc <= io.invalidExc @[RoundAnyRawFNToRecFN.scala 313:44]
    roundAnyRawFNToRecFN.io.infiniteExc <= io.infiniteExc @[RoundAnyRawFNToRecFN.scala 314:44]
    roundAnyRawFNToRecFN.io.in.sig <= io.in.sig @[RoundAnyRawFNToRecFN.scala 315:44]
    roundAnyRawFNToRecFN.io.in.sExp <= io.in.sExp @[RoundAnyRawFNToRecFN.scala 315:44]
    roundAnyRawFNToRecFN.io.in.sign <= io.in.sign @[RoundAnyRawFNToRecFN.scala 315:44]
    roundAnyRawFNToRecFN.io.in.isZero <= io.in.isZero @[RoundAnyRawFNToRecFN.scala 315:44]
    roundAnyRawFNToRecFN.io.in.isInf <= io.in.isInf @[RoundAnyRawFNToRecFN.scala 315:44]
    roundAnyRawFNToRecFN.io.in.isNaN <= io.in.isNaN @[RoundAnyRawFNToRecFN.scala 315:44]
    roundAnyRawFNToRecFN.io.roundingMode <= io.roundingMode @[RoundAnyRawFNToRecFN.scala 316:44]
    roundAnyRawFNToRecFN.io.detectTininess <= io.detectTininess @[RoundAnyRawFNToRecFN.scala 317:44]
    io.out <= roundAnyRawFNToRecFN.io.out @[RoundAnyRawFNToRecFN.scala 318:23]
    io.exceptionFlags <= roundAnyRawFNToRecFN.io.exceptionFlags @[RoundAnyRawFNToRecFN.scala 319:23]

  module AddRecFN_1 :
    output io : { flip subOp : UInt<1>, flip a : UInt<33>, flip b : UInt<33>, flip roundingMode : UInt<3>, flip detectTininess : UInt<1>, out : UInt<33>, exceptionFlags : UInt<5>}

    inst addRawFN of AddRawFN_1 @[AddRecFN.scala 147:26]
    addRawFN.io.subOp <= io.subOp @[AddRecFN.scala 149:30]
    node addRawFN_io_a_exp = bits(io.a, 31, 23) @[rawFloatFromRecFN.scala 51:21]
    node _addRawFN_io_a_isZero_T = bits(addRawFN_io_a_exp, 8, 6) @[rawFloatFromRecFN.scala 52:28]
    node addRawFN_io_a_isZero = eq(_addRawFN_io_a_isZero_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 52:53]
    node _addRawFN_io_a_isSpecial_T = bits(addRawFN_io_a_exp, 8, 7) @[rawFloatFromRecFN.scala 53:28]
    node addRawFN_io_a_isSpecial = eq(_addRawFN_io_a_isSpecial_T, UInt<2>("h3")) @[rawFloatFromRecFN.scala 53:53]
    wire addRawFN_io_a_out : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>} @[rawFloatFromRecFN.scala 55:23]
    node _addRawFN_io_a_out_isNaN_T = bits(addRawFN_io_a_exp, 6, 6) @[rawFloatFromRecFN.scala 56:41]
    node _addRawFN_io_a_out_isNaN_T_1 = and(addRawFN_io_a_isSpecial, _addRawFN_io_a_out_isNaN_T) @[rawFloatFromRecFN.scala 56:33]
    addRawFN_io_a_out.isNaN <= _addRawFN_io_a_out_isNaN_T_1 @[rawFloatFromRecFN.scala 56:20]
    node _addRawFN_io_a_out_isInf_T = bits(addRawFN_io_a_exp, 6, 6) @[rawFloatFromRecFN.scala 57:41]
    node _addRawFN_io_a_out_isInf_T_1 = eq(_addRawFN_io_a_out_isInf_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 57:36]
    node _addRawFN_io_a_out_isInf_T_2 = and(addRawFN_io_a_isSpecial, _addRawFN_io_a_out_isInf_T_1) @[rawFloatFromRecFN.scala 57:33]
    addRawFN_io_a_out.isInf <= _addRawFN_io_a_out_isInf_T_2 @[rawFloatFromRecFN.scala 57:20]
    addRawFN_io_a_out.isZero <= addRawFN_io_a_isZero @[rawFloatFromRecFN.scala 58:20]
    node _addRawFN_io_a_out_sign_T = bits(io.a, 32, 32) @[rawFloatFromRecFN.scala 59:25]
    addRawFN_io_a_out.sign <= _addRawFN_io_a_out_sign_T @[rawFloatFromRecFN.scala 59:20]
    node _addRawFN_io_a_out_sExp_T = cvt(addRawFN_io_a_exp) @[rawFloatFromRecFN.scala 60:27]
    addRawFN_io_a_out.sExp <= _addRawFN_io_a_out_sExp_T @[rawFloatFromRecFN.scala 60:20]
    node _addRawFN_io_a_out_sig_T = eq(addRawFN_io_a_isZero, UInt<1>("h0")) @[rawFloatFromRecFN.scala 61:35]
    node _addRawFN_io_a_out_sig_T_1 = cat(UInt<1>("h0"), _addRawFN_io_a_out_sig_T) @[rawFloatFromRecFN.scala 61:32]
    node _addRawFN_io_a_out_sig_T_2 = bits(io.a, 22, 0) @[rawFloatFromRecFN.scala 61:49]
    node _addRawFN_io_a_out_sig_T_3 = cat(_addRawFN_io_a_out_sig_T_1, _addRawFN_io_a_out_sig_T_2) @[rawFloatFromRecFN.scala 61:44]
    addRawFN_io_a_out.sig <= _addRawFN_io_a_out_sig_T_3 @[rawFloatFromRecFN.scala 61:20]
    addRawFN.io.a.sig <= addRawFN_io_a_out.sig @[AddRecFN.scala 150:30]
    addRawFN.io.a.sExp <= addRawFN_io_a_out.sExp @[AddRecFN.scala 150:30]
    addRawFN.io.a.sign <= addRawFN_io_a_out.sign @[AddRecFN.scala 150:30]
    addRawFN.io.a.isZero <= addRawFN_io_a_out.isZero @[AddRecFN.scala 150:30]
    addRawFN.io.a.isInf <= addRawFN_io_a_out.isInf @[AddRecFN.scala 150:30]
    addRawFN.io.a.isNaN <= addRawFN_io_a_out.isNaN @[AddRecFN.scala 150:30]
    node addRawFN_io_b_exp = bits(io.b, 31, 23) @[rawFloatFromRecFN.scala 51:21]
    node _addRawFN_io_b_isZero_T = bits(addRawFN_io_b_exp, 8, 6) @[rawFloatFromRecFN.scala 52:28]
    node addRawFN_io_b_isZero = eq(_addRawFN_io_b_isZero_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 52:53]
    node _addRawFN_io_b_isSpecial_T = bits(addRawFN_io_b_exp, 8, 7) @[rawFloatFromRecFN.scala 53:28]
    node addRawFN_io_b_isSpecial = eq(_addRawFN_io_b_isSpecial_T, UInt<2>("h3")) @[rawFloatFromRecFN.scala 53:53]
    wire addRawFN_io_b_out : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>} @[rawFloatFromRecFN.scala 55:23]
    node _addRawFN_io_b_out_isNaN_T = bits(addRawFN_io_b_exp, 6, 6) @[rawFloatFromRecFN.scala 56:41]
    node _addRawFN_io_b_out_isNaN_T_1 = and(addRawFN_io_b_isSpecial, _addRawFN_io_b_out_isNaN_T) @[rawFloatFromRecFN.scala 56:33]
    addRawFN_io_b_out.isNaN <= _addRawFN_io_b_out_isNaN_T_1 @[rawFloatFromRecFN.scala 56:20]
    node _addRawFN_io_b_out_isInf_T = bits(addRawFN_io_b_exp, 6, 6) @[rawFloatFromRecFN.scala 57:41]
    node _addRawFN_io_b_out_isInf_T_1 = eq(_addRawFN_io_b_out_isInf_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 57:36]
    node _addRawFN_io_b_out_isInf_T_2 = and(addRawFN_io_b_isSpecial, _addRawFN_io_b_out_isInf_T_1) @[rawFloatFromRecFN.scala 57:33]
    addRawFN_io_b_out.isInf <= _addRawFN_io_b_out_isInf_T_2 @[rawFloatFromRecFN.scala 57:20]
    addRawFN_io_b_out.isZero <= addRawFN_io_b_isZero @[rawFloatFromRecFN.scala 58:20]
    node _addRawFN_io_b_out_sign_T = bits(io.b, 32, 32) @[rawFloatFromRecFN.scala 59:25]
    addRawFN_io_b_out.sign <= _addRawFN_io_b_out_sign_T @[rawFloatFromRecFN.scala 59:20]
    node _addRawFN_io_b_out_sExp_T = cvt(addRawFN_io_b_exp) @[rawFloatFromRecFN.scala 60:27]
    addRawFN_io_b_out.sExp <= _addRawFN_io_b_out_sExp_T @[rawFloatFromRecFN.scala 60:20]
    node _addRawFN_io_b_out_sig_T = eq(addRawFN_io_b_isZero, UInt<1>("h0")) @[rawFloatFromRecFN.scala 61:35]
    node _addRawFN_io_b_out_sig_T_1 = cat(UInt<1>("h0"), _addRawFN_io_b_out_sig_T) @[rawFloatFromRecFN.scala 61:32]
    node _addRawFN_io_b_out_sig_T_2 = bits(io.b, 22, 0) @[rawFloatFromRecFN.scala 61:49]
    node _addRawFN_io_b_out_sig_T_3 = cat(_addRawFN_io_b_out_sig_T_1, _addRawFN_io_b_out_sig_T_2) @[rawFloatFromRecFN.scala 61:44]
    addRawFN_io_b_out.sig <= _addRawFN_io_b_out_sig_T_3 @[rawFloatFromRecFN.scala 61:20]
    addRawFN.io.b.sig <= addRawFN_io_b_out.sig @[AddRecFN.scala 151:30]
    addRawFN.io.b.sExp <= addRawFN_io_b_out.sExp @[AddRecFN.scala 151:30]
    addRawFN.io.b.sign <= addRawFN_io_b_out.sign @[AddRecFN.scala 151:30]
    addRawFN.io.b.isZero <= addRawFN_io_b_out.isZero @[AddRecFN.scala 151:30]
    addRawFN.io.b.isInf <= addRawFN_io_b_out.isInf @[AddRecFN.scala 151:30]
    addRawFN.io.b.isNaN <= addRawFN_io_b_out.isNaN @[AddRecFN.scala 151:30]
    addRawFN.io.roundingMode <= io.roundingMode @[AddRecFN.scala 152:30]
    inst roundRawFNToRecFN of RoundRawFNToRecFN_e8_s24_8 @[AddRecFN.scala 157:15]
    roundRawFNToRecFN.io.invalidExc <= addRawFN.io.invalidExc @[AddRecFN.scala 158:39]
    roundRawFNToRecFN.io.infiniteExc <= UInt<1>("h0") @[AddRecFN.scala 159:39]
    roundRawFNToRecFN.io.in.sig <= addRawFN.io.rawOut.sig @[AddRecFN.scala 160:39]
    roundRawFNToRecFN.io.in.sExp <= addRawFN.io.rawOut.sExp @[AddRecFN.scala 160:39]
    roundRawFNToRecFN.io.in.sign <= addRawFN.io.rawOut.sign @[AddRecFN.scala 160:39]
    roundRawFNToRecFN.io.in.isZero <= addRawFN.io.rawOut.isZero @[AddRecFN.scala 160:39]
    roundRawFNToRecFN.io.in.isInf <= addRawFN.io.rawOut.isInf @[AddRecFN.scala 160:39]
    roundRawFNToRecFN.io.in.isNaN <= addRawFN.io.rawOut.isNaN @[AddRecFN.scala 160:39]
    roundRawFNToRecFN.io.roundingMode <= io.roundingMode @[AddRecFN.scala 161:39]
    roundRawFNToRecFN.io.detectTininess <= io.detectTininess @[AddRecFN.scala 162:41]
    io.out <= roundRawFNToRecFN.io.out @[AddRecFN.scala 163:23]
    io.exceptionFlags <= roundRawFNToRecFN.io.exceptionFlags @[AddRecFN.scala 164:23]

  module FP32Sub_1 :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<32>, flip b : UInt<32>, result : UInt<32>}

    inst adder of AddRecFN_1 @[FPU.scala 45:23]
    node a_recoded_rawIn_sign = bits(io.a, 31, 31) @[rawFloatFromFN.scala 44:18]
    node a_recoded_rawIn_expIn = bits(io.a, 30, 23) @[rawFloatFromFN.scala 45:19]
    node a_recoded_rawIn_fractIn = bits(io.a, 22, 0) @[rawFloatFromFN.scala 46:21]
    node a_recoded_rawIn_isZeroExpIn = eq(a_recoded_rawIn_expIn, UInt<1>("h0")) @[rawFloatFromFN.scala 48:30]
    node a_recoded_rawIn_isZeroFractIn = eq(a_recoded_rawIn_fractIn, UInt<1>("h0")) @[rawFloatFromFN.scala 49:34]
    node _a_recoded_rawIn_normDist_T = bits(a_recoded_rawIn_fractIn, 0, 0) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_1 = bits(a_recoded_rawIn_fractIn, 1, 1) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_2 = bits(a_recoded_rawIn_fractIn, 2, 2) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_3 = bits(a_recoded_rawIn_fractIn, 3, 3) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_4 = bits(a_recoded_rawIn_fractIn, 4, 4) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_5 = bits(a_recoded_rawIn_fractIn, 5, 5) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_6 = bits(a_recoded_rawIn_fractIn, 6, 6) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_7 = bits(a_recoded_rawIn_fractIn, 7, 7) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_8 = bits(a_recoded_rawIn_fractIn, 8, 8) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_9 = bits(a_recoded_rawIn_fractIn, 9, 9) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_10 = bits(a_recoded_rawIn_fractIn, 10, 10) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_11 = bits(a_recoded_rawIn_fractIn, 11, 11) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_12 = bits(a_recoded_rawIn_fractIn, 12, 12) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_13 = bits(a_recoded_rawIn_fractIn, 13, 13) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_14 = bits(a_recoded_rawIn_fractIn, 14, 14) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_15 = bits(a_recoded_rawIn_fractIn, 15, 15) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_16 = bits(a_recoded_rawIn_fractIn, 16, 16) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_17 = bits(a_recoded_rawIn_fractIn, 17, 17) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_18 = bits(a_recoded_rawIn_fractIn, 18, 18) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_19 = bits(a_recoded_rawIn_fractIn, 19, 19) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_20 = bits(a_recoded_rawIn_fractIn, 20, 20) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_21 = bits(a_recoded_rawIn_fractIn, 21, 21) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_22 = bits(a_recoded_rawIn_fractIn, 22, 22) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_23 = mux(_a_recoded_rawIn_normDist_T_1, UInt<5>("h15"), UInt<5>("h16")) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_24 = mux(_a_recoded_rawIn_normDist_T_2, UInt<5>("h14"), _a_recoded_rawIn_normDist_T_23) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_25 = mux(_a_recoded_rawIn_normDist_T_3, UInt<5>("h13"), _a_recoded_rawIn_normDist_T_24) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_26 = mux(_a_recoded_rawIn_normDist_T_4, UInt<5>("h12"), _a_recoded_rawIn_normDist_T_25) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_27 = mux(_a_recoded_rawIn_normDist_T_5, UInt<5>("h11"), _a_recoded_rawIn_normDist_T_26) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_28 = mux(_a_recoded_rawIn_normDist_T_6, UInt<5>("h10"), _a_recoded_rawIn_normDist_T_27) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_29 = mux(_a_recoded_rawIn_normDist_T_7, UInt<4>("hf"), _a_recoded_rawIn_normDist_T_28) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_30 = mux(_a_recoded_rawIn_normDist_T_8, UInt<4>("he"), _a_recoded_rawIn_normDist_T_29) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_31 = mux(_a_recoded_rawIn_normDist_T_9, UInt<4>("hd"), _a_recoded_rawIn_normDist_T_30) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_32 = mux(_a_recoded_rawIn_normDist_T_10, UInt<4>("hc"), _a_recoded_rawIn_normDist_T_31) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_33 = mux(_a_recoded_rawIn_normDist_T_11, UInt<4>("hb"), _a_recoded_rawIn_normDist_T_32) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_34 = mux(_a_recoded_rawIn_normDist_T_12, UInt<4>("ha"), _a_recoded_rawIn_normDist_T_33) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_35 = mux(_a_recoded_rawIn_normDist_T_13, UInt<4>("h9"), _a_recoded_rawIn_normDist_T_34) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_36 = mux(_a_recoded_rawIn_normDist_T_14, UInt<4>("h8"), _a_recoded_rawIn_normDist_T_35) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_37 = mux(_a_recoded_rawIn_normDist_T_15, UInt<3>("h7"), _a_recoded_rawIn_normDist_T_36) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_38 = mux(_a_recoded_rawIn_normDist_T_16, UInt<3>("h6"), _a_recoded_rawIn_normDist_T_37) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_39 = mux(_a_recoded_rawIn_normDist_T_17, UInt<3>("h5"), _a_recoded_rawIn_normDist_T_38) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_40 = mux(_a_recoded_rawIn_normDist_T_18, UInt<3>("h4"), _a_recoded_rawIn_normDist_T_39) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_41 = mux(_a_recoded_rawIn_normDist_T_19, UInt<2>("h3"), _a_recoded_rawIn_normDist_T_40) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_42 = mux(_a_recoded_rawIn_normDist_T_20, UInt<2>("h2"), _a_recoded_rawIn_normDist_T_41) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_43 = mux(_a_recoded_rawIn_normDist_T_21, UInt<1>("h1"), _a_recoded_rawIn_normDist_T_42) @[Mux.scala 47:70]
    node a_recoded_rawIn_normDist = mux(_a_recoded_rawIn_normDist_T_22, UInt<1>("h0"), _a_recoded_rawIn_normDist_T_43) @[Mux.scala 47:70]
    node _a_recoded_rawIn_subnormFract_T = dshl(a_recoded_rawIn_fractIn, a_recoded_rawIn_normDist) @[rawFloatFromFN.scala 52:33]
    node _a_recoded_rawIn_subnormFract_T_1 = bits(_a_recoded_rawIn_subnormFract_T, 21, 0) @[rawFloatFromFN.scala 52:46]
    node a_recoded_rawIn_subnormFract = shl(_a_recoded_rawIn_subnormFract_T_1, 1) @[rawFloatFromFN.scala 52:64]
    node _a_recoded_rawIn_adjustedExp_T = xor(a_recoded_rawIn_normDist, UInt<9>("h1ff")) @[rawFloatFromFN.scala 55:18]
    node _a_recoded_rawIn_adjustedExp_T_1 = mux(a_recoded_rawIn_isZeroExpIn, _a_recoded_rawIn_adjustedExp_T, a_recoded_rawIn_expIn) @[rawFloatFromFN.scala 54:10]
    node _a_recoded_rawIn_adjustedExp_T_2 = mux(a_recoded_rawIn_isZeroExpIn, UInt<2>("h2"), UInt<1>("h1")) @[rawFloatFromFN.scala 58:14]
    node _a_recoded_rawIn_adjustedExp_T_3 = or(UInt<8>("h80"), _a_recoded_rawIn_adjustedExp_T_2) @[rawFloatFromFN.scala 58:9]
    node _a_recoded_rawIn_adjustedExp_T_4 = add(_a_recoded_rawIn_adjustedExp_T_1, _a_recoded_rawIn_adjustedExp_T_3) @[rawFloatFromFN.scala 57:9]
    node a_recoded_rawIn_adjustedExp = tail(_a_recoded_rawIn_adjustedExp_T_4, 1) @[rawFloatFromFN.scala 57:9]
    node a_recoded_rawIn_isZero = and(a_recoded_rawIn_isZeroExpIn, a_recoded_rawIn_isZeroFractIn) @[rawFloatFromFN.scala 60:30]
    node _a_recoded_rawIn_isSpecial_T = bits(a_recoded_rawIn_adjustedExp, 8, 7) @[rawFloatFromFN.scala 61:32]
    node a_recoded_rawIn_isSpecial = eq(_a_recoded_rawIn_isSpecial_T, UInt<2>("h3")) @[rawFloatFromFN.scala 61:57]
    wire a_recoded_rawIn : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>} @[rawFloatFromFN.scala 63:19]
    node _a_recoded_rawIn_out_isNaN_T = eq(a_recoded_rawIn_isZeroFractIn, UInt<1>("h0")) @[rawFloatFromFN.scala 64:31]
    node _a_recoded_rawIn_out_isNaN_T_1 = and(a_recoded_rawIn_isSpecial, _a_recoded_rawIn_out_isNaN_T) @[rawFloatFromFN.scala 64:28]
    a_recoded_rawIn.isNaN <= _a_recoded_rawIn_out_isNaN_T_1 @[rawFloatFromFN.scala 64:15]
    node _a_recoded_rawIn_out_isInf_T = and(a_recoded_rawIn_isSpecial, a_recoded_rawIn_isZeroFractIn) @[rawFloatFromFN.scala 65:28]
    a_recoded_rawIn.isInf <= _a_recoded_rawIn_out_isInf_T @[rawFloatFromFN.scala 65:15]
    a_recoded_rawIn.isZero <= a_recoded_rawIn_isZero @[rawFloatFromFN.scala 66:16]
    a_recoded_rawIn.sign <= a_recoded_rawIn_sign @[rawFloatFromFN.scala 67:14]
    node _a_recoded_rawIn_out_sExp_T = bits(a_recoded_rawIn_adjustedExp, 8, 0) @[rawFloatFromFN.scala 68:28]
    node _a_recoded_rawIn_out_sExp_T_1 = cvt(_a_recoded_rawIn_out_sExp_T) @[rawFloatFromFN.scala 68:42]
    a_recoded_rawIn.sExp <= _a_recoded_rawIn_out_sExp_T_1 @[rawFloatFromFN.scala 68:14]
    node _a_recoded_rawIn_out_sig_T = eq(a_recoded_rawIn_isZero, UInt<1>("h0")) @[rawFloatFromFN.scala 70:19]
    node _a_recoded_rawIn_out_sig_T_1 = cat(UInt<1>("h0"), _a_recoded_rawIn_out_sig_T) @[rawFloatFromFN.scala 70:16]
    node _a_recoded_rawIn_out_sig_T_2 = mux(a_recoded_rawIn_isZeroExpIn, a_recoded_rawIn_subnormFract, a_recoded_rawIn_fractIn) @[rawFloatFromFN.scala 70:33]
    node _a_recoded_rawIn_out_sig_T_3 = cat(_a_recoded_rawIn_out_sig_T_1, _a_recoded_rawIn_out_sig_T_2) @[rawFloatFromFN.scala 70:27]
    a_recoded_rawIn.sig <= _a_recoded_rawIn_out_sig_T_3 @[rawFloatFromFN.scala 69:13]
    node _a_recoded_T = bits(a_recoded_rawIn.sExp, 8, 6) @[recFNFromFN.scala 48:50]
    node _a_recoded_T_1 = mux(a_recoded_rawIn.isZero, UInt<3>("h0"), _a_recoded_T) @[recFNFromFN.scala 48:15]
    node _a_recoded_T_2 = mux(a_recoded_rawIn.isNaN, UInt<1>("h1"), UInt<1>("h0")) @[recFNFromFN.scala 49:20]
    node _a_recoded_T_3 = or(_a_recoded_T_1, _a_recoded_T_2) @[recFNFromFN.scala 48:76]
    node _a_recoded_T_4 = cat(a_recoded_rawIn.sign, _a_recoded_T_3) @[recFNFromFN.scala 47:20]
    node _a_recoded_T_5 = bits(a_recoded_rawIn.sExp, 5, 0) @[recFNFromFN.scala 50:23]
    node _a_recoded_T_6 = cat(_a_recoded_T_4, _a_recoded_T_5) @[recFNFromFN.scala 49:45]
    node _a_recoded_T_7 = bits(a_recoded_rawIn.sig, 22, 0) @[recFNFromFN.scala 51:22]
    node a_recoded = cat(_a_recoded_T_6, _a_recoded_T_7) @[recFNFromFN.scala 50:41]
    node b_recoded_rawIn_sign = bits(io.b, 31, 31) @[rawFloatFromFN.scala 44:18]
    node b_recoded_rawIn_expIn = bits(io.b, 30, 23) @[rawFloatFromFN.scala 45:19]
    node b_recoded_rawIn_fractIn = bits(io.b, 22, 0) @[rawFloatFromFN.scala 46:21]
    node b_recoded_rawIn_isZeroExpIn = eq(b_recoded_rawIn_expIn, UInt<1>("h0")) @[rawFloatFromFN.scala 48:30]
    node b_recoded_rawIn_isZeroFractIn = eq(b_recoded_rawIn_fractIn, UInt<1>("h0")) @[rawFloatFromFN.scala 49:34]
    node _b_recoded_rawIn_normDist_T = bits(b_recoded_rawIn_fractIn, 0, 0) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_1 = bits(b_recoded_rawIn_fractIn, 1, 1) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_2 = bits(b_recoded_rawIn_fractIn, 2, 2) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_3 = bits(b_recoded_rawIn_fractIn, 3, 3) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_4 = bits(b_recoded_rawIn_fractIn, 4, 4) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_5 = bits(b_recoded_rawIn_fractIn, 5, 5) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_6 = bits(b_recoded_rawIn_fractIn, 6, 6) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_7 = bits(b_recoded_rawIn_fractIn, 7, 7) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_8 = bits(b_recoded_rawIn_fractIn, 8, 8) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_9 = bits(b_recoded_rawIn_fractIn, 9, 9) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_10 = bits(b_recoded_rawIn_fractIn, 10, 10) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_11 = bits(b_recoded_rawIn_fractIn, 11, 11) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_12 = bits(b_recoded_rawIn_fractIn, 12, 12) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_13 = bits(b_recoded_rawIn_fractIn, 13, 13) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_14 = bits(b_recoded_rawIn_fractIn, 14, 14) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_15 = bits(b_recoded_rawIn_fractIn, 15, 15) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_16 = bits(b_recoded_rawIn_fractIn, 16, 16) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_17 = bits(b_recoded_rawIn_fractIn, 17, 17) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_18 = bits(b_recoded_rawIn_fractIn, 18, 18) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_19 = bits(b_recoded_rawIn_fractIn, 19, 19) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_20 = bits(b_recoded_rawIn_fractIn, 20, 20) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_21 = bits(b_recoded_rawIn_fractIn, 21, 21) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_22 = bits(b_recoded_rawIn_fractIn, 22, 22) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_23 = mux(_b_recoded_rawIn_normDist_T_1, UInt<5>("h15"), UInt<5>("h16")) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_24 = mux(_b_recoded_rawIn_normDist_T_2, UInt<5>("h14"), _b_recoded_rawIn_normDist_T_23) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_25 = mux(_b_recoded_rawIn_normDist_T_3, UInt<5>("h13"), _b_recoded_rawIn_normDist_T_24) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_26 = mux(_b_recoded_rawIn_normDist_T_4, UInt<5>("h12"), _b_recoded_rawIn_normDist_T_25) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_27 = mux(_b_recoded_rawIn_normDist_T_5, UInt<5>("h11"), _b_recoded_rawIn_normDist_T_26) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_28 = mux(_b_recoded_rawIn_normDist_T_6, UInt<5>("h10"), _b_recoded_rawIn_normDist_T_27) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_29 = mux(_b_recoded_rawIn_normDist_T_7, UInt<4>("hf"), _b_recoded_rawIn_normDist_T_28) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_30 = mux(_b_recoded_rawIn_normDist_T_8, UInt<4>("he"), _b_recoded_rawIn_normDist_T_29) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_31 = mux(_b_recoded_rawIn_normDist_T_9, UInt<4>("hd"), _b_recoded_rawIn_normDist_T_30) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_32 = mux(_b_recoded_rawIn_normDist_T_10, UInt<4>("hc"), _b_recoded_rawIn_normDist_T_31) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_33 = mux(_b_recoded_rawIn_normDist_T_11, UInt<4>("hb"), _b_recoded_rawIn_normDist_T_32) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_34 = mux(_b_recoded_rawIn_normDist_T_12, UInt<4>("ha"), _b_recoded_rawIn_normDist_T_33) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_35 = mux(_b_recoded_rawIn_normDist_T_13, UInt<4>("h9"), _b_recoded_rawIn_normDist_T_34) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_36 = mux(_b_recoded_rawIn_normDist_T_14, UInt<4>("h8"), _b_recoded_rawIn_normDist_T_35) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_37 = mux(_b_recoded_rawIn_normDist_T_15, UInt<3>("h7"), _b_recoded_rawIn_normDist_T_36) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_38 = mux(_b_recoded_rawIn_normDist_T_16, UInt<3>("h6"), _b_recoded_rawIn_normDist_T_37) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_39 = mux(_b_recoded_rawIn_normDist_T_17, UInt<3>("h5"), _b_recoded_rawIn_normDist_T_38) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_40 = mux(_b_recoded_rawIn_normDist_T_18, UInt<3>("h4"), _b_recoded_rawIn_normDist_T_39) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_41 = mux(_b_recoded_rawIn_normDist_T_19, UInt<2>("h3"), _b_recoded_rawIn_normDist_T_40) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_42 = mux(_b_recoded_rawIn_normDist_T_20, UInt<2>("h2"), _b_recoded_rawIn_normDist_T_41) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_43 = mux(_b_recoded_rawIn_normDist_T_21, UInt<1>("h1"), _b_recoded_rawIn_normDist_T_42) @[Mux.scala 47:70]
    node b_recoded_rawIn_normDist = mux(_b_recoded_rawIn_normDist_T_22, UInt<1>("h0"), _b_recoded_rawIn_normDist_T_43) @[Mux.scala 47:70]
    node _b_recoded_rawIn_subnormFract_T = dshl(b_recoded_rawIn_fractIn, b_recoded_rawIn_normDist) @[rawFloatFromFN.scala 52:33]
    node _b_recoded_rawIn_subnormFract_T_1 = bits(_b_recoded_rawIn_subnormFract_T, 21, 0) @[rawFloatFromFN.scala 52:46]
    node b_recoded_rawIn_subnormFract = shl(_b_recoded_rawIn_subnormFract_T_1, 1) @[rawFloatFromFN.scala 52:64]
    node _b_recoded_rawIn_adjustedExp_T = xor(b_recoded_rawIn_normDist, UInt<9>("h1ff")) @[rawFloatFromFN.scala 55:18]
    node _b_recoded_rawIn_adjustedExp_T_1 = mux(b_recoded_rawIn_isZeroExpIn, _b_recoded_rawIn_adjustedExp_T, b_recoded_rawIn_expIn) @[rawFloatFromFN.scala 54:10]
    node _b_recoded_rawIn_adjustedExp_T_2 = mux(b_recoded_rawIn_isZeroExpIn, UInt<2>("h2"), UInt<1>("h1")) @[rawFloatFromFN.scala 58:14]
    node _b_recoded_rawIn_adjustedExp_T_3 = or(UInt<8>("h80"), _b_recoded_rawIn_adjustedExp_T_2) @[rawFloatFromFN.scala 58:9]
    node _b_recoded_rawIn_adjustedExp_T_4 = add(_b_recoded_rawIn_adjustedExp_T_1, _b_recoded_rawIn_adjustedExp_T_3) @[rawFloatFromFN.scala 57:9]
    node b_recoded_rawIn_adjustedExp = tail(_b_recoded_rawIn_adjustedExp_T_4, 1) @[rawFloatFromFN.scala 57:9]
    node b_recoded_rawIn_isZero = and(b_recoded_rawIn_isZeroExpIn, b_recoded_rawIn_isZeroFractIn) @[rawFloatFromFN.scala 60:30]
    node _b_recoded_rawIn_isSpecial_T = bits(b_recoded_rawIn_adjustedExp, 8, 7) @[rawFloatFromFN.scala 61:32]
    node b_recoded_rawIn_isSpecial = eq(_b_recoded_rawIn_isSpecial_T, UInt<2>("h3")) @[rawFloatFromFN.scala 61:57]
    wire b_recoded_rawIn : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>} @[rawFloatFromFN.scala 63:19]
    node _b_recoded_rawIn_out_isNaN_T = eq(b_recoded_rawIn_isZeroFractIn, UInt<1>("h0")) @[rawFloatFromFN.scala 64:31]
    node _b_recoded_rawIn_out_isNaN_T_1 = and(b_recoded_rawIn_isSpecial, _b_recoded_rawIn_out_isNaN_T) @[rawFloatFromFN.scala 64:28]
    b_recoded_rawIn.isNaN <= _b_recoded_rawIn_out_isNaN_T_1 @[rawFloatFromFN.scala 64:15]
    node _b_recoded_rawIn_out_isInf_T = and(b_recoded_rawIn_isSpecial, b_recoded_rawIn_isZeroFractIn) @[rawFloatFromFN.scala 65:28]
    b_recoded_rawIn.isInf <= _b_recoded_rawIn_out_isInf_T @[rawFloatFromFN.scala 65:15]
    b_recoded_rawIn.isZero <= b_recoded_rawIn_isZero @[rawFloatFromFN.scala 66:16]
    b_recoded_rawIn.sign <= b_recoded_rawIn_sign @[rawFloatFromFN.scala 67:14]
    node _b_recoded_rawIn_out_sExp_T = bits(b_recoded_rawIn_adjustedExp, 8, 0) @[rawFloatFromFN.scala 68:28]
    node _b_recoded_rawIn_out_sExp_T_1 = cvt(_b_recoded_rawIn_out_sExp_T) @[rawFloatFromFN.scala 68:42]
    b_recoded_rawIn.sExp <= _b_recoded_rawIn_out_sExp_T_1 @[rawFloatFromFN.scala 68:14]
    node _b_recoded_rawIn_out_sig_T = eq(b_recoded_rawIn_isZero, UInt<1>("h0")) @[rawFloatFromFN.scala 70:19]
    node _b_recoded_rawIn_out_sig_T_1 = cat(UInt<1>("h0"), _b_recoded_rawIn_out_sig_T) @[rawFloatFromFN.scala 70:16]
    node _b_recoded_rawIn_out_sig_T_2 = mux(b_recoded_rawIn_isZeroExpIn, b_recoded_rawIn_subnormFract, b_recoded_rawIn_fractIn) @[rawFloatFromFN.scala 70:33]
    node _b_recoded_rawIn_out_sig_T_3 = cat(_b_recoded_rawIn_out_sig_T_1, _b_recoded_rawIn_out_sig_T_2) @[rawFloatFromFN.scala 70:27]
    b_recoded_rawIn.sig <= _b_recoded_rawIn_out_sig_T_3 @[rawFloatFromFN.scala 69:13]
    node _b_recoded_T = bits(b_recoded_rawIn.sExp, 8, 6) @[recFNFromFN.scala 48:50]
    node _b_recoded_T_1 = mux(b_recoded_rawIn.isZero, UInt<3>("h0"), _b_recoded_T) @[recFNFromFN.scala 48:15]
    node _b_recoded_T_2 = mux(b_recoded_rawIn.isNaN, UInt<1>("h1"), UInt<1>("h0")) @[recFNFromFN.scala 49:20]
    node _b_recoded_T_3 = or(_b_recoded_T_1, _b_recoded_T_2) @[recFNFromFN.scala 48:76]
    node _b_recoded_T_4 = cat(b_recoded_rawIn.sign, _b_recoded_T_3) @[recFNFromFN.scala 47:20]
    node _b_recoded_T_5 = bits(b_recoded_rawIn.sExp, 5, 0) @[recFNFromFN.scala 50:23]
    node _b_recoded_T_6 = cat(_b_recoded_T_4, _b_recoded_T_5) @[recFNFromFN.scala 49:45]
    node _b_recoded_T_7 = bits(b_recoded_rawIn.sig, 22, 0) @[recFNFromFN.scala 51:22]
    node b_recoded = cat(_b_recoded_T_6, _b_recoded_T_7) @[recFNFromFN.scala 50:41]
    adder.io.subOp <= UInt<1>("h1") @[FPU.scala 52:20]
    adder.io.a <= a_recoded @[FPU.scala 53:16]
    adder.io.b <= b_recoded @[FPU.scala 54:16]
    adder.io.roundingMode <= UInt<3>("h0") @[FPU.scala 55:27]
    adder.io.detectTininess <= UInt<1>("h1") @[FPU.scala 56:29]
    node io_result_rawIn_exp = bits(adder.io.out, 31, 23) @[rawFloatFromRecFN.scala 51:21]
    node _io_result_rawIn_isZero_T = bits(io_result_rawIn_exp, 8, 6) @[rawFloatFromRecFN.scala 52:28]
    node io_result_rawIn_isZero = eq(_io_result_rawIn_isZero_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 52:53]
    node _io_result_rawIn_isSpecial_T = bits(io_result_rawIn_exp, 8, 7) @[rawFloatFromRecFN.scala 53:28]
    node io_result_rawIn_isSpecial = eq(_io_result_rawIn_isSpecial_T, UInt<2>("h3")) @[rawFloatFromRecFN.scala 53:53]
    wire io_result_rawIn : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>} @[rawFloatFromRecFN.scala 55:23]
    node _io_result_rawIn_out_isNaN_T = bits(io_result_rawIn_exp, 6, 6) @[rawFloatFromRecFN.scala 56:41]
    node _io_result_rawIn_out_isNaN_T_1 = and(io_result_rawIn_isSpecial, _io_result_rawIn_out_isNaN_T) @[rawFloatFromRecFN.scala 56:33]
    io_result_rawIn.isNaN <= _io_result_rawIn_out_isNaN_T_1 @[rawFloatFromRecFN.scala 56:20]
    node _io_result_rawIn_out_isInf_T = bits(io_result_rawIn_exp, 6, 6) @[rawFloatFromRecFN.scala 57:41]
    node _io_result_rawIn_out_isInf_T_1 = eq(_io_result_rawIn_out_isInf_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 57:36]
    node _io_result_rawIn_out_isInf_T_2 = and(io_result_rawIn_isSpecial, _io_result_rawIn_out_isInf_T_1) @[rawFloatFromRecFN.scala 57:33]
    io_result_rawIn.isInf <= _io_result_rawIn_out_isInf_T_2 @[rawFloatFromRecFN.scala 57:20]
    io_result_rawIn.isZero <= io_result_rawIn_isZero @[rawFloatFromRecFN.scala 58:20]
    node _io_result_rawIn_out_sign_T = bits(adder.io.out, 32, 32) @[rawFloatFromRecFN.scala 59:25]
    io_result_rawIn.sign <= _io_result_rawIn_out_sign_T @[rawFloatFromRecFN.scala 59:20]
    node _io_result_rawIn_out_sExp_T = cvt(io_result_rawIn_exp) @[rawFloatFromRecFN.scala 60:27]
    io_result_rawIn.sExp <= _io_result_rawIn_out_sExp_T @[rawFloatFromRecFN.scala 60:20]
    node _io_result_rawIn_out_sig_T = eq(io_result_rawIn_isZero, UInt<1>("h0")) @[rawFloatFromRecFN.scala 61:35]
    node _io_result_rawIn_out_sig_T_1 = cat(UInt<1>("h0"), _io_result_rawIn_out_sig_T) @[rawFloatFromRecFN.scala 61:32]
    node _io_result_rawIn_out_sig_T_2 = bits(adder.io.out, 22, 0) @[rawFloatFromRecFN.scala 61:49]
    node _io_result_rawIn_out_sig_T_3 = cat(_io_result_rawIn_out_sig_T_1, _io_result_rawIn_out_sig_T_2) @[rawFloatFromRecFN.scala 61:44]
    io_result_rawIn.sig <= _io_result_rawIn_out_sig_T_3 @[rawFloatFromRecFN.scala 61:20]
    node io_result_isSubnormal = lt(io_result_rawIn.sExp, asSInt(UInt<9>("h82"))) @[fNFromRecFN.scala 51:38]
    node _io_result_denormShiftDist_T = bits(io_result_rawIn.sExp, 4, 0) @[fNFromRecFN.scala 52:47]
    node _io_result_denormShiftDist_T_1 = sub(UInt<1>("h1"), _io_result_denormShiftDist_T) @[fNFromRecFN.scala 52:35]
    node io_result_denormShiftDist = tail(_io_result_denormShiftDist_T_1, 1) @[fNFromRecFN.scala 52:35]
    node _io_result_denormFract_T = shr(io_result_rawIn.sig, 1) @[fNFromRecFN.scala 53:38]
    node _io_result_denormFract_T_1 = dshr(_io_result_denormFract_T, io_result_denormShiftDist) @[fNFromRecFN.scala 53:42]
    node io_result_denormFract = bits(_io_result_denormFract_T_1, 22, 0) @[fNFromRecFN.scala 53:60]
    node _io_result_expOut_T = bits(io_result_rawIn.sExp, 7, 0) @[fNFromRecFN.scala 58:27]
    node _io_result_expOut_T_1 = sub(_io_result_expOut_T, UInt<8>("h81")) @[fNFromRecFN.scala 58:45]
    node _io_result_expOut_T_2 = tail(_io_result_expOut_T_1, 1) @[fNFromRecFN.scala 58:45]
    node _io_result_expOut_T_3 = mux(io_result_isSubnormal, UInt<1>("h0"), _io_result_expOut_T_2) @[fNFromRecFN.scala 56:16]
    node _io_result_expOut_T_4 = or(io_result_rawIn.isNaN, io_result_rawIn.isInf) @[fNFromRecFN.scala 60:44]
    node _io_result_expOut_T_5 = bits(_io_result_expOut_T_4, 0, 0) @[Bitwise.scala 77:15]
    node _io_result_expOut_T_6 = mux(_io_result_expOut_T_5, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 77:12]
    node io_result_expOut = or(_io_result_expOut_T_3, _io_result_expOut_T_6) @[fNFromRecFN.scala 60:15]
    node _io_result_fractOut_T = bits(io_result_rawIn.sig, 22, 0) @[fNFromRecFN.scala 64:48]
    node _io_result_fractOut_T_1 = mux(io_result_rawIn.isInf, UInt<1>("h0"), _io_result_fractOut_T) @[fNFromRecFN.scala 64:20]
    node io_result_fractOut = mux(io_result_isSubnormal, io_result_denormFract, _io_result_fractOut_T_1) @[fNFromRecFN.scala 62:16]
    node io_result_hi = cat(io_result_rawIn.sign, io_result_expOut) @[Cat.scala 33:92]
    node _io_result_T = cat(io_result_hi, io_result_fractOut) @[Cat.scala 33:92]
    io.result <= _io_result_T @[FPU.scala 59:15]

  module AddRawFN_2 :
    output io : { flip subOp : UInt<1>, flip a : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>}, flip b : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>}, flip roundingMode : UInt<3>, invalidExc : UInt<1>, rawOut : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<27>}}

    node effSignB = xor(io.b.sign, io.subOp) @[AddRecFN.scala 60:30]
    node eqSigns = eq(io.a.sign, effSignB) @[AddRecFN.scala 61:29]
    node notEqSigns_signZero = eq(io.roundingMode, UInt<3>("h2")) @[AddRecFN.scala 62:47]
    node _sDiffExps_T = sub(io.a.sExp, io.b.sExp) @[AddRecFN.scala 63:31]
    node _sDiffExps_T_1 = tail(_sDiffExps_T, 1) @[AddRecFN.scala 63:31]
    node sDiffExps = asSInt(_sDiffExps_T_1) @[AddRecFN.scala 63:31]
    node _modNatAlignDist_T = lt(sDiffExps, asSInt(UInt<1>("h0"))) @[AddRecFN.scala 64:41]
    node _modNatAlignDist_T_1 = sub(io.b.sExp, io.a.sExp) @[AddRecFN.scala 64:58]
    node _modNatAlignDist_T_2 = tail(_modNatAlignDist_T_1, 1) @[AddRecFN.scala 64:58]
    node _modNatAlignDist_T_3 = asSInt(_modNatAlignDist_T_2) @[AddRecFN.scala 64:58]
    node _modNatAlignDist_T_4 = mux(_modNatAlignDist_T, _modNatAlignDist_T_3, sDiffExps) @[AddRecFN.scala 64:30]
    node modNatAlignDist = bits(_modNatAlignDist_T_4, 4, 0) @[AddRecFN.scala 64:81]
    node _isMaxAlign_T = shr(sDiffExps, 5) @[AddRecFN.scala 66:19]
    node _isMaxAlign_T_1 = neq(_isMaxAlign_T, asSInt(UInt<1>("h0"))) @[AddRecFN.scala 66:37]
    node _isMaxAlign_T_2 = shr(sDiffExps, 5) @[AddRecFN.scala 67:24]
    node _isMaxAlign_T_3 = neq(_isMaxAlign_T_2, asSInt(UInt<1>("h1"))) @[AddRecFN.scala 67:42]
    node _isMaxAlign_T_4 = bits(sDiffExps, 4, 0) @[AddRecFN.scala 67:63]
    node _isMaxAlign_T_5 = eq(_isMaxAlign_T_4, UInt<1>("h0")) @[AddRecFN.scala 67:87]
    node _isMaxAlign_T_6 = or(_isMaxAlign_T_3, _isMaxAlign_T_5) @[AddRecFN.scala 67:51]
    node isMaxAlign = and(_isMaxAlign_T_1, _isMaxAlign_T_6) @[AddRecFN.scala 66:45]
    node alignDist = mux(isMaxAlign, UInt<5>("h1f"), modNatAlignDist) @[AddRecFN.scala 68:24]
    node _closeSubMags_T = eq(eqSigns, UInt<1>("h0")) @[AddRecFN.scala 69:24]
    node _closeSubMags_T_1 = eq(isMaxAlign, UInt<1>("h0")) @[AddRecFN.scala 69:36]
    node _closeSubMags_T_2 = and(_closeSubMags_T, _closeSubMags_T_1) @[AddRecFN.scala 69:33]
    node _closeSubMags_T_3 = leq(modNatAlignDist, UInt<1>("h1")) @[AddRecFN.scala 69:68]
    node closeSubMags = and(_closeSubMags_T_2, _closeSubMags_T_3) @[AddRecFN.scala 69:48]
    node _close_alignedSigA_T = leq(asSInt(UInt<1>("h0")), sDiffExps) @[AddRecFN.scala 73:18]
    node _close_alignedSigA_T_1 = bits(sDiffExps, 0, 0) @[AddRecFN.scala 73:45]
    node _close_alignedSigA_T_2 = and(_close_alignedSigA_T, _close_alignedSigA_T_1) @[AddRecFN.scala 73:32]
    node _close_alignedSigA_T_3 = shl(io.a.sig, 2) @[AddRecFN.scala 73:58]
    node _close_alignedSigA_T_4 = mux(_close_alignedSigA_T_2, _close_alignedSigA_T_3, UInt<1>("h0")) @[AddRecFN.scala 73:12]
    node _close_alignedSigA_T_5 = leq(asSInt(UInt<1>("h0")), sDiffExps) @[AddRecFN.scala 74:18]
    node _close_alignedSigA_T_6 = bits(sDiffExps, 0, 0) @[AddRecFN.scala 74:45]
    node _close_alignedSigA_T_7 = eq(_close_alignedSigA_T_6, UInt<1>("h0")) @[AddRecFN.scala 74:35]
    node _close_alignedSigA_T_8 = and(_close_alignedSigA_T_5, _close_alignedSigA_T_7) @[AddRecFN.scala 74:32]
    node _close_alignedSigA_T_9 = shl(io.a.sig, 1) @[AddRecFN.scala 74:58]
    node _close_alignedSigA_T_10 = mux(_close_alignedSigA_T_8, _close_alignedSigA_T_9, UInt<1>("h0")) @[AddRecFN.scala 74:12]
    node _close_alignedSigA_T_11 = or(_close_alignedSigA_T_4, _close_alignedSigA_T_10) @[AddRecFN.scala 73:68]
    node _close_alignedSigA_T_12 = lt(sDiffExps, asSInt(UInt<1>("h0"))) @[AddRecFN.scala 75:24]
    node _close_alignedSigA_T_13 = mux(_close_alignedSigA_T_12, io.a.sig, UInt<1>("h0")) @[AddRecFN.scala 75:12]
    node close_alignedSigA = or(_close_alignedSigA_T_11, _close_alignedSigA_T_13) @[AddRecFN.scala 74:68]
    node _close_sSigSum_T = asSInt(close_alignedSigA) @[AddRecFN.scala 76:43]
    node _close_sSigSum_T_1 = shl(io.b.sig, 1) @[AddRecFN.scala 76:61]
    node _close_sSigSum_T_2 = asSInt(_close_sSigSum_T_1) @[AddRecFN.scala 76:66]
    node _close_sSigSum_T_3 = sub(_close_sSigSum_T, _close_sSigSum_T_2) @[AddRecFN.scala 76:50]
    node _close_sSigSum_T_4 = tail(_close_sSigSum_T_3, 1) @[AddRecFN.scala 76:50]
    node close_sSigSum = asSInt(_close_sSigSum_T_4) @[AddRecFN.scala 76:50]
    node _close_sigSum_T = lt(close_sSigSum, asSInt(UInt<1>("h0"))) @[AddRecFN.scala 77:42]
    node _close_sigSum_T_1 = sub(asSInt(UInt<1>("h0")), close_sSigSum) @[AddRecFN.scala 77:49]
    node _close_sigSum_T_2 = tail(_close_sigSum_T_1, 1) @[AddRecFN.scala 77:49]
    node _close_sigSum_T_3 = asSInt(_close_sigSum_T_2) @[AddRecFN.scala 77:49]
    node _close_sigSum_T_4 = mux(_close_sigSum_T, _close_sigSum_T_3, close_sSigSum) @[AddRecFN.scala 77:27]
    node close_sigSum = bits(_close_sigSum_T_4, 25, 0) @[AddRecFN.scala 77:79]
    node close_adjustedSigSum = shl(close_sigSum, 0) @[AddRecFN.scala 78:44]
    wire close_reduced2SigSum_reducedVec : UInt<1>[13] @[primitives.scala 101:30]
    node _close_reduced2SigSum_reducedVec_0_T = bits(close_adjustedSigSum, 1, 0) @[primitives.scala 103:33]
    node _close_reduced2SigSum_reducedVec_0_T_1 = orr(_close_reduced2SigSum_reducedVec_0_T) @[primitives.scala 103:54]
    close_reduced2SigSum_reducedVec[0] <= _close_reduced2SigSum_reducedVec_0_T_1 @[primitives.scala 103:28]
    node _close_reduced2SigSum_reducedVec_1_T = bits(close_adjustedSigSum, 3, 2) @[primitives.scala 103:33]
    node _close_reduced2SigSum_reducedVec_1_T_1 = orr(_close_reduced2SigSum_reducedVec_1_T) @[primitives.scala 103:54]
    close_reduced2SigSum_reducedVec[1] <= _close_reduced2SigSum_reducedVec_1_T_1 @[primitives.scala 103:28]
    node _close_reduced2SigSum_reducedVec_2_T = bits(close_adjustedSigSum, 5, 4) @[primitives.scala 103:33]
    node _close_reduced2SigSum_reducedVec_2_T_1 = orr(_close_reduced2SigSum_reducedVec_2_T) @[primitives.scala 103:54]
    close_reduced2SigSum_reducedVec[2] <= _close_reduced2SigSum_reducedVec_2_T_1 @[primitives.scala 103:28]
    node _close_reduced2SigSum_reducedVec_3_T = bits(close_adjustedSigSum, 7, 6) @[primitives.scala 103:33]
    node _close_reduced2SigSum_reducedVec_3_T_1 = orr(_close_reduced2SigSum_reducedVec_3_T) @[primitives.scala 103:54]
    close_reduced2SigSum_reducedVec[3] <= _close_reduced2SigSum_reducedVec_3_T_1 @[primitives.scala 103:28]
    node _close_reduced2SigSum_reducedVec_4_T = bits(close_adjustedSigSum, 9, 8) @[primitives.scala 103:33]
    node _close_reduced2SigSum_reducedVec_4_T_1 = orr(_close_reduced2SigSum_reducedVec_4_T) @[primitives.scala 103:54]
    close_reduced2SigSum_reducedVec[4] <= _close_reduced2SigSum_reducedVec_4_T_1 @[primitives.scala 103:28]
    node _close_reduced2SigSum_reducedVec_5_T = bits(close_adjustedSigSum, 11, 10) @[primitives.scala 103:33]
    node _close_reduced2SigSum_reducedVec_5_T_1 = orr(_close_reduced2SigSum_reducedVec_5_T) @[primitives.scala 103:54]
    close_reduced2SigSum_reducedVec[5] <= _close_reduced2SigSum_reducedVec_5_T_1 @[primitives.scala 103:28]
    node _close_reduced2SigSum_reducedVec_6_T = bits(close_adjustedSigSum, 13, 12) @[primitives.scala 103:33]
    node _close_reduced2SigSum_reducedVec_6_T_1 = orr(_close_reduced2SigSum_reducedVec_6_T) @[primitives.scala 103:54]
    close_reduced2SigSum_reducedVec[6] <= _close_reduced2SigSum_reducedVec_6_T_1 @[primitives.scala 103:28]
    node _close_reduced2SigSum_reducedVec_7_T = bits(close_adjustedSigSum, 15, 14) @[primitives.scala 103:33]
    node _close_reduced2SigSum_reducedVec_7_T_1 = orr(_close_reduced2SigSum_reducedVec_7_T) @[primitives.scala 103:54]
    close_reduced2SigSum_reducedVec[7] <= _close_reduced2SigSum_reducedVec_7_T_1 @[primitives.scala 103:28]
    node _close_reduced2SigSum_reducedVec_8_T = bits(close_adjustedSigSum, 17, 16) @[primitives.scala 103:33]
    node _close_reduced2SigSum_reducedVec_8_T_1 = orr(_close_reduced2SigSum_reducedVec_8_T) @[primitives.scala 103:54]
    close_reduced2SigSum_reducedVec[8] <= _close_reduced2SigSum_reducedVec_8_T_1 @[primitives.scala 103:28]
    node _close_reduced2SigSum_reducedVec_9_T = bits(close_adjustedSigSum, 19, 18) @[primitives.scala 103:33]
    node _close_reduced2SigSum_reducedVec_9_T_1 = orr(_close_reduced2SigSum_reducedVec_9_T) @[primitives.scala 103:54]
    close_reduced2SigSum_reducedVec[9] <= _close_reduced2SigSum_reducedVec_9_T_1 @[primitives.scala 103:28]
    node _close_reduced2SigSum_reducedVec_10_T = bits(close_adjustedSigSum, 21, 20) @[primitives.scala 103:33]
    node _close_reduced2SigSum_reducedVec_10_T_1 = orr(_close_reduced2SigSum_reducedVec_10_T) @[primitives.scala 103:54]
    close_reduced2SigSum_reducedVec[10] <= _close_reduced2SigSum_reducedVec_10_T_1 @[primitives.scala 103:28]
    node _close_reduced2SigSum_reducedVec_11_T = bits(close_adjustedSigSum, 23, 22) @[primitives.scala 103:33]
    node _close_reduced2SigSum_reducedVec_11_T_1 = orr(_close_reduced2SigSum_reducedVec_11_T) @[primitives.scala 103:54]
    close_reduced2SigSum_reducedVec[11] <= _close_reduced2SigSum_reducedVec_11_T_1 @[primitives.scala 103:28]
    node _close_reduced2SigSum_reducedVec_12_T = bits(close_adjustedSigSum, 25, 24) @[primitives.scala 106:15]
    node _close_reduced2SigSum_reducedVec_12_T_1 = orr(_close_reduced2SigSum_reducedVec_12_T) @[primitives.scala 106:57]
    close_reduced2SigSum_reducedVec[12] <= _close_reduced2SigSum_reducedVec_12_T_1 @[primitives.scala 105:38]
    node close_reduced2SigSum_lo_lo_hi = cat(close_reduced2SigSum_reducedVec[2], close_reduced2SigSum_reducedVec[1]) @[primitives.scala 107:20]
    node close_reduced2SigSum_lo_lo = cat(close_reduced2SigSum_lo_lo_hi, close_reduced2SigSum_reducedVec[0]) @[primitives.scala 107:20]
    node close_reduced2SigSum_lo_hi_hi = cat(close_reduced2SigSum_reducedVec[5], close_reduced2SigSum_reducedVec[4]) @[primitives.scala 107:20]
    node close_reduced2SigSum_lo_hi = cat(close_reduced2SigSum_lo_hi_hi, close_reduced2SigSum_reducedVec[3]) @[primitives.scala 107:20]
    node close_reduced2SigSum_lo = cat(close_reduced2SigSum_lo_hi, close_reduced2SigSum_lo_lo) @[primitives.scala 107:20]
    node close_reduced2SigSum_hi_lo_hi = cat(close_reduced2SigSum_reducedVec[8], close_reduced2SigSum_reducedVec[7]) @[primitives.scala 107:20]
    node close_reduced2SigSum_hi_lo = cat(close_reduced2SigSum_hi_lo_hi, close_reduced2SigSum_reducedVec[6]) @[primitives.scala 107:20]
    node close_reduced2SigSum_hi_hi_lo = cat(close_reduced2SigSum_reducedVec[10], close_reduced2SigSum_reducedVec[9]) @[primitives.scala 107:20]
    node close_reduced2SigSum_hi_hi_hi = cat(close_reduced2SigSum_reducedVec[12], close_reduced2SigSum_reducedVec[11]) @[primitives.scala 107:20]
    node close_reduced2SigSum_hi_hi = cat(close_reduced2SigSum_hi_hi_hi, close_reduced2SigSum_hi_hi_lo) @[primitives.scala 107:20]
    node close_reduced2SigSum_hi = cat(close_reduced2SigSum_hi_hi, close_reduced2SigSum_hi_lo) @[primitives.scala 107:20]
    node close_reduced2SigSum = cat(close_reduced2SigSum_hi, close_reduced2SigSum_lo) @[primitives.scala 107:20]
    node _close_normDistReduced2_T = bits(close_reduced2SigSum, 0, 0) @[primitives.scala 91:52]
    node _close_normDistReduced2_T_1 = bits(close_reduced2SigSum, 1, 1) @[primitives.scala 91:52]
    node _close_normDistReduced2_T_2 = bits(close_reduced2SigSum, 2, 2) @[primitives.scala 91:52]
    node _close_normDistReduced2_T_3 = bits(close_reduced2SigSum, 3, 3) @[primitives.scala 91:52]
    node _close_normDistReduced2_T_4 = bits(close_reduced2SigSum, 4, 4) @[primitives.scala 91:52]
    node _close_normDistReduced2_T_5 = bits(close_reduced2SigSum, 5, 5) @[primitives.scala 91:52]
    node _close_normDistReduced2_T_6 = bits(close_reduced2SigSum, 6, 6) @[primitives.scala 91:52]
    node _close_normDistReduced2_T_7 = bits(close_reduced2SigSum, 7, 7) @[primitives.scala 91:52]
    node _close_normDistReduced2_T_8 = bits(close_reduced2SigSum, 8, 8) @[primitives.scala 91:52]
    node _close_normDistReduced2_T_9 = bits(close_reduced2SigSum, 9, 9) @[primitives.scala 91:52]
    node _close_normDistReduced2_T_10 = bits(close_reduced2SigSum, 10, 10) @[primitives.scala 91:52]
    node _close_normDistReduced2_T_11 = bits(close_reduced2SigSum, 11, 11) @[primitives.scala 91:52]
    node _close_normDistReduced2_T_12 = bits(close_reduced2SigSum, 12, 12) @[primitives.scala 91:52]
    node _close_normDistReduced2_T_13 = mux(_close_normDistReduced2_T_1, UInt<4>("hb"), UInt<4>("hc")) @[Mux.scala 47:70]
    node _close_normDistReduced2_T_14 = mux(_close_normDistReduced2_T_2, UInt<4>("ha"), _close_normDistReduced2_T_13) @[Mux.scala 47:70]
    node _close_normDistReduced2_T_15 = mux(_close_normDistReduced2_T_3, UInt<4>("h9"), _close_normDistReduced2_T_14) @[Mux.scala 47:70]
    node _close_normDistReduced2_T_16 = mux(_close_normDistReduced2_T_4, UInt<4>("h8"), _close_normDistReduced2_T_15) @[Mux.scala 47:70]
    node _close_normDistReduced2_T_17 = mux(_close_normDistReduced2_T_5, UInt<3>("h7"), _close_normDistReduced2_T_16) @[Mux.scala 47:70]
    node _close_normDistReduced2_T_18 = mux(_close_normDistReduced2_T_6, UInt<3>("h6"), _close_normDistReduced2_T_17) @[Mux.scala 47:70]
    node _close_normDistReduced2_T_19 = mux(_close_normDistReduced2_T_7, UInt<3>("h5"), _close_normDistReduced2_T_18) @[Mux.scala 47:70]
    node _close_normDistReduced2_T_20 = mux(_close_normDistReduced2_T_8, UInt<3>("h4"), _close_normDistReduced2_T_19) @[Mux.scala 47:70]
    node _close_normDistReduced2_T_21 = mux(_close_normDistReduced2_T_9, UInt<2>("h3"), _close_normDistReduced2_T_20) @[Mux.scala 47:70]
    node _close_normDistReduced2_T_22 = mux(_close_normDistReduced2_T_10, UInt<2>("h2"), _close_normDistReduced2_T_21) @[Mux.scala 47:70]
    node _close_normDistReduced2_T_23 = mux(_close_normDistReduced2_T_11, UInt<1>("h1"), _close_normDistReduced2_T_22) @[Mux.scala 47:70]
    node close_normDistReduced2 = mux(_close_normDistReduced2_T_12, UInt<1>("h0"), _close_normDistReduced2_T_23) @[Mux.scala 47:70]
    node _close_nearNormDist_T = shl(close_normDistReduced2, 1) @[AddRecFN.scala 81:53]
    node close_nearNormDist = bits(_close_nearNormDist_T, 4, 0) @[AddRecFN.scala 81:57]
    node _close_sigOut_T = dshl(close_sigSum, close_nearNormDist) @[AddRecFN.scala 82:38]
    node _close_sigOut_T_1 = shl(_close_sigOut_T, 1) @[AddRecFN.scala 82:59]
    node close_sigOut = bits(_close_sigOut_T_1, 26, 0) @[AddRecFN.scala 82:63]
    node _close_totalCancellation_T = bits(close_sigOut, 26, 25) @[AddRecFN.scala 83:49]
    node _close_totalCancellation_T_1 = orr(_close_totalCancellation_T) @[AddRecFN.scala 83:82]
    node close_totalCancellation = eq(_close_totalCancellation_T_1, UInt<1>("h0")) @[AddRecFN.scala 83:35]
    node _close_notTotalCancellation_signOut_T = lt(close_sSigSum, asSInt(UInt<1>("h0"))) @[AddRecFN.scala 84:73]
    node close_notTotalCancellation_signOut = xor(io.a.sign, _close_notTotalCancellation_signOut_T) @[AddRecFN.scala 84:56]
    node _far_signOut_T = lt(sDiffExps, asSInt(UInt<1>("h0"))) @[AddRecFN.scala 87:37]
    node far_signOut = mux(_far_signOut_T, effSignB, io.a.sign) @[AddRecFN.scala 87:26]
    node _far_sigLarger_T = lt(sDiffExps, asSInt(UInt<1>("h0"))) @[AddRecFN.scala 88:40]
    node _far_sigLarger_T_1 = mux(_far_sigLarger_T, io.b.sig, io.a.sig) @[AddRecFN.scala 88:29]
    node far_sigLarger = bits(_far_sigLarger_T_1, 23, 0) @[AddRecFN.scala 88:66]
    node _far_sigSmaller_T = lt(sDiffExps, asSInt(UInt<1>("h0"))) @[AddRecFN.scala 89:40]
    node _far_sigSmaller_T_1 = mux(_far_sigSmaller_T, io.a.sig, io.b.sig) @[AddRecFN.scala 89:29]
    node far_sigSmaller = bits(_far_sigSmaller_T_1, 23, 0) @[AddRecFN.scala 89:66]
    node _far_mainAlignedSigSmaller_T = shl(far_sigSmaller, 5) @[AddRecFN.scala 90:52]
    node far_mainAlignedSigSmaller = dshr(_far_mainAlignedSigSmaller_T, alignDist) @[AddRecFN.scala 90:56]
    node _far_reduced4SigSmaller_T = shl(far_sigSmaller, 2) @[AddRecFN.scala 91:60]
    wire far_reduced4SigSmaller_reducedVec : UInt<1>[7] @[primitives.scala 118:30]
    node _far_reduced4SigSmaller_reducedVec_0_T = bits(_far_reduced4SigSmaller_T, 3, 0) @[primitives.scala 120:33]
    node _far_reduced4SigSmaller_reducedVec_0_T_1 = orr(_far_reduced4SigSmaller_reducedVec_0_T) @[primitives.scala 120:54]
    far_reduced4SigSmaller_reducedVec[0] <= _far_reduced4SigSmaller_reducedVec_0_T_1 @[primitives.scala 120:28]
    node _far_reduced4SigSmaller_reducedVec_1_T = bits(_far_reduced4SigSmaller_T, 7, 4) @[primitives.scala 120:33]
    node _far_reduced4SigSmaller_reducedVec_1_T_1 = orr(_far_reduced4SigSmaller_reducedVec_1_T) @[primitives.scala 120:54]
    far_reduced4SigSmaller_reducedVec[1] <= _far_reduced4SigSmaller_reducedVec_1_T_1 @[primitives.scala 120:28]
    node _far_reduced4SigSmaller_reducedVec_2_T = bits(_far_reduced4SigSmaller_T, 11, 8) @[primitives.scala 120:33]
    node _far_reduced4SigSmaller_reducedVec_2_T_1 = orr(_far_reduced4SigSmaller_reducedVec_2_T) @[primitives.scala 120:54]
    far_reduced4SigSmaller_reducedVec[2] <= _far_reduced4SigSmaller_reducedVec_2_T_1 @[primitives.scala 120:28]
    node _far_reduced4SigSmaller_reducedVec_3_T = bits(_far_reduced4SigSmaller_T, 15, 12) @[primitives.scala 120:33]
    node _far_reduced4SigSmaller_reducedVec_3_T_1 = orr(_far_reduced4SigSmaller_reducedVec_3_T) @[primitives.scala 120:54]
    far_reduced4SigSmaller_reducedVec[3] <= _far_reduced4SigSmaller_reducedVec_3_T_1 @[primitives.scala 120:28]
    node _far_reduced4SigSmaller_reducedVec_4_T = bits(_far_reduced4SigSmaller_T, 19, 16) @[primitives.scala 120:33]
    node _far_reduced4SigSmaller_reducedVec_4_T_1 = orr(_far_reduced4SigSmaller_reducedVec_4_T) @[primitives.scala 120:54]
    far_reduced4SigSmaller_reducedVec[4] <= _far_reduced4SigSmaller_reducedVec_4_T_1 @[primitives.scala 120:28]
    node _far_reduced4SigSmaller_reducedVec_5_T = bits(_far_reduced4SigSmaller_T, 23, 20) @[primitives.scala 120:33]
    node _far_reduced4SigSmaller_reducedVec_5_T_1 = orr(_far_reduced4SigSmaller_reducedVec_5_T) @[primitives.scala 120:54]
    far_reduced4SigSmaller_reducedVec[5] <= _far_reduced4SigSmaller_reducedVec_5_T_1 @[primitives.scala 120:28]
    node _far_reduced4SigSmaller_reducedVec_6_T = bits(_far_reduced4SigSmaller_T, 25, 24) @[primitives.scala 123:15]
    node _far_reduced4SigSmaller_reducedVec_6_T_1 = orr(_far_reduced4SigSmaller_reducedVec_6_T) @[primitives.scala 123:57]
    far_reduced4SigSmaller_reducedVec[6] <= _far_reduced4SigSmaller_reducedVec_6_T_1 @[primitives.scala 122:38]
    node far_reduced4SigSmaller_lo_hi = cat(far_reduced4SigSmaller_reducedVec[2], far_reduced4SigSmaller_reducedVec[1]) @[primitives.scala 124:20]
    node far_reduced4SigSmaller_lo = cat(far_reduced4SigSmaller_lo_hi, far_reduced4SigSmaller_reducedVec[0]) @[primitives.scala 124:20]
    node far_reduced4SigSmaller_hi_lo = cat(far_reduced4SigSmaller_reducedVec[4], far_reduced4SigSmaller_reducedVec[3]) @[primitives.scala 124:20]
    node far_reduced4SigSmaller_hi_hi = cat(far_reduced4SigSmaller_reducedVec[6], far_reduced4SigSmaller_reducedVec[5]) @[primitives.scala 124:20]
    node far_reduced4SigSmaller_hi = cat(far_reduced4SigSmaller_hi_hi, far_reduced4SigSmaller_hi_lo) @[primitives.scala 124:20]
    node far_reduced4SigSmaller = cat(far_reduced4SigSmaller_hi, far_reduced4SigSmaller_lo) @[primitives.scala 124:20]
    node _far_roundExtraMask_T = bits(alignDist, 4, 2) @[AddRecFN.scala 92:47]
    node far_roundExtraMask_shift = dshr(asSInt(UInt<9>("h100")), _far_roundExtraMask_T) @[primitives.scala 76:56]
    node _far_roundExtraMask_T_1 = bits(far_roundExtraMask_shift, 7, 1) @[primitives.scala 78:22]
    node _far_roundExtraMask_T_2 = bits(_far_roundExtraMask_T_1, 3, 0) @[Bitwise.scala 114:18]
    node _far_roundExtraMask_T_3 = bits(_far_roundExtraMask_T_2, 1, 0) @[Bitwise.scala 114:18]
    node _far_roundExtraMask_T_4 = bits(_far_roundExtraMask_T_3, 0, 0) @[Bitwise.scala 114:18]
    node _far_roundExtraMask_T_5 = bits(_far_roundExtraMask_T_3, 1, 1) @[Bitwise.scala 114:47]
    node _far_roundExtraMask_T_6 = cat(_far_roundExtraMask_T_4, _far_roundExtraMask_T_5) @[Cat.scala 33:92]
    node _far_roundExtraMask_T_7 = bits(_far_roundExtraMask_T_2, 3, 2) @[Bitwise.scala 114:47]
    node _far_roundExtraMask_T_8 = bits(_far_roundExtraMask_T_7, 0, 0) @[Bitwise.scala 114:18]
    node _far_roundExtraMask_T_9 = bits(_far_roundExtraMask_T_7, 1, 1) @[Bitwise.scala 114:47]
    node _far_roundExtraMask_T_10 = cat(_far_roundExtraMask_T_8, _far_roundExtraMask_T_9) @[Cat.scala 33:92]
    node _far_roundExtraMask_T_11 = cat(_far_roundExtraMask_T_6, _far_roundExtraMask_T_10) @[Cat.scala 33:92]
    node _far_roundExtraMask_T_12 = bits(_far_roundExtraMask_T_1, 6, 4) @[Bitwise.scala 114:47]
    node _far_roundExtraMask_T_13 = bits(_far_roundExtraMask_T_12, 1, 0) @[Bitwise.scala 114:18]
    node _far_roundExtraMask_T_14 = bits(_far_roundExtraMask_T_13, 0, 0) @[Bitwise.scala 114:18]
    node _far_roundExtraMask_T_15 = bits(_far_roundExtraMask_T_13, 1, 1) @[Bitwise.scala 114:47]
    node _far_roundExtraMask_T_16 = cat(_far_roundExtraMask_T_14, _far_roundExtraMask_T_15) @[Cat.scala 33:92]
    node _far_roundExtraMask_T_17 = bits(_far_roundExtraMask_T_12, 2, 2) @[Bitwise.scala 114:47]
    node _far_roundExtraMask_T_18 = cat(_far_roundExtraMask_T_16, _far_roundExtraMask_T_17) @[Cat.scala 33:92]
    node far_roundExtraMask = cat(_far_roundExtraMask_T_11, _far_roundExtraMask_T_18) @[Cat.scala 33:92]
    node _far_alignedSigSmaller_T = shr(far_mainAlignedSigSmaller, 3) @[AddRecFN.scala 94:38]
    node _far_alignedSigSmaller_T_1 = bits(far_mainAlignedSigSmaller, 2, 0) @[AddRecFN.scala 95:38]
    node _far_alignedSigSmaller_T_2 = orr(_far_alignedSigSmaller_T_1) @[AddRecFN.scala 95:45]
    node _far_alignedSigSmaller_T_3 = and(far_reduced4SigSmaller, far_roundExtraMask) @[AddRecFN.scala 95:76]
    node _far_alignedSigSmaller_T_4 = orr(_far_alignedSigSmaller_T_3) @[AddRecFN.scala 95:98]
    node _far_alignedSigSmaller_T_5 = or(_far_alignedSigSmaller_T_2, _far_alignedSigSmaller_T_4) @[AddRecFN.scala 95:49]
    node far_alignedSigSmaller = cat(_far_alignedSigSmaller_T, _far_alignedSigSmaller_T_5) @[Cat.scala 33:92]
    node far_subMags = eq(eqSigns, UInt<1>("h0")) @[AddRecFN.scala 96:23]
    node _far_negAlignedSigSmaller_T = not(far_alignedSigSmaller) @[AddRecFN.scala 97:62]
    node _far_negAlignedSigSmaller_T_1 = cat(UInt<1>("h1"), _far_negAlignedSigSmaller_T) @[Cat.scala 33:92]
    node far_negAlignedSigSmaller = mux(far_subMags, _far_negAlignedSigSmaller_T_1, far_alignedSigSmaller) @[AddRecFN.scala 97:39]
    node _far_sigSum_T = shl(far_sigLarger, 3) @[AddRecFN.scala 98:36]
    node _far_sigSum_T_1 = add(_far_sigSum_T, far_negAlignedSigSmaller) @[AddRecFN.scala 98:41]
    node _far_sigSum_T_2 = tail(_far_sigSum_T_1, 1) @[AddRecFN.scala 98:41]
    node _far_sigSum_T_3 = add(_far_sigSum_T_2, far_subMags) @[AddRecFN.scala 98:68]
    node far_sigSum = tail(_far_sigSum_T_3, 1) @[AddRecFN.scala 98:68]
    node _far_sigOut_T = shr(far_sigSum, 1) @[AddRecFN.scala 99:62]
    node _far_sigOut_T_1 = bits(far_sigSum, 0, 0) @[AddRecFN.scala 99:79]
    node _far_sigOut_T_2 = or(_far_sigOut_T, _far_sigOut_T_1) @[AddRecFN.scala 99:67]
    node _far_sigOut_T_3 = mux(far_subMags, far_sigSum, _far_sigOut_T_2) @[AddRecFN.scala 99:25]
    node far_sigOut = bits(_far_sigOut_T_3, 26, 0) @[AddRecFN.scala 99:83]
    node _notSigNaN_invalidExc_T = and(io.a.isInf, io.b.isInf) @[AddRecFN.scala 102:43]
    node _notSigNaN_invalidExc_T_1 = eq(eqSigns, UInt<1>("h0")) @[AddRecFN.scala 102:60]
    node notSigNaN_invalidExc = and(_notSigNaN_invalidExc_T, _notSigNaN_invalidExc_T_1) @[AddRecFN.scala 102:57]
    node notNaN_isInfOut = or(io.a.isInf, io.b.isInf) @[AddRecFN.scala 103:38]
    node addZeros = and(io.a.isZero, io.b.isZero) @[AddRecFN.scala 104:32]
    node notNaN_specialCase = or(notNaN_isInfOut, addZeros) @[AddRecFN.scala 105:46]
    node _notNaN_isZeroOut_T = eq(notNaN_isInfOut, UInt<1>("h0")) @[AddRecFN.scala 106:41]
    node _notNaN_isZeroOut_T_1 = and(_notNaN_isZeroOut_T, closeSubMags) @[AddRecFN.scala 106:58]
    node _notNaN_isZeroOut_T_2 = and(_notNaN_isZeroOut_T_1, close_totalCancellation) @[AddRecFN.scala 106:74]
    node notNaN_isZeroOut = or(addZeros, _notNaN_isZeroOut_T_2) @[AddRecFN.scala 106:37]
    node _notNaN_signOut_T = and(eqSigns, io.a.sign) @[AddRecFN.scala 108:39]
    node _notNaN_signOut_T_1 = and(io.a.isInf, io.a.sign) @[AddRecFN.scala 109:39]
    node _notNaN_signOut_T_2 = or(_notNaN_signOut_T, _notNaN_signOut_T_1) @[AddRecFN.scala 108:63]
    node _notNaN_signOut_T_3 = and(io.b.isInf, effSignB) @[AddRecFN.scala 110:39]
    node _notNaN_signOut_T_4 = or(_notNaN_signOut_T_2, _notNaN_signOut_T_3) @[AddRecFN.scala 109:63]
    node _notNaN_signOut_T_5 = eq(eqSigns, UInt<1>("h0")) @[AddRecFN.scala 111:30]
    node _notNaN_signOut_T_6 = and(notNaN_isZeroOut, _notNaN_signOut_T_5) @[AddRecFN.scala 111:27]
    node _notNaN_signOut_T_7 = and(_notNaN_signOut_T_6, notEqSigns_signZero) @[AddRecFN.scala 111:39]
    node _notNaN_signOut_T_8 = or(_notNaN_signOut_T_4, _notNaN_signOut_T_7) @[AddRecFN.scala 110:63]
    node _notNaN_signOut_T_9 = eq(notNaN_specialCase, UInt<1>("h0")) @[AddRecFN.scala 112:10]
    node _notNaN_signOut_T_10 = and(_notNaN_signOut_T_9, closeSubMags) @[AddRecFN.scala 112:30]
    node _notNaN_signOut_T_11 = eq(close_totalCancellation, UInt<1>("h0")) @[AddRecFN.scala 112:49]
    node _notNaN_signOut_T_12 = and(_notNaN_signOut_T_10, _notNaN_signOut_T_11) @[AddRecFN.scala 112:46]
    node _notNaN_signOut_T_13 = and(_notNaN_signOut_T_12, close_notTotalCancellation_signOut) @[AddRecFN.scala 113:38]
    node _notNaN_signOut_T_14 = or(_notNaN_signOut_T_8, _notNaN_signOut_T_13) @[AddRecFN.scala 111:63]
    node _notNaN_signOut_T_15 = eq(notNaN_specialCase, UInt<1>("h0")) @[AddRecFN.scala 114:10]
    node _notNaN_signOut_T_16 = eq(closeSubMags, UInt<1>("h0")) @[AddRecFN.scala 114:33]
    node _notNaN_signOut_T_17 = and(_notNaN_signOut_T_15, _notNaN_signOut_T_16) @[AddRecFN.scala 114:30]
    node _notNaN_signOut_T_18 = and(_notNaN_signOut_T_17, far_signOut) @[AddRecFN.scala 114:47]
    node notNaN_signOut = or(_notNaN_signOut_T_14, _notNaN_signOut_T_18) @[AddRecFN.scala 113:77]
    node _common_sExpOut_T = lt(sDiffExps, asSInt(UInt<1>("h0"))) @[AddRecFN.scala 116:41]
    node _common_sExpOut_T_1 = or(closeSubMags, _common_sExpOut_T) @[AddRecFN.scala 116:27]
    node _common_sExpOut_T_2 = mux(_common_sExpOut_T_1, io.b.sExp, io.a.sExp) @[AddRecFN.scala 116:13]
    node _common_sExpOut_T_3 = mux(closeSubMags, close_nearNormDist, far_subMags) @[AddRecFN.scala 117:18]
    node _common_sExpOut_T_4 = cvt(_common_sExpOut_T_3) @[AddRecFN.scala 117:66]
    node _common_sExpOut_T_5 = sub(_common_sExpOut_T_2, _common_sExpOut_T_4) @[AddRecFN.scala 117:13]
    node _common_sExpOut_T_6 = tail(_common_sExpOut_T_5, 1) @[AddRecFN.scala 117:13]
    node common_sExpOut = asSInt(_common_sExpOut_T_6) @[AddRecFN.scala 117:13]
    node common_sigOut = mux(closeSubMags, close_sigOut, far_sigOut) @[AddRecFN.scala 118:28]
    node _io_invalidExc_T = bits(io.a.sig, 22, 22) @[common.scala 82:56]
    node _io_invalidExc_T_1 = eq(_io_invalidExc_T, UInt<1>("h0")) @[common.scala 82:49]
    node _io_invalidExc_T_2 = and(io.a.isNaN, _io_invalidExc_T_1) @[common.scala 82:46]
    node _io_invalidExc_T_3 = bits(io.b.sig, 22, 22) @[common.scala 82:56]
    node _io_invalidExc_T_4 = eq(_io_invalidExc_T_3, UInt<1>("h0")) @[common.scala 82:49]
    node _io_invalidExc_T_5 = and(io.b.isNaN, _io_invalidExc_T_4) @[common.scala 82:46]
    node _io_invalidExc_T_6 = or(_io_invalidExc_T_2, _io_invalidExc_T_5) @[AddRecFN.scala 121:45]
    node _io_invalidExc_T_7 = or(_io_invalidExc_T_6, notSigNaN_invalidExc) @[AddRecFN.scala 121:71]
    io.invalidExc <= _io_invalidExc_T_7 @[AddRecFN.scala 121:19]
    io.rawOut.isInf <= notNaN_isInfOut @[AddRecFN.scala 122:21]
    io.rawOut.isZero <= notNaN_isZeroOut @[AddRecFN.scala 123:22]
    io.rawOut.sExp <= common_sExpOut @[AddRecFN.scala 124:20]
    node _io_rawOut_isNaN_T = or(io.a.isNaN, io.b.isNaN) @[AddRecFN.scala 125:35]
    io.rawOut.isNaN <= _io_rawOut_isNaN_T @[AddRecFN.scala 125:21]
    io.rawOut.sign <= notNaN_signOut @[AddRecFN.scala 126:20]
    io.rawOut.sig <= common_sigOut @[AddRecFN.scala 127:19]

  module RoundAnyRawFNToRecFN_ie8_is26_oe8_os24_9 :
    output io : { flip invalidExc : UInt<1>, flip infiniteExc : UInt<1>, flip in : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<27>}, flip roundingMode : UInt<3>, flip detectTininess : UInt<1>, out : UInt<33>, exceptionFlags : UInt<5>}

    node roundingMode_near_even = eq(io.roundingMode, UInt<3>("h0")) @[RoundAnyRawFNToRecFN.scala 90:53]
    node roundingMode_minMag = eq(io.roundingMode, UInt<3>("h1")) @[RoundAnyRawFNToRecFN.scala 91:53]
    node roundingMode_min = eq(io.roundingMode, UInt<3>("h2")) @[RoundAnyRawFNToRecFN.scala 92:53]
    node roundingMode_max = eq(io.roundingMode, UInt<3>("h3")) @[RoundAnyRawFNToRecFN.scala 93:53]
    node roundingMode_near_maxMag = eq(io.roundingMode, UInt<3>("h4")) @[RoundAnyRawFNToRecFN.scala 94:53]
    node roundingMode_odd = eq(io.roundingMode, UInt<3>("h6")) @[RoundAnyRawFNToRecFN.scala 95:53]
    node _roundMagUp_T = and(roundingMode_min, io.in.sign) @[RoundAnyRawFNToRecFN.scala 98:27]
    node _roundMagUp_T_1 = eq(io.in.sign, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 98:66]
    node _roundMagUp_T_2 = and(roundingMode_max, _roundMagUp_T_1) @[RoundAnyRawFNToRecFN.scala 98:63]
    node roundMagUp = or(_roundMagUp_T, _roundMagUp_T_2) @[RoundAnyRawFNToRecFN.scala 98:42]
    node adjustedSig = shl(io.in.sig, 0) @[RoundAnyRawFNToRecFN.scala 114:22]
    node doShiftSigDown1 = bits(adjustedSig, 26, 26) @[RoundAnyRawFNToRecFN.scala 120:57]
    wire common_expOut : UInt<9> @[RoundAnyRawFNToRecFN.scala 122:31]
    wire common_fractOut : UInt<23> @[RoundAnyRawFNToRecFN.scala 123:31]
    wire common_overflow : UInt<1> @[RoundAnyRawFNToRecFN.scala 124:37]
    wire common_totalUnderflow : UInt<1> @[RoundAnyRawFNToRecFN.scala 125:37]
    wire common_underflow : UInt<1> @[RoundAnyRawFNToRecFN.scala 126:37]
    wire common_inexact : UInt<1> @[RoundAnyRawFNToRecFN.scala 127:37]
    node _roundMask_T = bits(io.in.sExp, 8, 0) @[RoundAnyRawFNToRecFN.scala 156:37]
    node _roundMask_T_1 = not(_roundMask_T) @[primitives.scala 52:21]
    node roundMask_msb = bits(_roundMask_T_1, 8, 8) @[primitives.scala 58:25]
    node roundMask_lsbs = bits(_roundMask_T_1, 7, 0) @[primitives.scala 59:26]
    node roundMask_msb_1 = bits(roundMask_lsbs, 7, 7) @[primitives.scala 58:25]
    node roundMask_lsbs_1 = bits(roundMask_lsbs, 6, 0) @[primitives.scala 59:26]
    node roundMask_msb_2 = bits(roundMask_lsbs_1, 6, 6) @[primitives.scala 58:25]
    node roundMask_lsbs_2 = bits(roundMask_lsbs_1, 5, 0) @[primitives.scala 59:26]
    node roundMask_shift = dshr(asSInt(UInt<65>("h10000000000000000")), roundMask_lsbs_2) @[primitives.scala 76:56]
    node _roundMask_T_2 = bits(roundMask_shift, 63, 42) @[primitives.scala 78:22]
    node _roundMask_T_3 = bits(_roundMask_T_2, 15, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_4 = shl(UInt<8>("hff"), 8) @[Bitwise.scala 107:52]
    node _roundMask_T_5 = xor(UInt<16>("hffff"), _roundMask_T_4) @[Bitwise.scala 107:21]
    node _roundMask_T_6 = shr(_roundMask_T_3, 8) @[Bitwise.scala 108:21]
    node _roundMask_T_7 = and(_roundMask_T_6, _roundMask_T_5) @[Bitwise.scala 108:31]
    node _roundMask_T_8 = bits(_roundMask_T_3, 7, 0) @[Bitwise.scala 108:46]
    node _roundMask_T_9 = shl(_roundMask_T_8, 8) @[Bitwise.scala 108:70]
    node _roundMask_T_10 = not(_roundMask_T_5) @[Bitwise.scala 108:82]
    node _roundMask_T_11 = and(_roundMask_T_9, _roundMask_T_10) @[Bitwise.scala 108:80]
    node _roundMask_T_12 = or(_roundMask_T_7, _roundMask_T_11) @[Bitwise.scala 108:39]
    node _roundMask_T_13 = bits(_roundMask_T_5, 11, 0) @[Bitwise.scala 107:28]
    node _roundMask_T_14 = shl(_roundMask_T_13, 4) @[Bitwise.scala 107:52]
    node _roundMask_T_15 = xor(_roundMask_T_5, _roundMask_T_14) @[Bitwise.scala 107:21]
    node _roundMask_T_16 = shr(_roundMask_T_12, 4) @[Bitwise.scala 108:21]
    node _roundMask_T_17 = and(_roundMask_T_16, _roundMask_T_15) @[Bitwise.scala 108:31]
    node _roundMask_T_18 = bits(_roundMask_T_12, 11, 0) @[Bitwise.scala 108:46]
    node _roundMask_T_19 = shl(_roundMask_T_18, 4) @[Bitwise.scala 108:70]
    node _roundMask_T_20 = not(_roundMask_T_15) @[Bitwise.scala 108:82]
    node _roundMask_T_21 = and(_roundMask_T_19, _roundMask_T_20) @[Bitwise.scala 108:80]
    node _roundMask_T_22 = or(_roundMask_T_17, _roundMask_T_21) @[Bitwise.scala 108:39]
    node _roundMask_T_23 = bits(_roundMask_T_15, 13, 0) @[Bitwise.scala 107:28]
    node _roundMask_T_24 = shl(_roundMask_T_23, 2) @[Bitwise.scala 107:52]
    node _roundMask_T_25 = xor(_roundMask_T_15, _roundMask_T_24) @[Bitwise.scala 107:21]
    node _roundMask_T_26 = shr(_roundMask_T_22, 2) @[Bitwise.scala 108:21]
    node _roundMask_T_27 = and(_roundMask_T_26, _roundMask_T_25) @[Bitwise.scala 108:31]
    node _roundMask_T_28 = bits(_roundMask_T_22, 13, 0) @[Bitwise.scala 108:46]
    node _roundMask_T_29 = shl(_roundMask_T_28, 2) @[Bitwise.scala 108:70]
    node _roundMask_T_30 = not(_roundMask_T_25) @[Bitwise.scala 108:82]
    node _roundMask_T_31 = and(_roundMask_T_29, _roundMask_T_30) @[Bitwise.scala 108:80]
    node _roundMask_T_32 = or(_roundMask_T_27, _roundMask_T_31) @[Bitwise.scala 108:39]
    node _roundMask_T_33 = bits(_roundMask_T_25, 14, 0) @[Bitwise.scala 107:28]
    node _roundMask_T_34 = shl(_roundMask_T_33, 1) @[Bitwise.scala 107:52]
    node _roundMask_T_35 = xor(_roundMask_T_25, _roundMask_T_34) @[Bitwise.scala 107:21]
    node _roundMask_T_36 = shr(_roundMask_T_32, 1) @[Bitwise.scala 108:21]
    node _roundMask_T_37 = and(_roundMask_T_36, _roundMask_T_35) @[Bitwise.scala 108:31]
    node _roundMask_T_38 = bits(_roundMask_T_32, 14, 0) @[Bitwise.scala 108:46]
    node _roundMask_T_39 = shl(_roundMask_T_38, 1) @[Bitwise.scala 108:70]
    node _roundMask_T_40 = not(_roundMask_T_35) @[Bitwise.scala 108:82]
    node _roundMask_T_41 = and(_roundMask_T_39, _roundMask_T_40) @[Bitwise.scala 108:80]
    node _roundMask_T_42 = or(_roundMask_T_37, _roundMask_T_41) @[Bitwise.scala 108:39]
    node _roundMask_T_43 = bits(_roundMask_T_2, 21, 16) @[Bitwise.scala 114:47]
    node _roundMask_T_44 = bits(_roundMask_T_43, 3, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_45 = bits(_roundMask_T_44, 1, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_46 = bits(_roundMask_T_45, 0, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_47 = bits(_roundMask_T_45, 1, 1) @[Bitwise.scala 114:47]
    node _roundMask_T_48 = cat(_roundMask_T_46, _roundMask_T_47) @[Cat.scala 33:92]
    node _roundMask_T_49 = bits(_roundMask_T_44, 3, 2) @[Bitwise.scala 114:47]
    node _roundMask_T_50 = bits(_roundMask_T_49, 0, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_51 = bits(_roundMask_T_49, 1, 1) @[Bitwise.scala 114:47]
    node _roundMask_T_52 = cat(_roundMask_T_50, _roundMask_T_51) @[Cat.scala 33:92]
    node _roundMask_T_53 = cat(_roundMask_T_48, _roundMask_T_52) @[Cat.scala 33:92]
    node _roundMask_T_54 = bits(_roundMask_T_43, 5, 4) @[Bitwise.scala 114:47]
    node _roundMask_T_55 = bits(_roundMask_T_54, 0, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_56 = bits(_roundMask_T_54, 1, 1) @[Bitwise.scala 114:47]
    node _roundMask_T_57 = cat(_roundMask_T_55, _roundMask_T_56) @[Cat.scala 33:92]
    node _roundMask_T_58 = cat(_roundMask_T_53, _roundMask_T_57) @[Cat.scala 33:92]
    node _roundMask_T_59 = cat(_roundMask_T_42, _roundMask_T_58) @[Cat.scala 33:92]
    node _roundMask_T_60 = not(_roundMask_T_59) @[primitives.scala 73:32]
    node _roundMask_T_61 = mux(roundMask_msb_2, UInt<1>("h0"), _roundMask_T_60) @[primitives.scala 73:21]
    node _roundMask_T_62 = not(_roundMask_T_61) @[primitives.scala 73:17]
    node _roundMask_T_63 = cat(_roundMask_T_62, UInt<3>("h7")) @[primitives.scala 68:58]
    node roundMask_msb_3 = bits(roundMask_lsbs_1, 6, 6) @[primitives.scala 58:25]
    node roundMask_lsbs_3 = bits(roundMask_lsbs_1, 5, 0) @[primitives.scala 59:26]
    node roundMask_shift_1 = dshr(asSInt(UInt<65>("h10000000000000000")), roundMask_lsbs_3) @[primitives.scala 76:56]
    node _roundMask_T_64 = bits(roundMask_shift_1, 2, 0) @[primitives.scala 78:22]
    node _roundMask_T_65 = bits(_roundMask_T_64, 1, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_66 = bits(_roundMask_T_65, 0, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_67 = bits(_roundMask_T_65, 1, 1) @[Bitwise.scala 114:47]
    node _roundMask_T_68 = cat(_roundMask_T_66, _roundMask_T_67) @[Cat.scala 33:92]
    node _roundMask_T_69 = bits(_roundMask_T_64, 2, 2) @[Bitwise.scala 114:47]
    node _roundMask_T_70 = cat(_roundMask_T_68, _roundMask_T_69) @[Cat.scala 33:92]
    node _roundMask_T_71 = mux(roundMask_msb_3, _roundMask_T_70, UInt<1>("h0")) @[primitives.scala 62:24]
    node _roundMask_T_72 = mux(roundMask_msb_1, _roundMask_T_63, _roundMask_T_71) @[primitives.scala 67:24]
    node _roundMask_T_73 = mux(roundMask_msb, _roundMask_T_72, UInt<1>("h0")) @[primitives.scala 62:24]
    node _roundMask_T_74 = or(_roundMask_T_73, doShiftSigDown1) @[RoundAnyRawFNToRecFN.scala 159:23]
    node roundMask = cat(_roundMask_T_74, UInt<2>("h3")) @[RoundAnyRawFNToRecFN.scala 159:42]
    node _shiftedRoundMask_T = cat(UInt<1>("h0"), roundMask) @[RoundAnyRawFNToRecFN.scala 162:41]
    node shiftedRoundMask = shr(_shiftedRoundMask_T, 1) @[RoundAnyRawFNToRecFN.scala 162:53]
    node _roundPosMask_T = not(shiftedRoundMask) @[RoundAnyRawFNToRecFN.scala 163:28]
    node roundPosMask = and(_roundPosMask_T, roundMask) @[RoundAnyRawFNToRecFN.scala 163:46]
    node _roundPosBit_T = and(adjustedSig, roundPosMask) @[RoundAnyRawFNToRecFN.scala 164:40]
    node roundPosBit = orr(_roundPosBit_T) @[RoundAnyRawFNToRecFN.scala 164:56]
    node _anyRoundExtra_T = and(adjustedSig, shiftedRoundMask) @[RoundAnyRawFNToRecFN.scala 165:42]
    node anyRoundExtra = orr(_anyRoundExtra_T) @[RoundAnyRawFNToRecFN.scala 165:62]
    node anyRound = or(roundPosBit, anyRoundExtra) @[RoundAnyRawFNToRecFN.scala 166:36]
    node _roundIncr_T = or(roundingMode_near_even, roundingMode_near_maxMag) @[RoundAnyRawFNToRecFN.scala 169:38]
    node _roundIncr_T_1 = and(_roundIncr_T, roundPosBit) @[RoundAnyRawFNToRecFN.scala 169:67]
    node _roundIncr_T_2 = and(roundMagUp, anyRound) @[RoundAnyRawFNToRecFN.scala 171:29]
    node roundIncr = or(_roundIncr_T_1, _roundIncr_T_2) @[RoundAnyRawFNToRecFN.scala 170:31]
    node _roundedSig_T = or(adjustedSig, roundMask) @[RoundAnyRawFNToRecFN.scala 174:32]
    node _roundedSig_T_1 = shr(_roundedSig_T, 2) @[RoundAnyRawFNToRecFN.scala 174:44]
    node _roundedSig_T_2 = add(_roundedSig_T_1, UInt<1>("h1")) @[RoundAnyRawFNToRecFN.scala 174:49]
    node _roundedSig_T_3 = and(roundingMode_near_even, roundPosBit) @[RoundAnyRawFNToRecFN.scala 175:49]
    node _roundedSig_T_4 = eq(anyRoundExtra, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 176:30]
    node _roundedSig_T_5 = and(_roundedSig_T_3, _roundedSig_T_4) @[RoundAnyRawFNToRecFN.scala 175:64]
    node _roundedSig_T_6 = shr(roundMask, 1) @[RoundAnyRawFNToRecFN.scala 177:35]
    node _roundedSig_T_7 = mux(_roundedSig_T_5, _roundedSig_T_6, UInt<26>("h0")) @[RoundAnyRawFNToRecFN.scala 175:25]
    node _roundedSig_T_8 = not(_roundedSig_T_7) @[RoundAnyRawFNToRecFN.scala 175:21]
    node _roundedSig_T_9 = and(_roundedSig_T_2, _roundedSig_T_8) @[RoundAnyRawFNToRecFN.scala 174:57]
    node _roundedSig_T_10 = not(roundMask) @[RoundAnyRawFNToRecFN.scala 180:32]
    node _roundedSig_T_11 = and(adjustedSig, _roundedSig_T_10) @[RoundAnyRawFNToRecFN.scala 180:30]
    node _roundedSig_T_12 = shr(_roundedSig_T_11, 2) @[RoundAnyRawFNToRecFN.scala 180:43]
    node _roundedSig_T_13 = and(roundingMode_odd, anyRound) @[RoundAnyRawFNToRecFN.scala 181:42]
    node _roundedSig_T_14 = shr(roundPosMask, 1) @[RoundAnyRawFNToRecFN.scala 181:67]
    node _roundedSig_T_15 = mux(_roundedSig_T_13, _roundedSig_T_14, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 181:24]
    node _roundedSig_T_16 = or(_roundedSig_T_12, _roundedSig_T_15) @[RoundAnyRawFNToRecFN.scala 180:47]
    node roundedSig = mux(roundIncr, _roundedSig_T_9, _roundedSig_T_16) @[RoundAnyRawFNToRecFN.scala 173:16]
    node _sRoundedExp_T = shr(roundedSig, 24) @[RoundAnyRawFNToRecFN.scala 185:54]
    node _sRoundedExp_T_1 = cvt(_sRoundedExp_T) @[RoundAnyRawFNToRecFN.scala 185:76]
    node sRoundedExp = add(io.in.sExp, _sRoundedExp_T_1) @[RoundAnyRawFNToRecFN.scala 185:40]
    node _common_expOut_T = bits(sRoundedExp, 8, 0) @[RoundAnyRawFNToRecFN.scala 187:37]
    common_expOut <= _common_expOut_T @[RoundAnyRawFNToRecFN.scala 187:23]
    node _common_fractOut_T = bits(roundedSig, 23, 1) @[RoundAnyRawFNToRecFN.scala 190:27]
    node _common_fractOut_T_1 = bits(roundedSig, 22, 0) @[RoundAnyRawFNToRecFN.scala 191:27]
    node _common_fractOut_T_2 = mux(doShiftSigDown1, _common_fractOut_T, _common_fractOut_T_1) @[RoundAnyRawFNToRecFN.scala 189:16]
    common_fractOut <= _common_fractOut_T_2 @[RoundAnyRawFNToRecFN.scala 188:25]
    node _common_overflow_T = shr(sRoundedExp, 7) @[RoundAnyRawFNToRecFN.scala 196:30]
    node _common_overflow_T_1 = geq(_common_overflow_T, asSInt(UInt<3>("h3"))) @[RoundAnyRawFNToRecFN.scala 196:50]
    common_overflow <= _common_overflow_T_1 @[RoundAnyRawFNToRecFN.scala 193:25]
    node _common_totalUnderflow_T = lt(sRoundedExp, asSInt(UInt<8>("h6b"))) @[RoundAnyRawFNToRecFN.scala 200:31]
    common_totalUnderflow <= _common_totalUnderflow_T @[RoundAnyRawFNToRecFN.scala 197:31]
    node _unboundedRange_roundPosBit_T = bits(adjustedSig, 2, 2) @[RoundAnyRawFNToRecFN.scala 203:45]
    node _unboundedRange_roundPosBit_T_1 = bits(adjustedSig, 1, 1) @[RoundAnyRawFNToRecFN.scala 203:61]
    node unboundedRange_roundPosBit = mux(doShiftSigDown1, _unboundedRange_roundPosBit_T, _unboundedRange_roundPosBit_T_1) @[RoundAnyRawFNToRecFN.scala 203:16]
    node _unboundedRange_anyRound_T = bits(adjustedSig, 2, 2) @[RoundAnyRawFNToRecFN.scala 205:44]
    node _unboundedRange_anyRound_T_1 = and(doShiftSigDown1, _unboundedRange_anyRound_T) @[RoundAnyRawFNToRecFN.scala 205:30]
    node _unboundedRange_anyRound_T_2 = bits(adjustedSig, 1, 0) @[RoundAnyRawFNToRecFN.scala 205:63]
    node _unboundedRange_anyRound_T_3 = orr(_unboundedRange_anyRound_T_2) @[RoundAnyRawFNToRecFN.scala 205:70]
    node unboundedRange_anyRound = or(_unboundedRange_anyRound_T_1, _unboundedRange_anyRound_T_3) @[RoundAnyRawFNToRecFN.scala 205:49]
    node _unboundedRange_roundIncr_T = or(roundingMode_near_even, roundingMode_near_maxMag) @[RoundAnyRawFNToRecFN.scala 207:38]
    node _unboundedRange_roundIncr_T_1 = and(_unboundedRange_roundIncr_T, unboundedRange_roundPosBit) @[RoundAnyRawFNToRecFN.scala 207:67]
    node _unboundedRange_roundIncr_T_2 = and(roundMagUp, unboundedRange_anyRound) @[RoundAnyRawFNToRecFN.scala 209:29]
    node unboundedRange_roundIncr = or(_unboundedRange_roundIncr_T_1, _unboundedRange_roundIncr_T_2) @[RoundAnyRawFNToRecFN.scala 208:46]
    node _roundCarry_T = bits(roundedSig, 25, 25) @[RoundAnyRawFNToRecFN.scala 212:27]
    node _roundCarry_T_1 = bits(roundedSig, 24, 24) @[RoundAnyRawFNToRecFN.scala 213:27]
    node roundCarry = mux(doShiftSigDown1, _roundCarry_T, _roundCarry_T_1) @[RoundAnyRawFNToRecFN.scala 211:16]
    node _common_underflow_T = shr(io.in.sExp, 8) @[RoundAnyRawFNToRecFN.scala 220:49]
    node _common_underflow_T_1 = leq(_common_underflow_T, asSInt(UInt<1>("h0"))) @[RoundAnyRawFNToRecFN.scala 220:64]
    node _common_underflow_T_2 = and(anyRound, _common_underflow_T_1) @[RoundAnyRawFNToRecFN.scala 220:32]
    node _common_underflow_T_3 = bits(roundMask, 3, 3) @[RoundAnyRawFNToRecFN.scala 221:57]
    node _common_underflow_T_4 = bits(roundMask, 2, 2) @[RoundAnyRawFNToRecFN.scala 221:71]
    node _common_underflow_T_5 = mux(doShiftSigDown1, _common_underflow_T_3, _common_underflow_T_4) @[RoundAnyRawFNToRecFN.scala 221:30]
    node _common_underflow_T_6 = and(_common_underflow_T_2, _common_underflow_T_5) @[RoundAnyRawFNToRecFN.scala 220:72]
    node _common_underflow_T_7 = eq(io.detectTininess, UInt<1>("h1")) @[RoundAnyRawFNToRecFN.scala 222:49]
    node _common_underflow_T_8 = bits(roundMask, 4, 4) @[RoundAnyRawFNToRecFN.scala 224:49]
    node _common_underflow_T_9 = bits(roundMask, 3, 3) @[RoundAnyRawFNToRecFN.scala 225:49]
    node _common_underflow_T_10 = mux(doShiftSigDown1, _common_underflow_T_8, _common_underflow_T_9) @[RoundAnyRawFNToRecFN.scala 223:39]
    node _common_underflow_T_11 = eq(_common_underflow_T_10, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 223:34]
    node _common_underflow_T_12 = and(_common_underflow_T_7, _common_underflow_T_11) @[RoundAnyRawFNToRecFN.scala 222:77]
    node _common_underflow_T_13 = and(_common_underflow_T_12, roundCarry) @[RoundAnyRawFNToRecFN.scala 226:38]
    node _common_underflow_T_14 = and(_common_underflow_T_13, roundPosBit) @[RoundAnyRawFNToRecFN.scala 227:45]
    node _common_underflow_T_15 = and(_common_underflow_T_14, unboundedRange_roundIncr) @[RoundAnyRawFNToRecFN.scala 227:60]
    node _common_underflow_T_16 = eq(_common_underflow_T_15, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 222:27]
    node _common_underflow_T_17 = and(_common_underflow_T_6, _common_underflow_T_16) @[RoundAnyRawFNToRecFN.scala 221:76]
    node _common_underflow_T_18 = or(common_totalUnderflow, _common_underflow_T_17) @[RoundAnyRawFNToRecFN.scala 217:40]
    common_underflow <= _common_underflow_T_18 @[RoundAnyRawFNToRecFN.scala 215:26]
    node _common_inexact_T = or(common_totalUnderflow, anyRound) @[RoundAnyRawFNToRecFN.scala 230:49]
    common_inexact <= _common_inexact_T @[RoundAnyRawFNToRecFN.scala 230:24]
    node isNaNOut = or(io.invalidExc, io.in.isNaN) @[RoundAnyRawFNToRecFN.scala 235:34]
    node notNaN_isSpecialInfOut = or(io.infiniteExc, io.in.isInf) @[RoundAnyRawFNToRecFN.scala 236:49]
    node _commonCase_T = eq(isNaNOut, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 237:22]
    node _commonCase_T_1 = eq(notNaN_isSpecialInfOut, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 237:36]
    node _commonCase_T_2 = and(_commonCase_T, _commonCase_T_1) @[RoundAnyRawFNToRecFN.scala 237:33]
    node _commonCase_T_3 = eq(io.in.isZero, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 237:64]
    node commonCase = and(_commonCase_T_2, _commonCase_T_3) @[RoundAnyRawFNToRecFN.scala 237:61]
    node overflow = and(commonCase, common_overflow) @[RoundAnyRawFNToRecFN.scala 238:32]
    node underflow = and(commonCase, common_underflow) @[RoundAnyRawFNToRecFN.scala 239:32]
    node _inexact_T = and(commonCase, common_inexact) @[RoundAnyRawFNToRecFN.scala 240:43]
    node inexact = or(overflow, _inexact_T) @[RoundAnyRawFNToRecFN.scala 240:28]
    node _overflow_roundMagUp_T = or(roundingMode_near_even, roundingMode_near_maxMag) @[RoundAnyRawFNToRecFN.scala 243:32]
    node overflow_roundMagUp = or(_overflow_roundMagUp_T, roundMagUp) @[RoundAnyRawFNToRecFN.scala 243:60]
    node _pegMinNonzeroMagOut_T = and(commonCase, common_totalUnderflow) @[RoundAnyRawFNToRecFN.scala 245:20]
    node _pegMinNonzeroMagOut_T_1 = or(roundMagUp, roundingMode_odd) @[RoundAnyRawFNToRecFN.scala 245:60]
    node pegMinNonzeroMagOut = and(_pegMinNonzeroMagOut_T, _pegMinNonzeroMagOut_T_1) @[RoundAnyRawFNToRecFN.scala 245:45]
    node _pegMaxFiniteMagOut_T = eq(overflow_roundMagUp, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 246:42]
    node pegMaxFiniteMagOut = and(overflow, _pegMaxFiniteMagOut_T) @[RoundAnyRawFNToRecFN.scala 246:39]
    node _notNaN_isInfOut_T = and(overflow, overflow_roundMagUp) @[RoundAnyRawFNToRecFN.scala 248:45]
    node notNaN_isInfOut = or(notNaN_isSpecialInfOut, _notNaN_isInfOut_T) @[RoundAnyRawFNToRecFN.scala 248:32]
    node signOut = mux(isNaNOut, UInt<1>("h0"), io.in.sign) @[RoundAnyRawFNToRecFN.scala 250:22]
    node _expOut_T = or(io.in.isZero, common_totalUnderflow) @[RoundAnyRawFNToRecFN.scala 253:32]
    node _expOut_T_1 = mux(_expOut_T, UInt<9>("h1c0"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 253:18]
    node _expOut_T_2 = not(_expOut_T_1) @[RoundAnyRawFNToRecFN.scala 253:14]
    node _expOut_T_3 = and(common_expOut, _expOut_T_2) @[RoundAnyRawFNToRecFN.scala 252:24]
    node _expOut_T_4 = not(UInt<9>("h6b")) @[RoundAnyRawFNToRecFN.scala 258:19]
    node _expOut_T_5 = mux(pegMinNonzeroMagOut, _expOut_T_4, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 257:18]
    node _expOut_T_6 = not(_expOut_T_5) @[RoundAnyRawFNToRecFN.scala 257:14]
    node _expOut_T_7 = and(_expOut_T_3, _expOut_T_6) @[RoundAnyRawFNToRecFN.scala 256:17]
    node _expOut_T_8 = mux(pegMaxFiniteMagOut, UInt<9>("h80"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 261:18]
    node _expOut_T_9 = not(_expOut_T_8) @[RoundAnyRawFNToRecFN.scala 261:14]
    node _expOut_T_10 = and(_expOut_T_7, _expOut_T_9) @[RoundAnyRawFNToRecFN.scala 260:17]
    node _expOut_T_11 = mux(notNaN_isInfOut, UInt<9>("h40"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 265:18]
    node _expOut_T_12 = not(_expOut_T_11) @[RoundAnyRawFNToRecFN.scala 265:14]
    node _expOut_T_13 = and(_expOut_T_10, _expOut_T_12) @[RoundAnyRawFNToRecFN.scala 264:17]
    node _expOut_T_14 = mux(pegMinNonzeroMagOut, UInt<9>("h6b"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 269:16]
    node _expOut_T_15 = or(_expOut_T_13, _expOut_T_14) @[RoundAnyRawFNToRecFN.scala 268:18]
    node _expOut_T_16 = mux(pegMaxFiniteMagOut, UInt<9>("h17f"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 273:16]
    node _expOut_T_17 = or(_expOut_T_15, _expOut_T_16) @[RoundAnyRawFNToRecFN.scala 272:15]
    node _expOut_T_18 = mux(notNaN_isInfOut, UInt<9>("h180"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 277:16]
    node _expOut_T_19 = or(_expOut_T_17, _expOut_T_18) @[RoundAnyRawFNToRecFN.scala 276:15]
    node _expOut_T_20 = mux(isNaNOut, UInt<9>("h1c0"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 278:16]
    node expOut = or(_expOut_T_19, _expOut_T_20) @[RoundAnyRawFNToRecFN.scala 277:73]
    node _fractOut_T = or(isNaNOut, io.in.isZero) @[RoundAnyRawFNToRecFN.scala 280:22]
    node _fractOut_T_1 = or(_fractOut_T, common_totalUnderflow) @[RoundAnyRawFNToRecFN.scala 280:38]
    node _fractOut_T_2 = mux(isNaNOut, UInt<23>("h400000"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 281:16]
    node _fractOut_T_3 = mux(_fractOut_T_1, _fractOut_T_2, common_fractOut) @[RoundAnyRawFNToRecFN.scala 280:12]
    node _fractOut_T_4 = bits(pegMaxFiniteMagOut, 0, 0) @[Bitwise.scala 77:15]
    node _fractOut_T_5 = mux(_fractOut_T_4, UInt<23>("h7fffff"), UInt<23>("h0")) @[Bitwise.scala 77:12]
    node fractOut = or(_fractOut_T_3, _fractOut_T_5) @[RoundAnyRawFNToRecFN.scala 283:11]
    node _io_out_T = cat(signOut, expOut) @[RoundAnyRawFNToRecFN.scala 286:23]
    node _io_out_T_1 = cat(_io_out_T, fractOut) @[RoundAnyRawFNToRecFN.scala 286:33]
    io.out <= _io_out_T_1 @[RoundAnyRawFNToRecFN.scala 286:12]
    node _io_exceptionFlags_T = cat(io.invalidExc, io.infiniteExc) @[RoundAnyRawFNToRecFN.scala 288:23]
    node _io_exceptionFlags_T_1 = cat(_io_exceptionFlags_T, overflow) @[RoundAnyRawFNToRecFN.scala 288:41]
    node _io_exceptionFlags_T_2 = cat(_io_exceptionFlags_T_1, underflow) @[RoundAnyRawFNToRecFN.scala 288:53]
    node _io_exceptionFlags_T_3 = cat(_io_exceptionFlags_T_2, inexact) @[RoundAnyRawFNToRecFN.scala 288:66]
    io.exceptionFlags <= _io_exceptionFlags_T_3 @[RoundAnyRawFNToRecFN.scala 287:23]

  module RoundRawFNToRecFN_e8_s24_9 :
    output io : { flip invalidExc : UInt<1>, flip infiniteExc : UInt<1>, flip in : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<27>}, flip roundingMode : UInt<3>, flip detectTininess : UInt<1>, out : UInt<33>, exceptionFlags : UInt<5>}

    inst roundAnyRawFNToRecFN of RoundAnyRawFNToRecFN_ie8_is26_oe8_os24_9 @[RoundAnyRawFNToRecFN.scala 310:15]
    roundAnyRawFNToRecFN.io.invalidExc <= io.invalidExc @[RoundAnyRawFNToRecFN.scala 313:44]
    roundAnyRawFNToRecFN.io.infiniteExc <= io.infiniteExc @[RoundAnyRawFNToRecFN.scala 314:44]
    roundAnyRawFNToRecFN.io.in.sig <= io.in.sig @[RoundAnyRawFNToRecFN.scala 315:44]
    roundAnyRawFNToRecFN.io.in.sExp <= io.in.sExp @[RoundAnyRawFNToRecFN.scala 315:44]
    roundAnyRawFNToRecFN.io.in.sign <= io.in.sign @[RoundAnyRawFNToRecFN.scala 315:44]
    roundAnyRawFNToRecFN.io.in.isZero <= io.in.isZero @[RoundAnyRawFNToRecFN.scala 315:44]
    roundAnyRawFNToRecFN.io.in.isInf <= io.in.isInf @[RoundAnyRawFNToRecFN.scala 315:44]
    roundAnyRawFNToRecFN.io.in.isNaN <= io.in.isNaN @[RoundAnyRawFNToRecFN.scala 315:44]
    roundAnyRawFNToRecFN.io.roundingMode <= io.roundingMode @[RoundAnyRawFNToRecFN.scala 316:44]
    roundAnyRawFNToRecFN.io.detectTininess <= io.detectTininess @[RoundAnyRawFNToRecFN.scala 317:44]
    io.out <= roundAnyRawFNToRecFN.io.out @[RoundAnyRawFNToRecFN.scala 318:23]
    io.exceptionFlags <= roundAnyRawFNToRecFN.io.exceptionFlags @[RoundAnyRawFNToRecFN.scala 319:23]

  module AddRecFN_2 :
    output io : { flip subOp : UInt<1>, flip a : UInt<33>, flip b : UInt<33>, flip roundingMode : UInt<3>, flip detectTininess : UInt<1>, out : UInt<33>, exceptionFlags : UInt<5>}

    inst addRawFN of AddRawFN_2 @[AddRecFN.scala 147:26]
    addRawFN.io.subOp <= io.subOp @[AddRecFN.scala 149:30]
    node addRawFN_io_a_exp = bits(io.a, 31, 23) @[rawFloatFromRecFN.scala 51:21]
    node _addRawFN_io_a_isZero_T = bits(addRawFN_io_a_exp, 8, 6) @[rawFloatFromRecFN.scala 52:28]
    node addRawFN_io_a_isZero = eq(_addRawFN_io_a_isZero_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 52:53]
    node _addRawFN_io_a_isSpecial_T = bits(addRawFN_io_a_exp, 8, 7) @[rawFloatFromRecFN.scala 53:28]
    node addRawFN_io_a_isSpecial = eq(_addRawFN_io_a_isSpecial_T, UInt<2>("h3")) @[rawFloatFromRecFN.scala 53:53]
    wire addRawFN_io_a_out : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>} @[rawFloatFromRecFN.scala 55:23]
    node _addRawFN_io_a_out_isNaN_T = bits(addRawFN_io_a_exp, 6, 6) @[rawFloatFromRecFN.scala 56:41]
    node _addRawFN_io_a_out_isNaN_T_1 = and(addRawFN_io_a_isSpecial, _addRawFN_io_a_out_isNaN_T) @[rawFloatFromRecFN.scala 56:33]
    addRawFN_io_a_out.isNaN <= _addRawFN_io_a_out_isNaN_T_1 @[rawFloatFromRecFN.scala 56:20]
    node _addRawFN_io_a_out_isInf_T = bits(addRawFN_io_a_exp, 6, 6) @[rawFloatFromRecFN.scala 57:41]
    node _addRawFN_io_a_out_isInf_T_1 = eq(_addRawFN_io_a_out_isInf_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 57:36]
    node _addRawFN_io_a_out_isInf_T_2 = and(addRawFN_io_a_isSpecial, _addRawFN_io_a_out_isInf_T_1) @[rawFloatFromRecFN.scala 57:33]
    addRawFN_io_a_out.isInf <= _addRawFN_io_a_out_isInf_T_2 @[rawFloatFromRecFN.scala 57:20]
    addRawFN_io_a_out.isZero <= addRawFN_io_a_isZero @[rawFloatFromRecFN.scala 58:20]
    node _addRawFN_io_a_out_sign_T = bits(io.a, 32, 32) @[rawFloatFromRecFN.scala 59:25]
    addRawFN_io_a_out.sign <= _addRawFN_io_a_out_sign_T @[rawFloatFromRecFN.scala 59:20]
    node _addRawFN_io_a_out_sExp_T = cvt(addRawFN_io_a_exp) @[rawFloatFromRecFN.scala 60:27]
    addRawFN_io_a_out.sExp <= _addRawFN_io_a_out_sExp_T @[rawFloatFromRecFN.scala 60:20]
    node _addRawFN_io_a_out_sig_T = eq(addRawFN_io_a_isZero, UInt<1>("h0")) @[rawFloatFromRecFN.scala 61:35]
    node _addRawFN_io_a_out_sig_T_1 = cat(UInt<1>("h0"), _addRawFN_io_a_out_sig_T) @[rawFloatFromRecFN.scala 61:32]
    node _addRawFN_io_a_out_sig_T_2 = bits(io.a, 22, 0) @[rawFloatFromRecFN.scala 61:49]
    node _addRawFN_io_a_out_sig_T_3 = cat(_addRawFN_io_a_out_sig_T_1, _addRawFN_io_a_out_sig_T_2) @[rawFloatFromRecFN.scala 61:44]
    addRawFN_io_a_out.sig <= _addRawFN_io_a_out_sig_T_3 @[rawFloatFromRecFN.scala 61:20]
    addRawFN.io.a.sig <= addRawFN_io_a_out.sig @[AddRecFN.scala 150:30]
    addRawFN.io.a.sExp <= addRawFN_io_a_out.sExp @[AddRecFN.scala 150:30]
    addRawFN.io.a.sign <= addRawFN_io_a_out.sign @[AddRecFN.scala 150:30]
    addRawFN.io.a.isZero <= addRawFN_io_a_out.isZero @[AddRecFN.scala 150:30]
    addRawFN.io.a.isInf <= addRawFN_io_a_out.isInf @[AddRecFN.scala 150:30]
    addRawFN.io.a.isNaN <= addRawFN_io_a_out.isNaN @[AddRecFN.scala 150:30]
    node addRawFN_io_b_exp = bits(io.b, 31, 23) @[rawFloatFromRecFN.scala 51:21]
    node _addRawFN_io_b_isZero_T = bits(addRawFN_io_b_exp, 8, 6) @[rawFloatFromRecFN.scala 52:28]
    node addRawFN_io_b_isZero = eq(_addRawFN_io_b_isZero_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 52:53]
    node _addRawFN_io_b_isSpecial_T = bits(addRawFN_io_b_exp, 8, 7) @[rawFloatFromRecFN.scala 53:28]
    node addRawFN_io_b_isSpecial = eq(_addRawFN_io_b_isSpecial_T, UInt<2>("h3")) @[rawFloatFromRecFN.scala 53:53]
    wire addRawFN_io_b_out : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>} @[rawFloatFromRecFN.scala 55:23]
    node _addRawFN_io_b_out_isNaN_T = bits(addRawFN_io_b_exp, 6, 6) @[rawFloatFromRecFN.scala 56:41]
    node _addRawFN_io_b_out_isNaN_T_1 = and(addRawFN_io_b_isSpecial, _addRawFN_io_b_out_isNaN_T) @[rawFloatFromRecFN.scala 56:33]
    addRawFN_io_b_out.isNaN <= _addRawFN_io_b_out_isNaN_T_1 @[rawFloatFromRecFN.scala 56:20]
    node _addRawFN_io_b_out_isInf_T = bits(addRawFN_io_b_exp, 6, 6) @[rawFloatFromRecFN.scala 57:41]
    node _addRawFN_io_b_out_isInf_T_1 = eq(_addRawFN_io_b_out_isInf_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 57:36]
    node _addRawFN_io_b_out_isInf_T_2 = and(addRawFN_io_b_isSpecial, _addRawFN_io_b_out_isInf_T_1) @[rawFloatFromRecFN.scala 57:33]
    addRawFN_io_b_out.isInf <= _addRawFN_io_b_out_isInf_T_2 @[rawFloatFromRecFN.scala 57:20]
    addRawFN_io_b_out.isZero <= addRawFN_io_b_isZero @[rawFloatFromRecFN.scala 58:20]
    node _addRawFN_io_b_out_sign_T = bits(io.b, 32, 32) @[rawFloatFromRecFN.scala 59:25]
    addRawFN_io_b_out.sign <= _addRawFN_io_b_out_sign_T @[rawFloatFromRecFN.scala 59:20]
    node _addRawFN_io_b_out_sExp_T = cvt(addRawFN_io_b_exp) @[rawFloatFromRecFN.scala 60:27]
    addRawFN_io_b_out.sExp <= _addRawFN_io_b_out_sExp_T @[rawFloatFromRecFN.scala 60:20]
    node _addRawFN_io_b_out_sig_T = eq(addRawFN_io_b_isZero, UInt<1>("h0")) @[rawFloatFromRecFN.scala 61:35]
    node _addRawFN_io_b_out_sig_T_1 = cat(UInt<1>("h0"), _addRawFN_io_b_out_sig_T) @[rawFloatFromRecFN.scala 61:32]
    node _addRawFN_io_b_out_sig_T_2 = bits(io.b, 22, 0) @[rawFloatFromRecFN.scala 61:49]
    node _addRawFN_io_b_out_sig_T_3 = cat(_addRawFN_io_b_out_sig_T_1, _addRawFN_io_b_out_sig_T_2) @[rawFloatFromRecFN.scala 61:44]
    addRawFN_io_b_out.sig <= _addRawFN_io_b_out_sig_T_3 @[rawFloatFromRecFN.scala 61:20]
    addRawFN.io.b.sig <= addRawFN_io_b_out.sig @[AddRecFN.scala 151:30]
    addRawFN.io.b.sExp <= addRawFN_io_b_out.sExp @[AddRecFN.scala 151:30]
    addRawFN.io.b.sign <= addRawFN_io_b_out.sign @[AddRecFN.scala 151:30]
    addRawFN.io.b.isZero <= addRawFN_io_b_out.isZero @[AddRecFN.scala 151:30]
    addRawFN.io.b.isInf <= addRawFN_io_b_out.isInf @[AddRecFN.scala 151:30]
    addRawFN.io.b.isNaN <= addRawFN_io_b_out.isNaN @[AddRecFN.scala 151:30]
    addRawFN.io.roundingMode <= io.roundingMode @[AddRecFN.scala 152:30]
    inst roundRawFNToRecFN of RoundRawFNToRecFN_e8_s24_9 @[AddRecFN.scala 157:15]
    roundRawFNToRecFN.io.invalidExc <= addRawFN.io.invalidExc @[AddRecFN.scala 158:39]
    roundRawFNToRecFN.io.infiniteExc <= UInt<1>("h0") @[AddRecFN.scala 159:39]
    roundRawFNToRecFN.io.in.sig <= addRawFN.io.rawOut.sig @[AddRecFN.scala 160:39]
    roundRawFNToRecFN.io.in.sExp <= addRawFN.io.rawOut.sExp @[AddRecFN.scala 160:39]
    roundRawFNToRecFN.io.in.sign <= addRawFN.io.rawOut.sign @[AddRecFN.scala 160:39]
    roundRawFNToRecFN.io.in.isZero <= addRawFN.io.rawOut.isZero @[AddRecFN.scala 160:39]
    roundRawFNToRecFN.io.in.isInf <= addRawFN.io.rawOut.isInf @[AddRecFN.scala 160:39]
    roundRawFNToRecFN.io.in.isNaN <= addRawFN.io.rawOut.isNaN @[AddRecFN.scala 160:39]
    roundRawFNToRecFN.io.roundingMode <= io.roundingMode @[AddRecFN.scala 161:39]
    roundRawFNToRecFN.io.detectTininess <= io.detectTininess @[AddRecFN.scala 162:41]
    io.out <= roundRawFNToRecFN.io.out @[AddRecFN.scala 163:23]
    io.exceptionFlags <= roundRawFNToRecFN.io.exceptionFlags @[AddRecFN.scala 164:23]

  module FP32Adder :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<32>, flip b : UInt<32>, result : UInt<32>}

    inst adder of AddRecFN_2 @[FPU.scala 17:23]
    node a_recoded_rawIn_sign = bits(io.a, 31, 31) @[rawFloatFromFN.scala 44:18]
    node a_recoded_rawIn_expIn = bits(io.a, 30, 23) @[rawFloatFromFN.scala 45:19]
    node a_recoded_rawIn_fractIn = bits(io.a, 22, 0) @[rawFloatFromFN.scala 46:21]
    node a_recoded_rawIn_isZeroExpIn = eq(a_recoded_rawIn_expIn, UInt<1>("h0")) @[rawFloatFromFN.scala 48:30]
    node a_recoded_rawIn_isZeroFractIn = eq(a_recoded_rawIn_fractIn, UInt<1>("h0")) @[rawFloatFromFN.scala 49:34]
    node _a_recoded_rawIn_normDist_T = bits(a_recoded_rawIn_fractIn, 0, 0) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_1 = bits(a_recoded_rawIn_fractIn, 1, 1) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_2 = bits(a_recoded_rawIn_fractIn, 2, 2) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_3 = bits(a_recoded_rawIn_fractIn, 3, 3) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_4 = bits(a_recoded_rawIn_fractIn, 4, 4) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_5 = bits(a_recoded_rawIn_fractIn, 5, 5) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_6 = bits(a_recoded_rawIn_fractIn, 6, 6) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_7 = bits(a_recoded_rawIn_fractIn, 7, 7) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_8 = bits(a_recoded_rawIn_fractIn, 8, 8) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_9 = bits(a_recoded_rawIn_fractIn, 9, 9) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_10 = bits(a_recoded_rawIn_fractIn, 10, 10) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_11 = bits(a_recoded_rawIn_fractIn, 11, 11) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_12 = bits(a_recoded_rawIn_fractIn, 12, 12) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_13 = bits(a_recoded_rawIn_fractIn, 13, 13) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_14 = bits(a_recoded_rawIn_fractIn, 14, 14) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_15 = bits(a_recoded_rawIn_fractIn, 15, 15) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_16 = bits(a_recoded_rawIn_fractIn, 16, 16) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_17 = bits(a_recoded_rawIn_fractIn, 17, 17) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_18 = bits(a_recoded_rawIn_fractIn, 18, 18) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_19 = bits(a_recoded_rawIn_fractIn, 19, 19) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_20 = bits(a_recoded_rawIn_fractIn, 20, 20) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_21 = bits(a_recoded_rawIn_fractIn, 21, 21) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_22 = bits(a_recoded_rawIn_fractIn, 22, 22) @[primitives.scala 91:52]
    node _a_recoded_rawIn_normDist_T_23 = mux(_a_recoded_rawIn_normDist_T_1, UInt<5>("h15"), UInt<5>("h16")) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_24 = mux(_a_recoded_rawIn_normDist_T_2, UInt<5>("h14"), _a_recoded_rawIn_normDist_T_23) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_25 = mux(_a_recoded_rawIn_normDist_T_3, UInt<5>("h13"), _a_recoded_rawIn_normDist_T_24) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_26 = mux(_a_recoded_rawIn_normDist_T_4, UInt<5>("h12"), _a_recoded_rawIn_normDist_T_25) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_27 = mux(_a_recoded_rawIn_normDist_T_5, UInt<5>("h11"), _a_recoded_rawIn_normDist_T_26) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_28 = mux(_a_recoded_rawIn_normDist_T_6, UInt<5>("h10"), _a_recoded_rawIn_normDist_T_27) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_29 = mux(_a_recoded_rawIn_normDist_T_7, UInt<4>("hf"), _a_recoded_rawIn_normDist_T_28) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_30 = mux(_a_recoded_rawIn_normDist_T_8, UInt<4>("he"), _a_recoded_rawIn_normDist_T_29) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_31 = mux(_a_recoded_rawIn_normDist_T_9, UInt<4>("hd"), _a_recoded_rawIn_normDist_T_30) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_32 = mux(_a_recoded_rawIn_normDist_T_10, UInt<4>("hc"), _a_recoded_rawIn_normDist_T_31) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_33 = mux(_a_recoded_rawIn_normDist_T_11, UInt<4>("hb"), _a_recoded_rawIn_normDist_T_32) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_34 = mux(_a_recoded_rawIn_normDist_T_12, UInt<4>("ha"), _a_recoded_rawIn_normDist_T_33) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_35 = mux(_a_recoded_rawIn_normDist_T_13, UInt<4>("h9"), _a_recoded_rawIn_normDist_T_34) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_36 = mux(_a_recoded_rawIn_normDist_T_14, UInt<4>("h8"), _a_recoded_rawIn_normDist_T_35) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_37 = mux(_a_recoded_rawIn_normDist_T_15, UInt<3>("h7"), _a_recoded_rawIn_normDist_T_36) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_38 = mux(_a_recoded_rawIn_normDist_T_16, UInt<3>("h6"), _a_recoded_rawIn_normDist_T_37) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_39 = mux(_a_recoded_rawIn_normDist_T_17, UInt<3>("h5"), _a_recoded_rawIn_normDist_T_38) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_40 = mux(_a_recoded_rawIn_normDist_T_18, UInt<3>("h4"), _a_recoded_rawIn_normDist_T_39) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_41 = mux(_a_recoded_rawIn_normDist_T_19, UInt<2>("h3"), _a_recoded_rawIn_normDist_T_40) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_42 = mux(_a_recoded_rawIn_normDist_T_20, UInt<2>("h2"), _a_recoded_rawIn_normDist_T_41) @[Mux.scala 47:70]
    node _a_recoded_rawIn_normDist_T_43 = mux(_a_recoded_rawIn_normDist_T_21, UInt<1>("h1"), _a_recoded_rawIn_normDist_T_42) @[Mux.scala 47:70]
    node a_recoded_rawIn_normDist = mux(_a_recoded_rawIn_normDist_T_22, UInt<1>("h0"), _a_recoded_rawIn_normDist_T_43) @[Mux.scala 47:70]
    node _a_recoded_rawIn_subnormFract_T = dshl(a_recoded_rawIn_fractIn, a_recoded_rawIn_normDist) @[rawFloatFromFN.scala 52:33]
    node _a_recoded_rawIn_subnormFract_T_1 = bits(_a_recoded_rawIn_subnormFract_T, 21, 0) @[rawFloatFromFN.scala 52:46]
    node a_recoded_rawIn_subnormFract = shl(_a_recoded_rawIn_subnormFract_T_1, 1) @[rawFloatFromFN.scala 52:64]
    node _a_recoded_rawIn_adjustedExp_T = xor(a_recoded_rawIn_normDist, UInt<9>("h1ff")) @[rawFloatFromFN.scala 55:18]
    node _a_recoded_rawIn_adjustedExp_T_1 = mux(a_recoded_rawIn_isZeroExpIn, _a_recoded_rawIn_adjustedExp_T, a_recoded_rawIn_expIn) @[rawFloatFromFN.scala 54:10]
    node _a_recoded_rawIn_adjustedExp_T_2 = mux(a_recoded_rawIn_isZeroExpIn, UInt<2>("h2"), UInt<1>("h1")) @[rawFloatFromFN.scala 58:14]
    node _a_recoded_rawIn_adjustedExp_T_3 = or(UInt<8>("h80"), _a_recoded_rawIn_adjustedExp_T_2) @[rawFloatFromFN.scala 58:9]
    node _a_recoded_rawIn_adjustedExp_T_4 = add(_a_recoded_rawIn_adjustedExp_T_1, _a_recoded_rawIn_adjustedExp_T_3) @[rawFloatFromFN.scala 57:9]
    node a_recoded_rawIn_adjustedExp = tail(_a_recoded_rawIn_adjustedExp_T_4, 1) @[rawFloatFromFN.scala 57:9]
    node a_recoded_rawIn_isZero = and(a_recoded_rawIn_isZeroExpIn, a_recoded_rawIn_isZeroFractIn) @[rawFloatFromFN.scala 60:30]
    node _a_recoded_rawIn_isSpecial_T = bits(a_recoded_rawIn_adjustedExp, 8, 7) @[rawFloatFromFN.scala 61:32]
    node a_recoded_rawIn_isSpecial = eq(_a_recoded_rawIn_isSpecial_T, UInt<2>("h3")) @[rawFloatFromFN.scala 61:57]
    wire a_recoded_rawIn : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>} @[rawFloatFromFN.scala 63:19]
    node _a_recoded_rawIn_out_isNaN_T = eq(a_recoded_rawIn_isZeroFractIn, UInt<1>("h0")) @[rawFloatFromFN.scala 64:31]
    node _a_recoded_rawIn_out_isNaN_T_1 = and(a_recoded_rawIn_isSpecial, _a_recoded_rawIn_out_isNaN_T) @[rawFloatFromFN.scala 64:28]
    a_recoded_rawIn.isNaN <= _a_recoded_rawIn_out_isNaN_T_1 @[rawFloatFromFN.scala 64:15]
    node _a_recoded_rawIn_out_isInf_T = and(a_recoded_rawIn_isSpecial, a_recoded_rawIn_isZeroFractIn) @[rawFloatFromFN.scala 65:28]
    a_recoded_rawIn.isInf <= _a_recoded_rawIn_out_isInf_T @[rawFloatFromFN.scala 65:15]
    a_recoded_rawIn.isZero <= a_recoded_rawIn_isZero @[rawFloatFromFN.scala 66:16]
    a_recoded_rawIn.sign <= a_recoded_rawIn_sign @[rawFloatFromFN.scala 67:14]
    node _a_recoded_rawIn_out_sExp_T = bits(a_recoded_rawIn_adjustedExp, 8, 0) @[rawFloatFromFN.scala 68:28]
    node _a_recoded_rawIn_out_sExp_T_1 = cvt(_a_recoded_rawIn_out_sExp_T) @[rawFloatFromFN.scala 68:42]
    a_recoded_rawIn.sExp <= _a_recoded_rawIn_out_sExp_T_1 @[rawFloatFromFN.scala 68:14]
    node _a_recoded_rawIn_out_sig_T = eq(a_recoded_rawIn_isZero, UInt<1>("h0")) @[rawFloatFromFN.scala 70:19]
    node _a_recoded_rawIn_out_sig_T_1 = cat(UInt<1>("h0"), _a_recoded_rawIn_out_sig_T) @[rawFloatFromFN.scala 70:16]
    node _a_recoded_rawIn_out_sig_T_2 = mux(a_recoded_rawIn_isZeroExpIn, a_recoded_rawIn_subnormFract, a_recoded_rawIn_fractIn) @[rawFloatFromFN.scala 70:33]
    node _a_recoded_rawIn_out_sig_T_3 = cat(_a_recoded_rawIn_out_sig_T_1, _a_recoded_rawIn_out_sig_T_2) @[rawFloatFromFN.scala 70:27]
    a_recoded_rawIn.sig <= _a_recoded_rawIn_out_sig_T_3 @[rawFloatFromFN.scala 69:13]
    node _a_recoded_T = bits(a_recoded_rawIn.sExp, 8, 6) @[recFNFromFN.scala 48:50]
    node _a_recoded_T_1 = mux(a_recoded_rawIn.isZero, UInt<3>("h0"), _a_recoded_T) @[recFNFromFN.scala 48:15]
    node _a_recoded_T_2 = mux(a_recoded_rawIn.isNaN, UInt<1>("h1"), UInt<1>("h0")) @[recFNFromFN.scala 49:20]
    node _a_recoded_T_3 = or(_a_recoded_T_1, _a_recoded_T_2) @[recFNFromFN.scala 48:76]
    node _a_recoded_T_4 = cat(a_recoded_rawIn.sign, _a_recoded_T_3) @[recFNFromFN.scala 47:20]
    node _a_recoded_T_5 = bits(a_recoded_rawIn.sExp, 5, 0) @[recFNFromFN.scala 50:23]
    node _a_recoded_T_6 = cat(_a_recoded_T_4, _a_recoded_T_5) @[recFNFromFN.scala 49:45]
    node _a_recoded_T_7 = bits(a_recoded_rawIn.sig, 22, 0) @[recFNFromFN.scala 51:22]
    node a_recoded = cat(_a_recoded_T_6, _a_recoded_T_7) @[recFNFromFN.scala 50:41]
    node b_recoded_rawIn_sign = bits(io.b, 31, 31) @[rawFloatFromFN.scala 44:18]
    node b_recoded_rawIn_expIn = bits(io.b, 30, 23) @[rawFloatFromFN.scala 45:19]
    node b_recoded_rawIn_fractIn = bits(io.b, 22, 0) @[rawFloatFromFN.scala 46:21]
    node b_recoded_rawIn_isZeroExpIn = eq(b_recoded_rawIn_expIn, UInt<1>("h0")) @[rawFloatFromFN.scala 48:30]
    node b_recoded_rawIn_isZeroFractIn = eq(b_recoded_rawIn_fractIn, UInt<1>("h0")) @[rawFloatFromFN.scala 49:34]
    node _b_recoded_rawIn_normDist_T = bits(b_recoded_rawIn_fractIn, 0, 0) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_1 = bits(b_recoded_rawIn_fractIn, 1, 1) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_2 = bits(b_recoded_rawIn_fractIn, 2, 2) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_3 = bits(b_recoded_rawIn_fractIn, 3, 3) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_4 = bits(b_recoded_rawIn_fractIn, 4, 4) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_5 = bits(b_recoded_rawIn_fractIn, 5, 5) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_6 = bits(b_recoded_rawIn_fractIn, 6, 6) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_7 = bits(b_recoded_rawIn_fractIn, 7, 7) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_8 = bits(b_recoded_rawIn_fractIn, 8, 8) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_9 = bits(b_recoded_rawIn_fractIn, 9, 9) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_10 = bits(b_recoded_rawIn_fractIn, 10, 10) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_11 = bits(b_recoded_rawIn_fractIn, 11, 11) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_12 = bits(b_recoded_rawIn_fractIn, 12, 12) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_13 = bits(b_recoded_rawIn_fractIn, 13, 13) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_14 = bits(b_recoded_rawIn_fractIn, 14, 14) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_15 = bits(b_recoded_rawIn_fractIn, 15, 15) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_16 = bits(b_recoded_rawIn_fractIn, 16, 16) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_17 = bits(b_recoded_rawIn_fractIn, 17, 17) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_18 = bits(b_recoded_rawIn_fractIn, 18, 18) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_19 = bits(b_recoded_rawIn_fractIn, 19, 19) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_20 = bits(b_recoded_rawIn_fractIn, 20, 20) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_21 = bits(b_recoded_rawIn_fractIn, 21, 21) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_22 = bits(b_recoded_rawIn_fractIn, 22, 22) @[primitives.scala 91:52]
    node _b_recoded_rawIn_normDist_T_23 = mux(_b_recoded_rawIn_normDist_T_1, UInt<5>("h15"), UInt<5>("h16")) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_24 = mux(_b_recoded_rawIn_normDist_T_2, UInt<5>("h14"), _b_recoded_rawIn_normDist_T_23) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_25 = mux(_b_recoded_rawIn_normDist_T_3, UInt<5>("h13"), _b_recoded_rawIn_normDist_T_24) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_26 = mux(_b_recoded_rawIn_normDist_T_4, UInt<5>("h12"), _b_recoded_rawIn_normDist_T_25) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_27 = mux(_b_recoded_rawIn_normDist_T_5, UInt<5>("h11"), _b_recoded_rawIn_normDist_T_26) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_28 = mux(_b_recoded_rawIn_normDist_T_6, UInt<5>("h10"), _b_recoded_rawIn_normDist_T_27) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_29 = mux(_b_recoded_rawIn_normDist_T_7, UInt<4>("hf"), _b_recoded_rawIn_normDist_T_28) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_30 = mux(_b_recoded_rawIn_normDist_T_8, UInt<4>("he"), _b_recoded_rawIn_normDist_T_29) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_31 = mux(_b_recoded_rawIn_normDist_T_9, UInt<4>("hd"), _b_recoded_rawIn_normDist_T_30) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_32 = mux(_b_recoded_rawIn_normDist_T_10, UInt<4>("hc"), _b_recoded_rawIn_normDist_T_31) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_33 = mux(_b_recoded_rawIn_normDist_T_11, UInt<4>("hb"), _b_recoded_rawIn_normDist_T_32) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_34 = mux(_b_recoded_rawIn_normDist_T_12, UInt<4>("ha"), _b_recoded_rawIn_normDist_T_33) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_35 = mux(_b_recoded_rawIn_normDist_T_13, UInt<4>("h9"), _b_recoded_rawIn_normDist_T_34) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_36 = mux(_b_recoded_rawIn_normDist_T_14, UInt<4>("h8"), _b_recoded_rawIn_normDist_T_35) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_37 = mux(_b_recoded_rawIn_normDist_T_15, UInt<3>("h7"), _b_recoded_rawIn_normDist_T_36) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_38 = mux(_b_recoded_rawIn_normDist_T_16, UInt<3>("h6"), _b_recoded_rawIn_normDist_T_37) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_39 = mux(_b_recoded_rawIn_normDist_T_17, UInt<3>("h5"), _b_recoded_rawIn_normDist_T_38) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_40 = mux(_b_recoded_rawIn_normDist_T_18, UInt<3>("h4"), _b_recoded_rawIn_normDist_T_39) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_41 = mux(_b_recoded_rawIn_normDist_T_19, UInt<2>("h3"), _b_recoded_rawIn_normDist_T_40) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_42 = mux(_b_recoded_rawIn_normDist_T_20, UInt<2>("h2"), _b_recoded_rawIn_normDist_T_41) @[Mux.scala 47:70]
    node _b_recoded_rawIn_normDist_T_43 = mux(_b_recoded_rawIn_normDist_T_21, UInt<1>("h1"), _b_recoded_rawIn_normDist_T_42) @[Mux.scala 47:70]
    node b_recoded_rawIn_normDist = mux(_b_recoded_rawIn_normDist_T_22, UInt<1>("h0"), _b_recoded_rawIn_normDist_T_43) @[Mux.scala 47:70]
    node _b_recoded_rawIn_subnormFract_T = dshl(b_recoded_rawIn_fractIn, b_recoded_rawIn_normDist) @[rawFloatFromFN.scala 52:33]
    node _b_recoded_rawIn_subnormFract_T_1 = bits(_b_recoded_rawIn_subnormFract_T, 21, 0) @[rawFloatFromFN.scala 52:46]
    node b_recoded_rawIn_subnormFract = shl(_b_recoded_rawIn_subnormFract_T_1, 1) @[rawFloatFromFN.scala 52:64]
    node _b_recoded_rawIn_adjustedExp_T = xor(b_recoded_rawIn_normDist, UInt<9>("h1ff")) @[rawFloatFromFN.scala 55:18]
    node _b_recoded_rawIn_adjustedExp_T_1 = mux(b_recoded_rawIn_isZeroExpIn, _b_recoded_rawIn_adjustedExp_T, b_recoded_rawIn_expIn) @[rawFloatFromFN.scala 54:10]
    node _b_recoded_rawIn_adjustedExp_T_2 = mux(b_recoded_rawIn_isZeroExpIn, UInt<2>("h2"), UInt<1>("h1")) @[rawFloatFromFN.scala 58:14]
    node _b_recoded_rawIn_adjustedExp_T_3 = or(UInt<8>("h80"), _b_recoded_rawIn_adjustedExp_T_2) @[rawFloatFromFN.scala 58:9]
    node _b_recoded_rawIn_adjustedExp_T_4 = add(_b_recoded_rawIn_adjustedExp_T_1, _b_recoded_rawIn_adjustedExp_T_3) @[rawFloatFromFN.scala 57:9]
    node b_recoded_rawIn_adjustedExp = tail(_b_recoded_rawIn_adjustedExp_T_4, 1) @[rawFloatFromFN.scala 57:9]
    node b_recoded_rawIn_isZero = and(b_recoded_rawIn_isZeroExpIn, b_recoded_rawIn_isZeroFractIn) @[rawFloatFromFN.scala 60:30]
    node _b_recoded_rawIn_isSpecial_T = bits(b_recoded_rawIn_adjustedExp, 8, 7) @[rawFloatFromFN.scala 61:32]
    node b_recoded_rawIn_isSpecial = eq(_b_recoded_rawIn_isSpecial_T, UInt<2>("h3")) @[rawFloatFromFN.scala 61:57]
    wire b_recoded_rawIn : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>} @[rawFloatFromFN.scala 63:19]
    node _b_recoded_rawIn_out_isNaN_T = eq(b_recoded_rawIn_isZeroFractIn, UInt<1>("h0")) @[rawFloatFromFN.scala 64:31]
    node _b_recoded_rawIn_out_isNaN_T_1 = and(b_recoded_rawIn_isSpecial, _b_recoded_rawIn_out_isNaN_T) @[rawFloatFromFN.scala 64:28]
    b_recoded_rawIn.isNaN <= _b_recoded_rawIn_out_isNaN_T_1 @[rawFloatFromFN.scala 64:15]
    node _b_recoded_rawIn_out_isInf_T = and(b_recoded_rawIn_isSpecial, b_recoded_rawIn_isZeroFractIn) @[rawFloatFromFN.scala 65:28]
    b_recoded_rawIn.isInf <= _b_recoded_rawIn_out_isInf_T @[rawFloatFromFN.scala 65:15]
    b_recoded_rawIn.isZero <= b_recoded_rawIn_isZero @[rawFloatFromFN.scala 66:16]
    b_recoded_rawIn.sign <= b_recoded_rawIn_sign @[rawFloatFromFN.scala 67:14]
    node _b_recoded_rawIn_out_sExp_T = bits(b_recoded_rawIn_adjustedExp, 8, 0) @[rawFloatFromFN.scala 68:28]
    node _b_recoded_rawIn_out_sExp_T_1 = cvt(_b_recoded_rawIn_out_sExp_T) @[rawFloatFromFN.scala 68:42]
    b_recoded_rawIn.sExp <= _b_recoded_rawIn_out_sExp_T_1 @[rawFloatFromFN.scala 68:14]
    node _b_recoded_rawIn_out_sig_T = eq(b_recoded_rawIn_isZero, UInt<1>("h0")) @[rawFloatFromFN.scala 70:19]
    node _b_recoded_rawIn_out_sig_T_1 = cat(UInt<1>("h0"), _b_recoded_rawIn_out_sig_T) @[rawFloatFromFN.scala 70:16]
    node _b_recoded_rawIn_out_sig_T_2 = mux(b_recoded_rawIn_isZeroExpIn, b_recoded_rawIn_subnormFract, b_recoded_rawIn_fractIn) @[rawFloatFromFN.scala 70:33]
    node _b_recoded_rawIn_out_sig_T_3 = cat(_b_recoded_rawIn_out_sig_T_1, _b_recoded_rawIn_out_sig_T_2) @[rawFloatFromFN.scala 70:27]
    b_recoded_rawIn.sig <= _b_recoded_rawIn_out_sig_T_3 @[rawFloatFromFN.scala 69:13]
    node _b_recoded_T = bits(b_recoded_rawIn.sExp, 8, 6) @[recFNFromFN.scala 48:50]
    node _b_recoded_T_1 = mux(b_recoded_rawIn.isZero, UInt<3>("h0"), _b_recoded_T) @[recFNFromFN.scala 48:15]
    node _b_recoded_T_2 = mux(b_recoded_rawIn.isNaN, UInt<1>("h1"), UInt<1>("h0")) @[recFNFromFN.scala 49:20]
    node _b_recoded_T_3 = or(_b_recoded_T_1, _b_recoded_T_2) @[recFNFromFN.scala 48:76]
    node _b_recoded_T_4 = cat(b_recoded_rawIn.sign, _b_recoded_T_3) @[recFNFromFN.scala 47:20]
    node _b_recoded_T_5 = bits(b_recoded_rawIn.sExp, 5, 0) @[recFNFromFN.scala 50:23]
    node _b_recoded_T_6 = cat(_b_recoded_T_4, _b_recoded_T_5) @[recFNFromFN.scala 49:45]
    node _b_recoded_T_7 = bits(b_recoded_rawIn.sig, 22, 0) @[recFNFromFN.scala 51:22]
    node b_recoded = cat(_b_recoded_T_6, _b_recoded_T_7) @[recFNFromFN.scala 50:41]
    adder.io.subOp <= UInt<1>("h0") @[FPU.scala 24:20]
    adder.io.a <= a_recoded @[FPU.scala 25:16]
    adder.io.b <= b_recoded @[FPU.scala 26:16]
    adder.io.roundingMode <= UInt<3>("h0") @[FPU.scala 27:27]
    adder.io.detectTininess <= UInt<1>("h1") @[FPU.scala 28:29]
    node io_result_rawIn_exp = bits(adder.io.out, 31, 23) @[rawFloatFromRecFN.scala 51:21]
    node _io_result_rawIn_isZero_T = bits(io_result_rawIn_exp, 8, 6) @[rawFloatFromRecFN.scala 52:28]
    node io_result_rawIn_isZero = eq(_io_result_rawIn_isZero_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 52:53]
    node _io_result_rawIn_isSpecial_T = bits(io_result_rawIn_exp, 8, 7) @[rawFloatFromRecFN.scala 53:28]
    node io_result_rawIn_isSpecial = eq(_io_result_rawIn_isSpecial_T, UInt<2>("h3")) @[rawFloatFromRecFN.scala 53:53]
    wire io_result_rawIn : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>} @[rawFloatFromRecFN.scala 55:23]
    node _io_result_rawIn_out_isNaN_T = bits(io_result_rawIn_exp, 6, 6) @[rawFloatFromRecFN.scala 56:41]
    node _io_result_rawIn_out_isNaN_T_1 = and(io_result_rawIn_isSpecial, _io_result_rawIn_out_isNaN_T) @[rawFloatFromRecFN.scala 56:33]
    io_result_rawIn.isNaN <= _io_result_rawIn_out_isNaN_T_1 @[rawFloatFromRecFN.scala 56:20]
    node _io_result_rawIn_out_isInf_T = bits(io_result_rawIn_exp, 6, 6) @[rawFloatFromRecFN.scala 57:41]
    node _io_result_rawIn_out_isInf_T_1 = eq(_io_result_rawIn_out_isInf_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 57:36]
    node _io_result_rawIn_out_isInf_T_2 = and(io_result_rawIn_isSpecial, _io_result_rawIn_out_isInf_T_1) @[rawFloatFromRecFN.scala 57:33]
    io_result_rawIn.isInf <= _io_result_rawIn_out_isInf_T_2 @[rawFloatFromRecFN.scala 57:20]
    io_result_rawIn.isZero <= io_result_rawIn_isZero @[rawFloatFromRecFN.scala 58:20]
    node _io_result_rawIn_out_sign_T = bits(adder.io.out, 32, 32) @[rawFloatFromRecFN.scala 59:25]
    io_result_rawIn.sign <= _io_result_rawIn_out_sign_T @[rawFloatFromRecFN.scala 59:20]
    node _io_result_rawIn_out_sExp_T = cvt(io_result_rawIn_exp) @[rawFloatFromRecFN.scala 60:27]
    io_result_rawIn.sExp <= _io_result_rawIn_out_sExp_T @[rawFloatFromRecFN.scala 60:20]
    node _io_result_rawIn_out_sig_T = eq(io_result_rawIn_isZero, UInt<1>("h0")) @[rawFloatFromRecFN.scala 61:35]
    node _io_result_rawIn_out_sig_T_1 = cat(UInt<1>("h0"), _io_result_rawIn_out_sig_T) @[rawFloatFromRecFN.scala 61:32]
    node _io_result_rawIn_out_sig_T_2 = bits(adder.io.out, 22, 0) @[rawFloatFromRecFN.scala 61:49]
    node _io_result_rawIn_out_sig_T_3 = cat(_io_result_rawIn_out_sig_T_1, _io_result_rawIn_out_sig_T_2) @[rawFloatFromRecFN.scala 61:44]
    io_result_rawIn.sig <= _io_result_rawIn_out_sig_T_3 @[rawFloatFromRecFN.scala 61:20]
    node io_result_isSubnormal = lt(io_result_rawIn.sExp, asSInt(UInt<9>("h82"))) @[fNFromRecFN.scala 51:38]
    node _io_result_denormShiftDist_T = bits(io_result_rawIn.sExp, 4, 0) @[fNFromRecFN.scala 52:47]
    node _io_result_denormShiftDist_T_1 = sub(UInt<1>("h1"), _io_result_denormShiftDist_T) @[fNFromRecFN.scala 52:35]
    node io_result_denormShiftDist = tail(_io_result_denormShiftDist_T_1, 1) @[fNFromRecFN.scala 52:35]
    node _io_result_denormFract_T = shr(io_result_rawIn.sig, 1) @[fNFromRecFN.scala 53:38]
    node _io_result_denormFract_T_1 = dshr(_io_result_denormFract_T, io_result_denormShiftDist) @[fNFromRecFN.scala 53:42]
    node io_result_denormFract = bits(_io_result_denormFract_T_1, 22, 0) @[fNFromRecFN.scala 53:60]
    node _io_result_expOut_T = bits(io_result_rawIn.sExp, 7, 0) @[fNFromRecFN.scala 58:27]
    node _io_result_expOut_T_1 = sub(_io_result_expOut_T, UInt<8>("h81")) @[fNFromRecFN.scala 58:45]
    node _io_result_expOut_T_2 = tail(_io_result_expOut_T_1, 1) @[fNFromRecFN.scala 58:45]
    node _io_result_expOut_T_3 = mux(io_result_isSubnormal, UInt<1>("h0"), _io_result_expOut_T_2) @[fNFromRecFN.scala 56:16]
    node _io_result_expOut_T_4 = or(io_result_rawIn.isNaN, io_result_rawIn.isInf) @[fNFromRecFN.scala 60:44]
    node _io_result_expOut_T_5 = bits(_io_result_expOut_T_4, 0, 0) @[Bitwise.scala 77:15]
    node _io_result_expOut_T_6 = mux(_io_result_expOut_T_5, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 77:12]
    node io_result_expOut = or(_io_result_expOut_T_3, _io_result_expOut_T_6) @[fNFromRecFN.scala 60:15]
    node _io_result_fractOut_T = bits(io_result_rawIn.sig, 22, 0) @[fNFromRecFN.scala 64:48]
    node _io_result_fractOut_T_1 = mux(io_result_rawIn.isInf, UInt<1>("h0"), _io_result_fractOut_T) @[fNFromRecFN.scala 64:20]
    node io_result_fractOut = mux(io_result_isSubnormal, io_result_denormFract, _io_result_fractOut_T_1) @[fNFromRecFN.scala 62:16]
    node io_result_hi = cat(io_result_rawIn.sign, io_result_expOut) @[Cat.scala 33:92]
    node _io_result_T = cat(io_result_hi, io_result_fractOut) @[Cat.scala 33:92]
    io.result <= _io_result_T @[FPU.scala 31:15]

  module FP32RoPEcore :
    input clock : Clock
    input reset : Reset
    output io : { flip EN : UInt<1>, flip x : UInt<32>[2], flip sin : UInt<32>, flip cos : UInt<32>, xhat : UInt<32>[2], ENout : UInt<1>}

    wire _stage1Reg_WIRE : UInt<32>[4] @[RoPEModuleFP32.scala 95:36]
    _stage1Reg_WIRE[0] <= io.x[0] @[RoPEModuleFP32.scala 95:36]
    _stage1Reg_WIRE[1] <= io.x[1] @[RoPEModuleFP32.scala 95:36]
    _stage1Reg_WIRE[2] <= io.sin @[RoPEModuleFP32.scala 95:36]
    _stage1Reg_WIRE[3] <= io.cos @[RoPEModuleFP32.scala 95:36]
    reg stage1Reg : UInt<32>[4], clock with :
      reset => (UInt<1>("h0"), stage1Reg) @[RoPEModuleFP32.scala 95:28]
    stage1Reg <= _stage1Reg_WIRE @[RoPEModuleFP32.scala 95:28]
    wire _stage2Reg_WIRE : UInt<32>[4] @[RoPEModuleFP32.scala 96:36]
    _stage2Reg_WIRE[0] <= UInt<32>("h0") @[RoPEModuleFP32.scala 96:36]
    _stage2Reg_WIRE[1] <= UInt<32>("h0") @[RoPEModuleFP32.scala 96:36]
    _stage2Reg_WIRE[2] <= UInt<32>("h0") @[RoPEModuleFP32.scala 96:36]
    _stage2Reg_WIRE[3] <= UInt<32>("h0") @[RoPEModuleFP32.scala 96:36]
    reg stage2Reg : UInt<32>[4], clock with :
      reset => (UInt<1>("h0"), stage2Reg) @[RoPEModuleFP32.scala 96:28]
    stage2Reg <= _stage2Reg_WIRE @[RoPEModuleFP32.scala 96:28]
    wire _stage3Reg_WIRE : UInt<32>[2] @[RoPEModuleFP32.scala 97:36]
    _stage3Reg_WIRE[0] <= UInt<32>("h0") @[RoPEModuleFP32.scala 97:36]
    _stage3Reg_WIRE[1] <= UInt<32>("h0") @[RoPEModuleFP32.scala 97:36]
    reg stage3Reg : UInt<32>[2], clock with :
      reset => (reset, _stage3Reg_WIRE) @[RoPEModuleFP32.scala 97:28]
    wire _enReg_WIRE : UInt<1>[3] @[RoPEModuleFP32.scala 98:32]
    _enReg_WIRE[0] <= UInt<1>("h0") @[RoPEModuleFP32.scala 98:32]
    _enReg_WIRE[1] <= UInt<1>("h0") @[RoPEModuleFP32.scala 98:32]
    _enReg_WIRE[2] <= UInt<1>("h0") @[RoPEModuleFP32.scala 98:32]
    reg enReg : UInt<1>[3], clock with :
      reset => (reset, _enReg_WIRE) @[RoPEModuleFP32.scala 98:24]
    enReg[0] <= io.EN @[RoPEModuleFP32.scala 101:14]
    enReg[1] <= enReg[0] @[RoPEModuleFP32.scala 102:14]
    enReg[2] <= enReg[1] @[RoPEModuleFP32.scala 103:14]
    inst FP32Mult0 of FP32Multiplier_3 @[RoPEModuleFP32.scala 106:27]
    FP32Mult0.clock <= clock
    FP32Mult0.reset <= reset
    FP32Mult0.io.a <= stage1Reg[0] @[RoPEModuleFP32.scala 107:20]
    FP32Mult0.io.b <= stage1Reg[2] @[RoPEModuleFP32.scala 108:20]
    inst FP32Mult1 of FP32Multiplier_4 @[RoPEModuleFP32.scala 110:27]
    FP32Mult1.clock <= clock
    FP32Mult1.reset <= reset
    FP32Mult1.io.a <= stage1Reg[1] @[RoPEModuleFP32.scala 111:20]
    FP32Mult1.io.b <= stage1Reg[2] @[RoPEModuleFP32.scala 112:20]
    inst FP32Mult2 of FP32Multiplier_5 @[RoPEModuleFP32.scala 114:27]
    FP32Mult2.clock <= clock
    FP32Mult2.reset <= reset
    FP32Mult2.io.a <= stage1Reg[0] @[RoPEModuleFP32.scala 115:20]
    FP32Mult2.io.b <= stage1Reg[3] @[RoPEModuleFP32.scala 116:20]
    inst FP32Mult3 of FP32Multiplier_6 @[RoPEModuleFP32.scala 118:27]
    FP32Mult3.clock <= clock
    FP32Mult3.reset <= reset
    FP32Mult3.io.a <= stage1Reg[1] @[RoPEModuleFP32.scala 119:20]
    FP32Mult3.io.b <= stage1Reg[3] @[RoPEModuleFP32.scala 120:20]
    wire _WIRE : UInt<32>[4] @[RoPEModuleFP32.scala 123:25]
    _WIRE[0] <= FP32Mult0.io.result @[RoPEModuleFP32.scala 123:25]
    _WIRE[1] <= FP32Mult1.io.result @[RoPEModuleFP32.scala 123:25]
    _WIRE[2] <= FP32Mult2.io.result @[RoPEModuleFP32.scala 123:25]
    _WIRE[3] <= FP32Mult3.io.result @[RoPEModuleFP32.scala 123:25]
    stage2Reg <= _WIRE @[RoPEModuleFP32.scala 123:15]
    inst FP32Sub of FP32Sub_1 @[RoPEModuleFP32.scala 131:25]
    FP32Sub.clock <= clock
    FP32Sub.reset <= reset
    FP32Sub.io.a <= stage2Reg[2] @[RoPEModuleFP32.scala 132:18]
    FP32Sub.io.b <= stage2Reg[1] @[RoPEModuleFP32.scala 133:18]
    inst FP32add of FP32Adder @[RoPEModuleFP32.scala 135:25]
    FP32add.clock <= clock
    FP32add.reset <= reset
    FP32add.io.a <= stage2Reg[3] @[RoPEModuleFP32.scala 136:18]
    FP32add.io.b <= stage2Reg[0] @[RoPEModuleFP32.scala 137:18]
    wire _WIRE_1 : UInt<32>[2] @[RoPEModuleFP32.scala 139:25]
    _WIRE_1[0] <= FP32Sub.io.result @[RoPEModuleFP32.scala 139:25]
    _WIRE_1[1] <= FP32add.io.result @[RoPEModuleFP32.scala 139:25]
    stage3Reg <= _WIRE_1 @[RoPEModuleFP32.scala 139:15]
    node _io_xhat_0_T = mux(enReg[2], stage3Reg[0], UInt<1>("h0")) @[RoPEModuleFP32.scala 142:22]
    io.xhat[0] <= _io_xhat_0_T @[RoPEModuleFP32.scala 142:16]
    node _io_xhat_1_T = mux(enReg[2], stage3Reg[1], UInt<1>("h0")) @[RoPEModuleFP32.scala 143:22]
    io.xhat[1] <= _io_xhat_1_T @[RoPEModuleFP32.scala 143:16]
    io.ENout <= enReg[2] @[RoPEModuleFP32.scala 144:14]

  module FP32RoPEmodule :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip x : UInt<32>[2], flip EN : UInt<1>, flip m : UInt<32>, flip baseIndex : UInt<32>, flip TwoDivD : UInt<32>, xhat : UInt<32>[2], valid : UInt<1>}

    inst RadCacl of FP32radianCaclulator @[RoPEModuleFP32.scala 166:27]
    RadCacl.clock <= clock
    RadCacl.reset <= reset
    inst SinCosLut of SinCosLUT @[RoPEModuleFP32.scala 167:27]
    SinCosLut.clock <= clock
    SinCosLut.reset <= reset
    inst RoPEcore of FP32RoPEcore @[RoPEModuleFP32.scala 168:27]
    RoPEcore.clock <= clock
    RoPEcore.reset <= reset
    wire _stage1Reg_WIRE : UInt<32>[6] @[RoPEModuleFP32.scala 171:36]
    _stage1Reg_WIRE[0] <= UInt<32>("h0") @[RoPEModuleFP32.scala 171:36]
    _stage1Reg_WIRE[1] <= UInt<32>("h0") @[RoPEModuleFP32.scala 171:36]
    _stage1Reg_WIRE[2] <= UInt<32>("h0") @[RoPEModuleFP32.scala 171:36]
    _stage1Reg_WIRE[3] <= UInt<32>("h0") @[RoPEModuleFP32.scala 171:36]
    _stage1Reg_WIRE[4] <= UInt<32>("h0") @[RoPEModuleFP32.scala 171:36]
    _stage1Reg_WIRE[5] <= UInt<32>("h0") @[RoPEModuleFP32.scala 171:36]
    reg stage1Reg : UInt<32>[6], clock with :
      reset => (reset, _stage1Reg_WIRE) @[RoPEModuleFP32.scala 171:28]
    reg stage1EN : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[RoPEModuleFP32.scala 172:28]
    wire _stage2Reg_WIRE : UInt<32>[4] @[RoPEModuleFP32.scala 173:36]
    _stage2Reg_WIRE[0] <= UInt<32>("h0") @[RoPEModuleFP32.scala 173:36]
    _stage2Reg_WIRE[1] <= UInt<32>("h0") @[RoPEModuleFP32.scala 173:36]
    _stage2Reg_WIRE[2] <= UInt<32>("h0") @[RoPEModuleFP32.scala 173:36]
    _stage2Reg_WIRE[3] <= UInt<32>("h0") @[RoPEModuleFP32.scala 173:36]
    reg stage2Reg : UInt<32>[4], clock with :
      reset => (reset, _stage2Reg_WIRE) @[RoPEModuleFP32.scala 173:28]
    reg stage2EN : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[RoPEModuleFP32.scala 174:28]
    wire _stage3Reg_WIRE : UInt<32>[5] @[RoPEModuleFP32.scala 175:36]
    _stage3Reg_WIRE[0] <= UInt<32>("h0") @[RoPEModuleFP32.scala 175:36]
    _stage3Reg_WIRE[1] <= UInt<32>("h0") @[RoPEModuleFP32.scala 175:36]
    _stage3Reg_WIRE[2] <= UInt<32>("h0") @[RoPEModuleFP32.scala 175:36]
    _stage3Reg_WIRE[3] <= UInt<32>("h0") @[RoPEModuleFP32.scala 175:36]
    _stage3Reg_WIRE[4] <= UInt<32>("h0") @[RoPEModuleFP32.scala 175:36]
    reg stage3Reg : UInt<32>[5], clock with :
      reset => (reset, _stage3Reg_WIRE) @[RoPEModuleFP32.scala 175:28]
    reg stage3EN : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[RoPEModuleFP32.scala 176:28]
    when io.EN : @[RoPEModuleFP32.scala 179:17]
      stage1Reg[0] <= io.x[0] @[RoPEModuleFP32.scala 180:22]
      stage1Reg[1] <= io.x[1] @[RoPEModuleFP32.scala 181:22]
      stage1Reg[2] <= io.m @[RoPEModuleFP32.scala 182:22]
      stage1Reg[3] <= io.baseIndex @[RoPEModuleFP32.scala 183:22]
      stage1Reg[4] <= io.TwoDivD @[RoPEModuleFP32.scala 184:22]
      stage1EN <= UInt<1>("h1") @[RoPEModuleFP32.scala 185:22]
    else :
      stage1EN <= UInt<1>("h0") @[RoPEModuleFP32.scala 187:22]
    RadCacl.io.EN <= stage1EN @[RoPEModuleFP32.scala 191:29]
    RadCacl.io.x[0] <= stage1Reg[0] @[RoPEModuleFP32.scala 192:29]
    RadCacl.io.x[1] <= stage1Reg[1] @[RoPEModuleFP32.scala 193:29]
    RadCacl.io.m <= stage1Reg[2] @[RoPEModuleFP32.scala 194:29]
    RadCacl.io.baseIndex <= stage1Reg[3] @[RoPEModuleFP32.scala 195:29]
    RadCacl.io.TwoDivD <= stage1Reg[4] @[RoPEModuleFP32.scala 196:31]
    stage2Reg[0] <= RadCacl.io.xFWD[0] @[RoPEModuleFP32.scala 199:18]
    stage2Reg[1] <= RadCacl.io.xFWD[1] @[RoPEModuleFP32.scala 200:18]
    stage2Reg[2] <= RadCacl.io.out @[RoPEModuleFP32.scala 201:18]
    stage2EN <= RadCacl.io.ENout @[RoPEModuleFP32.scala 202:18]
    SinCosLut.io.EN <= stage2EN @[RoPEModuleFP32.scala 205:25]
    SinCosLut.io.angle <= stage2Reg[2] @[RoPEModuleFP32.scala 206:25]
    SinCosLut.io.x[0] <= stage2Reg[0] @[RoPEModuleFP32.scala 207:25]
    SinCosLut.io.x[1] <= stage2Reg[1] @[RoPEModuleFP32.scala 208:25]
    stage3Reg[0] <= SinCosLut.io.xFWD[0] @[RoPEModuleFP32.scala 211:18]
    stage3Reg[1] <= SinCosLut.io.xFWD[1] @[RoPEModuleFP32.scala 212:18]
    stage3Reg[2] <= SinCosLut.io.sinOut @[RoPEModuleFP32.scala 213:18]
    stage3Reg[3] <= SinCosLut.io.cosOut @[RoPEModuleFP32.scala 214:18]
    stage3EN <= SinCosLut.io.ENout @[RoPEModuleFP32.scala 215:18]
    RoPEcore.io.EN <= stage3EN @[RoPEModuleFP32.scala 218:25]
    RoPEcore.io.x[0] <= stage3Reg[0] @[RoPEModuleFP32.scala 219:25]
    RoPEcore.io.x[1] <= stage3Reg[1] @[RoPEModuleFP32.scala 220:25]
    RoPEcore.io.sin <= stage3Reg[2] @[RoPEModuleFP32.scala 221:25]
    RoPEcore.io.cos <= stage3Reg[3] @[RoPEModuleFP32.scala 222:25]
    wire _outputReg_WIRE : UInt<32>[2] @[RoPEModuleFP32.scala 225:36]
    _outputReg_WIRE[0] <= RoPEcore.io.xhat[0] @[RoPEModuleFP32.scala 225:36]
    _outputReg_WIRE[1] <= RoPEcore.io.xhat[1] @[RoPEModuleFP32.scala 225:36]
    reg outputReg : UInt<32>[2], clock with :
      reset => (UInt<1>("h0"), outputReg) @[RoPEModuleFP32.scala 225:28]
    outputReg <= _outputReg_WIRE @[RoPEModuleFP32.scala 225:28]
    reg validReg : UInt<1>, clock with :
      reset => (UInt<1>("h0"), validReg) @[RoPEModuleFP32.scala 226:28]
    validReg <= RoPEcore.io.ENout @[RoPEModuleFP32.scala 226:28]
    io.xhat[0] <= outputReg[0] @[RoPEModuleFP32.scala 228:16]
    io.xhat[1] <= outputReg[1] @[RoPEModuleFP32.scala 229:16]
    io.valid <= validReg @[RoPEModuleFP32.scala 230:16]

