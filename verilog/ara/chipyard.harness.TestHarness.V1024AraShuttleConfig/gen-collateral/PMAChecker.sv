// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module PMAChecker(	// @[generators/rocket-chip/src/main/scala/rocket/PMA.scala:18:7]
  input  [39:0] io_paddr,	// @[generators/rocket-chip/src/main/scala/rocket/PMA.scala:19:14]
  output        io_resp_cacheable,	// @[generators/rocket-chip/src/main/scala/rocket/PMA.scala:19:14]
  output        io_resp_r,	// @[generators/rocket-chip/src/main/scala/rocket/PMA.scala:19:14]
  output        io_resp_w,	// @[generators/rocket-chip/src/main/scala/rocket/PMA.scala:19:14]
  output        io_resp_pp,	// @[generators/rocket-chip/src/main/scala/rocket/PMA.scala:19:14]
  output        io_resp_al,	// @[generators/rocket-chip/src/main/scala/rocket/PMA.scala:19:14]
  output        io_resp_aa,	// @[generators/rocket-chip/src/main/scala/rocket/PMA.scala:19:14]
  output        io_resp_x,	// @[generators/rocket-chip/src/main/scala/rocket/PMA.scala:19:14]
  output        io_resp_eff	// @[generators/rocket-chip/src/main/scala/rocket/PMA.scala:19:14]
);

  wire [8:0]  _GEN = io_paddr[20:12] ^ 9'h100;	// @[generators/rocket-chip/src/main/scala/diplomacy/Parameters.scala:137:31]
  wire [9:0]  _GEN_0 = io_paddr[25:16] ^ 10'h200;	// @[generators/rocket-chip/src/main/scala/diplomacy/Parameters.scala:137:31]
  wire [13:0] _GEN_1 = io_paddr[25:12] ^ 14'h2010;	// @[generators/rocket-chip/src/main/scala/diplomacy/Parameters.scala:137:31]
  wire [11:0] _GEN_2 = io_paddr[27:16] ^ 12'h800;	// @[generators/rocket-chip/src/main/scala/diplomacy/Parameters.scala:137:31]
  wire [3:0]  _GEN_3 = io_paddr[31:28] ^ 4'h8;	// @[generators/rocket-chip/src/main/scala/diplomacy/Parameters.scala:137:31]
  wire        legal_address = io_paddr[39:12] == 28'h0 | {io_paddr[39:13], ~(io_paddr[12])} == 28'h0 | {io_paddr[39:14], ~(io_paddr[13:12])} == 28'h0 | {io_paddr[39:17], ~(io_paddr[16])} == 24'h0 | {io_paddr[39:21], _GEN} == 28'h0 | {io_paddr[39:21], io_paddr[20:12] ^ 9'h110} == 28'h0 | {io_paddr[39:26], _GEN_0} == 24'h0 | {io_paddr[39:26], _GEN_1} == 28'h0 | {io_paddr[39:28], _GEN_2} == 24'h0 | {io_paddr[39:28], ~(io_paddr[27:26])} == 14'h0 | {io_paddr[39:29], io_paddr[28:12] ^ 17'h10020} == 28'h0 | {io_paddr[39:32], _GEN_3} == 12'h0;	// @[generators/rocket-chip/src/main/scala/diplomacy/Parameters.scala:137:{31,41,46,59}, generators/rocket-chip/src/main/scala/rocket/PMA.scala:36:58]
  wire [4:0]  _GEN_4 = {io_paddr[31], io_paddr[28:27], io_paddr[20], io_paddr[16]};	// @[generators/rocket-chip/src/main/scala/diplomacy/Parameters.scala:137:{31,41,46}]
  wire [5:0]  _GEN_5 = {io_paddr[31], io_paddr[28:27], io_paddr[25], _GEN[8], io_paddr[12]};	// @[generators/rocket-chip/src/main/scala/diplomacy/Parameters.scala:137:{31,41,46}]
  wire [6:0]  _GEN_6 = {io_paddr[31], io_paddr[28:27], _GEN_1[13], io_paddr[20], _GEN_1[4], io_paddr[12]};	// @[generators/rocket-chip/src/main/scala/diplomacy/Parameters.scala:137:{31,41,46}]
  wire [2:0]  _GEN_7 = {io_paddr[31], io_paddr[28], _GEN_2[11]};	// @[generators/rocket-chip/src/main/scala/diplomacy/Parameters.scala:137:{31,41,46}]
  wire [5:0]  _GEN_8 = {io_paddr[31], io_paddr[28], _GEN_2[11], io_paddr[25], io_paddr[20], io_paddr[16]};	// @[generators/rocket-chip/src/main/scala/diplomacy/Parameters.scala:137:{31,41,46}]
  wire [3:0]  _GEN_9 = io_paddr[28:25] ^ 4'h8;	// @[generators/rocket-chip/src/main/scala/diplomacy/Parameters.scala:137:31]
  wire [6:0]  _GEN_10 = {io_paddr[31], _GEN_9[3:2], io_paddr[25], io_paddr[20], io_paddr[16], io_paddr[12]};	// @[generators/rocket-chip/src/main/scala/diplomacy/Parameters.scala:137:{31,41,46}]
  wire [1:0]  _GEN_11 = {_GEN_3[3], io_paddr[28]};	// @[generators/rocket-chip/src/main/scala/diplomacy/Parameters.scala:137:{31,41,46}]
  assign io_resp_cacheable = legal_address & ({io_paddr[31], _GEN_2[11:10], io_paddr[16]} == 4'h0 | ~(_GEN_3[3]));	// @[generators/rocket-chip/src/main/scala/diplomacy/Parameters.scala:137:{31,41,46,59}, generators/rocket-chip/src/main/scala/rocket/PMA.scala:18:7, :36:58, :39:19, generators/rocket-chip/src/main/scala/tilelink/Parameters.scala:629:89]
  assign io_resp_r = legal_address;	// @[generators/rocket-chip/src/main/scala/rocket/PMA.scala:18:7, :36:58]
  assign io_resp_w = legal_address & (~(|_GEN_4) | ~(|_GEN_5) | ~(|_GEN_6) | ~(|_GEN_7) | ~(|_GEN_8) | ~(|_GEN_10) | ~(|_GEN_11));	// @[generators/rocket-chip/src/main/scala/diplomacy/Parameters.scala:137:{41,46,59}, generators/rocket-chip/src/main/scala/rocket/PMA.scala:18:7, :36:58, :39:19, generators/rocket-chip/src/main/scala/tilelink/Parameters.scala:629:89]
  assign io_resp_pp = legal_address & (~(|_GEN_4) | ~(|_GEN_5) | ~(|_GEN_6) | ~(|_GEN_7) | ~(|_GEN_8) | ~(|_GEN_10) | ~(|_GEN_11));	// @[generators/rocket-chip/src/main/scala/diplomacy/Parameters.scala:137:{41,46,59}, generators/rocket-chip/src/main/scala/rocket/PMA.scala:18:7, :36:58, :39:19, generators/rocket-chip/src/main/scala/tilelink/Parameters.scala:629:89]
  assign io_resp_al = legal_address & (~(|_GEN_4) | ~(|_GEN_5) | ~(|_GEN_6) | ~(|_GEN_7) | ~(|_GEN_8) | ~(|_GEN_10) | ~(|_GEN_11));	// @[generators/rocket-chip/src/main/scala/diplomacy/Parameters.scala:137:{41,46,59}, generators/rocket-chip/src/main/scala/rocket/PMA.scala:18:7, :36:58, :39:19, generators/rocket-chip/src/main/scala/tilelink/Parameters.scala:629:89]
  assign io_resp_aa = legal_address & (~(|_GEN_4) | ~(|_GEN_5) | ~(|_GEN_6) | ~(|_GEN_7) | ~(|_GEN_8) | ~(|_GEN_10) | ~(|_GEN_11));	// @[generators/rocket-chip/src/main/scala/diplomacy/Parameters.scala:137:{41,46,59}, generators/rocket-chip/src/main/scala/rocket/PMA.scala:18:7, :36:58, :39:19, generators/rocket-chip/src/main/scala/tilelink/Parameters.scala:629:89]
  assign io_resp_x = legal_address & ({io_paddr[31], io_paddr[28:25], io_paddr[20], io_paddr[16], io_paddr[13:12]} == 9'h0 | {io_paddr[31], io_paddr[28:25], io_paddr[20], io_paddr[16], ~(io_paddr[13:12])} == 9'h0 | {io_paddr[31], io_paddr[28:25], io_paddr[20], ~(io_paddr[16])} == 7'h0 | {io_paddr[31], io_paddr[28], _GEN_2[11:9], io_paddr[20], io_paddr[16]} == 7'h0 | ~(|_GEN_11));	// @[generators/rocket-chip/src/main/scala/diplomacy/Parameters.scala:137:{31,41,46,59}, generators/rocket-chip/src/main/scala/rocket/PMA.scala:18:7, :36:58, :39:19, generators/rocket-chip/src/main/scala/tilelink/Parameters.scala:629:89]
  assign io_resp_eff = legal_address & ({io_paddr[31], io_paddr[28:25], io_paddr[20], io_paddr[16], io_paddr[13]} == 8'h0 | {io_paddr[31], io_paddr[28:25], _GEN[8], io_paddr[13:12]} == 8'h0 | {io_paddr[31], io_paddr[28:26], _GEN_0[9], io_paddr[20], io_paddr[16]} == 7'h0 | {io_paddr[31], io_paddr[28:26], _GEN_1[13], io_paddr[20], _GEN_1[4], io_paddr[13:12]} == 9'h0 | {io_paddr[31], io_paddr[28], ~(io_paddr[27:26])} == 4'h0 | {io_paddr[31], _GEN_9, io_paddr[20], io_paddr[16], io_paddr[13:12]} == 9'h0);	// @[generators/rocket-chip/src/main/scala/diplomacy/Parameters.scala:137:{31,41,46,59}, generators/rocket-chip/src/main/scala/rocket/PMA.scala:18:7, :36:58, :39:19, generators/rocket-chip/src/main/scala/tilelink/Parameters.scala:629:89]
endmodule

