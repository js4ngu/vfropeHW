// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module ShiftBlock_2(	// @[generators/saturn/src/main/scala/exu/int/ShiftPipe.scala:12:7]
  input  [31:0] io_in,	// @[generators/saturn/src/main/scala/exu/int/ShiftPipe.scala:13:14]
  input  [5:0]  io_shamt,	// @[generators/saturn/src/main/scala/exu/int/ShiftPipe.scala:13:14]
  input         io_shl,	// @[generators/saturn/src/main/scala/exu/int/ShiftPipe.scala:13:14]
  input         io_sign,	// @[generators/saturn/src/main/scala/exu/int/ShiftPipe.scala:13:14]
  input  [1:0]  io_rm,	// @[generators/saturn/src/main/scala/exu/int/ShiftPipe.scala:13:14]
  output [31:0] io_out,	// @[generators/saturn/src/main/scala/exu/int/ShiftPipe.scala:13:14]
  output        io_round	// @[generators/saturn/src/main/scala/exu/int/ShiftPipe.scala:13:14]
);

  wire [7:0]  _GEN = {{io_in[11:8], io_in[15:14]} & 6'h33, 2'h0} | {io_in[15:12], io_in[19:16]} & 8'h33;	// @[generators/saturn/src/main/scala/exu/int/ShiftPipe.scala:23:25]
  wire [18:0] _GEN_0 = {io_in[5:4], io_in[7:6], io_in[9:8], _GEN, io_in[19:18], io_in[21:20], io_in[23]} & 19'h55555;	// @[generators/saturn/src/main/scala/exu/int/ShiftPipe.scala:23:25]
  wire [33:0] _full_shifted_T_53 = $signed($signed({io_shl ? {1'h0, io_in[0], io_in[1], io_in[2], io_in[3], io_in[4], _GEN_0[18:15] | {io_in[7:6], io_in[9:8]} & 4'h5, _GEN_0[14:7] | _GEN & 8'h55, _GEN[1], _GEN_0[5] | io_in[18], io_in[19], io_in[20], {_GEN_0[2:0], 1'h0} | {io_in[23:22], io_in[25:24]} & 4'h5, io_in[25], io_in[26], io_in[27], io_in[28], io_in[29], io_in[30], io_in[31]} : {io_sign, io_in}, 1'h0}) >>> io_shamt);	// @[generators/saturn/src/main/scala/exu/int/ShiftPipe.scala:22:26, :23:{8,25}, :24:{8,42}]
  wire [7:0]  _GEN_1 = {{_full_shifted_T_53[12:9], _full_shifted_T_53[16:15]} & 6'h33, 2'h0} | {_full_shifted_T_53[16:13], _full_shifted_T_53[20:17]} & 8'h33;	// @[generators/saturn/src/main/scala/exu/int/ShiftPipe.scala:23:25, :24:{42,54}, :26:29, :28:32]
  wire [18:0] _GEN_2 = {_full_shifted_T_53[6:5], _full_shifted_T_53[8:7], _full_shifted_T_53[10:9], _GEN_1, _full_shifted_T_53[20:19], _full_shifted_T_53[22:21], _full_shifted_T_53[24]} & 19'h55555;	// @[generators/saturn/src/main/scala/exu/int/ShiftPipe.scala:23:25, :24:42, :28:32]
  wire [63:0] _io_round_T_2 = 64'h1 << io_shamt;	// @[generators/saturn/src/main/scala/exu/int/ShiftPipe.scala:30:25]
  wire [32:0] _io_round_T_3 = _io_round_T_2[32:0] - 33'h1;	// @[generators/saturn/src/main/scala/exu/int/ShiftPipe.scala:30:{25,38}]
  wire [31:0] _io_round_T_7 = io_in & _io_round_T_3[32:1];	// @[generators/saturn/src/main/scala/exu/int/ShiftPipe.scala:30:{16,38,45,50}]
  assign io_out = io_shl ? {_full_shifted_T_53[1], _full_shifted_T_53[2], _full_shifted_T_53[3], _full_shifted_T_53[4], _full_shifted_T_53[5], _GEN_2[18:15] | {_full_shifted_T_53[8:7], _full_shifted_T_53[10:9]} & 4'h5, _GEN_2[14:7] | _GEN_1 & 8'h55, _GEN_1[1], _GEN_2[5] | _full_shifted_T_53[19], _full_shifted_T_53[20], _full_shifted_T_53[21], {_GEN_2[2:0], 1'h0} | {_full_shifted_T_53[24:23], _full_shifted_T_53[26:25]} & 4'h5, _full_shifted_T_53[26], _full_shifted_T_53[27], _full_shifted_T_53[28], _full_shifted_T_53[29], _full_shifted_T_53[30], _full_shifted_T_53[31], _full_shifted_T_53[32]} : _full_shifted_T_53[32:1];	// @[generators/saturn/src/main/scala/exu/int/ShiftPipe.scala:12:7, :23:{8,25}, :24:{42,54}, :26:29, :28:{16,32}]
  assign io_round = (&io_rm) ? ~(_full_shifted_T_53[1]) & (|{_full_shifted_T_53[0], _io_round_T_7}) : io_rm != 2'h2 & (io_rm != 2'h1 | (|_io_round_T_7) | _full_shifted_T_53[1]) & _full_shifted_T_53[0];	// @[generators/saturn/src/main/scala/exu/Rounding.scala:8:106, :10:35, :12:{14,19,25,58}, generators/saturn/src/main/scala/exu/int/ShiftPipe.scala:12:7, :24:{42,54}, :26:29, :29:{47,64}, :30:16]
endmodule

