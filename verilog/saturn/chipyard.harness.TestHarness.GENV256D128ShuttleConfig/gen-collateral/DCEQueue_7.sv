// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module DCEQueue_7(	// @[generators/saturn/src/main/scala/common/DCEQueue.scala:12:7]
  input          clock,	// @[generators/saturn/src/main/scala/common/DCEQueue.scala:12:7]
  input          reset,	// @[generators/saturn/src/main/scala/common/DCEQueue.scala:12:7]
  output         io_enq_ready,	// @[generators/saturn/src/main/scala/common/DCEQueue.scala:20:14]
  input          io_enq_valid,	// @[generators/saturn/src/main/scala/common/DCEQueue.scala:20:14]
  input  [39:0]  io_enq_bits_addr,	// @[generators/saturn/src/main/scala/common/DCEQueue.scala:20:14]
  input  [127:0] io_enq_bits_data,	// @[generators/saturn/src/main/scala/common/DCEQueue.scala:20:14]
  input  [15:0]  io_enq_bits_mask,	// @[generators/saturn/src/main/scala/common/DCEQueue.scala:20:14]
  input  [3:0]   io_enq_bits_tag,	// @[generators/saturn/src/main/scala/common/DCEQueue.scala:20:14]
  input          io_deq_ready,	// @[generators/saturn/src/main/scala/common/DCEQueue.scala:20:14]
  output         io_deq_valid,	// @[generators/saturn/src/main/scala/common/DCEQueue.scala:20:14]
  output [39:0]  io_deq_bits_addr,	// @[generators/saturn/src/main/scala/common/DCEQueue.scala:20:14]
  output [127:0] io_deq_bits_data,	// @[generators/saturn/src/main/scala/common/DCEQueue.scala:20:14]
  output [15:0]  io_deq_bits_mask,	// @[generators/saturn/src/main/scala/common/DCEQueue.scala:20:14]
  output [3:0]   io_deq_bits_tag	// @[generators/saturn/src/main/scala/common/DCEQueue.scala:20:14]
);

  reg  [39:0]  ram_0_addr;	// @[generators/saturn/src/main/scala/common/DCEQueue.scala:24:16]
  reg  [127:0] ram_0_data;	// @[generators/saturn/src/main/scala/common/DCEQueue.scala:24:16]
  reg  [15:0]  ram_0_mask;	// @[generators/saturn/src/main/scala/common/DCEQueue.scala:24:16]
  reg  [3:0]   ram_0_tag;	// @[generators/saturn/src/main/scala/common/DCEQueue.scala:24:16]
  reg  [39:0]  ram_1_addr;	// @[generators/saturn/src/main/scala/common/DCEQueue.scala:24:16]
  reg  [127:0] ram_1_data;	// @[generators/saturn/src/main/scala/common/DCEQueue.scala:24:16]
  reg  [15:0]  ram_1_mask;	// @[generators/saturn/src/main/scala/common/DCEQueue.scala:24:16]
  reg  [3:0]   ram_1_tag;	// @[generators/saturn/src/main/scala/common/DCEQueue.scala:24:16]
  reg          wrap_1;	// @[src/main/scala/chisel3/util/Counter.scala:61:40]
  reg          wrap;	// @[src/main/scala/chisel3/util/Counter.scala:61:40]
  reg          maybe_full;	// @[generators/saturn/src/main/scala/common/DCEQueue.scala:27:27]
  wire         ptr_match = wrap_1 == wrap;	// @[generators/saturn/src/main/scala/common/DCEQueue.scala:28:33, src/main/scala/chisel3/util/Counter.scala:61:40]
  wire         empty = ptr_match & ~maybe_full;	// @[generators/saturn/src/main/scala/common/DCEQueue.scala:27:27, :28:33, :29:{25,28}]
  wire         full = ptr_match & maybe_full;	// @[generators/saturn/src/main/scala/common/DCEQueue.scala:27:27, :28:33, :30:24]
  wire         do_deq = io_deq_ready & ~empty;	// @[generators/saturn/src/main/scala/common/DCEQueue.scala:29:25, :54:19, src/main/scala/chisel3/util/Decoupled.scala:51:35]
  wire         do_enq = ~full & io_enq_valid;	// @[generators/saturn/src/main/scala/common/DCEQueue.scala:30:24, :55:19, src/main/scala/chisel3/util/Decoupled.scala:51:35]
  always @(posedge clock) begin	// @[generators/saturn/src/main/scala/common/DCEQueue.scala:12:7]
    if (do_enq & ~wrap_1) begin	// @[generators/saturn/src/main/scala/common/DCEQueue.scala:24:16, :44:16, :45:24, src/main/scala/chisel3/util/Counter.scala:61:40, src/main/scala/chisel3/util/Decoupled.scala:51:35]
      ram_0_addr <= io_enq_bits_addr;	// @[generators/saturn/src/main/scala/common/DCEQueue.scala:24:16]
      ram_0_data <= io_enq_bits_data;	// @[generators/saturn/src/main/scala/common/DCEQueue.scala:24:16]
      ram_0_mask <= io_enq_bits_mask;	// @[generators/saturn/src/main/scala/common/DCEQueue.scala:24:16]
      ram_0_tag <= io_enq_bits_tag;	// @[generators/saturn/src/main/scala/common/DCEQueue.scala:24:16]
    end
    if (do_enq & wrap_1) begin	// @[generators/saturn/src/main/scala/common/DCEQueue.scala:24:16, :44:16, :45:24, src/main/scala/chisel3/util/Counter.scala:61:40, src/main/scala/chisel3/util/Decoupled.scala:51:35]
      ram_1_addr <= io_enq_bits_addr;	// @[generators/saturn/src/main/scala/common/DCEQueue.scala:24:16]
      ram_1_data <= io_enq_bits_data;	// @[generators/saturn/src/main/scala/common/DCEQueue.scala:24:16]
      ram_1_mask <= io_enq_bits_mask;	// @[generators/saturn/src/main/scala/common/DCEQueue.scala:24:16]
      ram_1_tag <= io_enq_bits_tag;	// @[generators/saturn/src/main/scala/common/DCEQueue.scala:24:16]
    end
    if (reset) begin	// @[generators/saturn/src/main/scala/common/DCEQueue.scala:12:7]
      wrap_1 <= 1'h0;	// @[generators/saturn/src/main/scala/common/DCEQueue.scala:23:45, src/main/scala/chisel3/util/Counter.scala:61:40]
      wrap <= 1'h0;	// @[generators/saturn/src/main/scala/common/DCEQueue.scala:23:45, src/main/scala/chisel3/util/Counter.scala:61:40]
      maybe_full <= 1'h0;	// @[generators/saturn/src/main/scala/common/DCEQueue.scala:23:45, :27:27]
    end
    else begin	// @[generators/saturn/src/main/scala/common/DCEQueue.scala:12:7]
      if (do_enq)	// @[src/main/scala/chisel3/util/Decoupled.scala:51:35]
        wrap_1 <= wrap_1 - 1'h1;	// @[src/main/scala/chisel3/util/Counter.scala:61:40, :77:24]
      if (do_deq)	// @[src/main/scala/chisel3/util/Decoupled.scala:51:35]
        wrap <= wrap - 1'h1;	// @[src/main/scala/chisel3/util/Counter.scala:61:40, :77:24]
      if (do_enq != do_deq)	// @[generators/saturn/src/main/scala/common/DCEQueue.scala:27:27, :50:{15,27}, :51:16, src/main/scala/chisel3/util/Decoupled.scala:51:35]
        maybe_full <= do_enq;	// @[generators/saturn/src/main/scala/common/DCEQueue.scala:27:27, src/main/scala/chisel3/util/Decoupled.scala:51:35]
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// @[generators/saturn/src/main/scala/common/DCEQueue.scala:12:7]
    `ifdef FIRRTL_BEFORE_INITIAL	// @[generators/saturn/src/main/scala/common/DCEQueue.scala:12:7]
      `FIRRTL_BEFORE_INITIAL	// @[generators/saturn/src/main/scala/common/DCEQueue.scala:12:7]
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:11];	// @[generators/saturn/src/main/scala/common/DCEQueue.scala:12:7]
    initial begin	// @[generators/saturn/src/main/scala/common/DCEQueue.scala:12:7]
      `ifdef INIT_RANDOM_PROLOG_	// @[generators/saturn/src/main/scala/common/DCEQueue.scala:12:7]
        `INIT_RANDOM_PROLOG_	// @[generators/saturn/src/main/scala/common/DCEQueue.scala:12:7]
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// @[generators/saturn/src/main/scala/common/DCEQueue.scala:12:7]
        for (logic [3:0] i = 4'h0; i < 4'hC; i += 4'h1) begin
          _RANDOM[i] = `RANDOM;	// @[generators/saturn/src/main/scala/common/DCEQueue.scala:12:7]
        end	// @[generators/saturn/src/main/scala/common/DCEQueue.scala:12:7]
        ram_0_addr = {_RANDOM[4'h0][31:2], _RANDOM[4'h1][9:0]};	// @[generators/saturn/src/main/scala/common/DCEQueue.scala:12:7, :24:16]
        ram_0_data = {_RANDOM[4'h1][31:10], _RANDOM[4'h2], _RANDOM[4'h3], _RANDOM[4'h4], _RANDOM[4'h5][9:0]};	// @[generators/saturn/src/main/scala/common/DCEQueue.scala:12:7, :24:16]
        ram_0_mask = _RANDOM[4'h5][25:10];	// @[generators/saturn/src/main/scala/common/DCEQueue.scala:12:7, :24:16]
        ram_0_tag = _RANDOM[4'h5][29:26];	// @[generators/saturn/src/main/scala/common/DCEQueue.scala:12:7, :24:16]
        ram_1_addr = {_RANDOM[4'h5][31], _RANDOM[4'h6], _RANDOM[4'h7][6:0]};	// @[generators/saturn/src/main/scala/common/DCEQueue.scala:12:7, :24:16]
        ram_1_data = {_RANDOM[4'h7][31:7], _RANDOM[4'h8], _RANDOM[4'h9], _RANDOM[4'hA], _RANDOM[4'hB][6:0]};	// @[generators/saturn/src/main/scala/common/DCEQueue.scala:12:7, :24:16]
        ram_1_mask = _RANDOM[4'hB][22:7];	// @[generators/saturn/src/main/scala/common/DCEQueue.scala:12:7, :24:16]
        ram_1_tag = _RANDOM[4'hB][26:23];	// @[generators/saturn/src/main/scala/common/DCEQueue.scala:12:7, :24:16]
        wrap_1 = _RANDOM[4'hB][28];	// @[generators/saturn/src/main/scala/common/DCEQueue.scala:12:7, :24:16, src/main/scala/chisel3/util/Counter.scala:61:40]
        wrap = _RANDOM[4'hB][29];	// @[generators/saturn/src/main/scala/common/DCEQueue.scala:12:7, :24:16, src/main/scala/chisel3/util/Counter.scala:61:40]
        maybe_full = _RANDOM[4'hB][30];	// @[generators/saturn/src/main/scala/common/DCEQueue.scala:12:7, :24:16, :27:27]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// @[generators/saturn/src/main/scala/common/DCEQueue.scala:12:7]
      `FIRRTL_AFTER_INITIAL	// @[generators/saturn/src/main/scala/common/DCEQueue.scala:12:7]
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_enq_ready = ~full;	// @[generators/saturn/src/main/scala/common/DCEQueue.scala:12:7, :30:24, :55:19]
  assign io_deq_valid = ~empty;	// @[generators/saturn/src/main/scala/common/DCEQueue.scala:12:7, :29:25, :54:19]
  assign io_deq_bits_addr = wrap ? ram_1_addr : ram_0_addr;	// @[generators/saturn/src/main/scala/common/DCEQueue.scala:12:7, :24:16, :57:15, src/main/scala/chisel3/util/Counter.scala:61:40]
  assign io_deq_bits_data = wrap ? ram_1_data : ram_0_data;	// @[generators/saturn/src/main/scala/common/DCEQueue.scala:12:7, :24:16, :57:15, src/main/scala/chisel3/util/Counter.scala:61:40]
  assign io_deq_bits_mask = wrap ? ram_1_mask : ram_0_mask;	// @[generators/saturn/src/main/scala/common/DCEQueue.scala:12:7, :24:16, :57:15, src/main/scala/chisel3/util/Counter.scala:61:40]
  assign io_deq_bits_tag = wrap ? ram_1_tag : ram_0_tag;	// @[generators/saturn/src/main/scala/common/DCEQueue.scala:12:7, :24:16, :57:15, src/main/scala/chisel3/util/Counter.scala:61:40]
endmodule

