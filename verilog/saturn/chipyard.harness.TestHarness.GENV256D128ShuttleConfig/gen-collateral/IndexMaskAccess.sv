// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module IndexMaskAccess(	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:14:7]
  input         clock,	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:14:7]
  input         reset,	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:14:7]
  input         io_in,	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:15:14]
  input  [31:0] io_inst_bits,	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:15:14]
  input  [8:0]  io_inst_vconfig_vl,	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:15:14]
  input  [1:0]  io_inst_mop,	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:15:14]
  input         io_index_access_ready,	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:15:14]
  output        io_index_access_valid,	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:15:14]
  output [4:0]  io_index_access_vrs,	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:15:14]
  output [8:0]  io_index_access_eidx,	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:15:14]
  output [1:0]  io_index_access_eew,	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:15:14]
  input  [63:0] io_index_access_idx,	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:15:14]
  input         io_mask_access_ready,	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:15:14]
  output        io_mask_access_valid,	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:15:14]
  output [8:0]  io_mask_access_eidx,	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:15:14]
  input         io_mask_access_mask,	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:15:14]
  output        io_access_ready,	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:15:14]
  input  [7:0]  io_access_eidx,	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:15:14]
  output [63:0] io_access_index,	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:15:14]
  output        io_access_mask,	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:15:14]
  input         io_pop_valid,	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:15:14]
  input  [7:0]  io_pop_bits,	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:15:14]
  input         io_flush	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:15:14]
);

  reg              valid;	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:33:22]
  reg  [7:0]       eidx;	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:34:17]
  reg              valids_0;	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:36:19]
  reg              valids_1;	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:36:19]
  reg              valids_2;	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:36:19]
  reg              valids_3;	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:36:19]
  reg  [63:0]      indices_0;	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:37:20]
  reg  [63:0]      indices_1;	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:37:20]
  reg  [63:0]      indices_2;	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:37:20]
  reg  [63:0]      indices_3;	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:37:20]
  reg              masks_0;	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:38:18]
  reg              masks_1;	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:38:18]
  reg              masks_2;	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:38:18]
  reg              masks_3;	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:38:18]
  `ifndef SYNTHESIS	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:40:11]
    always @(posedge clock) begin	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:40:11]
      if (io_in & ~reset & valid) begin	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:33:22, :40:11]
        if (`ASSERT_VERBOSE_COND_)	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:40:11]
          $error("Assertion failed\n    at IterativeTrapCheck.scala:40 assert(!valid)\n");	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:40:11]
        if (`STOP_COND_)	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:40:11]
          $fatal;	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:40:11]
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  wire             needs_index = (&io_inst_mop) | io_inst_mop == 2'h1;	// @[generators/rocket-chip/src/main/scala/util/package.scala:16:47, :81:59]
  wire [3:0]       _GEN = {{valids_3}, {valids_2}, {valids_1}, {valids_0}};	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:36:19, :52:52]
  wire             _GEN_0 = _GEN[eidx[1:0]];	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:34:17, :52:{52,64}]
  wire [8:0]       _GEN_1 = {1'h0, eidx};	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:33:22, :34:17, :56:24]
  wire [3:0][63:0] _GEN_2 = {{indices_3}, {indices_2}, {indices_1}, {indices_0}};	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:37:20, :72:19]
  wire [3:0]       _GEN_3 = {{masks_3}, {masks_2}, {masks_1}, {masks_0}};	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:38:18, :73:19]
  wire             _GEN_4 = valid & (io_index_access_ready | ~needs_index) & (io_mask_access_ready | io_inst_bits[25]) & ~_GEN_0;	// @[generators/rocket-chip/src/main/scala/util/package.scala:81:59, generators/saturn/src/main/scala/common/Bundles.scala:60:16, generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:33:22, :49:{43,46}, :50:41, :52:52, :60:{44,47}]
  wire [8:0]       next_eidx = _GEN_1 + 9'h1;	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:56:24, :61:26]
  wire             _GEN_5 = _GEN_4 & eidx[1:0] == 2'h0;	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:34:17, :39:16, :52:64, :60:{44,67}, :66:23]
  wire             _GEN_6 = _GEN_4 & eidx[1:0] == 2'h1;	// @[generators/rocket-chip/src/main/scala/util/package.scala:16:47, generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:34:17, :39:16, :52:64, :60:{44,67}, :66:23]
  wire             _GEN_7 = _GEN_4 & eidx[1:0] == 2'h2;	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:34:17, :39:16, :52:64, :60:{44,67}, :66:23]
  wire             _GEN_8 = _GEN_4 & (&(eidx[1:0]));	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:34:17, :39:16, :52:64, :60:{44,67}, :66:23]
  always @(posedge clock) begin	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:14:7]
    if (reset)	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:14:7]
      valid <= 1'h0;	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:33:22]
    else	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:14:7]
      valid <= ~(io_flush | _GEN_4 & next_eidx == io_inst_vconfig_vl) & (io_in | valid);	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:33:22, :39:16, :41:11, :60:{44,67}, :61:26, :63:{21,45}, :64:13, :78:19, :79:11]
    if (_GEN_4)	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:60:44]
      eidx <= next_eidx[7:0];	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:34:17, :61:26, :62:18]
    else if (io_in)	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:15:14]
      eidx <= 8'h0;	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:34:17, :42:10]
    valids_0 <= ~(io_pop_valid & io_pop_bits[1:0] == 2'h0) & (_GEN_5 | ~io_in & valids_0);	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:36:19, :39:16, :43:22, :60:67, :66:23, :75:22, :76:{23,30}]
    valids_1 <= ~(io_pop_valid & io_pop_bits[1:0] == 2'h1) & (_GEN_6 | ~io_in & valids_1);	// @[generators/rocket-chip/src/main/scala/util/package.scala:16:47, generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:36:19, :39:16, :43:22, :60:67, :66:23, :75:22, :76:{23,30}]
    valids_2 <= ~(io_pop_valid & io_pop_bits[1:0] == 2'h2) & (_GEN_7 | ~io_in & valids_2);	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:36:19, :39:16, :43:22, :60:67, :66:23, :75:22, :76:{23,30}]
    valids_3 <= ~(io_pop_valid & (&(io_pop_bits[1:0]))) & (_GEN_8 | ~io_in & valids_3);	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:36:19, :39:16, :43:22, :60:67, :66:23, :75:22, :76:{23,30}]
    if (_GEN_5) begin	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:39:16, :60:67, :66:23]
      indices_0 <= io_index_access_idx;	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:37:20]
      masks_0 <= io_mask_access_mask;	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:38:18]
    end
    if (_GEN_6) begin	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:39:16, :60:67, :66:23]
      indices_1 <= io_index_access_idx;	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:37:20]
      masks_1 <= io_mask_access_mask;	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:38:18]
    end
    if (_GEN_7) begin	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:39:16, :60:67, :66:23]
      indices_2 <= io_index_access_idx;	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:37:20]
      masks_2 <= io_mask_access_mask;	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:38:18]
    end
    if (_GEN_8) begin	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:39:16, :60:67, :66:23]
      indices_3 <= io_index_access_idx;	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:37:20]
      masks_3 <= io_mask_access_mask;	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:38:18]
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:14:7]
    `ifdef FIRRTL_BEFORE_INITIAL	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:14:7]
      `FIRRTL_BEFORE_INITIAL	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:14:7]
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:8];	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:14:7]
    initial begin	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:14:7]
      `ifdef INIT_RANDOM_PROLOG_	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:14:7]
        `INIT_RANDOM_PROLOG_	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:14:7]
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:14:7]
        for (logic [3:0] i = 4'h0; i < 4'h9; i += 4'h1) begin
          _RANDOM[i] = `RANDOM;	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:14:7]
        end	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:14:7]
        valid = _RANDOM[4'h0][0];	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:14:7, :33:22]
        eidx = _RANDOM[4'h0][8:1];	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:14:7, :33:22, :34:17]
        valids_0 = _RANDOM[4'h0][9];	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:14:7, :33:22, :36:19]
        valids_1 = _RANDOM[4'h0][10];	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:14:7, :33:22, :36:19]
        valids_2 = _RANDOM[4'h0][11];	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:14:7, :33:22, :36:19]
        valids_3 = _RANDOM[4'h0][12];	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:14:7, :33:22, :36:19]
        indices_0 = {_RANDOM[4'h0][31:13], _RANDOM[4'h1], _RANDOM[4'h2][12:0]};	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:14:7, :33:22, :37:20]
        indices_1 = {_RANDOM[4'h2][31:13], _RANDOM[4'h3], _RANDOM[4'h4][12:0]};	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:14:7, :37:20]
        indices_2 = {_RANDOM[4'h4][31:13], _RANDOM[4'h5], _RANDOM[4'h6][12:0]};	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:14:7, :37:20]
        indices_3 = {_RANDOM[4'h6][31:13], _RANDOM[4'h7], _RANDOM[4'h8][12:0]};	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:14:7, :37:20]
        masks_0 = _RANDOM[4'h8][13];	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:14:7, :37:20, :38:18]
        masks_1 = _RANDOM[4'h8][14];	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:14:7, :37:20, :38:18]
        masks_2 = _RANDOM[4'h8][15];	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:14:7, :37:20, :38:18]
        masks_3 = _RANDOM[4'h8][16];	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:14:7, :37:20, :38:18]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:14:7]
      `FIRRTL_AFTER_INITIAL	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:14:7]
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_index_access_valid = valid & needs_index & ~_GEN_0;	// @[generators/rocket-chip/src/main/scala/util/package.scala:81:59, generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:14:7, :33:22, :52:{49,52}]
  assign io_index_access_vrs = io_inst_bits[24:20];	// @[generators/saturn/src/main/scala/common/Bundles.scala:69:17, generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:14:7]
  assign io_index_access_eidx = _GEN_1;	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:14:7, :56:24]
  assign io_index_access_eew = io_inst_bits[13:12];	// @[generators/saturn/src/main/scala/common/Bundles.scala:58:26, generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:14:7]
  assign io_mask_access_valid = valid & ~(io_inst_bits[25]) & ~_GEN_0;	// @[generators/saturn/src/main/scala/common/Bundles.scala:60:16, generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:14:7, :33:22, :47:20, :52:52, :53:{48,51}]
  assign io_mask_access_eidx = _GEN_1;	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:14:7, :56:24]
  assign io_access_ready = _GEN[io_access_eidx[1:0]];	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:14:7, :52:52, :71:{19,43}]
  assign io_access_index = _GEN_2[io_access_eidx[1:0]];	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:14:7, :71:43, :72:19]
  assign io_access_mask = _GEN_3[io_access_eidx[1:0]];	// @[generators/saturn/src/main/scala/frontend/IterativeTrapCheck.scala:14:7, :71:43, :73:19]
endmodule

