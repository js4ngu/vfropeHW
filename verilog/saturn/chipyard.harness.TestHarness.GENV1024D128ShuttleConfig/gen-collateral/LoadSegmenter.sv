// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module LoadSegmenter(	// @[generators/saturn/src/main/scala/mem/LoadSegmenter.scala:11:7]
  input          clock,	// @[generators/saturn/src/main/scala/mem/LoadSegmenter.scala:11:7]
  input          reset,	// @[generators/saturn/src/main/scala/mem/LoadSegmenter.scala:11:7]
  input          io_valid,	// @[generators/saturn/src/main/scala/mem/LoadSegmenter.scala:12:14]
  output         io_done,	// @[generators/saturn/src/main/scala/mem/LoadSegmenter.scala:12:14]
  input  [15:0]  io_op_debug_id,	// @[generators/saturn/src/main/scala/mem/LoadSegmenter.scala:12:14]
  input  [2:0]   io_op_segstart,	// @[generators/saturn/src/main/scala/mem/LoadSegmenter.scala:12:14]
  input  [9:0]   io_op_vstart,	// @[generators/saturn/src/main/scala/mem/LoadSegmenter.scala:12:14]
  input  [10:0]  io_op_vl,	// @[generators/saturn/src/main/scala/mem/LoadSegmenter.scala:12:14]
  input  [2:0]   io_op_nf,	// @[generators/saturn/src/main/scala/mem/LoadSegmenter.scala:12:14]
  input  [1:0]   io_op_elem_size,	// @[generators/saturn/src/main/scala/mem/LoadSegmenter.scala:12:14]
  input          io_op_whole_reg,	// @[generators/saturn/src/main/scala/mem/LoadSegmenter.scala:12:14]
  input          io_compactor_ready,	// @[generators/saturn/src/main/scala/mem/LoadSegmenter.scala:12:14]
  output         io_compactor_valid,	// @[generators/saturn/src/main/scala/mem/LoadSegmenter.scala:12:14]
  output [3:0]   io_compactor_bits_head,	// @[generators/saturn/src/main/scala/mem/LoadSegmenter.scala:12:14]
  output [3:0]   io_compactor_bits_tail,	// @[generators/saturn/src/main/scala/mem/LoadSegmenter.scala:12:14]
  input  [127:0] io_compactor_data,	// @[generators/saturn/src/main/scala/mem/LoadSegmenter.scala:12:14]
  input          io_resp_ready,	// @[generators/saturn/src/main/scala/mem/LoadSegmenter.scala:12:14]
  output         io_resp_valid,	// @[generators/saturn/src/main/scala/mem/LoadSegmenter.scala:12:14]
  output [127:0] io_resp_bits_data,	// @[generators/saturn/src/main/scala/mem/LoadSegmenter.scala:12:14]
  output [15:0]  io_resp_bits_debug_id	// @[generators/saturn/src/main/scala/mem/LoadSegmenter.scala:12:14]
);

  wire         _segbuf_io_in_ready;	// @[generators/saturn/src/main/scala/mem/LoadSegmenter.scala:26:22]
  wire         _segbuf_io_out_valid;	// @[generators/saturn/src/main/scala/mem/LoadSegmenter.scala:26:22]
  wire [127:0] _segbuf_io_out_bits_data;	// @[generators/saturn/src/main/scala/mem/LoadSegmenter.scala:26:22]
  wire [15:0]  _segbuf_io_out_bits_debug_id;	// @[generators/saturn/src/main/scala/mem/LoadSegmenter.scala:26:22]
  wire         _segbuf_io_busy;	// @[generators/saturn/src/main/scala/mem/LoadSegmenter.scala:26:22]
  reg  [9:0]   r_eidx;	// @[generators/saturn/src/main/scala/mem/LoadSegmenter.scala:28:19]
  reg          r_head;	// @[generators/saturn/src/main/scala/mem/LoadSegmenter.scala:29:23]
  reg  [2:0]   r_sidx;	// @[generators/saturn/src/main/scala/mem/LoadSegmenter.scala:30:19]
  wire [9:0]   eidx = r_head ? io_op_vstart : r_eidx;	// @[generators/saturn/src/main/scala/mem/LoadSegmenter.scala:28:19, :29:23, :31:17]
  wire [2:0]   sidx = r_head ? io_op_segstart : r_sidx;	// @[generators/saturn/src/main/scala/mem/LoadSegmenter.scala:29:23, :30:19, :32:17]
  wire [2:0]   _seg_ready_T = io_op_whole_reg ? 3'h0 : io_op_nf;	// @[generators/saturn/src/main/scala/common/Bundles.scala:33:19]
  wire [12:0]  _GEN = {11'h0, io_op_elem_size};	// @[generators/saturn/src/main/scala/mem/LoadSegmenter.scala:35:64]
  wire [12:0]  _incr_T_3 = {3'h0, (|_seg_ready_T) ? {7'h0, sidx} : eidx} << _GEN;	// @[generators/saturn/src/main/scala/common/Bundles.scala:33:19, generators/saturn/src/main/scala/mem/LoadSegmenter.scala:31:17, :32:17, :35:{29,43,64}, :51:34]
  wire [4:0]   incr = 5'h10 - {1'h0, _incr_T_3[3:0]} >> io_op_elem_size;	// @[generators/saturn/src/main/scala/mem/LoadSegmenter.scala:11:7, :35:{23,64,76,95}]
  wire [10:0]  next_eidx = {1'h0, eidx} + {6'h0, (|_seg_ready_T) ? 5'h1 : incr};	// @[generators/saturn/src/main/scala/common/Bundles.scala:33:19, generators/saturn/src/main/scala/mem/LoadSegmenter.scala:11:7, :31:17, :35:95, :36:{22,36}, :38:24]
  wire [5:0]   _GEN_0 = {3'h0, sidx};	// @[generators/saturn/src/main/scala/common/Bundles.scala:33:19, generators/saturn/src/main/scala/mem/LoadSegmenter.scala:32:17, :39:24]
  wire [5:0]   next_sidx = _GEN_0 + {1'h0, incr};	// @[generators/saturn/src/main/scala/mem/LoadSegmenter.scala:11:7, :35:95, :39:24]
  wire         sidx_tail = next_sidx > {3'h0, _seg_ready_T};	// @[generators/saturn/src/main/scala/common/Bundles.scala:33:19, generators/saturn/src/main/scala/mem/LoadSegmenter.scala:39:24, :41:29]
  wire         eidx_tail = next_eidx >= io_op_vl;	// @[generators/saturn/src/main/scala/mem/LoadSegmenter.scala:38:24, :42:29]
  wire [12:0]  _io_compactor_bits_head_T = {3'h0, eidx} << _GEN;	// @[generators/saturn/src/main/scala/common/Bundles.scala:33:19, generators/saturn/src/main/scala/mem/LoadSegmenter.scala:31:17, :35:64, :46:36]
  wire [13:0]  _io_compactor_bits_tail_T = {3'h0, io_op_vl} << io_op_elem_size;	// @[generators/saturn/src/main/scala/common/Bundles.scala:33:19, generators/saturn/src/main/scala/mem/LoadSegmenter.scala:47:55]
  wire [5:0]   _io_compactor_bits_head_T_1 = _GEN_0 << io_op_elem_size;	// @[generators/saturn/src/main/scala/mem/LoadSegmenter.scala:39:24, :50:36]
  wire [6:0]   _io_compactor_bits_tail_T_3 = {3'h0, {1'h0, io_op_nf} + 4'h1} << io_op_elem_size;	// @[generators/saturn/src/main/scala/common/Bundles.scala:33:19, generators/saturn/src/main/scala/mem/LoadSegmenter.scala:11:7, :51:{56,64}]
  wire         _segbuf_io_in_valid_T_3 = io_valid & (|_seg_ready_T) & io_compactor_ready;	// @[generators/saturn/src/main/scala/common/Bundles.scala:33:19, generators/saturn/src/main/scala/mem/LoadSegmenter.scala:54:{50,58}]
  wire         _GEN_1 = ((|_seg_ready_T) ? _segbuf_io_in_ready & io_compactor_ready & sidx_tail : ~_segbuf_io_busy & io_compactor_ready & io_resp_ready) & io_valid;	// @[generators/saturn/src/main/scala/common/Bundles.scala:33:19, generators/saturn/src/main/scala/mem/LoadSegmenter.scala:26:22, :35:43, :41:29, :74:22, :75:{5,43}, :76:46, :88:19]
  wire         _GEN_2 = _segbuf_io_in_ready & _segbuf_io_in_valid_T_3;	// @[generators/saturn/src/main/scala/mem/LoadSegmenter.scala:26:22, :54:58, src/main/scala/chisel3/util/Decoupled.scala:51:35]
  always @(posedge clock) begin	// @[generators/saturn/src/main/scala/mem/LoadSegmenter.scala:11:7]
    if (_GEN_1)	// @[generators/saturn/src/main/scala/mem/LoadSegmenter.scala:88:19]
      r_eidx <= next_eidx[9:0];	// @[generators/saturn/src/main/scala/mem/LoadSegmenter.scala:28:19, :38:24, :90:12]
    else if (_GEN_2 & r_head)	// @[generators/saturn/src/main/scala/mem/LoadSegmenter.scala:28:19, :29:23, :78:28, :81:{19,28}, src/main/scala/chisel3/util/Decoupled.scala:51:35]
      r_eidx <= io_op_vstart;	// @[generators/saturn/src/main/scala/mem/LoadSegmenter.scala:28:19]
    if (_GEN_2) begin	// @[src/main/scala/chisel3/util/Decoupled.scala:51:35]
      if (next_sidx > {3'h0, io_op_nf})	// @[generators/saturn/src/main/scala/common/Bundles.scala:33:19, generators/saturn/src/main/scala/mem/LoadSegmenter.scala:39:24, :83:21]
        r_sidx <= 3'h0;	// @[generators/saturn/src/main/scala/common/Bundles.scala:33:19, generators/saturn/src/main/scala/mem/LoadSegmenter.scala:30:19]
      else	// @[generators/saturn/src/main/scala/mem/LoadSegmenter.scala:83:21]
        r_sidx <= next_sidx[2:0];	// @[generators/saturn/src/main/scala/mem/LoadSegmenter.scala:30:19, :39:24, :82:12]
    end
    if (reset)	// @[generators/saturn/src/main/scala/mem/LoadSegmenter.scala:11:7]
      r_head <= 1'h1;	// @[generators/saturn/src/main/scala/mem/LoadSegmenter.scala:11:7, :29:23]
    else if (_GEN_1)	// @[generators/saturn/src/main/scala/mem/LoadSegmenter.scala:88:19]
      r_head <= eidx_tail;	// @[generators/saturn/src/main/scala/mem/LoadSegmenter.scala:29:23, :42:29]
    else	// @[generators/saturn/src/main/scala/mem/LoadSegmenter.scala:88:19]
      r_head <= ~_GEN_2 & r_head;	// @[generators/saturn/src/main/scala/mem/LoadSegmenter.scala:29:23, :78:28, :80:12, src/main/scala/chisel3/util/Decoupled.scala:51:35]
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// @[generators/saturn/src/main/scala/mem/LoadSegmenter.scala:11:7]
    `ifdef FIRRTL_BEFORE_INITIAL	// @[generators/saturn/src/main/scala/mem/LoadSegmenter.scala:11:7]
      `FIRRTL_BEFORE_INITIAL	// @[generators/saturn/src/main/scala/mem/LoadSegmenter.scala:11:7]
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:0];	// @[generators/saturn/src/main/scala/mem/LoadSegmenter.scala:11:7]
    initial begin	// @[generators/saturn/src/main/scala/mem/LoadSegmenter.scala:11:7]
      `ifdef INIT_RANDOM_PROLOG_	// @[generators/saturn/src/main/scala/mem/LoadSegmenter.scala:11:7]
        `INIT_RANDOM_PROLOG_	// @[generators/saturn/src/main/scala/mem/LoadSegmenter.scala:11:7]
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// @[generators/saturn/src/main/scala/mem/LoadSegmenter.scala:11:7]
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;	// @[generators/saturn/src/main/scala/mem/LoadSegmenter.scala:11:7]
        r_eidx = _RANDOM[/*Zero width*/ 1'b0][9:0];	// @[generators/saturn/src/main/scala/mem/LoadSegmenter.scala:11:7, :28:19]
        r_head = _RANDOM[/*Zero width*/ 1'b0][10];	// @[generators/saturn/src/main/scala/mem/LoadSegmenter.scala:11:7, :28:19, :29:23]
        r_sidx = _RANDOM[/*Zero width*/ 1'b0][13:11];	// @[generators/saturn/src/main/scala/mem/LoadSegmenter.scala:11:7, :28:19, :30:19]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// @[generators/saturn/src/main/scala/mem/LoadSegmenter.scala:11:7]
      `FIRRTL_AFTER_INITIAL	// @[generators/saturn/src/main/scala/mem/LoadSegmenter.scala:11:7]
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  LoadSegmentBuffer segbuf (	// @[generators/saturn/src/main/scala/mem/LoadSegmenter.scala:26:22]
    .clock                (clock),
    .reset                (reset),
    .io_in_ready          (_segbuf_io_in_ready),
    .io_in_valid          (_segbuf_io_in_valid_T_3),	// @[generators/saturn/src/main/scala/mem/LoadSegmenter.scala:54:58]
    .io_in_bits_data      (io_compactor_data),
    .io_in_bits_eew       (io_op_elem_size),
    .io_in_bits_nf        (io_op_nf),
    .io_in_bits_eidx      (eidx),	// @[generators/saturn/src/main/scala/mem/LoadSegmenter.scala:31:17]
    .io_in_bits_segstart  (io_op_segstart),
    .io_in_bits_sidx      (sidx),	// @[generators/saturn/src/main/scala/mem/LoadSegmenter.scala:32:17]
    .io_in_bits_sidx_tail (sidx_tail),	// @[generators/saturn/src/main/scala/mem/LoadSegmenter.scala:41:29]
    .io_in_bits_tail      (eidx_tail),	// @[generators/saturn/src/main/scala/mem/LoadSegmenter.scala:42:29]
    .io_in_bits_debug_id  (io_op_debug_id),
    .io_out_ready         (io_resp_ready),
    .io_out_valid         (_segbuf_io_out_valid),
    .io_out_bits_data     (_segbuf_io_out_bits_data),
    .io_out_bits_debug_id (_segbuf_io_out_bits_debug_id),
    .io_busy              (_segbuf_io_busy)
  );
  assign io_done = _GEN_1 & eidx_tail;	// @[generators/saturn/src/main/scala/mem/LoadSegmenter.scala:11:7, :42:29, :87:11, :88:{19,32}, :91:13]
  assign io_compactor_valid = (|_seg_ready_T) ? io_valid & _segbuf_io_in_ready : io_valid & ~_segbuf_io_busy & io_resp_ready;	// @[generators/saturn/src/main/scala/common/Bundles.scala:33:19, generators/saturn/src/main/scala/mem/LoadSegmenter.scala:11:7, :26:22, :35:43, :44:31, :45:{24,39,55}, :49:{24,36}]
  assign io_compactor_bits_head = (|_seg_ready_T) ? _io_compactor_bits_head_T_1[3:0] : _io_compactor_bits_head_T[3:0];	// @[generators/saturn/src/main/scala/common/Bundles.scala:33:19, generators/saturn/src/main/scala/mem/LoadSegmenter.scala:11:7, :35:43, :44:31, :46:{28,36}, :50:{28,36}]
  assign io_compactor_bits_tail = (|_seg_ready_T) ? (sidx_tail ? _io_compactor_bits_tail_T_3[3:0] : 4'h0) : eidx_tail ? _io_compactor_bits_tail_T[3:0] : 4'h0;	// @[generators/saturn/src/main/scala/common/Bundles.scala:33:19, generators/saturn/src/main/scala/mem/LoadSegmenter.scala:11:7, :35:43, :41:29, :42:29, :44:31, :47:{28,34,55}, :50:36, :51:{28,34,64}]
  assign io_resp_valid = _segbuf_io_busy ? _segbuf_io_out_valid : io_compactor_ready & io_valid & ~(|_seg_ready_T);	// @[generators/saturn/src/main/scala/common/Bundles.scala:33:19, generators/saturn/src/main/scala/mem/LoadSegmenter.scala:11:7, :26:22, :35:43, :67:23, :69:{36,52}]
  assign io_resp_bits_data = _segbuf_io_busy ? _segbuf_io_out_bits_data : io_compactor_data;	// @[generators/saturn/src/main/scala/mem/LoadSegmenter.scala:11:7, :26:22, :70:27]
  assign io_resp_bits_debug_id = _segbuf_io_busy ? _segbuf_io_out_bits_debug_id : io_op_debug_id;	// @[generators/saturn/src/main/scala/mem/LoadSegmenter.scala:11:7, :26:22, :71:31]
endmodule

