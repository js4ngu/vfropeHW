L2 InclusiveCache Client Map:
	0 <= debug
	1 <= serial_tl_0_0
	2 <= serial_tl_0_1
	3 <= serial_tl_0_2
	4 <= serial_tl_0_3
	5 <= Core 0 ICache
	6 <= Core 0 DCache
	7 <= Core 0 DCache MMIO
	8 <= Core 0 Vector Load
	9 <= Core 0 Vector Load

Interrupt map (2 harts 1 interrupts):
  [1, 1] => uart_0

Clock sbus_0: using diplomatically specified frequency of 500.0.
Clock pbus_0: using diplomatically specified frequency of 500.0.
Clock fbus_0: using diplomatically specified frequency of 500.0.
Clock mbus_0: using diplomatically specified frequency of 500.0.
Clock cbus_0: using diplomatically specified frequency of 500.0.
/dts-v1/;

/ {
	#address-cells = <1>;
	#size-cells = <1>;
	compatible = "ucb-bar,chipyard-dev";
	model = "ucb-bar,chipyard";
	L3: aliases {
		serial0 = &L25;
	};
	L17: chosen {
		stdout-path = &L25;
	};
	L2: cpus {
		#address-cells = <1>;
		#size-cells = <0>;
		timebase-frequency = <500000>;
		L12: cpu@0 {
			clock-frequency = <0>;
			compatible = "ucb-bar,shuttle", "riscv";
			d-cache-block-size = <64>;
			d-cache-sets = <64>;
			d-cache-size = <16384>;
			d-tlb-sets = <1>;
			d-tlb-size = <32>;
			device_type = "cpu";
			hardware-exec-breakpoint-count = <0>;
			i-cache-block-size = <64>;
			i-cache-sets = <64>;
			i-cache-size = <32768>;
			i-tlb-sets = <1>;
			i-tlb-size = <32>;
			mmu-type = "riscv,sv39";
			next-level-cache = <&L10>;
			reg = <0x0>;
			riscv,isa = "rv64imafdcbvzicsr_zifencei_zihpm_zvl1024b_zve64d_zvfh_zfh_zba_zbb_zbs_zvbb";
			status = "okay";
			timebase-frequency = <500000>;
			tlb-split;
			L11: interrupt-controller {
				#interrupt-cells = <1>;
				compatible = "riscv,cpu-intc";
				interrupt-controller;
			};
		};
	};
	L28: htif {
		compatible = "ucb,htif0";
	};
	L24: memory@8000000 {
		device_type = "memory";
		reg = <0x8000000 0x10000>;
		status = "disabled";
	};
	L20: memory@80000000 {
		device_type = "memory";
		reg = <0x80000000 0x10000000>;
	};
	L1: soc {
		#address-cells = <1>;
		#size-cells = <1>;
		compatible = "ucb-bar,chipyard-soc", "simple-bus";
		ranges;
		L23: boot-address-reg@1000 {
			reg = <0x1000 0x1000>;
			reg-names = "control";
		};
		L10: cache-controller@2010000 {
			cache-block-size = <64>;
			cache-level = <2>;
			cache-sets = <1024>;
			cache-size = <524288>;
			cache-unified;
			compatible = "sifive,inclusivecache0", "cache";
			next-level-cache = <&L20 &L24>;
			reg = <0x2010000 0x1000>;
			reg-names = "control";
			sifive,mshr-count = <12>;
		};
		L7: cbus_clock {
			#clock-cells = <0>;
			clock-frequency = <500000000>;
			clock-output-names = "cbus_clock";
			compatible = "fixed-clock";
		};
		L13: clint@2000000 {
			compatible = "riscv,clint0";
			interrupts-extended = <&L11 3 &L11 7>;
			reg = <0x2000000 0x10000>;
			reg-names = "control";
		};
		L26: clock-gater@100000 {
			reg = <0x100000 0x1000>;
			reg-names = "control";
		};
		L15: debug-controller@0 {
			compatible = "sifive,debug-013", "riscv,debug-013";
			debug-attach = "jtag";
			interrupts-extended = <&L11 65535>;
			reg = <0x0 0x1000>;
			reg-names = "control";
		};
		L8: error-device@3000 {
			compatible = "sifive,error0";
			reg = <0x3000 0x1000>;
		};
		L6: fbus_clock {
			#clock-cells = <0>;
			clock-frequency = <500000000>;
			clock-output-names = "fbus_clock";
			compatible = "fixed-clock";
		};
		L14: interrupt-controller@c000000 {
			#interrupt-cells = <1>;
			compatible = "riscv,plic0";
			interrupt-controller;
			interrupts-extended = <&L11 11 &L11 9>;
			reg = <0xc000000 0x4000000>;
			reg-names = "control";
			riscv,max-priority = <1>;
			riscv,ndev = <1>;
		};
		L9: mbus_clock {
			#clock-cells = <0>;
			clock-frequency = <500000000>;
			clock-output-names = "mbus_clock";
			compatible = "fixed-clock";
		};
		L5: pbus_clock {
			#clock-cells = <0>;
			clock-frequency = <500000000>;
			clock-output-names = "pbus_clock";
			compatible = "fixed-clock";
		};
		L22: rom@10000 {
			compatible = "sifive,rom0";
			reg = <0x10000 0x10000>;
			reg-names = "mem";
		};
		L4: sbus_clock {
			#clock-cells = <0>;
			clock-frequency = <500000000>;
			clock-output-names = "sbus_clock";
			compatible = "fixed-clock";
		};
		L25: serial@10020000 {
			clocks = <&L5>;
			compatible = "sifive,uart0";
			interrupt-parent = <&L14>;
			interrupts = <1>;
			reg = <0x10020000 0x1000>;
			reg-names = "control";
		};
		L27: tile-reset-setter@110000 {
			reg = <0x110000 0x1000>;
			reg-names = "control";
		};
	};
};

Generated Address Map
	       0 -     1000 ARWX  debug-controller@0
	    1000 -     2000 ARW   boot-address-reg@1000
	    3000 -     4000 ARWX  error-device@3000
	   10000 -    20000  R X  rom@10000
	  100000 -   101000 ARW   clock-gater@100000
	  110000 -   111000 ARW   tile-reset-setter@110000
	 2000000 -  2010000 ARW   clint@2000000
	 2010000 -  2011000 ARW   cache-controller@2010000
	 8000000 -  8010000 ARWXC memory@8000000
	 c000000 - 10000000 ARW   interrupt-controller@c000000
	10020000 - 10021000 ARW   serial@10020000
	80000000 - 90000000 ARWXC memory@80000000

IOCells generated by IOBinders:
  IOBinder for interface sifive.blocks.devices.uart.HasPeripheryUART generated:
    1 X GenericDigitalInIOCell
    1 X GenericDigitalOutIOCell
  IOBinder for interface testchipip.boot.CanHavePeripheryCustomBootPin generated:
    1 X GenericDigitalInIOCell
  IOBinder for interface freechips.rocketchip.devices.debug.HasPeripheryDebug generated:
    3 X GenericDigitalInIOCell
    1 X GenericDigitalOutIOCell
  IOBinder for interface chipyard.clocking.CanHaveClockTap generated:
    1 X GenericDigitalOutIOCell
  IOBinder for interface testchipip.serdes.CanHavePeripheryTLSerial generated:
    35 X GenericDigitalInIOCell
    34 X GenericDigitalOutIOCell

  Total generated 77 IOCells:
    40 X GenericDigitalInIOCell
    37 X GenericDigitalOutIOCell
Harness binder clock is 100.0
[warn] generators/shuttle/src/main/scala/ifu/ICache.scala 115:25: [W003] Dynamic index with width 7 is too small for extractee of width 512
[warn]     val s1_vb = vb_array(Cat(i.U, s1_idx))
[warn]                         ^
[warn] generators/shuttle/src/main/scala/ifu/ICache.scala 115:25: [W003] Dynamic index with width 8 is too small for extractee of width 512
[warn]     val s1_vb = vb_array(Cat(i.U, s1_idx))
[warn]                         ^
[warn] generators/shuttle/src/main/scala/ifu/BTB.scala 94:10: [W004] Dynamic index with width 6 is too wide for Vec of size 32 (expected index width 5).
[warn]     ubits(waddr) := 0.U
[warn]          ^
[warn] generators/shuttle/src/main/scala/ifu/BTB.scala 97:10: [W004] Dynamic index with width 6 is too wide for Vec of size 32 (expected index width 5).
[warn]     ubits(waddr) := 1.U
[warn]          ^
[warn] generators/shuttle/src/main/scala/ifu/BTB.scala 99:83: [W004] Dynamic index with width 6 is too wide for Vec of size 32 (expected index width 5).
[warn]   when (r_btb_update.valid && r_btb_update.bits.mispredict && !(updateHit && ubits(waddr) && isValid(waddr))) {
[warn]                                                                                   ^
[warn] generators/shuttle/src/main/scala/ifu/BTB.scala 99:101: [W002] Dynamic index with width 6 is too large for extractee of width 32
[warn]   when (r_btb_update.valid && r_btb_update.bits.mispredict && !(updateHit && ubits(waddr) && isValid(waddr))) {
[warn]                                                                                                     ^
[warn] generators/shuttle/src/main/scala/ifu/BTB.scala 101:9: [W004] Dynamic index with width 6 is too wide for Vec of size 32 (expected index width 5).
[warn]     idxs(waddr) := r_btb_update.bits.pc(matchBits-1, log2Up(coreInstBytes))
[warn]         ^
[warn] generators/shuttle/src/main/scala/ifu/BTB.scala 102:9: [W004] Dynamic index with width 6 is too wide for Vec of size 32 (expected index width 5).
[warn]     tgts(waddr) := update_target(matchBits-1, log2Up(coreInstBytes))
[warn]         ^
[warn] generators/shuttle/src/main/scala/ifu/BTB.scala 103:10: [W004] Dynamic index with width 6 is too wide for Vec of size 32 (expected index width 5).
[warn]     ubits(waddr) := 1.U
[warn]          ^
[warn] generators/shuttle/src/main/scala/ifu/BTB.scala 104:13: [W004] Dynamic index with width 6 is too wide for Vec of size 32 (expected index width 5).
[warn]     idxPages(waddr) := idxPageUpdate +& 1.U // the +1 corresponds to the <<1 on io.resp.valid
[warn]             ^
[warn] generators/shuttle/src/main/scala/ifu/BTB.scala 105:13: [W004] Dynamic index with width 6 is too wide for Vec of size 32 (expected index width 5).
[warn]     tgtPages(waddr) := tgtPageUpdate
[warn]             ^
[warn] generators/shuttle/src/main/scala/ifu/BTB.scala 106:12: [W004] Dynamic index with width 6 is too wide for Vec of size 32 (expected index width 5).
[warn]     cfiType(waddr) := r_btb_update.bits.cfiType
[warn]            ^
[warn] generators/shuttle/src/main/scala/ifu/BTB.scala 109:12: [W004] Dynamic index with width 6 is too wide for Vec of size 32 (expected index width 5).
[warn]       brIdx(waddr) := r_btb_update.bits.br_pc >> log2Up(coreInstBytes)
[warn]            ^
[warn] generators/shuttle/src/main/scala/dmem/MSHRs.scala 155:25: [W004] Dynamic index with width 3 is too wide for Vec of size 4 (expected index width 2).
[warn]   io.refill := refillMux(io.mem_grant.bits.source)
[warn]                         ^
[warn] generators/saturn/src/main/scala/common/Bundles.scala 83:35: [W001] Casting non-literal UInt to saturn.common.OPMFunct6. You can use saturn.common.OPMFunct6.safe to cast without this warning.
[warn]   def opmf6 = Mux(isOpm, OPMFunct6(funct6), OPMFunct6.illegal)
[warn]                                   ^
[warn] generators/saturn/src/main/scala/common/Bundles.scala 85:35: [W001] Casting non-literal UInt to saturn.common.OPFFunct6. You can use saturn.common.OPFFunct6.safe to cast without this warning.
[warn]   def opff6 = Mux(isOpf, OPFFunct6(funct6), OPFFunct6.illegal)
[warn]                                   ^
[warn] generators/saturn/src/main/scala/common/Bundles.scala 84:35: [W001] Casting non-literal UInt to saturn.common.OPIFunct6. You can use saturn.common.OPIFunct6.safe to cast without this warning.
[warn]   def opif6 = Mux(isOpi, OPIFunct6(funct6), OPIFunct6.illegal)
[warn]                                   ^
[warn] generators/saturn/src/main/scala/common/Parameters.scala 396:83: [W004] Dynamic index with width 5 is too wide for Vec of size 8 (expected index width 3).
[warn]   def log2_up(f: UInt, max: Int) = VecInit.tabulate(max)({nf => log2Ceil(nf+1).U})(f)
[warn]                                                                                   ^
[warn] generators/saturn/src/main/scala/common/Compactor.scala 41:53: [W004] Dynamic index with width 5 is too wide for Vec of size 16 (expected index width 4).
[warn]     (0 until in.size).map { i => VecInit(in.drop(i))(shamt) }
[warn]                                                     ^
[warn] generators/saturn/src/main/scala/common/Compactor.scala 41:53: [W004] Dynamic index with width 5 is too wide for Vec of size 15 (expected index width 4).
[warn]     (0 until in.size).map { i => VecInit(in.drop(i))(shamt) }
[warn]                                                     ^
[warn] generators/saturn/src/main/scala/common/Compactor.scala 41:53: [W004] Dynamic index with width 5 is too wide for Vec of size 14 (expected index width 4).
[warn]     (0 until in.size).map { i => VecInit(in.drop(i))(shamt) }
[warn]                                                     ^
[warn] generators/saturn/src/main/scala/common/Compactor.scala 41:53: [W004] Dynamic index with width 5 is too wide for Vec of size 13 (expected index width 4).
[warn]     (0 until in.size).map { i => VecInit(in.drop(i))(shamt) }
[warn]                                                     ^
[warn] generators/saturn/src/main/scala/common/Compactor.scala 41:53: [W004] Dynamic index with width 5 is too wide for Vec of size 12 (expected index width 4).
[warn]     (0 until in.size).map { i => VecInit(in.drop(i))(shamt) }
[warn]                                                     ^
[warn] generators/saturn/src/main/scala/common/Compactor.scala 41:53: [W004] Dynamic index with width 5 is too wide for Vec of size 11 (expected index width 4).
[warn]     (0 until in.size).map { i => VecInit(in.drop(i))(shamt) }
[warn]                                                     ^
[warn] generators/saturn/src/main/scala/common/Compactor.scala 41:53: [W004] Dynamic index with width 5 is too wide for Vec of size 10 (expected index width 4).
[warn]     (0 until in.size).map { i => VecInit(in.drop(i))(shamt) }
[warn]                                                     ^
[warn] generators/saturn/src/main/scala/common/Compactor.scala 41:53: [W004] Dynamic index with width 5 is too wide for Vec of size 9 (expected index width 4).
[warn]     (0 until in.size).map { i => VecInit(in.drop(i))(shamt) }
[warn]                                                     ^
[warn] generators/saturn/src/main/scala/common/Compactor.scala 41:53: [W004] Dynamic index with width 5 is too wide for Vec of size 8 (expected index width 3).
[warn]     (0 until in.size).map { i => VecInit(in.drop(i))(shamt) }
[warn]                                                     ^
[warn] generators/saturn/src/main/scala/common/Compactor.scala 41:53: [W004] Dynamic index with width 5 is too wide for Vec of size 7 (expected index width 3).
[warn]     (0 until in.size).map { i => VecInit(in.drop(i))(shamt) }
[warn]                                                     ^
[warn] generators/saturn/src/main/scala/common/Compactor.scala 41:53: [W004] Dynamic index with width 5 is too wide for Vec of size 6 (expected index width 3).
[warn]     (0 until in.size).map { i => VecInit(in.drop(i))(shamt) }
[warn]                                                     ^
[warn] generators/saturn/src/main/scala/common/Compactor.scala 41:53: [W004] Dynamic index with width 5 is too wide for Vec of size 5 (expected index width 3).
[warn]     (0 until in.size).map { i => VecInit(in.drop(i))(shamt) }
[warn]                                                     ^
[warn] generators/saturn/src/main/scala/common/Compactor.scala 41:53: [W004] Dynamic index with width 5 is too wide for Vec of size 4 (expected index width 2).
[warn]     (0 until in.size).map { i => VecInit(in.drop(i))(shamt) }
[warn]                                                     ^
[warn] generators/saturn/src/main/scala/common/Compactor.scala 41:53: [W004] Dynamic index with width 5 is too wide for Vec of size 3 (expected index width 2).
[warn]     (0 until in.size).map { i => VecInit(in.drop(i))(shamt) }
[warn]                                                     ^
[warn] generators/saturn/src/main/scala/common/Compactor.scala 41:53: [W004] Dynamic index with width 5 is too wide for Vec of size 2 (expected index width 1).
[warn]     (0 until in.size).map { i => VecInit(in.drop(i))(shamt) }
[warn]                                                     ^
[warn] generators/saturn/src/main/scala/common/Compactor.scala 41:53: [W004] Dynamic index with width 5 is too wide for Vec of size 1 (expected index width 0).
[warn]     (0 until in.size).map { i => VecInit(in.drop(i))(shamt) }
[warn]                                                     ^
[warn] generators/saturn/src/main/scala/common/Compactor.scala 41:53: [W004] Dynamic index with width 6 is too wide for Vec of size 32 (expected index width 5).
[warn]     (0 until in.size).map { i => VecInit(in.drop(i))(shamt) }
[warn]                                                     ^
[warn] generators/saturn/src/main/scala/common/Compactor.scala 41:53: [W004] Dynamic index with width 6 is too wide for Vec of size 31 (expected index width 5).
[warn]     (0 until in.size).map { i => VecInit(in.drop(i))(shamt) }
[warn]                                                     ^
[warn] generators/saturn/src/main/scala/common/Compactor.scala 41:53: [W004] Dynamic index with width 6 is too wide for Vec of size 30 (expected index width 5).
[warn]     (0 until in.size).map { i => VecInit(in.drop(i))(shamt) }
[warn]                                                     ^
[warn] generators/saturn/src/main/scala/common/Compactor.scala 41:53: [W004] Dynamic index with width 6 is too wide for Vec of size 29 (expected index width 5).
[warn]     (0 until in.size).map { i => VecInit(in.drop(i))(shamt) }
[warn]                                                     ^
[warn] generators/saturn/src/main/scala/common/Compactor.scala 41:53: [W004] Dynamic index with width 6 is too wide for Vec of size 28 (expected index width 5).
[warn]     (0 until in.size).map { i => VecInit(in.drop(i))(shamt) }
[warn]                                                     ^
[warn] generators/saturn/src/main/scala/common/Compactor.scala 41:53: [W004] Dynamic index with width 6 is too wide for Vec of size 27 (expected index width 5).
[warn]     (0 until in.size).map { i => VecInit(in.drop(i))(shamt) }
[warn]                                                     ^
[warn] generators/saturn/src/main/scala/common/Compactor.scala 41:53: [W004] Dynamic index with width 6 is too wide for Vec of size 26 (expected index width 5).
[warn]     (0 until in.size).map { i => VecInit(in.drop(i))(shamt) }
[warn]                                                     ^
[warn] generators/saturn/src/main/scala/common/Compactor.scala 41:53: [W004] Dynamic index with width 6 is too wide for Vec of size 25 (expected index width 5).
[warn]     (0 until in.size).map { i => VecInit(in.drop(i))(shamt) }
[warn]                                                     ^
[warn] generators/saturn/src/main/scala/common/Compactor.scala 41:53: [W004] Dynamic index with width 6 is too wide for Vec of size 24 (expected index width 5).
[warn]     (0 until in.size).map { i => VecInit(in.drop(i))(shamt) }
[warn]                                                     ^
[warn] generators/saturn/src/main/scala/common/Compactor.scala 41:53: [W004] Dynamic index with width 6 is too wide for Vec of size 23 (expected index width 5).
[warn]     (0 until in.size).map { i => VecInit(in.drop(i))(shamt) }
[warn]                                                     ^
[warn] generators/saturn/src/main/scala/common/Compactor.scala 41:53: [W004] Dynamic index with width 6 is too wide for Vec of size 22 (expected index width 5).
[warn]     (0 until in.size).map { i => VecInit(in.drop(i))(shamt) }
[warn]                                                     ^
[warn] generators/saturn/src/main/scala/common/Compactor.scala 41:53: [W004] Dynamic index with width 6 is too wide for Vec of size 21 (expected index width 5).
[warn]     (0 until in.size).map { i => VecInit(in.drop(i))(shamt) }
[warn]                                                     ^
[warn] generators/saturn/src/main/scala/common/Compactor.scala 41:53: [W004] Dynamic index with width 6 is too wide for Vec of size 20 (expected index width 5).
[warn]     (0 until in.size).map { i => VecInit(in.drop(i))(shamt) }
[warn]                                                     ^
[warn] generators/saturn/src/main/scala/common/Compactor.scala 41:53: [W004] Dynamic index with width 6 is too wide for Vec of size 19 (expected index width 5).
[warn]     (0 until in.size).map { i => VecInit(in.drop(i))(shamt) }
[warn]                                                     ^
[warn] generators/saturn/src/main/scala/common/Compactor.scala 41:53: [W004] Dynamic index with width 6 is too wide for Vec of size 18 (expected index width 5).
[warn]     (0 until in.size).map { i => VecInit(in.drop(i))(shamt) }
[warn]                                                     ^
[warn] generators/saturn/src/main/scala/common/Compactor.scala 41:53: [W004] Dynamic index with width 6 is too wide for Vec of size 17 (expected index width 5).
[warn]     (0 until in.size).map { i => VecInit(in.drop(i))(shamt) }
[warn]                                                     ^
[warn] generators/saturn/src/main/scala/common/Compactor.scala 41:53: [W004] Dynamic index with width 6 is too wide for Vec of size 16 (expected index width 4).
[warn]     (0 until in.size).map { i => VecInit(in.drop(i))(shamt) }
[warn]                                                     ^
[warn] generators/saturn/src/main/scala/common/Compactor.scala 41:53: [W004] Dynamic index with width 6 is too wide for Vec of size 15 (expected index width 4).
[warn]     (0 until in.size).map { i => VecInit(in.drop(i))(shamt) }
[warn]                                                     ^
[warn] generators/saturn/src/main/scala/common/Compactor.scala 41:53: [W004] Dynamic index with width 6 is too wide for Vec of size 14 (expected index width 4).
[warn]     (0 until in.size).map { i => VecInit(in.drop(i))(shamt) }
[warn]                                                     ^
[warn] generators/saturn/src/main/scala/common/Compactor.scala 41:53: [W004] Dynamic index with width 6 is too wide for Vec of size 13 (expected index width 4).
[warn]     (0 until in.size).map { i => VecInit(in.drop(i))(shamt) }
[warn]                                                     ^
[warn] generators/saturn/src/main/scala/common/Compactor.scala 41:53: [W004] Dynamic index with width 6 is too wide for Vec of size 12 (expected index width 4).
[warn]     (0 until in.size).map { i => VecInit(in.drop(i))(shamt) }
[warn]                                                     ^
[warn] generators/saturn/src/main/scala/common/Compactor.scala 41:53: [W004] Dynamic index with width 6 is too wide for Vec of size 11 (expected index width 4).
[warn]     (0 until in.size).map { i => VecInit(in.drop(i))(shamt) }
[warn]                                                     ^
[warn] generators/saturn/src/main/scala/common/Compactor.scala 41:53: [W004] Dynamic index with width 6 is too wide for Vec of size 10 (expected index width 4).
[warn]     (0 until in.size).map { i => VecInit(in.drop(i))(shamt) }
[warn]                                                     ^
[warn] generators/saturn/src/main/scala/common/Compactor.scala 41:53: [W004] Dynamic index with width 6 is too wide for Vec of size 9 (expected index width 4).
[warn]     (0 until in.size).map { i => VecInit(in.drop(i))(shamt) }
[warn]                                                     ^
[warn] generators/saturn/src/main/scala/common/Compactor.scala 41:53: [W004] Dynamic index with width 6 is too wide for Vec of size 8 (expected index width 3).
[warn]     (0 until in.size).map { i => VecInit(in.drop(i))(shamt) }
[warn]                                                     ^
[warn] generators/saturn/src/main/scala/common/Compactor.scala 41:53: [W004] Dynamic index with width 6 is too wide for Vec of size 7 (expected index width 3).
[warn]     (0 until in.size).map { i => VecInit(in.drop(i))(shamt) }
[warn]                                                     ^
[warn] generators/saturn/src/main/scala/common/Compactor.scala 41:53: [W004] Dynamic index with width 6 is too wide for Vec of size 6 (expected index width 3).
[warn]     (0 until in.size).map { i => VecInit(in.drop(i))(shamt) }
[warn]                                                     ^
[warn] generators/saturn/src/main/scala/common/Compactor.scala 41:53: [W004] Dynamic index with width 6 is too wide for Vec of size 5 (expected index width 3).
[warn]     (0 until in.size).map { i => VecInit(in.drop(i))(shamt) }
[warn]                                                     ^
[warn] generators/saturn/src/main/scala/common/Compactor.scala 41:53: [W004] Dynamic index with width 6 is too wide for Vec of size 4 (expected index width 2).
[warn]     (0 until in.size).map { i => VecInit(in.drop(i))(shamt) }
[warn]                                                     ^
[warn] generators/saturn/src/main/scala/common/Compactor.scala 41:53: [W004] Dynamic index with width 6 is too wide for Vec of size 3 (expected index width 2).
[warn]     (0 until in.size).map { i => VecInit(in.drop(i))(shamt) }
[warn]                                                     ^
[warn] generators/saturn/src/main/scala/common/Compactor.scala 41:53: [W004] Dynamic index with width 6 is too wide for Vec of size 2 (expected index width 1).
[warn]     (0 until in.size).map { i => VecInit(in.drop(i))(shamt) }
[warn]                                                     ^
[warn] generators/saturn/src/main/scala/common/Compactor.scala 41:53: [W004] Dynamic index with width 6 is too wide for Vec of size 1 (expected index width 0).
[warn]     (0 until in.size).map { i => VecInit(in.drop(i))(shamt) }
[warn]                                                     ^
[warn] generators/saturn/src/main/scala/common/Compactor.scala 41:53: [W004] Dynamic index with width 7 is too wide for Vec of size 32 (expected index width 5).
[warn]     (0 until in.size).map { i => VecInit(in.drop(i))(shamt) }
[warn]                                                     ^
[warn] generators/saturn/src/main/scala/common/Compactor.scala 41:53: [W004] Dynamic index with width 7 is too wide for Vec of size 31 (expected index width 5).
[warn]     (0 until in.size).map { i => VecInit(in.drop(i))(shamt) }
[warn]                                                     ^
[warn] generators/saturn/src/main/scala/common/Compactor.scala 41:53: [W004] Dynamic index with width 7 is too wide for Vec of size 30 (expected index width 5).
[warn]     (0 until in.size).map { i => VecInit(in.drop(i))(shamt) }
[warn]                                                     ^
[warn] generators/saturn/src/main/scala/common/Compactor.scala 41:53: [W004] Dynamic index with width 7 is too wide for Vec of size 29 (expected index width 5).
[warn]     (0 until in.size).map { i => VecInit(in.drop(i))(shamt) }
[warn]                                                     ^
[warn] generators/saturn/src/main/scala/common/Compactor.scala 41:53: [W004] Dynamic index with width 7 is too wide for Vec of size 28 (expected index width 5).
[warn]     (0 until in.size).map { i => VecInit(in.drop(i))(shamt) }
[warn]                                                     ^
[warn] generators/saturn/src/main/scala/common/Compactor.scala 41:53: [W004] Dynamic index with width 7 is too wide for Vec of size 27 (expected index width 5).
[warn]     (0 until in.size).map { i => VecInit(in.drop(i))(shamt) }
[warn]                                                     ^
[warn] generators/saturn/src/main/scala/common/Compactor.scala 41:53: [W004] Dynamic index with width 7 is too wide for Vec of size 26 (expected index width 5).
[warn]     (0 until in.size).map { i => VecInit(in.drop(i))(shamt) }
[warn]                                                     ^
[warn] generators/saturn/src/main/scala/common/Compactor.scala 41:53: [W004] Dynamic index with width 7 is too wide for Vec of size 25 (expected index width 5).
[warn]     (0 until in.size).map { i => VecInit(in.drop(i))(shamt) }
[warn]                                                     ^
[warn] generators/saturn/src/main/scala/common/Compactor.scala 41:53: [W004] Dynamic index with width 7 is too wide for Vec of size 24 (expected index width 5).
[warn]     (0 until in.size).map { i => VecInit(in.drop(i))(shamt) }
[warn]                                                     ^
[warn] generators/saturn/src/main/scala/common/Compactor.scala 41:53: [W004] Dynamic index with width 7 is too wide for Vec of size 23 (expected index width 5).
[warn]     (0 until in.size).map { i => VecInit(in.drop(i))(shamt) }
[warn]                                                     ^
[warn] generators/saturn/src/main/scala/common/Compactor.scala 41:53: [W004] Dynamic index with width 7 is too wide for Vec of size 22 (expected index width 5).
[warn]     (0 until in.size).map { i => VecInit(in.drop(i))(shamt) }
[warn]                                                     ^
[warn] generators/saturn/src/main/scala/common/Compactor.scala 41:53: [W004] Dynamic index with width 7 is too wide for Vec of size 21 (expected index width 5).
[warn]     (0 until in.size).map { i => VecInit(in.drop(i))(shamt) }
[warn]                                                     ^
[warn] generators/saturn/src/main/scala/common/Compactor.scala 41:53: [W004] Dynamic index with width 7 is too wide for Vec of size 20 (expected index width 5).
[warn]     (0 until in.size).map { i => VecInit(in.drop(i))(shamt) }
[warn]                                                     ^
[warn] generators/saturn/src/main/scala/common/Compactor.scala 41:53: [W004] Dynamic index with width 7 is too wide for Vec of size 19 (expected index width 5).
[warn]     (0 until in.size).map { i => VecInit(in.drop(i))(shamt) }
[warn]                                                     ^
[warn] generators/saturn/src/main/scala/common/Compactor.scala 41:53: [W004] Dynamic index with width 7 is too wide for Vec of size 18 (expected index width 5).
[warn]     (0 until in.size).map { i => VecInit(in.drop(i))(shamt) }
[warn]                                                     ^
[warn] generators/saturn/src/main/scala/common/Compactor.scala 41:53: [W004] Dynamic index with width 7 is too wide for Vec of size 17 (expected index width 5).
[warn]     (0 until in.size).map { i => VecInit(in.drop(i))(shamt) }
[warn]                                                     ^
[warn] generators/saturn/src/main/scala/common/Compactor.scala 41:53: [W004] Dynamic index with width 7 is too wide for Vec of size 16 (expected index width 4).
[warn]     (0 until in.size).map { i => VecInit(in.drop(i))(shamt) }
[warn]                                                     ^
[warn] generators/saturn/src/main/scala/common/Compactor.scala 41:53: [W004] Dynamic index with width 7 is too wide for Vec of size 15 (expected index width 4).
[warn]     (0 until in.size).map { i => VecInit(in.drop(i))(shamt) }
[warn]                                                     ^
[warn] generators/saturn/src/main/scala/common/Compactor.scala 41:53: [W004] Dynamic index with width 7 is too wide for Vec of size 14 (expected index width 4).
[warn]     (0 until in.size).map { i => VecInit(in.drop(i))(shamt) }
[warn]                                                     ^
[warn] generators/saturn/src/main/scala/common/Compactor.scala 41:53: [W004] Dynamic index with width 7 is too wide for Vec of size 13 (expected index width 4).
[warn]     (0 until in.size).map { i => VecInit(in.drop(i))(shamt) }
[warn]                                                     ^
[warn] generators/saturn/src/main/scala/common/Compactor.scala 41:53: [W004] Dynamic index with width 7 is too wide for Vec of size 12 (expected index width 4).
[warn]     (0 until in.size).map { i => VecInit(in.drop(i))(shamt) }
[warn]                                                     ^
[warn] generators/saturn/src/main/scala/common/Compactor.scala 41:53: [W004] Dynamic index with width 7 is too wide for Vec of size 11 (expected index width 4).
[warn]     (0 until in.size).map { i => VecInit(in.drop(i))(shamt) }
[warn]                                                     ^
[warn] generators/saturn/src/main/scala/common/Compactor.scala 41:53: [W004] Dynamic index with width 7 is too wide for Vec of size 10 (expected index width 4).
[warn]     (0 until in.size).map { i => VecInit(in.drop(i))(shamt) }
[warn]                                                     ^
[warn] generators/saturn/src/main/scala/common/Compactor.scala 41:53: [W004] Dynamic index with width 7 is too wide for Vec of size 9 (expected index width 4).
[warn]     (0 until in.size).map { i => VecInit(in.drop(i))(shamt) }
[warn]                                                     ^
[warn] generators/saturn/src/main/scala/common/Compactor.scala 41:53: [W004] Dynamic index with width 7 is too wide for Vec of size 8 (expected index width 3).
[warn]     (0 until in.size).map { i => VecInit(in.drop(i))(shamt) }
[warn]                                                     ^
[warn] generators/saturn/src/main/scala/common/Compactor.scala 41:53: [W004] Dynamic index with width 7 is too wide for Vec of size 7 (expected index width 3).
[warn]     (0 until in.size).map { i => VecInit(in.drop(i))(shamt) }
[warn]                                                     ^
[warn] generators/saturn/src/main/scala/common/Compactor.scala 41:53: [W004] Dynamic index with width 7 is too wide for Vec of size 6 (expected index width 3).
[warn]     (0 until in.size).map { i => VecInit(in.drop(i))(shamt) }
[warn]                                                     ^
[warn] generators/saturn/src/main/scala/common/Compactor.scala 41:53: [W004] Dynamic index with width 7 is too wide for Vec of size 5 (expected index width 3).
[warn]     (0 until in.size).map { i => VecInit(in.drop(i))(shamt) }
[warn]                                                     ^
[warn] generators/saturn/src/main/scala/common/Compactor.scala 41:53: [W004] Dynamic index with width 7 is too wide for Vec of size 4 (expected index width 2).
[warn]     (0 until in.size).map { i => VecInit(in.drop(i))(shamt) }
[warn]                                                     ^
[warn] generators/saturn/src/main/scala/common/Compactor.scala 41:53: [W004] Dynamic index with width 7 is too wide for Vec of size 3 (expected index width 2).
[warn]     (0 until in.size).map { i => VecInit(in.drop(i))(shamt) }
[warn]                                                     ^
[warn] generators/saturn/src/main/scala/common/Compactor.scala 41:53: [W004] Dynamic index with width 7 is too wide for Vec of size 2 (expected index width 1).
[warn]     (0 until in.size).map { i => VecInit(in.drop(i))(shamt) }
[warn]                                                     ^
[warn] generators/saturn/src/main/scala/common/Compactor.scala 41:53: [W004] Dynamic index with width 7 is too wide for Vec of size 1 (expected index width 0).
[warn]     (0 until in.size).map { i => VecInit(in.drop(i))(shamt) }
[warn]                                                     ^
[warn] generators/saturn/src/main/scala/common/Compactor.scala 41:53: [W004] Dynamic index with width 4 is too wide for Vec of size 8 (expected index width 3).
[warn]     (0 until in.size).map { i => VecInit(in.drop(i))(shamt) }
[warn]                                                     ^
[warn] generators/saturn/src/main/scala/common/Compactor.scala 41:53: [W004] Dynamic index with width 4 is too wide for Vec of size 7 (expected index width 3).
[warn]     (0 until in.size).map { i => VecInit(in.drop(i))(shamt) }
[warn]                                                     ^
[warn] generators/saturn/src/main/scala/common/Compactor.scala 41:53: [W004] Dynamic index with width 4 is too wide for Vec of size 6 (expected index width 3).
[warn]     (0 until in.size).map { i => VecInit(in.drop(i))(shamt) }
[warn]                                                     ^
[warn] generators/saturn/src/main/scala/common/Compactor.scala 41:53: [W004] Dynamic index with width 4 is too wide for Vec of size 5 (expected index width 3).
[warn]     (0 until in.size).map { i => VecInit(in.drop(i))(shamt) }
[warn]                                                     ^
[warn] generators/saturn/src/main/scala/common/Compactor.scala 41:53: [W004] Dynamic index with width 4 is too wide for Vec of size 4 (expected index width 2).
[warn]     (0 until in.size).map { i => VecInit(in.drop(i))(shamt) }
[warn]                                                     ^
[warn] generators/saturn/src/main/scala/common/Compactor.scala 41:53: [W004] Dynamic index with width 4 is too wide for Vec of size 3 (expected index width 2).
[warn]     (0 until in.size).map { i => VecInit(in.drop(i))(shamt) }
[warn]                                                     ^
[warn] generators/saturn/src/main/scala/common/Compactor.scala 41:53: [W004] Dynamic index with width 4 is too wide for Vec of size 2 (expected index width 1).
[warn]     (0 until in.size).map { i => VecInit(in.drop(i))(shamt) }
[warn]                                                     ^
[warn] generators/saturn/src/main/scala/common/Compactor.scala 41:53: [W004] Dynamic index with width 4 is too wide for Vec of size 1 (expected index width 0).
[warn]     (0 until in.size).map { i => VecInit(in.drop(i))(shamt) }
[warn]                                                     ^
[warn] generators/saturn/src/main/scala/common/Parameters.scala 395:5: [W004] Dynamic index with width 4 is too wide for Vec of size 4 (expected index width 2).
[warn]   })(emul)
[warn]     ^
[warn] generators/saturn/src/main/scala/common/Parameters.scala 395:5: [W004] Dynamic index with width 3 is too wide for Vec of size 4 (expected index width 2).
[warn]   })(emul)
[warn]     ^
[warn] generators/saturn/src/main/scala/backend/ExecuteSequencer.scala 163:101: [W004] Dynamic index with width 3 is too wide for Vec of size 4 (expected index width 2).
[warn]     (acc_ctrl.bool(AccInitPos)   , VecInit.tabulate(4)({sew => Fill(dLenB >> sew, maxPosUInt(sew))})(vd_eew)),
[warn]                                                                                                     ^
[warn] generators/saturn/src/main/scala/backend/ExecuteSequencer.scala 164:101: [W004] Dynamic index with width 3 is too wide for Vec of size 4 (expected index width 2).
[warn]     (acc_ctrl.bool(AccInitNeg)   , VecInit.tabulate(4)({sew => Fill(dLenB >> sew, minNegUInt(sew))})(vd_eew)),
[warn]                                                                                                     ^
[warn] generators/saturn/src/main/scala/backend/ExecuteSequencer.scala 165:90: [W004] Dynamic index with width 3 is too wide for Vec of size 4 (expected index width 2).
[warn]     (acc_init_fp_pos, VecInit.tabulate(4)({sew => Fill(dLenB >> sew, maxPosFPUInt(sew))})(vd_eew)),
[warn]                                                                                          ^
[warn] generators/saturn/src/main/scala/backend/ExecuteSequencer.scala 166:90: [W004] Dynamic index with width 3 is too wide for Vec of size 4 (expected index width 2).
[warn]     (acc_init_fp_neg, VecInit.tabulate(4)({sew => Fill(dLenB >> sew, minNegFPUInt(sew))})(vd_eew)),
[warn]                                                                                          ^
[warn] generators/saturn/src/main/scala/common/Parameters.scala 376:6: [W004] Dynamic index with width 3 is too wide for Vec of size 4 (expected index width 2).
[warn]     }(in_eew)
[warn]      ^
[warn] generators/saturn/src/main/scala/backend/ExecuteSequencer.scala 253:82: [W004] Dynamic index with width 3 is too wide for Vec of size 4 (expected index width 2).
[warn]     VecInit.tabulate(4)({ sew => FillInterleaved(1 << sew, vm_resp)(dLenB-1,0) })(vd_eew),
[warn]                                                                                  ^
[warn] generators/saturn/src/main/scala/backend/ExecuteSequencer.scala 258:64: [W004] Dynamic index with width 4 is too wide for Vec of size 4 (expected index width 2).
[warn]     VecInit.tabulate(log2Ceil(dLenB))(i => ~(0.U((dLen>>i).W)))(acc_tail_id))
[warn]                                                                ^
[warn] generators/saturn/src/main/scala/backend/ExecuteSequencer.scala 283:82: [W004] Dynamic index with width 3 is too wide for Vec of size 4 (expected index width 2).
[warn]       io.iss.bits.wmask := VecInit.tabulate(4)({sew => Fill(1 << sew, mask_bit)})(vd_eew)
[warn]                                                                                  ^
[warn] generators/saturn/src/main/scala/backend/ExecuteSequencer.scala 289:9: [W004] Dynamic index with width 4 is too wide for Vec of size 4 (expected index width 2).
[warn]       })(acc_tail_id)
[warn]         ^
[warn] generators/saturn/src/main/scala/common/Bundles.scala 187:35: [W001] Casting non-literal UInt to saturn.common.OPIFunct6. You can use saturn.common.OPIFunct6.safe to cast without this warning.
[warn]   def opif6 = Mux(isOpi, OPIFunct6(funct6), OPIFunct6.illegal)
[warn]                                   ^
[warn] generators/saturn/src/main/scala/common/Bundles.scala 186:35: [W001] Casting non-literal UInt to saturn.common.OPMFunct6. You can use saturn.common.OPMFunct6.safe to cast without this warning.
[warn]   def opmf6 = Mux(isOpm, OPMFunct6(funct6), OPMFunct6.illegal)
[warn]                                   ^
[warn] generators/saturn/src/main/scala/exu/PermuteUnit.scala 44:78: [W004] Dynamic index with width 128 is too wide for Vec of size 16 (expected index width 4).
[warn]     io.pipe(0).bits.rvs2_data.asTypeOf(Vec(dLenB >> sew, UInt((8 << sew).W)))(elem_eidx)
[warn]                                                                              ^
[warn] generators/saturn/src/main/scala/exu/PermuteUnit.scala 44:78: [W004] Dynamic index with width 128 is too wide for Vec of size 8 (expected index width 3).
[warn]     io.pipe(0).bits.rvs2_data.asTypeOf(Vec(dLenB >> sew, UInt((8 << sew).W)))(elem_eidx)
[warn]                                                                              ^
[warn] generators/saturn/src/main/scala/exu/PermuteUnit.scala 44:78: [W004] Dynamic index with width 128 is too wide for Vec of size 4 (expected index width 2).
[warn]     io.pipe(0).bits.rvs2_data.asTypeOf(Vec(dLenB >> sew, UInt((8 << sew).W)))(elem_eidx)
[warn]                                                                              ^
[warn] generators/saturn/src/main/scala/exu/PermuteUnit.scala 44:78: [W004] Dynamic index with width 128 is too wide for Vec of size 2 (expected index width 1).
[warn]     io.pipe(0).bits.rvs2_data.asTypeOf(Vec(dLenB >> sew, UInt((8 << sew).W)))(elem_eidx)
[warn]                                                                              ^
[warn] generators/saturn/src/main/scala/common/Bundles.scala 188:35: [W001] Casting non-literal UInt to saturn.common.OPFFunct6. You can use saturn.common.OPFFunct6.safe to cast without this warning.
[warn]   def opff6 = Mux(isOpf, OPFFunct6(funct6), OPFFunct6.illegal)
[warn]                                   ^
[warn] generators/saturn/src/main/scala/frontend/EarlyDecode.scala 52:49: [W001] Casting non-literal UInt to saturn.common.OPMFunct6. You can use saturn.common.OPMFunct6.safe to cast without this warning.
[warn]     io.write_rd := funct3 === OPMVV && OPMFunct6(funct6) === OPMFunct6.wrxunary0
[warn]                                                 ^
[warn] generators/saturn/src/main/scala/frontend/EarlyDecode.scala 53:50: [W001] Casting non-literal UInt to saturn.common.OPFFunct6. You can use saturn.common.OPFFunct6.safe to cast without this warning.
[warn]     io.write_frd := funct3 === OPFVV && OPFFunct6(funct6) === OPFFunct6.wrfunary0
[warn]                                                  ^
[warn] generators/rocket-chip/src/main/scala/rocket/CSR.scala 332:11: [W008] Return values of asTypeOf will soon be read-only
[warn]       res := in
[warn]           ^
[warn] generators/rocket-chip/src/main/scala/rocket/CSR.scala 333:16: [W008] Return values of asTypeOf will soon be read-only
[warn]       res.vsew := in.vsew(log2Ceil(1 + in.max_vsew) - 1, 0)
[warn]                ^
[warn] generators/rocket-chip/src/main/scala/rocket/CSR.scala 335:18: [W008] Return values of asTypeOf will soon be read-only
[warn]     res.reserved := 0.U
[warn]                  ^
[warn] generators/rocket-chip/src/main/scala/rocket/CSR.scala 336:14: [W008] Return values of asTypeOf will soon be read-only
[warn]     res.vill := vill
[warn]              ^
[warn] generators/testchipip/src/main/scala/serdes/TLSerdes.scala 85:9: [W008] Return values of asTypeOf will soon be read-only
[warn]       c <> b.io.protocol
[warn]         ^
[warn] There were 131 warning(s) during hardware elaboration.
